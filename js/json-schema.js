!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=96)}([function(e,t){e.exports=angular},function(e,t,n){"use strict";function r(e){return"string"==typeof e}function i(e){return"number"==typeof e&&!Number.isNaN(e)}function a(e){return i(e)&&Math.floor(e)===e}function l(e){return"boolean"==typeof e}function s(e){return!c(e)&&!u(e)&&e.constructor===Object}function o(e){return Array.isArray(e)}function c(e){return null===e}function u(e){return void 0===e}n.r(t),n.d(t,"isString",function(){return r}),n.d(t,"isNumber",function(){return i}),n.d(t,"isInteger",function(){return a}),n.d(t,"isBoolean",function(){return l}),n.d(t,"isObject",function(){return s}),n.d(t,"isArray",function(){return o}),n.d(t,"isNull",function(){return c}),n.d(t,"isUndefined",function(){return u})},function(e,t,n){"use strict";var r=n(0),i=n.n(r);var a=function(){this.getClosestParentByTagName=function(e,t){for(var n=t.toUpperCase(),r=e;r;)if((r=r.parentNode)&&r.tagName&&r.tagName.toUpperCase()===n)return r;return null},this.getClosestParentByClassName=function(e,t){for(var n=e;n;)if((n=n.parentNode)&&n.classList&&n.classList.contains(t))return n;return null},this.getPreviousSiblingWithClassName=function(e,t){for(var n=e.previousElementSibling;n;){if(n.classList.contains(t))return n;n=n.previousElementSibling}return null},this.getNextSiblingWithClassName=function(e,t){for(var n=e.nextElementSibling;n;){if(n.classList.contains(t))return n;n=n.nextElementSibling}return null}};t.a=i.a.module("tw.styleguide.services.dom",[]).service("TwDomService",a).name},function(e,t,n){"use strict";n.r(t),n.d(t,"isValidRequired",function(){return i}),n.d(t,"isValidMinLength",function(){return a}),n.d(t,"isValidMaxLength",function(){return l}),n.d(t,"isValidPattern",function(){return s}),n.d(t,"isValidMaximum",function(){return o}),n.d(t,"isValidMinimum",function(){return c}),n.d(t,"isValidMinItems",function(){return u}),n.d(t,"isValidMaxItems",function(){return d});var r=n(1);function i(e,t){return!t||!Object(r.isUndefined)(e)}function a(e,t){return!Object(r.isNumber)(t)||Object(r.isString)(e)&&e.length>=t}function l(e,t){return!Object(r.isNumber)(t)||Object(r.isString)(e)&&e.length<=t}function s(e,t){try{var n=new RegExp(t);return void 0!==e&&!!n.test(e)}catch(e){return!0}}function o(e,t){return!Object(r.isNumber)(t)&&!Object(r.isString)(t)||(Object(r.isNumber)(e)||Object(r.isString)(e))&&e<=t}function c(e,t){return!Object(r.isNumber)(t)&&!Object(r.isString)(t)||(Object(r.isNumber)(e)||Object(r.isString)(e))&&e>=t}function u(e,t){return!Object(r.isNumber)(t)||Object(r.isArray)(e)&&e.length>=t}function d(e,t){return!Object(r.isNumber)(t)||Object(r.isArray)(e)&&e.length<=t}},function(e,t,n){"use strict";var r=n(0),i=n.n(r);var a=function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var r=t[0],i=n.getClosestParentByClassName(r,"form-group");i&&r&&(r.addEventListener("focus",function(){i.classList.add("focus")}),r.addEventListener("blur",function(){i.classList.remove("focus")}))};a.$inject=["$element","TwDomService"];var l=a;var s=function(){return{restrict:"A",controller:l}};var o=function(){return{restrict:"C",controller:l}},c=n(2);t.a=i.a.module("tw.styleguide.forms.focusable",[c.a]).directive("twFocusable",s).directive("formControl",o).name},function(e,t,n){
/*!
* screenfull
* v5.0.2 - 2020-02-13
* (c) Sindre Sorhus; MIT License
*/
!function(){"use strict";var t="undefined"!=typeof window&&void 0!==window.document?window.document:{},n=e.exports,r=function(){for(var e,n=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],r=0,i=n.length,a={};r<i;r++)if((e=n[r])&&e[1]in t){for(r=0;r<e.length;r++)a[n[0][r]]=e[r];return a}return!1}(),i={change:r.fullscreenchange,error:r.fullscreenerror},a={request:function(e){return new Promise(function(n,i){var a=function(){this.off("change",a),n()}.bind(this);this.on("change",a);var l=(e=e||t.documentElement)[r.requestFullscreen]();l instanceof Promise&&l.then(a).catch(i)}.bind(this))},exit:function(){return new Promise(function(e,n){if(this.isFullscreen){var i=function(){this.off("change",i),e()}.bind(this);this.on("change",i);var a=t[r.exitFullscreen]();a instanceof Promise&&a.then(i).catch(n)}else e()}.bind(this))},toggle:function(e){return this.isFullscreen?this.exit():this.request(e)},onchange:function(e){this.on("change",e)},onerror:function(e){this.on("error",e)},on:function(e,n){var r=i[e];r&&t.addEventListener(r,n,!1)},off:function(e,n){var r=i[e];r&&t.removeEventListener(r,n,!1)},raw:r};r?(Object.defineProperties(a,{isFullscreen:{get:function(){return Boolean(t[r.fullscreenElement])}},element:{enumerable:!0,get:function(){return t[r.fullscreenElement]}},isEnabled:{enumerable:!0,get:function(){return Boolean(t[r.fullscreenEnabled])}}}),n?e.exports=a:window.screenfull=a):n?e.exports={isEnabled:!1}:window.screenfull={isEnabled:!1}}()},function(e,t,n){"use strict";var r=n(0),i=n.n(r);function a(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,i=!1,a=void 0;try{for(var l,s=e[Symbol.iterator]();!(r=(l=s.next()).done)&&(n.push(l.value),!t||n.length!==t);r=!0);}catch(e){i=!0,a=e}finally{try{r||null==s.return||s.return()}finally{if(i)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return l(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(n);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return l(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var s=function(){var e=this;function t(e,t,n){var r,i=c(t);return p[i]&&(r=p[i][e]),r?"short"===n?r.substr(0,3):"narrow"===n?r.substr(0,1):r:null}function n(e,t,n){var r=c(t);return r&&h[r]&&("short"!==n||"ja"===r)?h[r][e]:null}function r(e,t){var n=c(t),r=d(f,e,n)||"";return"".concat(e).concat(r)}function i(e,t){var n=c(t),r=d(g,e,n);return"".concat(e).concat(r)}function l(e,t,n){if(!e.toLocaleDateString)return null;var r=e.toLocaleDateString(t,n);return function(e){if(!e)return!0;if("ja"===c(e))return!1;return!0}(t)&&(r=r.replace(/[0-9]|\s|,|\./g,"")),r[0].toUpperCase()+r.substring(1)}function s(e){return!e||["narrow","short","long"].indexOf(e)<0?"long":e}function o(e){return function(e){try{return window.Intl.DateTimeFormat.supportedLocalesOf([e]).length>0}catch(e){return!1}}(e)?e:"en-GB"}function c(e){return e?e.substring(0,2):"en"}function u(e){return void 0!==m[e]?m[e]:" "}function d(e,t,n){return e[n]?e[n].exactMatch&&e[n].exactMatch[t]?e[n].exactMatch[t]:e[n].endsWith&&e[n].endsWith[t%10]?e[n].endsWith[t%10]:e[n].default:""}this.getLocaleDate=function(e){return e||(e=new Date),e.getDate()},this.getLocaleMonth=function(e){return e||(e=new Date),e.getMonth()},this.getLocaleFullYear=function(e){return e||(e=new Date),e.getFullYear()},this.getLocaleToday=function(){var t=new Date;return e.getUTCDateFromParts(e.getLocaleFullYear(t),e.getLocaleMonth(t),e.getLocaleDate(t))},this.getUTCDate=function(e){return e||(e=new Date),e.getUTCDate()},this.getUTCMonth=function(e){return e||(e=new Date),e.getUTCMonth()},this.getUTCFullYear=function(e){return e||(e=new Date),e.getUTCFullYear()},this.getUTCToday=function(){var t=new Date;return e.getUTCDateFromParts(e.getUTCFullYear(t),e.getUTCMonth(t),e.getUTCDate(t))},this.getLastDayOfMonth=function(t,n){return e.getUTCDateFromParts(t,n+1,0).getUTCDate()},this.getUTCDateFromParts=function(e,t,n,r,i,a){var l=new Date;return l.setUTCFullYear(e,t,n),l.setUTCHours(r||0),l.setUTCMinutes(i||0),l.setUTCSeconds(a||0),l.setUTCMilliseconds(0),l},this.getLocaleDateFromParts=function(e,t,n,r,i,a){var l=new Date;return l.setFullYear(e,t,n),l.setHours(r||0),l.setMinutes(i||0),l.setSeconds(a||0),l.setMilliseconds(0),l},this.getDatePartsFromIso=function(e){var t=0,n=0,r=parseInt(e.substr(0,4),10),i=parseInt(e.substr(5,2),10)-1,a=parseInt(e.substr(8,2),10),l=parseInt(e.substr(11,2),10)||0,s=parseInt(e.substr(14,2),10)||0,o=parseInt(e.substr(17,2),10)||0,c=e.substring(10).match("[+-]{1}[0-9]{2}(:[0-9]{2})?$");return c&&(t=parseInt(c[0].substr(1,2),10)||0,n=parseInt(c[0].substr(4,2),10)||0,"-"===c[0].substr(0,1)&&(t*=-1,n*=-1)),[r,i,a,l,s,o,t,n]},this.isIsoStringValid=function(e){return new RegExp("^".concat("[0-9]{4}-[0-9]{2}-[0-9]{2}","(").concat("T[0-9]{2}:[0-9]{2}:[0-9]{2}").concat("(.[0-9]{3})?").concat("(Z|[+,-][0-9]{2}(:[0-9]{2})?)",")?$")).test(e)},this.getUTCDateFromIso=function(t){if(!e.isIsoStringValid(t))return null;var n=a(e.getDatePartsFromIso(t),8),r=n[0],i=n[1],l=n[2],s=n[3],o=n[4],c=n[5],u=n[6],d=n[7];return e.getUTCDateFromParts(r,i,l,s+u,o+d,c)},this.getDayNamesForLocale=function(t,n){for(var r=[],i=s(n),a=0;a<7;a++)r.push(e.getDayNameForLocale(a,t,i));return r},this.getDayNameForLocale=function(n,r,i){var a=t(n,r,i);if(a)return a;var c=o(r),u=s(i);return l(e.getUTCDateFromParts(2006,0,n+1),c,{weekday:"long"})||t(n,"en-GB",u)},this.getMonthNamesForLocale=function(t,n){for(var r=[],i=s(n),a=0;a<12;a++)r.push(e.getMonthNameForLocale(a,t,i));return r},this.getMonthNameForLocale=function(t,r,i){var a=n(t,r,i);if(a)return a;var c=o(r),u=s(i),d=e.getUTCDateFromParts(2e3,t,15);return"short"===i?(t=l(d,c,{month:"long"})).length>4?t.slice(0,3):t:l(d,c,{month:"long"})||n(t,"en-GB",u)},this.getWeekday=function(t,n,r){return e.getUTCDateFromParts(t,n,r).getUTCDay()},this.isMonthBeforeDay=function(e){return"ja"===c(e)||e&&-1!==e.indexOf("US",e.length-2)},this.isYearBeforeMonth=function(e){return"ja"===c(e)},this.addYears=function(t,n){return e.addToDate(t,n,0,0)},this.addMonths=function(t,n){return e.addToDate(t,0,n,0)},this.addDays=function(t,n){return e.addToDate(t,0,0,n)},this.addToDate=function(t,n,r,i){return e.getUTCDateFromParts(t.getUTCFullYear()+n,t.getUTCMonth()+r,t.getUTCDate()+i)},this.getLocaleTimeString=function(t,n){return e.getTimeString(t.getHours(),t.getMinutes(),t.getSeconds(),n)},this.getTimeString=function(e,t,n,r){var i=c(r);if(e<10&&(e="0".concat(e)),t<10&&(t="0".concat(t)),"en"===i){var a=e>=12?"pm":"am";return 0===(e%=12)&&(e=12),"00"===t?"".concat(e).concat(a):"".concat(e,":").concat(t).concat(a)}return"".concat(e,":").concat(t)},this.getYearAndMonthPresentation=function(t,n,r,a){var l=i(t,r),s=e.getMonthNameForLocale(n,r,a||"long"),o=u(c(r));return e.isYearBeforeMonth(r)?[l,s].join(o):[s,l].join(o)},this.getYearMonthDatePresentation=function(t,n,a,l,s){var o=i(t,l),d=e.getMonthNameForLocale(n,l,s||"long"),h=r(a,l),p=u(c(l));if(e.isYearBeforeMonth(l))return[o,d,h].join(p);if(e.isMonthBeforeDay(l)){var f=[d,h].join(p);return"".concat(f,", ").concat(o)}return[h,d,o].join(p)},this.getLocaleNow=function(){return new Date},this.getUTCNow=function(){var t=new Date;return e.getUTCDateFromParts(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate(),t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds())},this.getLocaleDateString=function(t,n,r){if(!t.getFullYear)return t;var i=e.getLocaleNow();return e.getDateString(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getDay(),n,t-i,i.getFullYear(),r)},this.getUTCDateString=function(t,n,r){if(!t)return t;var i=e.getUTCNow();return e.getDateString(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate(),t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds(),t.getUTCDay(),n,t-i,i.getUTCFullYear(),r)},this.getDateString=function(t,n,a,l,s,o,c,u,d,h,p){var f=Math.abs(d)<5184e5&&"long"!==p,g=!f,m=Math.abs(d)<6912e5||"long"===p,v=!m||"long"===p,b=!m&&h!==t||"long"===p?i(t,u):"",$=v?e.getMonthNameForLocale(n,u,"short"===p?"short":"long"):"",y=g?r(a,u):"",w=m?e.getDayNameForLocale(c,u,"short"===p?"short":"long"):"",C=f?e.getTimeString(l,s,o,u):"";return e.combineDateParts(b,$,y,C,w,u)},this.combineDateParts=function(t,n,r,i,a,l){var s,o=c(l),d=u(o);if(e.isYearBeforeMonth(l)?s=[t,n,r].join(d).trim():e.isMonthBeforeDay(l)?(s=[n,r].join(d).trim(),t&&(s+=", ".concat(t))):s=[r,n,t].join(d).trim(),a){if("ja"===o)return"".concat(s," ").concat(i," (").concat(a,")").trim();s=n||t?"".concat(a,", ").concat(s).trim():"".concat(a," ").concat(s).trim()}return(s="".concat(s," ").concat(i)).trim()};var h={en:["January","February","March","April","May","June","July","August","September","October","November","December"],ja:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"]},p={en:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],ja:["日","月","火","水","木","金","土"]},f={en:{exactMatch:{11:"th",12:"th",13:"th"},endsWith:{1:"st",2:"nd",3:"rd"},default:"th"},de:{default:"."},fi:{default:"."},ja:{default:"日"}},g={ja:{default:"年"}},m={ja:""}};t.a=i.a.module("tw.styleguide.services.date",[]).service("TwDateService",s).name},function(e,t,n){"use strict";n.d(t,"h",function(){return a}),n.d(t,"g",function(){return l}),n.d(t,"f",function(){return s}),n.d(t,"e",function(){return o}),n.d(t,"b",function(){return c}),n.d(t,"d",function(){return u}),n.d(t,"c",function(){return d}),n.d(t,"a",function(){return h});var r=n(1),i=n(3);function a(e,t,n){if(Object(r.isNull)(e))return n?["required"]:[];if(t.enum)return u(e,t,n);if(t.const)return d(e,t,n);switch(t.type){case"string":return l(e,t,n);case"number":return s(e,t,n);case"integer":return o(e,t,n);case"boolean":return c(e,t,n);case"array":return h(e,t);case"object":return function(e,t){if(!Object(r.isObject)(e)&&!Object(r.isNull)(e))return["type"];if(!Object(r.isArray)(t.required))return[];return t.required.map(function(t){return void 0!==e[t]}).reduce(function(e,t){return e&&t},!0)?[]:["required"]}(e,t);default:return[]}}function l(e,t,n){if(!Object(r.isString)(e)&&!Object(r.isNull)(e))return["type"];if(""===e&&n)return["required"];var a=[];return Object(i.isValidRequired)(e,n)||a.push("required"),Object(i.isValidMinLength)(e,t.minLength)||a.push("minLength"),Object(i.isValidMaxLength)(e,t.maxLength)||a.push("maxLength"),Object(i.isValidPattern)(e,t.pattern)||a.push("pattern"),Object(i.isValidMinimum)(e,t.minimum)||a.push("minimum"),Object(i.isValidMaximum)(e,t.maximum)||a.push("maximum"),a}function s(e,t,n){if(!Object(r.isNumber)(e)&&!Object(r.isNull)(e))return["type"];var a=[];return Object(i.isValidRequired)(e,n)||a.push("required"),Object(i.isValidMinimum)(e,t.minimum)||a.push("minimum"),Object(i.isValidMaximum)(e,t.maximum)||a.push("maximum"),a}function o(e,t,n){return Object(r.isInteger)(e)?s(e,t,n):["type"]}function c(e,t,n){if(!Object(r.isBoolean)(e)&&!Object(r.isNull)(e))return["type"];var a=[];return Object(i.isValidRequired)(e,n)||a.push("required"),a}function u(e,t,n){return Object(i.isValidRequired)(e,n)?Object(r.isNull)(e)||-1!==t.enum.indexOf(e)?[]:["enum"]:["required"]}function d(e,t,n){return Object(i.isValidRequired)(e,n)?Object(r.isNull)(e)||e===t.const?[]:["const"]:["required"]}function h(e,t){if(!Object(r.isArray)(e)&&!Object(r.isNull)(e))return["type"];var n=[];return Object(i.isValidMinItems)(e,t.minItems)||n.push("minItems"),Object(i.isValidMaxItems)(e,t.maxItems)||n.push("maxItems"),n}},function(e,t,n){"use strict";var r=n(0),i=n.n(r);function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(){function e(t,n,r,i,a,l){var s=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$ngModel=t.controller("ngModel"),this.$element=t,this.$attrs=i,this.$timeout=r,this.$transclude=n,this.dom=a,this.element=t[0],l.$watch("$ctrl.ngModel",function(e,t){return s.onModelChange(e,t)})}var t,n,r;return t=e,(n=[{key:"$onInit",value:function(){var e,t,n,r,i,a,l,s,o;this.button=this.element.getElementsByClassName("btn")[0],this.search="",p(this.$ngModel,this),g(this.$ngModel,this,this.$attrs,this.$timeout),e=this,t=this.$element,n=this.$ngModel,this.options,r=this.$timeout,i=t[0],a=i.getElementsByClassName("btn")[0],l=i.getElementsByClassName("btn-group")[0],s=i.getElementsByClassName("dropdown-menu")[0],o=function(){r(function(){a===document.activeElement||l.classList.contains("open")||i.dispatchEvent(new CustomEvent("blur"))},150)},i.addEventListener("blur",function(){n.$setTouched()}),a.addEventListener("keypress",function(t){e.optionKeypress(t)}),a.addEventListener("click",function(){r(function(){e.shouldShowSearch()?i.getElementsByClassName("tw-select-filter")[0].focus():d(i)})}),a.addEventListener("focusout",o),s.addEventListener("focusout",o),s.addEventListener("keypress",function(t){"a"===t.target.tagName.toLowerCase()&&e.optionKeypress(t)}),function(e,t){e(function(e){(e.length>1||""!==e.text().trim())&&(t.hasTranscluded=!0)})}(this.$transclude,this),this.responsiveClasses=w,this.optionsPageSize=300,this.numberOfOptionsRevealed=this.optionsPageSize,this.hasMoreOptionsToReveal=!1,this.filterString="",this.filteredOptions=this.getFilteredOptions()}},{key:"$onChanges",value:function(e){e.options&&this.onOptionsChange(e.options.currentValue,e.options.previousValue)}},{key:"onModelChange",value:function(e,t){if(e!==t){(e||t)&&this.$ngModel.$setDirty();var n=f(this.options,e);this.selected=n||null}}},{key:"onOptionsChange",value:function(e,t){e!==t&&(p(this.$ngModel,this),g(this.$ngModel,this,this.$attrs,this.$timeout),this.filteredOptions=this.getFilteredOptions())}},{key:"circleClasses",value:function(e){var t=w(e),n=w(this.hideSecondary);return this.selected.secondary&&0===n.length?t+=" circle-sm":t+=" circle-xs",t}},{key:"buttonFocus",value:function(){this.element.dispatchEvent(new CustomEvent("focus"))}},{key:"optionClick",value:function(e,t){e.disabled?t.stopPropagation():(m(this.$ngModel,this,e),this.button.focus())}},{key:"optionFocus",value:function(e){m(this.$ngModel,this,e)}},{key:"optionKeypress",value:function(e){if(!e.target.classList.contains("tw-select-filter"))if(8!==h(e)){var t=function(e){return String.fromCharCode(h(e))}(e);!function(e,t,n,r){var i=b(e,t,n,t.search+r);i?t.search+=r:(t.search=r,i=b(e,t,n,t.search))}(this.$ngModel,this,this.options,t),d(this.element)}else e.preventDefault()}},{key:"placeholderClick",value:function(){v(this.$ngModel,this),this.button.focus()}},{key:"placeholderFocus",value:function(){v(this.$ngModel,this)}},{key:"getFilteredOptions",value:function(){if(this.hasMoreOptionsToReveal=!1,!this.options||!this.options.filter)return[];for(var e=this.filterString&&this.filterString.toLowerCase().replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&"),t=Object.create(null),n=[],r=0;r<this.options.length;++r){var a=this.options[r];if(!a.header||a.value||a.label){var l=!1,d=t[a.label],h=i.a.isArray(d);if(h)for(var p=0;p<d.length;p++)if(i.a.equals(d[p],a.value)){l=!0;break}if(!l&&(!e||s(a,e)||o(a,e)||c(a,e)||u(a,e))){if(n.length>=this.numberOfOptionsRevealed){this.hasMoreOptionsToReveal=!0;break}h?d.push(a.value):t[a.label]=[a.value],n.push(a)}}else n.push(a)}return n}},{key:"focusOnFilterInput",value:function(){var e=this.element.getElementsByClassName("tw-select-filter")[0];e&&e.focus()}},{key:"filterChange",value:function(){this.numberOfOptionsRevealed=this.optionsPageSize,this.filteredOptions=this.getFilteredOptions(),!function(e,t){if(!i.a.isArray(e))return;var n;return e.forEach(function(e){t&&i.a.equals(t.value,e.value)&&(n=t)}),n}(this.filteredOptions,this.selected)&&this.filteredOptions.length&&m(this.$ngModel,this,this.filteredOptions[0])}},{key:"filterKeydown",value:function(e){var t=e.which||e.charCode||e.keyCode,n=this.element.querySelector(".active"),r=!!n&&n.querySelector("a"),i=this.element.getElementsByClassName("tw-select-option-link");return t===C.down?(this.moveDownOneOption(n,r,i),e.preventDefault()):t===C.up?(this.moveUpOneOption(n,r,i),e.preventDefault()):t===C.return&&(n&&(n.click(),this.button.focus()),e.preventDefault()),!0}},{key:"selectOptionUsingLink",value:function(e){var t=this.filteredOptions[e.getAttribute("index")];m(this.$ngModel,this,t)}},{key:"moveUpOneOption",value:function(e,t,n){if(e||!n.length){if(t!==n[0]){var r=this.dom.getPreviousSiblingWithClassName(e,"tw-select-option");if(r){var i=r.getElementsByTagName("a")[0];this.selectOptionUsingLink(i)}}}else this.selectOptionUsingLink(n[n.length-1])}},{key:"moveDownOneOption",value:function(e,t,n){if(e||!n.length){if(t!==n[n.length-1]){var r=this.dom.getNextSiblingWithClassName(e,"tw-select-option");if(r){var i=r.getElementsByTagName("a")[0];return void this.selectOptionUsingLink(i)}}var a=this.element.getElementsByClassName("tw-select-transcluded");a.length&&a[0].getElementsByTagName("a")[0].focus()}else this.selectOptionUsingLink(n[0])}},{key:"shouldShowSearch",value:function(){return this.filter||this.options&&this.options.length>12}},{key:"revealMoreOptions",value:function(e){e.stopPropagation(),this.numberOfOptionsRevealed+=this.optionsPageSize,this.filteredOptions=this.getFilteredOptions()}}])&&a(t.prototype,n),r&&a(t,r),e}();function s(e,t){return e.label&&e.label.toLowerCase().search(t)>=0}function o(e,t){return e.note&&e.note.toLowerCase().search(t)>=0}function c(e,t){return e.secondary&&e.secondary.toLowerCase().search(t)>=0}function u(e,t){return e.searchable&&e.searchable.toLowerCase().search(t)>=0}function d(e){var t=e.getElementsByClassName("active")[0];t&&t.getElementsByTagName("a")[0].focus()}function h(e){return e.which||e.charCode||e.keyCode}function p(e,t){if(y(t.ngModel)){var n=f(t.options,t.ngModel);n&&m(e,t,n)}}function f(e,t){var n=!1;return e.forEach(function(e){i.a.equals(e.value,t)&&(n=e)}),n}function g(e,t,n,r){if((t.ngRequired||n.required)&&!y(t.ngModel)&&!t.placeholder)for(var i=0;i<t.options.length;i++)if(y(t.options[i].value)){m(e,t,t.options[i]),r(t.ngChange);break}}function m(e,t,n){n.disabled||(e.$setViewValue(n.value),e.$commitViewValue(),t.selected=n)}function v(e,t){e.$setViewValue(null),e.$commitViewValue(),t.selected=!1}function b(e,t,n,r){var i=!1,a=r.toLowerCase();return n.forEach(function(n){i||($(n.label,a)||$(n.note,a)||$(n.secondary,a)||$(n.searchable,a))&&(m(e,t,n),i=!0)}),i}function $(e,t){return e&&0===e.toLowerCase().indexOf(t)}function y(e){return e||0===e||!1===e}function w(e){var t="",n=[],r={xs:!0,sm:!0,md:!0,lg:!0,xl:!0};return"boolean"==typeof e&&e?"hidden":e&&e.toLowerCase&&"true"===e.toLowerCase()?"hidden":(e&&(n=e.split(",")),n.forEach(function(e){r[e]&&(t+="hidden-".concat(e," "))}),t)}var C={up:38,down:40,return:13};l.$inject=["$element","$transclude","$timeout","$attrs","TwDomService","$scope"];var x=l,k=n(28),M={controller:x,template:n.n(k).a,require:"ngModel",transclude:!0,bindings:{ngModel:"=",ngChange:"&",ngRequired:"<",ngDisabled:"<",options:"<",name:"@",placeholder:"@",filter:"@",size:"@",dropdownRight:"@",dropdownUp:"@",dropdownWidth:"@",inverse:"<",hideNote:"@",hideSecondary:"@",hideIcon:"@",hideCurrency:"@",hideCircle:"@",hideLabel:"@"}},O=n(2),S=n(4);t.a=i.a.module("tw.styleguide.forms.select",[O.a,S.a]).component("twSelect",M).name},function(e,t,n){"use strict";var r=n(0),i=n.n(r);function a(e){var t=this;function n(e){if(e instanceof Array){var t=[];return e.forEach(function(e){e.fields?t=t.concat(r(e,e.fields)):e.group?t=t.concat(r(e,e.group)):t.push(e)}),t}return e}function r(e,t){return e.name&&t.length&&!t[0].name&&(t[0].name=e.name),e.width&&t.length&&!t[0].width&&(t[0].width=e.width),e.tooltip&&t.length&&!t[0].helpText&&(t[0].helpText=e.tooltip),e.info&&t.length&&!t[0].helpText&&(t[0].helpText=e.info),2===t.length&&t.forEach(function(e){e.width="md"}),3===t.length&&(t[0].width="md",t[1].width="md"),t}function i(e){return!e.label&&e.title&&(e.label=e.title,delete e.title),!e.label&&e.name&&(e.label=e.name,delete e.name),!e.value&&e.code&&(e.value=e.code,delete e.code),!e.value&&e.key&&(e.value=e.key,delete e.key),e}this.prepRequirements=function(e){if(!e||!e.length)return[];var n=o(e);return n.forEach(function(e){e.prepared||(t.prepLegacyAlternatives(e),e.properties=t.prepFields(e.properties||e.fields),e.type&&"object"!==e.type&&!e.types&&(e.properties.type={type:"string",enum:[e.type],required:!0,hidden:!0},e.type="object"),e.prepared=!0)}),n},this.prepFields=function(e,r,i){if(!e)return{};var a=o(e);return a=function(e){if(e instanceof Array)throw new Error("Expecting a map of fields, not an array");var t={};return Object.keys(e).forEach(function(n){if(n.indexOf(".")>0){var r=n.split("."),i=r[0];t[i]||(t[i]={type:"object",properties:{}}),t[i].properties[r[1]]=e[n]}else t[n]=e[n]}),t}(a=function(e){if(e instanceof Array){var t={};return e.forEach(function(e){var n=e.key||e.name;delete e.key,t[n]=o(e)}),t}return e}(a=n(a))),Object.keys(a).forEach(function(e){a[e]=t.prepField(a[e],r,i)}),a},this.prepField=function(e,n,r){var i=o(e);return t.prepLegacyProps(i),t.prepType(i),t.prepPattern(i),t.prepValuesAsync(i,n),t.prepValidationMessages(i,r),t.prepHelp(i),t.prepCameraGuidelines(i),i},this.prepType=function(e){switch(e.type&&e.type.toLowerCase&&e.type.toLowerCase()){case"text":e.type="string";break;case"date":e.type="string",e.format="date";break;case"password":e.type="string",e.control="password";break;case"checkbox":e.type="boolean";break;case"select":"CHECKBOX"===e.selectType?e.type="array":(e.control||(e.control="select"),delete e.type);break;case"radio":e.control="radio",delete e.type;break;case"upload":e.type="string",e.format="base64url";break;case"tel":e.type="string",e.format="phone";break;case"textarea":e.type="string",e.control="textarea";break;case"array":e.control=t.getControlForArray(e)}e.control||"object"===e.type||(e.control=t.getControlType(e))},this.getControlForArray=function(e){return e.items.enum?"checkbox-group":"base64url"===e.items.format?"multi-upload":null},this.prepLegacyAlternatives=function(e){!e.title&&e.label&&(e.title=e.label),e.title||(e.title=function(e){if(e&&e.length>0){var t=e.toLowerCase().split("_").join(" ");return t.charAt(0).toUpperCase()+t.slice(1)}return""}(e.type)),!e.type&&e.name&&(e.type=e.name),!e.description&&e.tooltip&&(e.description=e.tooltip),e.fieldGroups&&!e.fields&&(e.fields=n(e.fieldGroups),delete e.fieldGroups)},this.prepLegacyProps=function(e){e.name&&!e.title&&(e.title=e.name,delete e.name),e.validationRegexp&&(e.pattern=e.validationRegexp,delete e.validationRegexp),e.min&&!e.minimum&&(e.minimum=e.min,delete e.min),e.max&&!e.maximum&&(e.maximum=e.max,delete e.max),e.example&&!e.placeholder&&(e.placeholder=e.example,delete e.example),e.tooltip&&!e.helpText&&(e.helpText=e.tooltip,delete e.tooltip),e.valuesAllowed&&!e.values&&"CHECKBOX"!==e.selectType&&(e.values=e.valuesAllowed,delete e.valuesAllowed),e.valuesAllowed&&!e.items&&"CHECKBOX"===e.selectType&&(e.items={values:e.valuesAllowed},delete e.valuesAllowed),e.values&&e.values.map&&(e.values=t.prepLegacyValues(e.values)),e.value&&!e.default&&(e.default=e.value,delete e.value),e.values&&e.values&&e.values.length&&e.values[0]&&!e.values[0].value&&e.values[0].label&&!e.placeholder&&(e.placeholder=e.values[0].label,e.values=e.values.slice(1)),e.helpOptions&&!e.help&&(e.help=e.helpOptions,delete e.helpOptions)},this.prepLegacyValues=function(e){return e.map(i)},this.prepPattern=function(e){if(e.pattern)try{RegExp(e.pattern)}catch(t){console.warn("API regexp is invalid"),delete e.pattern}else delete e.pattern},this.prepValuesAsync=function(e,n){if(e.valuesAsync){var r={};e.valuesAsync.params&&e.valuesAsync.params.length&&(r=t.getParamValuesFromModel(n,e.valuesAsync.params)),t.fetchValuesAsync(e,r).catch(function(){return t.fetchValuesAsync(e,r)})}},this.fetchValuesAsync=function(n,r){return e({method:n.valuesAsync.method||"GET",url:n.valuesAsync.url,data:r||{}}).then(function(e){n.values=t.prepLegacyValues(e.data)})},this.getParamValuesFromModel=function(e,t){var n={};return t.forEach(function(t){e[t.key]?n[t.parameterName]=e[t.key]:t.required}),n},this.prepValidationMessages=function(e){e.validationMessages&&e.validationMessages.min&&(e.validationMessages.minimum=e.validationMessages.min,delete e.validationMessages.min),e.validationMessages&&e.validationMessages.max&&(e.validationMessages.maximum=e.validationMessages.max,delete e.validationMessages.max),e.validationMessages&&e.validationMessages.minlength&&(e.validationMessages.minLength=e.validationMessages.minlength,delete e.validationMessages.minlength),e.validationMessages&&e.validationMessages.maxlength&&(e.validationMessages.maxLength=e.validationMessages.maxlength,delete e.validationMessages.maxlength)},this.prepHelp=function(e){!e.help&&(e.helpText||e.helpImage||e.helpList||e.uploadPlaceholderImage)&&(e.help={}),e.helpText&&(e.help.message=e.helpText,delete e.helpText),e.helpImage&&(e.help.image=e.helpImage,delete e.helpImage),e.uploadPlaceholderImage&&(e.help.image=e.uploadPlaceholderImage,delete e.uploadPlaceholderImage),e.list&&(e.help.list=e.helpList,delete e.helpList)},this.prepCameraGuidelines=function(e){e.camera&&e.camera.overlay&&!e.camera.outline&&(e.camera.outline=e.camera.overlay,delete e.camera.overlay)},this.getRequiredFields=l,this.getControlType=s}function l(e){if(Array.isArray(e))throw new Error("Expected field map");return Object.keys(e).filter(function(t){return e[t].required})}function s(e){if(e.control)return"select"===e.control&&"CHECKBOX"===e.selectType?"checkbox-group":e.control.toLowerCase();if(e.hidden)return"hidden";if(e.valuesAsync)return"select";if(e.values&&e.values.length)return function(e){if(e.control)return e.control;if("select"===e.type)return"select";if("radio"===e.type)return"radio";var t=e.enum||e.values;if(t)return t.length>3?"select":"radio";return"select"}(e);switch(e.type){case"string":return function(e){switch(e){case"date":return"date";case"base64url":return"file";case"password":return"password";case"uri":case"email":return"text";case"phone":return"tel";default:return"text"}}(e.format);case"number":case"integer":return"number";case"boolean":return"checkbox";default:return"text"}}function o(e){return JSON.parse(JSON.stringify(e))}a.$inject=["$http"];var c=a;t.a=i.a.module("tw.styleguide.services.requirements",[]).service("TwRequirementsService",c).name},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var r=n(1);function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach(function(t){l(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function o(e,t){if(t.allOf)return function(e,t){var n,r={};return t.allOf.forEach(function(t){"object"===s(n=o(e,t))&&(r=a({},r,{},n))}),r}(e,t);if(t.oneOf)return function(e,t){return t.oneOf.map(function(t){return o(e,t)}).reduce(function(e,t){return Object(r.isNull)(e)?t:Object(r.isObject)(e)&&Object(r.isObject)(t)?function e(t,n){var i=a({},t);Object.keys(n).forEach(function(a){Object(r.isObject)(t[a])&&Object(r.isObject)(n[a])?i[a]=e(t[a],n[a]):i[a]=n[a]});return i}(e,t):Object(r.isNull)(t)?e:t},null)}(e,t);if(t.enum&&t.enum.indexOf(e)>=0)return e;if(!Object(r.isUndefined)(t.const)&&e===t.const)return e;if(t.type)switch(t.type){case"object":return function(e,t){var n={};return Object.keys(t.properties).forEach(function(i){if(e&&!Object(r.isUndefined)(e[i])){var a=o(e[i],t.properties[i]);Object(r.isNull)(a)||(n[i]=a)}}),n}(e,t);case"array":return function(e,t){if(Object(r.isArray)(e))return e.map(function(e){return o(e,t)});return null}(e,t);case"string":return function(e){if(Object(r.isString)(e))return e;return null}(e);case"number":return function(e){if(Object(r.isNumber)(e))return e;return null}(e);case"integer":return function(e){if(Object(r.isInteger)(e))return e;return null}(e);case"boolean":return function(e){if(Object(r.isBoolean)(e))return e;return null}(e);default:return null}return null}},function(e,t,n){"use strict";var r=n(0),i=n.n(r);function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$interval=n,this.$timeout=r,this.interval=null,this.processing=this.state,this.onStateChange()}var t,n,r;return t=e,(n=[{key:"$onChanges",value:function(e){e.state&&this.onStateChange(),e.state&&this.onSizeChange()}},{key:"onStateChange",value:function(){s(this.processing)&&(this.processing=null,this.startProcess())}},{key:"onSizeChange",value:function(){switch(this.stopProcess(),this.startProcess(),this.size||(this.size="sm"),this.size){case"xs":this.radius="11";break;case"sm":this.radius="22";break;case"xl":this.radius="61";break;default:this.radius="46%"}}},{key:"startProcess",value:function(){var e=this;this.interval||(this.interval=this.$interval(function(){e.processing=e.state,s(e.state)&&(e.stopProcess(),e.notifyConsumers())},1500))}},{key:"stopProcess",value:function(){this.interval&&(this.$interval.cancel(this.interval),this.interval=null)}},{key:"notifyConsumers",value:function(){this.onStop&&(0===this.state?this.onStop():this.$timeout(this.onStop,1800))}}])&&a(t.prototype,n),r&&a(t,r),e}();function s(e){return-1===e||0===e||1===e}l.$inject=["$scope","$interval","$timeout"];var o=l,c=n(34),u={controller:o,template:n.n(c).a,bindings:{state:"<",size:"@",onStop:"&",promise:"<"}};t.a=i.a.module("tw.styleguide.loading.process",[]).component("twProcess",u).name},function(e,t,n){"use strict";var r=n(0),i=n.n(r);function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var i=n.controller("ngModel");this.dom=r,this.$element=n,this.element=n[0],this.checked=this.isChecked(),this.label=this.dom.getClosestParentByTagName(this.element,"label"),n[0].addEventListener("blur",function(){i.$setTouched()}),this.addWatchers(t,this.element)}var t,n,r;return t=e,(n=[{key:"isChecked",value:function(){return this.ngValue&&this.ngModel===this.ngValue||this.value===this.ngModel}},{key:"buttonClick",value:function(){this.ngDisabled||(this.checked=!0,this.$ngModel.$setViewValue(this.ngValue||this.value))}},{key:"buttonFocus",value:function(){this.label&&this.label.classList.add("focus"),this.element.dispatchEvent(new CustomEvent("focus"))}},{key:"buttonBlur",value:function(){this.label&&this.label.classList.remove("focus"),this.element.dispatchEvent(new CustomEvent("blur"))}},{key:"hiddenInputChange",value:function(){this.$ngModel.$setViewValue(this.ngValue||this.value)}},{key:"addWatchers",value:function(e,t){var n=this;e.$watch("$ctrl.ngModel",function(e,t){e!==t&&n.$ngModel.$setDirty(),n.checked=n.isChecked()}),e.$watch("$ctrl.ngDisabled",function(e,r){var i=n.dom.getClosestParentByClassName(t,"radio");i&&(e&&!r?(i.classList.add("disabled"),i.setAttribute("disabled","true")):!e&&r&&(i.classList.remove("disabled"),i.removeAttribute("disabled")))})}}])&&a(t.prototype,n),r&&a(t,r),e}();l.$inject=["$scope","$element","TwDomService"];var s=l,o=n(27),c={controller:s,template:n.n(o).a,require:{$ngModel:"ngModel"},bindings:{name:"@",value:"@",ngModel:"=",ngValue:"<",ngRequired:"<",ngDisabled:"<",ngChange:"&"}},u=n(2),d=n(4);t.a=i.a.module("tw.styleguide.forms.radio",[u.a,d.a]).component("twRadio",c).name},,function(e,t,n){"use strict";var r=n(0),i=n.n(r);function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(){function e(t,n,r,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.$attrs=r,this.FileValidationService=i,this.isProcessing=!1}var t,n,r;return t=e,(n=[{key:"$onChanges",value:function(e){e.source&&(this.isLiveCameraUpload="CAMERA_ONLY"===e.source.currentValue)}},{key:"onFileCapture",value:function(e){if(!this.ngDisabled){if(!e)throw new Error("Could not retrieve file");this.file=e}}},{key:"reset",value:function(){this.isProcessing=!1,this.isDone=!1,this.clearHtmlInput(),this.setNgModel(null),this.onCancel&&this.onCancel()}},{key:"clearHtmlInput",value:function(){this.$element[0].querySelectorAll("input")&&this.$element[0].querySelectorAll("input").forEach(function(e){e.value=null})}},{key:"setNgModel",value:function(e){if(void 0!==this.$attrs.ngModel){var t=this.$element.controller("ngModel");if(!t.$setViewValue)return;t.$setViewValue(e)}}},{key:"isDropEligible",value:function(){return"CAMERA_ONLY"!==this.source}},{key:"onDragEnter",value:function(){this.isDroppable=this.isDropEligible()}},{key:"onDragLeave",value:function(){this.isDroppable=!1}},{key:"onDrop",value:function(e){this.isDroppable=!1,this.onFileCapture(e[0])}},{key:"onProcessStart",value:function(e){this.isDone=!1,this.isProcessing=!0,this.onStart&&this.onStart({file:e})}},{key:"onProcessSuccess",value:function(e,t,n,r){this.isDone=!0,this.isProcessing=!1,this.dataUrl=t,this.isImage=this.FileValidationService.isImage(e),this.httpOptions&&n?this.setNgModel(n):this.setNgModel(t),this.onSuccess(e,r)}},{key:"onProcessFailure",value:function(e){this.onFailure&&this.onFailure(e)}}])&&a(t.prototype,n),r&&a(t,r),e}();l.$inject=["$element","$scope","$attrs","FileValidationService"];var s=l,o=n(29),c=n.n(o),u=(n(49),{controller:s,template:c.a,bindings:{ngDisabled:"<",ngModel:"=",ngChange:"&",name:"@",icon:"@",helpImage:"@",label:"@",placeholder:"@",buttonText:"@",cancelText:"@",droppingText:"@",processingText:"@",successText:"@",failureText:"@",noCameraText:"@",noCameraMessage:"@",tooLargeMessage:"@",validationMessages:"<",size:"@",accept:"@",httpOptions:"<",onStart:"=",onSuccess:"=",onFailure:"=",onCancel:"=",maxSize:"<",source:"<",cameraGuidelines:"<",description:"@",instructions:"@"}}),d=n(30),h=n.n(d);function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var f=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.showLiveCaptureScreen=!1,this.cameraFailed=!1}var t,n,r;return t=e,(n=[{key:"$onChanges",value:function(e){(e.icon||e.isLiveCameraUpload)&&((e.icon||{}).currentValue?this.viewIcon=e.icon.currentValue:this.viewIcon=(e.isLiveCameraUpload||{}).currentValue?"camera":"upload")}},{key:"onCameraCancel",value:function(){this.showLiveCaptureScreen=!1}},{key:"onCameraError",value:function(){this.showLiveCaptureScreen=!1,this.cameraFailed=!0}},{key:"onCameraCapture",value:function(e){this.showLiveCaptureScreen=!1,this.onFileCapture({file:e})}},{key:"onCameraButtonClick",value:function(){this.showLiveCaptureScreen=!0,this.cameraFailed=!1}},{key:"onButtonCapture",value:function(e){var t=e[0];this.onFileCapture({file:t})}}])&&p(t.prototype,n),r&&p(t,r),e}();f.$inject=["$element"];var g=f,m={template:h.a,controller:g,bindings:{label:"<",icon:"<",accept:"<",buttonText:"<",ngDisabled:"<",placeholder:"<",inputFile:"<",helpImage:"<",noCameraText:"<",noCameraMessage:"<",isLiveCameraUpload:"<",cameraGuidelines:"<",onFileCapture:"&"}},v=i.a.module("tw.styleguide.forms.upload.capture",[]).component("twUploadCapture",m).name,b=n(31),$={template:n.n(b).a,bindings:{droppingText:"<"}},y=i.a.module("tw.styleguide.forms.upload.dropping",[]).component("twUploadDropping",$).name;function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var C=function(){function e(t,n,r,i,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$timeout=t,this.AsyncFileReader=n,this.AsyncFileSaver=r,this.AsyncTasksConfig=i,this.FileValidation=a,this.processingState=null}var t,n,r;return t=e,(n=[{key:"$onChanges",value:function(e){e.file&&e.file.currentValue&&this.onFileCapture(e.file.currentValue)}},{key:"onFileCapture",value:function(e){var t=this;if(!this.ngDisabled){if(!e)throw new Error("Could not retrieve file");if(this.reset(),this.file=e,this.isProcessing=!0,this.processingState=null,this.onStart({file:e}),!this.FileValidation.isSmallerThanMaxSize(e,this.maxSize))return this.validationMessages=[this.tooLargeMessage],void k({status:413,data:{message:this.tooLargeMessage}},null,this);this.httpOptions?this.asyncFileRead(e).then(function(n){return t.asyncFileSave(e).then(function(e){return x(e,n,t)})}).catch(function(e){return k(e,null,t)}):this.asyncFileRead(e).then(function(e){return x(null,e,t)}).catch(function(e){return k(e,null,t)})}}},{key:"asyncFileSave",value:function(e){var t=this.AsyncTasksConfig.extendHttpOptions(this.httpOptions);return this.AsyncFileSaver.save(t.param||this.name,e,t)}},{key:"asyncFileRead",value:function(e){return this.AsyncFileReader.read(e)}},{key:"reset",value:function(){this.processingState=0,this.isProcessing=!1,this.isSuccess=!1,this.isError=!1}},{key:"onRemove",value:function(){this.onCancel()}}])&&w(t.prototype,n),r&&w(t,r),e}();function x(e,t,n){n.processingState=1;var r=null,i=n.file,a=n.httpOptions;return a&&a.idProperty&&e&&e.data&&e.data[a.idProperty]&&(r=e.data[a.idProperty]),n.$timeout(function(){n.isProcessing=!1,n.isSuccess=!0,n.onSuccess({file:i,dataUrl:t,id:r,response:e})},3600),t}function k(e,t,n){return n.processingState=-1,n.responseErrorExtractor&&(n.errorMessage=n.responseErrorExtractor({error:e})||n.errorMessage),n.$timeout(function(){n.isProcessing=!1,n.isError=!0},3600),n.$timeout(function(){n.onFailure({error:e})},3600),e}C.$inject=["$timeout","AsyncFileReader","AsyncFileSaver","AsyncTasksConfig","FileValidationService"];var M=C,O=n(32),S={name:"<",file:"<",onStart:"&",onSuccess:"&",onFailure:"&",onCancel:"&",responseErrorExtractor:"&",maxSize:"<",accept:"<",httpOptions:"<",processingMessage:"<",successMessage:"<",errorMessage:"<",tooLargeMessage:"<",validationMessages:"<",cancelText:"<"},j={controller:M,template:n.n(O).a,bindings:S},D=n(33),T={controller:M,template:n.n(D).a,bindings:S};function A(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var E=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$q=t}var t,n,r;return t=e,(n=[{key:"read",value:function(e){var t=new FileReader,n=this.$q.defer();return t.onload=function(e){n.resolve(e.target.result)},t.onerror=function(e){n.reject(e)},t.readAsDataURL(e),n.promise}}])&&A(t.prototype,n),r&&A(t,r),e}();E.$inject=["$q"];var F=angular.module("tw.styleguide.forms.upload.file-reader",[]).service("AsyncFileReader",E).name;function L(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var P=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$http=t}var t,n,r;return t=e,(n=[{key:"save",value:function(e,t,n){if(!n)throw new Error("You must supply httpOptions");var r=new FormData,i=n.param||e;r.append(i,t);var a=function(e){var t=angular.copy(e);if(!t.url)throw new Error("You must supply a URL to post image data asynchronously");t.headers||(t.headers={});return t.headers["Content-Type"]=void 0,t.transformRequest=angular.identity,t}(n);return delete a.method,this.$http.post(a.url,r,a)}}])&&L(t.prototype,n),r&&L(t,r),e}();P.$inject=["$http"];var V=angular.module("tw.styleguide.forms.upload.file-saver",[]).service("AsyncFileSaver",P).name;function q(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var U=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,(n=[{key:"isImage",value:function(e){return e.type&&e.type.indexOf("image")>-1}},{key:"isSmallerThanMaxSize",value:function(e,t){return!i.a.isNumber(t)||e.size<=t}}])&&q(t.prototype,n),r&&q(t,r),e}(),I=i.a.module("tw.styleguide.forms.upload.validation-service",[]).service("FileValidationService",U).name,N=n(22),R=n(11),B=i.a.module("tw.styleguide.forms.upload.processing",[N.a,F,V,I,R.a]).component("twUploadProcessing",j).component("twUploadProcessingMini",T).name,z=n(35),Y=n.n(z);function W(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var H=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.FileValidationService=n}var t,n,r;return t=e,(n=[{key:"$onChanges",value:function(e){e.file&&e.file.currentValue&&(this.fileName=e.file.currentValue.name)}},{key:"onManualReupload",value:function(){var e=this.$element[0].querySelector(".tw-droppable-input-reupload").files[0];this.onFileCapture(e)}}])&&W(t.prototype,n),r&&W(t,r),e}();H.$inject=["$element","FileValidationService"];var G=H,K={template:Y.a,controller:G,bindings:{label:"<",file:"<",data:"<",isImage:"<",successMessage:"<",cancelText:"<",onCancel:"&"}},_=i.a.module("tw.styleguide.forms.upload.success",[]).component("twUploadSuccess",K).name,J=n(5),X=n.n(J);function Q(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var Z=function(){function e(t,n,r,i,a,l,s,o){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.$attrs=l,this.$scope=n,this.$log=s,this.$timeout=o,this.$q=a,this.$window=r,this.$document=i}var t,n,r;return t=e,(n=[{key:"$onInit",value:function(){return this.guidelines=this.guidelines||{},this.mode="loading",this.mediaStream=null,this.overlaySquareLength=0,this.sensorWidth=0,void 0===this.$window.navigator.mediaDevices?(this.$log.error("navigator.mediaDevices not accessible on this browser"),void this.onError()):void 0===this.$window.navigator.mediaDevices.getUserMedia?(this.$log.error("mediaDevices.getUserMedia is not implemented on this browser"),void this.onError()):(this.previousBodyOverflowStyle=this.$document[0].body.style.overflow,this.$document[0].body.style.overflow="hidden",this.calculateWidthsResizeListener=this.calculateWidths.bind(this),this.$window.addEventListener("resize",this.calculateWidthsResizeListener),void this.startLiveCamFlow())}},{key:"$onDestroy",value:function(){this.$window.removeEventListener("resize",this.calculateWidthsResizeListener),this.$document[0].body.style.overflow=this.previousBodyOverflowStyle}},{key:"calculateWidths",value:function(){var e=this;this.$timeout(function(){var t=e.findContainer(),n=t.clientWidth,r=t.clientHeight,i=e.findViewfinder(),a=i.videoWidth,l=i.videoHeight;if(a&&l){var s=Math.min(n/a,r/l),o=s*a,c=s*l;e.sensorWidth=o,e.overlaySquareLength=.9*Math.min(o,c)}else e.$timeout(e.calculateWidths.bind(e),100)})}},{key:"startLiveCamFlow",value:function(){var e=this;this.$log.debug("----- Live cam flow start -----"),this.tryAcquireMediaStream().then(function(t){return e.mediaStream=t,e.tryAcquireFullScreen().catch(function(t){e.$log.warn(t)}).finally(function(){e.assignStreamToVideo()})}).catch(function(t){e.$log.error(t),e.closeVideoStream(),e.onError()})}},{key:"tryAcquireFullScreen",value:function(){if(X.a.isEnabled){if(!X.a.isFullscreen){var e=this.$q.defer();return this.$timeout(e.reject.bind(null,"Fullscreen request timed out."),1500),X.a.on("error",e.reject),X.a.request(this.container).then(e.resolve,e.reject),e.promise}return this.$q.resolve()}return this.$q.reject("Switching to full screen is not enabled.")}},{key:"assignStreamToVideo",value:function(){var e=this.findViewfinder();e.srcObject!==this.mediaStream&&(e.srcObject=this.mediaStream),e.play().then(this.calculateWidths.bind(this)),this.mode="capture"}},{key:"tryAcquireMediaStream",value:function(){return this.mediaStream?this.$q.resolve(this.mediaStream):(this.guidelines.direction&&-1!==["environment","user"].indexOf(this.guidelines.direction.toLowerCase())||(this.guidelines.direction="environment"),this.cameraConstraints={video:{width:{ideal:1600},height:{ideal:1600},facingMode:{ideal:this.guidelines.direction.toLowerCase()}},audio:!1},this.$window.navigator.mediaDevices.getUserMedia(this.cameraConstraints))}},{key:"closeVideoStream",value:function(){X.a.isEnabled&&X.a.exit(),this.findViewfinder().srcObject=null,this.mediaStream&&(this.mediaStream.getTracks().forEach(function(e){return e.stop()}),this.mediaStream=null)}},{key:"onCancelBtnClick",value:function(){this.closeVideoStream(),this.onCancel()}},{key:"onCaptureBtnClick",value:function(){var e=this.findViewfinder(),t=this.findSensor();e.pause(),t.width=e.videoWidth,t.height=e.videoHeight,t.getContext("2d").drawImage(e,0,0),this.mode="confirm"}},{key:"onRecaptureBtnClick",value:function(){this.findViewfinder().play(),this.mode="capture"}},{key:"onUploadBtnClick",value:function(){var e;this.findSensor().toBlob((e=this,function(t){X.a.isEnabled&&X.a.exit(),e.showVideoPreview=!1,e.closeVideoStream(),e.$scope.$applyAsync(function(){e.onCapture({file:t})})}),"image/jpeg",.92)}},{key:"setNgModel",value:function(e){if(void 0!==this.$attrs.ngModel){var t=this.$element.controller("ngModel");if(!t.$setViewValue)return;t.$setViewValue(e)}}},{key:"findContainer",value:function(){return this.$element[0].querySelector("#camera")}},{key:"findViewfinder",value:function(){return this.$element[0].querySelector("#cameraViewfinder")}},{key:"findSensor",value:function(){return this.$element[0].querySelector("#cameraSensor")}}])&&Q(t.prototype,n),r&&Q(t,r),e}();Z.$inject=["$element","$scope","$window","$document","$q","$attrs","$log","$timeout"];var ee=Z,te=n(36),ne=n.n(te),re=(n(52),{controller:ee,template:ne.a,bindings:{guidelines:"<",onCancel:"&",onCapture:"&",onError:"&",testMode:"@"}}),ie=i.a.module("tw.styleguide.forms.upload.camera-capture",[]).component("twCameraCapture",re).name,ae=n(37),le=n.n(ae);function se(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var oe=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t}var t,n,r;return t=e,(n=[{key:"onButtonClick",value:function(){this.onClick&&this.onClick()}},{key:"onButtonCapture",value:function(){var e=this.$element[0].querySelector(".tw-droppable-input").files;this.onCapture({files:e})}}])&&se(t.prototype,n),r&&se(t,r),e}();oe.$inject=["$element"];var ce=oe,ue={template:le.a,controller:ce,bindings:{name:"<",label:"<",isSecondary:"<",small:"<",block:"<",accept:"<",model:"<",multiple:"<",disabled:"<",onClick:"&",onCapture:"&"}},de=i.a.module("tw.styleguide.forms.upload.button",[]).component("twUploadButton",ue).name,he=n(38),pe=n.n(he);function fe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var ge=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,(n=[{key:"onButtonClick",value:function(){this.onClick&&this.onClick()}}])&&fe(t.prototype,n),r&&fe(t,r),e}(),me={template:pe.a,controller:ge,bindings:{label:"<",disabled:"<",onClick:"&",onCapture:"&"}},ve=i.a.module("tw.styleguide.forms.upload.camera-button",[]).component("twCameraButton",me).name;var be=function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),t[0].addEventListener("change",function(){n.onUserInput&&"function"==typeof n.onUserInput&&n.onUserInput()})};be.$inject=["$element"];var $e=function(){return{restrict:"A",controller:be,controllerAs:"$ctrl",bindToController:!0,scope:{onUserInput:"&"}}};function ye(e){return function(e){if(Array.isArray(e))return we(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return we(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(n);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return we(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function we(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Ce(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var xe=function(){function e(t,n,r,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.$attrs=r,this.files=[],this.model=[],this.$timeout=i}var t,n,r;return t=e,(n=[{key:"$onChanges",value:function(e){e.icon&&(this.viewIcon=e.icon.currentValue?e.icon.currentValue:"upload")}},{key:"onFileCapture",value:function(e){var t=this;if(!this.ngDisabled){if(!e)throw new Error("Could not retrieve file");0!==e.length&&(this.onStart&&this.areAllFilesProcessed()&&this.onStart(),this.files=[].concat(ye(this.files),ye(e)),this.$timeout(function(){var e=t.$element[0].querySelector(".processing-list");e&&(e.scrollTop=e.scrollHeight)},600))}}},{key:"onProcessSuccess",value:function(e,t,n,r){var i=this.httpOptions?"id":"dataUrl";this.files[e][i]=this.httpOptions?r:n;var a=this.files.map(function(e){return e[i]}).filter(function(e){return!!e});this.setNgModel(a),this.onFinish&&this.areAllFilesProcessed()&&this.onFinish()}},{key:"areAllFilesProcessed",value:function(){var e=this.httpOptions?"id":"dataUrl";return!this.files.some(function(t){return null==t[e]&&null==t.error})}},{key:"onProcessFailure",value:function(e,t,n){this.files[e].error=n,this.onFailure&&this.onFailure({error:n}),this.onFinish&&this.areAllFilesProcessed()&&this.onFinish()}},{key:"onProcessCancel",value:function(e){var t=this.httpOptions?"id":"dataUrl";this.files.splice(e,1);var n=this.files.map(function(e){return e[t]}).filter(function(e){return!!e});this.setNgModel(n)}},{key:"onDragEnter",value:function(){this.isDroppable=!0}},{key:"onDragLeave",value:function(){this.isDroppable=!1}},{key:"onDrop",value:function(e){this.isDroppable=!1,this.onFileCapture(e)}},{key:"reset",value:function(){this.setNgModel(null)}},{key:"setNgModel",value:function(e){if(void 0!==this.$attrs.ngModel){var t=this.$element.controller("ngModel");if(!t.$setViewValue)return;t.$setViewValue(e)}}}])&&Ce(t.prototype,n),r&&Ce(t,r),e}();xe.$inject=["$element","$scope","$attrs","$timeout"];var ke=xe,Me=n(39),Oe={controller:ke,template:n.n(Me).a,bindings:{ngDisabled:"<",ngModel:"=",ngChange:"&",name:"@",label:"@",placeholder:"@",icon:"@",buttonText:"@",addMoreButtonText:"@",droppingText:"@",processingText:"@",successText:"@",failureText:"@",tooLargeMessage:"@",validationMessages:"<",onStart:"&",onFinish:"&",onFailure:"&",responseErrorExtractor:"&",accept:"@",httpOptions:"<",maxSize:"<"}};function Se(e,t,n){return{restrict:"A",controller:function(){},link:function(r,i,a){r.counter=0,i[0].addEventListener("drop",function(i){var l=e(a.twDrop),s=function(){l(r,{files:i.dataTransfer.files})};if(t.$$phase)try{s()}catch(e){n(e)}else r.$apply(s);i.preventDefault(),r.counter=0},!1),i[0].addEventListener("dragover",function(e){e.preventDefault()},!1)}}}Se.$inject=["$parse","$rootScope","$exceptionHandler"];var je=Se;function De(e,t){return{restrict:"A",require:"twDrop",link:function(n,r,i){r[0].addEventListener("dragenter",function(r){var a=e(i.twDragEnter);if(n.counter++,n.counter>=1){var l=function(){a(n,{$event:r})};t.$$phase?n.$evalAsync(l):n.$apply(l)}r.preventDefault()},!1)}}}De.$inject=["$parse","$rootScope"];var Te=De;function Ae(e,t){return{restrict:"A",require:"twDrop",link:function(n,r,i){r[0].addEventListener("dragleave",function(r){var a=e(i.twDragLeave);if(n.counter--,n.counter<=0){var l=function(){a(n,{$event:r})};t.$$phase?n.$evalAsync(l):n.$apply(l)}r.preventDefault()},!1)}}}Ae.$inject=["$parse","$rootScope"];var Ee=Ae,Fe=i.a.module("tw.styleguide.forms.drag-and-drop",[]).directive("twDrop",je).directive("twDragEnter",Te).directive("twDragLeave",Ee).name,Le=i.a.module("tw.styleguide.forms.upload.multi",[B,Fe]).component("twMultiUpload",Oe).name;t.a=i.a.module("tw.styleguide.forms.upload",[v,y,B,_,ie,de,ve,Le,Fe]).directive("twFileInput",$e).component("twUpload",u).name},function(e,t,n){"use strict";var r=n(0),i=n.n(r);function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var i=n.controller("ngModel");this.dom=r,this.$element=n,this.element=n[0],this.addLabelHandler(),this.addWatchers(t,n,i),this.checkboxContainer=this.dom.getClosestParentByClassName(this.element,"checkbox"),this.label=!!this.checkboxContainer&&this.checkboxContainer.getElementsByTagName("label")[0]}var t,n,r;return t=e,r=[{key:"hiddenClick",value:function(e){e.stopPropagation()}}],(n=[{key:"$onInit",value:function(){this.checked=this.isChecked()}},{key:"isChecked",value:function(){return this.ngTrueValue&&this.ngTrueValue===this.ngModel||!this.ngTrueValue&&this.ngModel||!1}},{key:"buttonClick",value:function(e){this.checked?(this.checked=!1,this.$ngModel.$setViewValue(this.ngFalseValue||!1)):(this.checked=!0,this.$ngModel.$setViewValue(this.ngTrueValue||!0)),this.$ngModel.$setTouched(),e&&e.stopPropagation(),s(this.checked,this.$element,this.$ngModel,this.ngRequired,this.dom)}},{key:"buttonFocus",value:function(){this.label&&this.label.classList.add("focus"),this.element.dispatchEvent(new CustomEvent("focus"))}},{key:"buttonBlur",value:function(){this.label&&this.label.classList.remove("focus"),this.element.dispatchEvent(new CustomEvent("blur")),this.$ngModel.$setTouched(),s(this.checked,this.$element,this.$ngModel,this.ngRequired,this.dom)}},{key:"addLabelHandler",value:function(){var e=this,t=this.dom.getClosestParentByTagName(this.element,"label");t&&t.addEventListener("click",function(n){t.getAttribute("disabled")||e.element.getElementsByTagName("button")[0].dispatchEvent(new CustomEvent("click"));n.preventDefault(),n.stopPropagation()})}},{key:"addWatchers",value:function(e,t,n){var r=this;e.$watch("$ctrl.ngModel",function(e,i){e!==i&&(n.$setDirty(),s(r.checked,t,n,r.ngRequired,r.dom),r.checked=r.isChecked())}),e.$watch("$ctrl.ngDisabled",function(e,n){var i=t[0],a=r.dom.getClosestParentByClassName(i,"checkbox"),l=r.dom.getClosestParentByTagName(i,"label");a&&(e&&!n?(a.classList.add("disabled"),l.setAttribute("disabled","true")):!e&&n&&(a.classList.remove("disabled"),l.removeAttribute("disabled")))}),e.$watch("$ctrl.ngRequired",function(e,i){e!==i&&s(r.checked,t,n,r.ngRequired,r.dom)})}}])&&a(t.prototype,n),r&&a(t,r),e}();function s(e,t,n,r,i){if(n.$touched){var a=t[0],l=a.getElementsByClassName("tw-checkbox-button")[0],s=i.getClosestParentByClassName(a,"checkbox"),o=i.getClosestParentByClassName(a,"form-group");!e&&r?(n.$setValidity("required",!1),l.classList.add("has-error"),s&&s.classList.add("has-error"),o&&o.classList.add("has-error")):(n.$setValidity("required",!0),l.classList.remove("has-error"),s&&s.classList.remove("has-error"),o&&o.classList.remove("has-error"))}}l.$inject=["$scope","$element","TwDomService"];var o=l,c=n(25),u={controller:o,template:n.n(c).a,require:{$ngModel:"ngModel"},bindings:{name:"@",ngModel:"=",ngTrueValue:"<",ngFalseValue:"<",ngRequired:"<",ngDisabled:"<"}},d=n(2),h=n(4);t.a=i.a.module("tw.styleguide.forms.checkbox",[d.a,h.a]).component("twCheckbox",u).name},function(e,t,n){"use strict";var r=n(0),i=n.n(r);function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$ngModelController=t.controller("ngModel"),this.dom=n,this.$element=t,this.internalModel=[],this.internalOptions=[]}var t,n,r;return t=e,(n=[{key:"$onChanges",value:function(e){e.options&&this.onExternalOptionsChange(e.options.currentValue),e.ngModel&&this.onExternalModelChange(e.ngModel.currentValue),e.ngRequired&&this.validate()}},{key:"onExternalOptionsChange",value:function(e){this.internalOptions=c(this.ngModel,e),this.internalModel=u(this.internalOptions)}},{key:"onExternalModelChange",value:function(e){this.internalOptions=c(e,this.internalOptions),this.internalModel=u(this.internalOptions),this.validate()}},{key:"onInternalModelChange",value:function(){this.internalModel=u(this.internalOptions),this.$ngModelController.$setViewValue(this.internalModel),this.$ngModelController.$setTouched(),this.$ngModelController.$setDirty()}},{key:"isCheckboxRequired",value:function(){return 0===this.internalModel.length&&this.ngRequired}},{key:"validate",value:function(){if(this.$ngModelController.$touched){var e=this.$element[0],t=this.dom.getClosestParentByClassName(e,"form-group"),n=this.internalModel&&this.internalModel.length>0,r=this.ngRequired;!n&&r?(this.$ngModelController.$setValidity("required",!1),t&&t.classList.add("has-error")):(this.$ngModelController.$setValidity("required",!0),t&&t.classList.remove("has-error"))}}}])&&s(t.prototype,n),r&&s(t,r),e}();function c(e,t){return t.map(function(t){return function(e,t){var n=function(e,t){return!!(e&&e.indexOf&&e.indexOf(t.value)>=0)}(t,e);return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach(function(t){l(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}({},e,{selected:n})}(t,e)})}function u(e){return e.filter(function(e){return e.selected}).map(function(e){return e.value})}o.$inject=["$element","TwDomService"];var d=o,h=n(26),p={controller:d,template:n.n(h).a,require:{$ngModel:"ngModel"},bindings:{name:"@",ngChange:"&",ngModel:"<",ngRequired:"<",ngDisabled:"<",options:"<"}},f=n(2),g=n(4);t.a=i.a.module("tw.styleguide.forms.checkbox-group",[f.a,g.a]).component("twCheckboxGroup",p).name},function(e,t,n){"use strict";var r=n(0),i=n.n(r);function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(){function e(t,n,r,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var a=t.controller("ngModel");if(this.DateService=i,this.initialisedWithDate=!1,this.ngModel)this.applyDateModelIfValidOrThrowError(),this.initialisedWithDate=!0;else{if(this.modelType){if(this.modelType!==o&&this.modelType!==c)throw new Error("Invalid modelType, should be ".concat(o," or ").concat(c));this.dateModelType=this.modelType}else this.dateModelType=c;this.day=null,this.month=0,this.year=null}this.setDateRequired(),this.setDateDisabled(),this.setDateLocale(),this.setMonths(),this.addValidators(a),this.addWatchers(r,a),function(e){var t=e[0],n=t.querySelector("input[name=day]"),r=t.querySelector("input[name=year]");n.addEventListener("focus",function(){t.dispatchEvent(new CustomEvent("focus"))}),r.addEventListener("focus",function(){t.dispatchEvent(new CustomEvent("focus"))})}(t),function(e,t){var n,r=e[0],i=r.querySelector("input[name=day]"),a=r.querySelector("input[name=year]");i.addEventListener("blur",function(){!0,n&&(t.$setTouched(),r.dispatchEvent(new CustomEvent("blur")))}),a.addEventListener("blur",function(){n=!0,t.$setTouched(),r.dispatchEvent(new CustomEvent("blur"))})}(t,a)}var t,n,r;return t=e,(n=[{key:"applyDateModelIfValidOrThrowError",value:function(){if(!d(this.ngModel))throw new Error("date model passed should either be instance of Date or valid ISO8601 string");this.dateModelType="string"==typeof this.ngModel?o:c,this.explodeDateModel(this.ngModel)}},{key:"setMonths",value:function(){this.dateMonths=this.getMonthsBasedOnIntlSupportForLocale()}},{key:"setDateRequired",value:function(){this.dateRequired=void 0!==this.ngRequired?this.ngRequired:void 0!==this.required}},{key:"setDateDisabled",value:function(){this.dateDisabled=void 0!==this.ngDisabled?this.ngDisabled:void 0!==this.disabled}},{key:"setDateLocale",value:function(){this.locale||(this.locale=s),this.monthBeforeDay=this.DateService.isMonthBeforeDay(this.locale)}},{key:"explodeDateModel",value:function(e){var t="string"==typeof e?new Date(e):e;this.day=t.getUTCDate(),this.month=t.getUTCMonth(),this.year=t.getUTCFullYear()}},{key:"addValidators",value:function(e){var t=this;e.$validators.min=function(e){var n=p(t.ngMin,t.min),r=f(e);return!n||!r||r>=n},e.$validators.max=function(e){var n=p(t.ngMax,t.max),r=f(e);return!n||!r||r<=n}}},{key:"addWatchers",value:function(e,t){var n=this;e.$watch("$ctrl.day",function(e,r){e!==r&&n.initialisedWithDate&&t.$setDirty()}),e.$watch("$ctrl.month",function(e,r){e!==r&&(n.adjustLastDay(),t.$setTouched(),n.initialisedWithDate&&t.$setDirty())}),e.$watch("$ctrl.year",function(e,r){e!==r&&n.initialisedWithDate&&t.$setDirty()}),e.$watch("$ctrl.ngModel",function(e,r){e!==r&&d(n.ngModel)&&(t.$setDirty(),n.explodeDateModel(n.ngModel))}),e.$watch("$ctrl.ngRequired",function(e,t){e!==t&&n.setDateRequired()}),e.$watch("$ctrl.ngDisabled",function(e,t){e!==t&&n.setDateDisabled()}),e.$watch("$ctrl.locale",function(e,t){e!==t&&(n.setDateLocale(),n.setMonths())})}},{key:"getMonthsBasedOnIntlSupportForLocale",value:function(){return function(e){return e.map(function(e,t){return{value:t,label:e}})}(this.DateService.getMonthNamesForLocale(this.locale))}},{key:"combineDate",value:function(){return this.DateService.getUTCDateFromParts(Number(this.year),Number(this.month),Number(this.day))}},{key:"updateDateModelAndValidationClasses",value:function(){if(this.adjustLastDay(),e=this.year,t=this.month,n=this.day,u(e)&&u(n)&&(u(t)||"string"==typeof(r=t)&&!isNaN(Number(r)))){var e,t,n,r,i=this.combineDate();if(this.dateModelType===o){var a=i.toISOString(),l=a.substring(0,a.indexOf("T"));this.$ngModel.$setViewValue(l)}else this.$ngModel.$setViewValue(i)}else this.$ngModel.$setViewValue(null)}},{key:"adjustLastDay",value:function(){var e=Number(this.day),t=Number(this.month),n=Number(this.year),r=this.DateService.getLastDayOfMonth(n,t);e>r&&(this.day=parseInt(r,10))}}])&&a(t.prototype,n),r&&a(t,r),e}(),s="en",o="string",c="object";function u(e){return"number"==typeof e}function d(e){return h(e)||"string"==typeof(t=e)&&h(new Date(t));var t}function h(e){return"[object Date]"===Object.prototype.toString.call(e)&&!isNaN(e.getTime())}function p(e,t){var n=e||t;return!!n&&(!!h(n="string"==typeof n?new Date(n):n)&&n)}function f(e){return"string"==typeof e?new Date(e):e}l.$inject=["$element","$log","$scope","TwDateService"];var g=l,m=n(40),v={controller:g,template:n.n(m).a,require:{$ngModel:"ngModel"},bindings:{ngModel:"=",required:"@",ngRequired:"<",disabled:"@",ngDisabled:"<",locale:"@",twLocale:"<",min:"@",ngMin:"<",max:"@",ngMax:"<",modelType:"@"}},b=n(6),$=n(18),y=n(8),w=n(4);t.a=i.a.module("tw.styleguide.forms.date",[b.a,$.a,y.a,w.a]).component("twDate",v).name},function(e,t,n){"use strict";var r=n(0),i=n.n(r),a=n(41),l={template:n.n(a).a,bindings:{date:"<",locale:"<",format:"<"}};function s(e){return function(t,n,r){if(!t)return t;var i=t;if("string"==typeof i&&(i=e.getUTCDateFromIso(i),new RegExp("^[0-9]{4}-[0-9]{2}-[0-9]{2}$").test(t)))return e.getUTCDateString(i,n,r);return i?e.getLocaleDateString(i,n,r):t}}s.$inject=["TwDateService"];var o=s,c=n(6);t.a=i.a.module("tw.styleguide.formatting.date",[c.a]).component("twDateFormat",l).filter("twDateFormat",o).name},function(e,t,n){"use strict";var r,i=n(0),a=n.n(i),l=n(8),s=n(12),o=n(15),c=n(16),u=n(17),d=n(14);function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var p=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.element=t[0],r=this}var t,n,i;return t=e,(n=[{key:"$onInit",value:function(){this.$ngModel=this.$element.controller("ngModel"),this.addValidators(),this.uploadOptions||(this.uploadOptions={})}},{key:"change",value:function(){this.$ngModel.$setDirty(),this.$ngModel.$setViewValue(this.internalModel)}},{key:"focus",value:function(){this.element.dispatchEvent(new CustomEvent("focus"))}},{key:"blur",value:function(){this.$ngModel.$setTouched(),this.element.dispatchEvent(new CustomEvent("blur"))}},{key:"onAsyncUploadSuccess",value:function(e,t){r.onAsyncSuccess&&r.onAsyncSuccess({response:t})}},{key:"onAsyncUploadFailure",value:function(e){r.onAsyncFailure&&r.onAsyncFailure({response:e})}},{key:"getAutocompleteStatus",value:function(){return this.help&&(this.help.message||this.help.list||this.help.image)?"disabled":"on"}},{key:"addValidators",value:function(){var e=this;this.$ngModel.$formatters.push(function(t){return e.internalModel=t,t})}}])&&h(t.prototype,n),i&&h(t,i),e}();p.$inject=["$element"];var f=p,g=n(42),m={controller:f,template:n.n(g).a,require:{$ngModel:"ngModel"},bindings:{type:"@",name:"@",id:"@",label:"@",description:"@",placeholder:"@",step:"@",locale:"@",uploadAccept:"@",uploadIcon:"@",uploadTooLargeMessage:"@",options:"<",ngModel:"=",ngChange:"&",ngFocus:"&",ngBlur:"&",ngDisabled:"<",uploadOptions:"<",help:"<helpOptions",textFormat:"<",validationAsync:"<",persistAsync:"<",onAsyncFailure:"&",onAsyncSuccess:"&",fileUploadSource:"<",cameraOptions:"<"}};t.a=a.a.module("tw.styleguide.forms.form-control",[l.a,s.a,o.a,c.a,u.a,d.a]).component("twFormControl",m).component("twDynamicFormControl",m).name},function(e,t,n){"use strict";var r=n(0),i=n.n(r),a=n(19),l=n(7),s=n(1);function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var d=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.RequirementsService=t,this.changed=!1,this.touched=!1}var t,n,r;return t=e,(n=[{key:"$onChanges",value:function(e){if(e.initialField){this.field=this.RequirementsService.prepField(this.initialField),this.control=this.RequirementsService.getControlType(e.initialField.currentValue),this.field.valuesAsync&&this.RequirementsService.prepValuesAsync(this.field,{}),this.required&&this.field.enum&&1===this.field.enum.length&&(this.model=this.field.enum[0]),this.field.default&&!this.model&&(this.model=this.field.default);var t=this.validationMessages||{},n=this.field.validationMessages||{};this.validationStrings=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach(function(t){c(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}({},t,{},n),this.validate(this.model)}}},{key:"onFocus",value:function(){this.focusHandler&&this.focusHandler()}},{key:"onBlur",value:function(){this.touched=!0,this.blurHandler&&this.blurHandler()}},{key:"onChange",value:function(e){this.changed=!0,this.validate(e),this.changeHandler&&this.changeHandler({value:e}),this.errorMessage&&delete this.errorMessage}},{key:"validate",value:function(e){if(Object(s.isNull)(e)||Object(s.isUndefined)(e)){if(this.required)return void(this.failures=["required"]);"string"===this.field.type&&(e="")}this.failures=Object(l.h)(e,this.field,this.required)}},{key:"onPersistAsyncFailure",value:function(e){this.uploadOptions||(this.uploadOptions={}),e.originalData?this.extractErrors(e.originalData):e.data&&this.extractErrors(e.data)}},{key:"extractErrors",value:function(e){e.message&&(this.uploadOptions.failureText=e.message),Array.isArray(e.errors)&&(this.uploadOptions.validationMessages=e.errors.map(function(e){return e.message}).slice(0,2))}},{key:"onPersistAsyncSuccess",value:function(e){this.uploadOptions||(this.uploadOptions={}),e&&(this.uploadOptions.successText=e.data.message)}},{key:"isLabelShown",value:function(e){return"file"!==e&&"checkbox"!==e}},{key:"isHelpShown",value:function(){return!!this.field.help}},{key:"isDesriptionShown",value:function(){return this.description&&!this.isErrorShown()&&!this.isWarningShown()&&"boolean"!==this.field.type}},{key:"isWarningShown",value:function(){return!!this.warningMessage}},{key:"isErrorShown",value:function(){return(this.submitted||this.touched&&this.changed)&&this.failures.length>0||this.errorMessage}},{key:"isAlertShown",value:function(){return this.isErrorShown()}},{key:"getOptions",value:function(){return"array"===this.field.type&&this.field.items?this.field.items.values:this.field.values}}])&&u(t.prototype,n),r&&u(t,r),e}();d.$inject=["TwRequirementsService"];var h=d,p=n(43),f={controller:h,template:n.n(p).a,bindings:{name:"@",model:"=",initialField:"<field",locale:"@",required:"<",submitted:"<",uploadOptions:"<",changeHandler:"&?onChange",focusHandler:"&?onFocus",blurHandler:"&?onBlur",errorMessage:"<",warningMessage:"<",validationMessages:"<"}},g=n(9),m=n(21);t.a=i.a.module("tw.styleguide.forms.field",[a.a,g.a,m.a]).component("twField",f).name},function(e,t,n){"use strict";var r=n(0),i=n.n(r);var a=function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var i=n[0],a=r.getClosestParentByClassName(i,"form-group"),s=n.controller("ngModel");i.addEventListener("invalid",function(e){e.preventDefault()}),s.$validators.validation=function(){return t.$evalAsync(function(){l(s,a,i)}),!0};i.addEventListener("blur",function(){t.$evalAsync(function(){l(s,a,i)})})};function l(e,t,n){if(t&&!t.classList.contains("custom-validation"))return e.$valid?(t&&t.classList.remove("has-error"),void n.removeAttribute("aria-invalid")):void(e.$touched&&e.$dirty&&(t&&t.classList.add("has-error"),n.setAttribute("aria-invalid","true")))}a.$inject=["$scope","$element","TwDomService"];var s=a;var o=function(){return{restrict:"A",require:{$ngModel:"ngModel"},controller:s}},c=n(2);t.a=i.a.module("tw.stylguide.validation.control",[c.a]).directive("twValidation",o).name},function(e,t,n){"use strict";var r=n(0),i=n.n(r);function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.baseUrl="",this.headers={}}var t,n,r;return t=e,(n=[{key:"setBaseUrl",value:function(e){this.baseUrl=e}},{key:"setHeader",value:function(e,t){this.headers[e]=t}},{key:"extendHttpOptions",value:function(e){var t=angular.copy(e);return t.headers=t.headers?function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach(function(t){l(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}({},t.headers,{},this.headers):this.headers,t.url&&(t.url="".concat(this.baseUrl).concat(t.url)),t}}])&&s(t.prototype,n),r&&s(t,r),e}();t.a=i.a.module("tw.styleguide.services.async-tasks-config",[]).service("AsyncTasksConfig",o).name},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var i=(l=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(l))))+" */"),a=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(a).concat([i]).join("\n")}var l;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},i=0;i<this.length;i++){var a=this[i][0];"number"==typeof a&&(r[a]=!0)}for(i=0;i<e.length;i++){var l=e[i];"number"==typeof l[0]&&r[l[0]]||(n&&!l[2]?l[2]=n:n&&(l[2]="("+l[2]+") and ("+n+")"),t.push(l))}},t}},function(e,t,n){var r,i,a={},l=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=r.apply(this,arguments)),i}),s=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),o=null,c=0,u=[],d=n(51);function h(e,t){for(var n=0;n<e.length;n++){var r=e[n],i=a[r.id];if(i){i.refs++;for(var l=0;l<i.parts.length;l++)i.parts[l](r.parts[l]);for(;l<r.parts.length;l++)i.parts.push(b(r.parts[l],t))}else{var s=[];for(l=0;l<r.parts.length;l++)s.push(b(r.parts[l],t));a[r.id]={id:r.id,refs:1,parts:s}}}}function p(e,t){for(var n=[],r={},i=0;i<e.length;i++){var a=e[i],l=t.base?a[0]+t.base:a[0],s={css:a[1],media:a[2],sourceMap:a[3]};r[l]?r[l].parts.push(s):n.push(r[l]={id:l,parts:[s]})}return n}function f(e,t){var n=s(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=u[u.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),u.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=s(e.insertAt.before,n);n.insertBefore(t,i)}}function g(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=u.indexOf(e);t>=0&&u.splice(t,1)}function m(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return v(t,e.attrs),f(e,t),t}function v(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function b(e,t){var n,r,i,a;if(t.transform&&e.css){if(!(a="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=a}if(t.singleton){var l=c++;n=o||(o=m(t)),r=w.bind(null,n,l,!1),i=w.bind(null,n,l,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",v(t,e.attrs),f(e,t),t}(t),r=function(e,t,n){var r=n.css,i=n.sourceMap,a=void 0===t.convertToAbsoluteUrls&&i;(t.convertToAbsoluteUrls||a)&&(r=d(r));i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var l=new Blob([r],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(l),s&&URL.revokeObjectURL(s)}.bind(null,n,t),i=function(){g(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),i=function(){g(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=l()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=p(e,t);return h(n,t),function(e){for(var r=[],i=0;i<n.length;i++){var l=n[i];(s=a[l.id]).refs--,r.push(s)}e&&h(p(e,t),t);for(i=0;i<r.length;i++){var s;if(0===(s=r[i]).refs){for(var o=0;o<s.parts.length;o++)s.parts[o]();delete a[s.id]}}}};var $,y=($=[],function(e,t){return $[e]=t,$.filter(Boolean).join("\n")});function w(e,t,n,r){var i=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=y(t,i);else{var a=document.createTextNode(i),l=e.childNodes;l[t]&&e.removeChild(l[t]),l.length?e.insertBefore(a,l[t]):e.appendChild(a)}}},function(e,t){e.exports='<input type=hidden class=sr-only name={{$ctrl.name}} ng-model=$ctrl.ngModel ng-click=$ctrl.hiddenClick($event) ng-disabled=$ctrl.ngDisabled /> <button type=button class=tw-checkbox-button tw-focusable ng-click=$ctrl.buttonClick($event) ng-focus=$ctrl.buttonFocus() ng-blur=$ctrl.buttonBlur() ng-disabled=$ctrl.ngDisabled ng-class="{\'checked\': $ctrl.checked}" aria-pressed={{$ctrl.checked}}> <span class="tw-checkbox-check glyphicon glyphicon-ok"></span> </button> '},function(e,t){e.exports='<div ng-repeat="option in $ctrl.internalOptions" class=checkbox> <label> <tw-checkbox name={{$ctrl.name}} ng-model=option.selected ng-disabled=$ctrl.ngDisabled ng-required=$ctrl.isCheckboxRequired() ng-change=$ctrl.onInternalModelChange(option)></tw-checkbox> {{option.label}} </label> </div> '},function(e,t){e.exports='<input type=radio class=sr-only name={{$ctrl.name}} ng-value="$ctrl.ngValue || $ctrl.value" ng-model=$ctrl.ngModel ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.hiddenInputChange() tabindex=-1 /> <button type=button class=tw-radio-button tw-focusable ng-click=$ctrl.buttonClick($event) ng-focus=$ctrl.buttonFocus() ng-blur=$ctrl.buttonBlur() ng-disabled=$ctrl.ngDisabled ng-class="{checked: $ctrl.checked}" aria-pressed={{$ctrl.checked}}> <span class=tw-radio-check></span> </button> '},function(e,t){e.exports='<div class="btn-group btn-block tw-select" ng-class="{\n    dropdown: !$ctrl.dropdownUp,\n    dropup: $ctrl.dropdownUp\n  }" aria-hidden=false> <button type=button class="btn btn-input dropdown-toggle" ng-class="{\n      \'btn-input-inverse\': $ctrl.inverse,\n      \'btn-addon\': $ctrl.inverse,\n      \'btn-sm\': $ctrl.size === \'sm\',\n      \'btn-lg\': $ctrl.size === \'lg\'\n    }" data-toggle=dropdown aria-expanded=false ng-disabled=$ctrl.ngDisabled ng-focus=$ctrl.buttonFocus() tw-focusable> <span class=tw-select-selected ng-if=$ctrl.selected> <span class="circle circle-inverse pull-xs-left circle-sm" ng-if="$ctrl.selected && $ctrl.selected.icon && $ctrl.selected.secondary"> <span class="icon {{$ctrl.selected.icon}}"></span> </span> <span class="circle circle-inverse pull-xs-left" ng-class=$ctrl.circleClasses($ctrl.hideCircle) ng-if="($ctrl.selected.circleText || $ctrl.selected.circleImage || $ctrl.selected.circleIcon)"> <span ng-if=$ctrl.selected.circleText>{{$ctrl.selected.circleText}}</span> <img alt={{$ctrl.selected.label}} ng-if=$ctrl.selected.circleImage src="data:image/png;base64,\n            iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" ng-src={{$ctrl.selected.circleImage}} /> <span ng-if=$ctrl.selected.circleIcon class="icon {{$ctrl.selected.circleIcon}}"></span> </span> <span class=text-ellipsis> <span class="currency-flag currency-flag-{{$ctrl.selected.currency | lowercase}}" ng-if="$ctrl.selected && $ctrl.selected.currency" ng-class=$ctrl.responsiveClasses($ctrl.hideCurrency)></span> <span class="icon {{$ctrl.selected.icon}}" ng-if="$ctrl.selected && $ctrl.selected.icon && !$ctrl.selected.secondary" ng-class=$ctrl.responsiveClasses($ctrl.hideIcon)></span> <span class=tw-select-label ng-class=$ctrl.responsiveClasses($ctrl.hideLabel)> {{$ctrl.selected.label}} </span> <span ng-if=$ctrl.selected.note ng-class=$ctrl.responsiveClasses($ctrl.hideNote) class="tw-select-note small m-l-1"> {{$ctrl.selected.note}} </span> <span ng-if=$ctrl.selected.secondary ng-class=$ctrl.responsiveClasses($ctrl.hideSecondary) class="tw-select-secondary small secondary text-ellipsis"> {{$ctrl.selected.secondary}} </span> </span> </span> <span class=form-control-placeholder ng-if=!$ctrl.selected>{{$ctrl.placeholder}}</span> <span class=caret></span> </button> <ul class=dropdown-menu role=menu ng-class="{\n      \'dropdown-menu-xs-right\': $ctrl.dropdownRight === \'xs\',\n      \'dropdown-menu-sm-right\': $ctrl.dropdownRight === \'sm\',\n      \'dropdown-menu-md-right\': $ctrl.dropdownRight === \'md\',\n      \'dropdown-menu-lg-right\': $ctrl.dropdownRight === \'lg\',\n      \'dropdown-menu-xl-right\': $ctrl.dropdownRight === \'xl\',\n      \'dropdown-menu-sm\': $ctrl.dropdownWidth === \'sm\',\n      \'dropdown-menu-md\': $ctrl.dropdownWidth === \'md\',\n      \'dropdown-menu-lg\': $ctrl.dropdownWidth === \'lg\'\n    }"> <li ng-if=$ctrl.shouldShowSearch()> <a href="" class="tw-select-filter-link p-a-0" tabindex=-1 ng-focus=$ctrl.focusOnFilterInput()> <div class=input-group> <span class=input-group-addon><span class="icon icon-search"></span> </span> <input type=text class="form-control tw-select-filter" placeholder={{$ctrl.filter}} ng-model=$ctrl.filterString ng-change=$ctrl.filterChange() ng-keydown=$ctrl.filterKeydown($event) /> </div> </a> </li> <li ng-if="$ctrl.placeholder && !$ctrl.filter" ng-class="{\n        active: !$ctrl.selected && !$ctrl.ngRequired,\n        \'dropdown-header\': $ctrl.ngRequired\n      }"> <span ng-if=$ctrl.ngRequired class=text-ellipsis ng-click=$event.stopPropagation()> {{$ctrl.placeholder}} </span> <a href="" tabindex=-1 ng-if=!$ctrl.ngRequired ng-click=$ctrl.placeholderClick() ng-focus=$ctrl.placeholderFocus() class=tw-select-placeholder tw-focusable> {{$ctrl.placeholder}} </a> </li> <li ng-if="($ctrl.placeholder && !$ctrl.ngRequired) || $ctrl.filter" class=divider></li> <li ng-repeat="option in $ctrl.filteredOptions" ng-class="{\n        \'active\': $ctrl.ngModel === option.value,\n        \'disabled\': option.disabled,\n        \'dropdown-header\': option.header,\n        \'tw-select-option\': !option.header && !option.disabled\n      }"> <span ng-if=option.header class=text-ellipsis ng-click=$event.stopPropagation()> {{option.header}} </span> <a href="" ng-if=!option.header ng-click="$ctrl.optionClick(option, $event)" ng-focus=$ctrl.optionFocus(option) ng-class="{\'tw-select-option-link\': !option.disabled}" index={{$index}} tabindex=-1 tw-focusable> <div ng-if="option.icon && option.secondary" class="circle circle-inverse pull-xs-left circle-sm"> <span class="icon {{option.icon}}"></span> </div> <span ng-if="option.icon && !option.secondary" class="icon {{option.icon}} pull-xs-left"> </span> <span ng-if=option.currency class="currency-flag currency-flag-{{option.currency | lowercase}} pull-xs-left"> </span> <span class="circle circle-inverse pull-xs-left" ng-class="{\n            \'circle-sm\': option.secondary,\n            \'circle-xs\': !option.secondary\n          }" ng-if="option.circleText || option.circleImage || option.circleIcon"> <span class=tw-select-circle-text ng-if=option.circleText>{{option.circleText}}</span> <img alt={{option.label}} ng-if=option.circleImage src="data:image/png;base64,\n              iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" ng-src={{option.circleImage}} /> <span ng-if=option.circleIcon class="icon {{option.circleIcon}}"></span> </span>{{option.label}}<span ng-if=option.note class="tw-select-note small m-l-1">{{option.note}}</span><span ng-if=option.secondary class="tw-select-secondary small text-ellipsis">{{option.secondary}}</span> </a> </li> <li ng-if=$ctrl.hasMoreOptionsToReveal> <a href="" ng-click=$ctrl.revealMoreOptions($event) class=tw-select-load-more tabindex=-1 tw-focusable> ... </a> </li> <li ng-if=$ctrl.hasTranscluded class=divider></li> <li ng-transclude ng-if=$ctrl.hasTranscluded class=tw-select-transcluded></li> </ul> </div> <input type=hidden class=tw-select-hidden name={{$ctrl.name}} value={{$ctrl.ngModel}} ng-disabled=$ctrl.ngDisabled /> '},function(e,t){e.exports="<div class=droppable tw-drag-enter=$ctrl.onDragEnter() tw-drag-leave=$ctrl.onDragLeave() tw-drop=$ctrl.onDrop(files) ng-class=\"{\n    'droppable-sm': $ctrl.size ==='sm',\n    'droppable-md': $ctrl.size ==='md' || !$ctrl.size,\n    'droppable-lg': $ctrl.size ==='lg',\n    'droppable-dropping': $ctrl.isDroppable && !$ctrl.ngDisabled,\n    'droppable-processing': !$ctrl.isDone && ($ctrl.isProcessing || $ctrl.isSuccess),\n    'droppable-complete': $ctrl.isDone\n  }\"> <div class=droppable-default-card aria-hidden=\"{{$ctrl.isDone || $ctrl.isProcessing}}\"> <tw-upload-capture label=$ctrl.label icon=$ctrl.icon accept=$ctrl.accept input-file=$ctrl.inputFile help-image=$ctrl.helpImage button-text=$ctrl.buttonText no-camera-text=$ctrl.noCameraText no-camera-message=$ctrl.noCameraMessage ng-disabled=$ctrl.ngDisabled placeholder=\"$ctrl.placeholder || $ctrl.description\" is-live-camera-upload=$ctrl.isLiveCameraUpload camera-guidelines=$ctrl.cameraGuidelines on-file-capture=$ctrl.onFileCapture(file)></tw-upload-capture> </div> <div class=\"droppable-processing-card droppable-card droppable-card--wider\" aria-hidden={{!$ctrl.isProcessing}}> <tw-upload-processing name=$ctrl.name file=$ctrl.file on-start=$ctrl.onProcessStart(file) on-success=\"$ctrl.onProcessSuccess(file, dataUrl, id, response)\" on-failure=$ctrl.onProcessFailure(error) max-size=$ctrl.maxSize accept=$ctrl.accept http-options=$ctrl.httpOptions processing-message=$ctrl.processingText success-message=$ctrl.successText error-message=$ctrl.failureText validation-messages=$ctrl.validationMessages too-large-message=$ctrl.tooLargeMessage cancel-text=$ctrl.cancelText on-cancel=$ctrl.reset()></tw-upload-processing> </div> <div class=\"droppable-complete-card droppable-card\" aria-hidden={{!$ctrl.isDone}}> <tw-upload-success label=$ctrl.label is-image=$ctrl.isImage file=$ctrl.file data=$ctrl.dataUrl success-message=$ctrl.successText cancel-text=$ctrl.cancelText on-cancel=$ctrl.reset()></tw-upload-success> </div> <div class=\"droppable-dropping-card droppable-card\"> <tw-upload-dropping dropping-text=$ctrl.droppingText></tw-upload-dropping> </div> </div> "},function(e,t){e.exports='<div class=droppable-card-content> <div ng-if=!$ctrl.cameraFailed> <div class=m-b-2> <img ng-show=$ctrl.helpImage ng-src={{$ctrl.helpImage}} alt={{$ctrl.label}} class="thumbnail text-xs-center"/> <span ng-show=!$ctrl.helpImage class="icon icon-{{$ctrl.viewIcon}} icon-xxl"></span> </div> <h4 class=m-b-1 ng-if="$ctrl.label || $ctrl.description"> {{$ctrl.label || $ctrl.description}} </h4> <p class=m-b-2 ng-if="$ctrl.placeholder || $ctrl.instructions"> {{$ctrl.placeholder || $ctrl.instructions}} </p> </div> <div ng-if=$ctrl.cameraFailed> <div class=m-b-2> <tw-process state=-1 size=sm></tw-process> </div> <h4 class=m-b-1 ng-if=$ctrl.noCameraText>{{$ctrl.noCameraText}}</h4> <p class=m-b-2 ng-if=$ctrl.noCameraMessage>{{$ctrl.noCameraMessage}}</p> </div> <tw-upload-button ng-if=!$ctrl.isLiveCameraUpload name=$ctrl.name label=$ctrl.buttonText accept=$ctrl.accept model=$ctrl.inputFile disabled=$ctrl.ngDisabled on-capture=$ctrl.onButtonCapture(files)> </tw-upload-button> <tw-camera-button ng-if=$ctrl.isLiveCameraUpload label=$ctrl.buttonText disabled=$ctrl.ngDisabled on-click=$ctrl.onCameraButtonClick()> </tw-camera-button> <tw-camera-capture ng-if="$ctrl.isLiveCameraUpload && $ctrl.showLiveCaptureScreen" guidelines=$ctrl.cameraGuidelines on-cancel=$ctrl.onCameraCancel() on-capture=$ctrl.onCameraCapture(file) on-error=$ctrl.onCameraError()> </tw-camera-capture> </div> '},function(e,t){e.exports='<div class=droppable-card-content> <div class="circle circle-sm m-b-3"> <span class="icon icon-add"></span> </div> <h4> {{ $ctrl.droppingText || \'Drop file to start upload\' }} </h4> <p class="m-t-2 m-b-0"></p> </div> '},function(e,t){e.exports='<div class=droppable-card-content> <div class=m-b-2> <tw-process size=sm state=$ctrl.processingState></tw-process> </div> <h4 class=m-b-2> <span ng-if="$ctrl.isProcessing && $ctrl.processingMessage" class=upload-processing-message> {{$ctrl.processingMessage}} </span> <span ng-if="$ctrl.isError && $ctrl.errorMessage" class=upload-failure-message> {{$ctrl.errorMessage}} </span> </h4> <ul ng-if="$ctrl.isError && $ctrl.validationMessages" class="text-xs-left m-b-2"> <li ng-if=$ctrl.validationMessages[0]>{{ $ctrl.validationMessages[0] }}</li> <li ng-if=$ctrl.validationMessages[1]>{{ $ctrl.validationMessages[1] }}</li> <li ng-if=$ctrl.validationMessages[2]>{{ $ctrl.validationMessages[2] }}</li> </ul> <a href="" ng-if=$ctrl.isError class="btn btn-primary" ng-click=$ctrl.onRemove() role=button> <span ng-if=$ctrl.cancelText ng-bind=$ctrl.cancelText></span> <span ng-if=!$ctrl.cancelText class="icon icon-upload m-r-0"></span> </a> </div> '},function(e,t){e.exports='<div class=processing-item> <div class=media> <div class="media-left vertical-center p-r-2 p-y-1"> <tw-process size=xs state=$ctrl.processingState></tw-process> </div> <div class="media-body text-xs-left p-y-1" style=overflow:auto> <div> <small class="m-b-0 text-ellipsis file-name"><strong>{{ $ctrl.file.name }}</strong></small> <small class="m-b-0 text-ellipsis tiny"> <span ng-if=$ctrl.isProcessing>{{ $ctrl.processingMessage }}</span> <span ng-if=$ctrl.isError>{{ $ctrl.errorMessage }}</span> <span ng-if=$ctrl.isSuccess>{{ $ctrl.successMessage }}</span> </small> </div> </div> <div class="media-right p-l-2 p-y-2"> <a href="" ng-if=!$ctrl.isProcessing class=close ng-click=$ctrl.onRemove() role=button>&times;</a> </div> </div> </div> '},function(e,t){e.exports="<span class=process ng-class=\"{\n    'process-success': $ctrl.processing === 1,\n    'process-danger': $ctrl.processing === -1,\n    'process-stopped': $ctrl.processing === 0,\n    'process-xs': $ctrl.size === 'xs',\n    'process-sm': $ctrl.size === 'sm',\n    'process-md': $ctrl.size === 'md',\n    'process-lg': $ctrl.size === 'lg',\n    'process-xl': $ctrl.size === 'xl'\n  }\"> <span class=process-icon-container> <span class=process-icon-horizontal></span> <span class=process-icon-vertical></span> </span> <svg version=1.1 xmlns=http://www.w3.org/2000/svg xml:space=preserve> <circle class=process-circle cx=50% cy=50% ng-attr-r={{$ctrl.radius}} fill-opacity=0.0 /> </svg> </span> "},function(e,t){e.exports='<div class=droppable-card-content> <h4 ng-if="$ctrl.successMessage || $ctrl.label" class="m-b-2 upload-success-message"> {{ $ctrl.successMessage || $ctrl.label }} </h4> <img ng-if="$ctrl.isImage && $ctrl.data" src="data:image/png;base64,\n      iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" ng-src="{{ $ctrl.data }}" alt=OK class="thumbnail m-b-3"/> <span class="icon icon-pdf icon-xxl" ng-if="!$ctrl.isImage || !$ctrl.data"></span> <p class="m-b-2 text-ellipsis">{{ $ctrl.fileName }}</p> <p class="m-t-2 m-b-0"> <a href="" ng-click=$ctrl.onCancel()> <span ng-if=$ctrl.cancelText ng-bind=$ctrl.cancelText></span> <span ng-if=!$ctrl.cancelText class="icon icon-upload m-r-0"></span> </a> </p> </div> '},function(e,t){e.exports="<div id=camera ng-class=\"{translucent: $ctrl.mode === 'loading'}\"> <video id=cameraViewfinder class=\"fixed w-100 h-100\" ng-show=\"$ctrl.mode === 'capture'\" ng-class=\"{mirrored: ($ctrl.guidelines.direction || '').toLowerCase() === 'user'}\" playsinline></video> <div id=cameraViewfinderOverlay ng-if=\"$ctrl.guidelines.outline && $ctrl.mode === 'capture'\" ng-class=\"{mirrored: ($ctrl.guidelines.direction || '').toLowerCase() === 'user'}\" ng-style=\"{'background-image': 'url(' + $ctrl.guidelines.outline + ')', width: $ctrl.overlaySquareLength + 'px', height: $ctrl.overlaySquareLength + 'px'}\"></div> <canvas id=cameraSensor ng-show=\"$ctrl.mode === 'confirm'\" ng-style=\"{width: $ctrl.sensorWidth + 'px'}\"></canvas> <label class=\"fixed-bottom camera-ctrl-bar\"> <span class=camera-ctrl-box-small> <span id=video-cancel class=\"camera-ctrl-btn-small camera-ctrl-btn-cancel icon icon-close\" ng-if=\"$ctrl.mode === 'capture'\" ng-click=$ctrl.onCancelBtnClick()></span> <span id=capture-cancel class=\"camera-ctrl-btn-small camera-ctrl-btn-cancel icon icon-close\" ng-if=\"$ctrl.mode === 'confirm'\" ng-click=$ctrl.onRecaptureBtnClick()></span> </span> <span class=camera-ctrl-box-big> <span id=video-confirm class=camera-ctrl-btn-big ng-if=\"$ctrl.mode === 'capture'\" ng-click=$ctrl.onCaptureBtnClick()> <span class=camera-ctrl-btn-big-inner></span> </span> </span> <span class=camera-ctrl-box-small> <span id=capture-confirm class=\"camera-ctrl-btn-small camera-ctrl-btn-confirm icon icon-check\" ng-if=\"$ctrl.mode === 'confirm'\" ng-click=$ctrl.onUploadBtnClick()></span> </span> </label> </div> "},function(e,t){e.exports='<label class=btn ng-click=$ctrl.onButtonClick() ng-class="{ \'disabled\': $ctrl.disabled,\n              \'btn-primary\': !$ctrl.isSecondary,\n              \'btn-default\': $ctrl.isSecondary,\n              \'btn-block\': $ctrl.block,\n              \'btn-sm\': $ctrl.small\n            }"> <span ng-if=$ctrl.label ng-bind=$ctrl.label></span> <span ng-if=!$ctrl.label class="icon icon-upload m-r-0"></span> <span ng-if=!$ctrl.isLiveCameraUpload> <input ng-if=!$ctrl.multiple tw-file-input type=file accept="{{ $ctrl.accept }}" class="tw-droppable-input hidden" ng-disabled=$ctrl.ngDisabled name="{{ $ctrl.name }}" on-user-input=$ctrl.onButtonCapture() ng-model=$ctrl.model /> <input ng-if=$ctrl.multiple tw-file-input type=file accept="{{ $ctrl.accept }}" class="tw-droppable-input hidden" ng-disabled=$ctrl.ngDisabled name="{{ $ctrl.name }}" on-user-input=$ctrl.onButtonCapture() ng-model=$ctrl.model multiple=multiple /> </span> </label>'},function(e,t){e.exports='<label class="btn btn-primary" ng-click=$ctrl.onButtonClick() ng-class="{ \'disabled\': $ctrl.disabled }"> <span ng-if=$ctrl.label ng-bind=$ctrl.label></span> <span ng-if=!$ctrl.label class="icon icon-camera m-r-0"></span> </label> '},function(e,t){e.exports='<div class="well droppable p-r-0 p-l-0 p-t-1 p-b-0 multi-upload" tw-drop=$ctrl.onDrop(files) tw-drag-enter=$ctrl.onDragEnter() tw-drag-leave=$ctrl.onDragLeave() ng-class="{\'droppable-dropping\': $ctrl.isDroppable}"> <div class="droppable-dropping-card droppable-card"> <tw-upload-dropping dropping-text=$ctrl.droppingText></tw-upload-dropping> </div> <div ng-if="$ctrl.files.length === 0" class="empty-processing-list droppable-default-card text-xs-center p-t-3"> <div class=empty-screen> <div class="circle circle-sm m-b-3 m-t-3"> <img ng-if=$ctrl.helpImage ng-src={{$ctrl.helpImage}} alt={{$ctrl.label}} class="thumbnail text-xs-center"/> <span ng-if=!$ctrl.helpImage class="icon icon-{{$ctrl.viewIcon}} icon-xxl"></span> </div> <h4 ng-if=$ctrl.label class=m-b-1>{{$ctrl.label}}</h4> <p ng-if=$ctrl.placeholder class="p-l-3 p-r-3"> {{$ctrl.placeholder}} </p> </div> </div> <div ng-if="$ctrl.files.length > 0" class="droppable-default-card p-l-3 processing-list"> <div ng-repeat="(index, file) in $ctrl.files" class=p-r-3 ng-class="{\'last-item\': $last}"> <tw-upload-processing-mini name=$ctrl.name file=file on-success="$ctrl.onProcessSuccess(index, file, dataUrl, id, response)" on-failure="$ctrl.onProcessFailure(index, file, error)" on-cancel=$ctrl.onProcessCancel(index) max-size=$ctrl.maxSize accept=$ctrl.accept http-options=$ctrl.httpOptions processing-message=$ctrl.processingText success-message=$ctrl.successText error-message=$ctrl.failureText validation-messages=$ctrl.validationMessages too-large-message=$ctrl.tooLargeMessage cancel-text=$ctrl.cancelText response-error-extractor=$ctrl.responseErrorExtractor({error})></tw-upload-processing-mini> </div> </div> <div class=m-a-3> <tw-upload-button ng-if=!$ctrl.isLiveCameraUpload name=$ctrl.name label="$ctrl.files.length === 0 ? $ctrl.buttonText : $ctrl.addMoreButtonText" is-secondary="$ctrl.files.length > 0" accept=$ctrl.accept model=$ctrl.inputFile disabled=$ctrl.ngDisabled on-capture=$ctrl.onFileCapture(files) block=true small=true multiple=true></tw-upload-button> </div> </div> '},function(e,t){e.exports='<div class=row> <div class="col-sm-5 tw-date-month-column" ng-if=$ctrl.monthBeforeDay> <label class=sr-only>Month</label> <tw-select name=month class=tw-date-month ng-model=$ctrl.month ng-change=$ctrl.updateDateModelAndValidationClasses() ng-required=$ctrl.dateRequired ng-disabled=$ctrl.dateDisabled options=$ctrl.dateMonths> </tw-select> </div> <div class="col-sm-3 tw-date-day-column"> <label class=sr-only>Day</label> <input type=number name=day class="form-control tw-date-day" ng-model=$ctrl.day ng-change=$ctrl.updateDateModelAndValidationClasses() placeholder=DD min=1 ng-min=1 ng-disabled=$ctrl.dateDisabled ng-required=$ctrl.dateRequired tw-focusable/> </div> <div class="col-sm-5 tw-date-month-column" ng-if=!$ctrl.monthBeforeDay> <label class=sr-only>Month</label> <tw-select name=month class=tw-date-month ng-model=$ctrl.month ng-change=$ctrl.updateDateModelAndValidationClasses() ng-required=$ctrl.dateRequired ng-disabled=$ctrl.dateDisabled options=$ctrl.dateMonths> </tw-select> </div> <div class="col-sm-4 tw-date-year-column"> <label class=sr-only>Year</label> <input type=number name=year class="form-control tw-date-year" placeholder=YYYY ng-model=$ctrl.year ng-change=$ctrl.updateDateModelAndValidationClasses() ng-min=$ctrl.min.getFullYear() ng-max=$ctrl.max.getFullYear() maxlength=4 ng-maxlength=4 ng-disabled=$ctrl.dateDisabled ng-required=$ctrl.dateRequired tw-focusable/> </div> </div> '},function(e,t){e.exports='<span tw-tool-tip data-original-title="{{ $ctrl.date | twDateFormat : $ctrl.locale : \'long\' }}"> <span class="hidden-xs hidden-sm"> {{ $ctrl.date | twDateFormat : $ctrl.locale : $ctrl.format }} </span> <span class="hidden-md hidden-lg hidden-xl"> {{ $ctrl.date | twDateFormat : $ctrl.locale : \'short\' }} </span> </span> '},function(e,t){e.exports='<div ng-switch=$ctrl.type> <div ng-switch-when=radio class=radio ng-class="{disabled: $ctrl.ngDisabled, \'radio-lg\': option.secondary}" ng-repeat="option in $ctrl.options"> <label> <tw-radio name={{$ctrl.name}} ng-value=option.value ng-model=$ctrl.internalModel ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change(option.value) ng-click=$ctrl.change(option.value) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur()></tw-radio> {{option.label}} <small ng-if=option.secondary>{{option.secondary}}</small> </label> </div> <div ng-switch-when=checkbox class=checkbox ng-class="{ disabled: $ctrl.ngDisabled, \'checkbox-lg\': $ctrl.description }"> <label> <tw-checkbox name={{$ctrl.name}} ng-model=$ctrl.internalModel ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-click=$ctrl.change() ng-focus=$ctrl.focus() ng-blur=$ctrl.blur()></tw-checkbox> {{ $ctrl.label }} <small ng-if=$ctrl.description>{{ $ctrl.description }}</small> </label> </div> <div ng-switch-when=checkbox-group> <tw-checkbox-group name={{$ctrl.name}} ng-model=$ctrl.internalModel options=$ctrl.options ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel)></tw-checkbox-group> </div> <div ng-switch-when=select> <tw-select name={{$ctrl.name}} options=$ctrl.options filter="{{ $ctrl.options.length > 9 ? \' \' : \'\' }}" placeholder={{$ctrl.placeholder}} ng-model=$ctrl.internalModel ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur()></tw-select> </div> <div ng-switch-when=file> <tw-upload name={{$ctrl.name}} label={{$ctrl.label}} icon={{$ctrl.uploadIcon}} help-image={{$ctrl.helpOptions.image}} placeholder={{$ctrl.placeholder}} accept={{$ctrl.uploadAccept}} complete-text={{$ctrl.label}} button-text={{$ctrl.uploadOptions.buttonText}} cancel-text={{$ctrl.uploadOptions.cancelText}} processing-text="{{ $ctrl.uploadOptions.processingText }}" success-text="{{ $ctrl.uploadOptions.successText }}" failure-text="{{ $ctrl.uploadOptions.failureText }}" no-camera-text="{{ $ctrl.uploadOptions.noCameraText }}" no-camera-message="{{ $ctrl.uploadOptions.noCameraMessage }}" validation-messages=$ctrl.uploadOptions.validationMessages view-image-text={{$ctrl.uploadOptions.viewImageText}} too-large-message={{$ctrl.uploadTooLargeMessage}} max-size=$ctrl.ngMax ng-model=$ctrl.internalModel ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() http-options=$ctrl.persistAsync source=$ctrl.fileUploadSource camera-guidelines=$ctrl.cameraOptions on-success=$ctrl.onAsyncUploadSuccess on-failure=$ctrl.onAsyncUploadFailure></tw-upload> </div> <div ng-switch-when=date|date-time ng-switch-when-separator=|> <tw-date name={{$ctrl.name}} locale={{$ctrl.locale}} ng-min=$ctrl.ngMin ng-max=$ctrl.ngMax ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true }" ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() model-type=string></tw-date> </div> <div ng-switch-when=tel> <tw-telephone name="{{ $ctrl.name }}" placeholder="{{ $ctrl.placeholder }}" ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true, debounce: 300 }" ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() locale="{{ $ctrl.locale }}" search-placeholder=" "></tw-telephone> </div> <input ng-switch-when=number name={{$ctrl.name}} type=number step={{$ctrl.step}} class=form-control placeholder={{$ctrl.placeholder}} ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true, debounce: 300 }" ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() autocomplete="{{ $ctrl.getAutocompleteStatus() }}"/> <input ng-switch-when=hidden name={{$ctrl.name}} type=hidden ng-model=$ctrl.ngModel /> <input ng-switch-when=password name={{$ctrl.name}} type=password class=form-control placeholder={{$ctrl.placeholder}} ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true, debounce: 300 }" ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() autocomplete="{{ $ctrl.getAutocompleteStatus() }}"/> <textarea ng-switch-when=textarea name={{$ctrl.name}} class=form-control placeholder={{$ctrl.placeholder}} ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true, debounce: 300 }" ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() ng-disabled=$ctrl.ngDisabled autocomplete="{{ $ctrl.getAutocompleteStatus() }}"></textarea> <input ng-switch-default name={{$ctrl.name}} type=text class=form-control placeholder={{$ctrl.placeholder}} ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true, debounce: 300 }" ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() ng-disabled=$ctrl.ngDisabled tw-text-format="{{ $ctrl.textFormat }}" autocomplete="{{ $ctrl.getAutocompleteStatus() }}"/> </div> '},function(e,t){e.exports='<div class="form-group tw-field-{{ $ctrl.name }} custom-validation" ng-class="{\n    \'has-error\': $ctrl.isErrorShown(),\n    \'has-warning\': $ctrl.isWarningShown(),\n    \'hidden\': $ctrl.field.hidden\n  }"> <label class=control-label ng-if=$ctrl.isLabelShown($ctrl.control)> {{$ctrl.field.title}} </label> <tw-form-control name="{{ $ctrl.name }}" label="{{ $ctrl.field.title }}" description="{{ $ctrl.field.description }}" type="{{ $ctrl.control | lowercase }}" placeholder="{{ $ctrl.field.placeholder }}" help-options=$ctrl.field.help locale="{{ $ctrl.locale }}" upload-accept="{{ $ctrl.field.accept }}" upload-icon="{{ $ctrl.field.icon }}" upload-too-large-message="{{ $ctrl.field.tooLargeMessage }}" options=$ctrl.getOptions() upload-options=$ctrl.uploadOptions ng-model=$ctrl.model ng-focus=$ctrl.onFocus() ng-blur=$ctrl.onBlur() ng-change=$ctrl.onChange($ctrl.model) ng-required=$ctrl.required ng-disabled=$ctrl.field.disabled text-format=$ctrl.field.displayFormat validation-async=$ctrl.field.validationAsync persist-async=$ctrl.field.persistAsync file-upload-source=$ctrl.field.sourceType camera-options=$ctrl.field.camera on-async-success=$ctrl.onPersistAsyncSuccess(response) on-async-failure=$ctrl.onPersistAsyncFailure(response)></tw-form-control> <div class="alert alert-danger alert-detach" ng-if=$ctrl.isAlertShown()> <div ng-repeat="failureType in $ctrl.failures" ng-if=$ctrl.validationStrings[failureType]> {{ $ctrl.validationStrings[failureType] }} </div> <div class=error-provided ng-if=$ctrl.errorMessage> {{ $ctrl.errorMessage }} </div> </div> <div class="alert alert-warning alert-detach" ng-if=$ctrl.isWarningShown()> {{ $ctrl.warningMessage }} </div> <div ng-if=$ctrl.isHelpShown() class="alert alert-focus alert-detach"> <span ng-if=$ctrl.field.help.message> {{ $ctrl.field.help.message }} </span> <ul ng-if=$ctrl.field.help.list class=list-unstyled> <li ng-repeat="helpMessage in $ctrl.field.help.list">{{ helpMessage }}</li> </ul> <img ng-if="$ctrl.field.help.image && $ctrl.control !== \'file\'" ng-src={{$ctrl.field.help.image}} alt="{{ $ctrl.field.title }}" class="thumbnail m-y-2"/> </div> </div> '},,,,,,function(e,t,n){var r=n(50);"string"==typeof r&&(r=[[e.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(24)(r,i);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(23)(!1)).push([e.i,"div.transparent-area{background-color:hsla(0,0%,98%,.9)}.icon-circle-shadow{background:#fff;box-shadow:0 4px 16px rgba(0,0,0,.08);padding:12px;box-sizing:border-box;border-radius:99px}.icon-circle-shadow svg{top:4px;position:relative}.inline-svg{top:.35em;position:relative}.droppable>.droppable-card--wider{padding-left:10px;padding-right:10px}@media (min-width:576px){p.first-error{min-height:72px}}@media only screen and (max-width:575px){.empty-processing-list{height:130px}.processing-list{min-height:130px}}@media only screen and (min-width:575px){.multi-upload{height:375px}.multi-upload .empty-screen{padding-top:40px}.empty-processing-list,.processing-list{height:290px}}.processing-list{overflow:auto}.processing-list,.processing-list .processing-item .media-body,.processing-list .processing-item .media-right{border-bottom:1px solid #e2e6e8}.processing-list .last-item .processing-item .media-body,.processing-list .last-item .processing-item .media-right{border-bottom:0}.processing-list .processing-item{position:relative;width:100%}.processing-list .processing-item .vertical-center{align-self:center}.empty-processing-list{display:flex;justify-content:center}.empty-processing-list .circle{background-color:#d8f1fa}.empty-processing-list .empty-screen{align-self:center}",""])},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var i,a=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?e:(i=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(e,t,n){var r=n(53);"string"==typeof r&&(r=[[e.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(24)(r,i);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(23)(!1)).push([e.i,"#camera{position:fixed;top:0;left:0;width:100%;height:100%;z-index:1030;background:#000}#camera.translucent{background:rgba(0,0,0,.8)}#cameraViewfinder{position:absolute;top:0;left:0;width:100%;height:100%;z-index:1031;object-fit:contain}#cameraViewfinder.mirrored{-webkit-transform:scaleX(-1);transform:scaleX(-1)}#cameraViewfinderOverlay{position:absolute;z-index:1032;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);background-position:50%;background-size:contain;background-repeat:no-repeat}#cameraViewfinderOverlay.mirrored{-webkit-transform:translate(-50%,-50%) scaleX(-1);transform:translate(-50%,-50%) scaleX(-1)}#cameraSensor{position:absolute;z-index:1033;top:50%;left:50%;transform:translate(-50%,-50%)}.camera-ctrl-box-small{display:inline-block;height:60px;width:60px;margin-left:10px;margin-right:10px;vertical-align:bottom}.camera-ctrl-box-big{display:inline-block;height:84px;width:84px;margin-left:36px;margin-right:36px;vertical-align:bottom}.camera-ctrl-btn-cancel{color:red;background-color:#f8f9fa}.camera-ctrl-btn-confirm{color:green;background-color:#f8f9fa}.camera-ctrl-btn-small{display:inline-block;height:60px;width:60px;padding:4px;margin-bottom:0;font-size:52px;line-height:1;text-align:center;white-space:nowrap;vertical-align:middle;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-image:none;border-radius:50%}.camera-ctrl-btn-big-inner{height:64px;width:64px;padding:0;background-color:#f8f9fa;border:1px solid;border-radius:50%;border-color:#f8f9fa}.camera-ctrl-btn-big,.camera-ctrl-btn-big-inner{display:inline-block;margin-bottom:0;vertical-align:middle}.camera-ctrl-btn-big{height:84px;width:84px;padding:2px;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-color:#343a40;background-image:none;border:8px solid;border-radius:50%;border-color:#f8f9fa}.camera-ctrl-bar{padding-top:10px;padding-bottom:10px;z-index:1034!important}.fixed-bottom{position:fixed;right:0;bottom:0;left:0;z-index:1030}",""])},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t){e.exports='<generic-schema schema=$ctrl.schema model=$ctrl.model errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations submitted=$ctrl.submitted on-change="$ctrl.onModelChange(model, schema)"> </generic-schema> '},function(e,t){e.exports="<h3 ng-if=$ctrl.schema.title class=page-header> {{ $ctrl.schema.title }} </h3> <p ng-if=$ctrl.schema.description> {{ $ctrl.schema.description }} </p> <div ng-if=$ctrl.schema.help.warning class=\"alert alert-warning\"> {{ $ctrl.schema.help.warning }} </div> <div class=row> <div ng-repeat=\"(index, nestedSchema) in $ctrl.schema.allOf\" class=col-xs-12 ng-class=\"{\n      'col-sm-4': !$ctrl.narrow  && nestedSchema.width === 'sm',\n      'col-sm-6': !$ctrl.narrow  && nestedSchema.width === 'md',\n      'col-sm-12': $ctrl.narrow || nestedSchema.width === 'lg'\n    }\"> <generic-schema schema=nestedSchema model=$ctrl.models[index] errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations submitted=$ctrl.submitted on-change=\"$ctrl.onModelChange(index, model, schema)\"> </generic-schema> </div> </div> "},function(e,t){e.exports='<div ng-if=$ctrl.isSimpleType($ctrl.schema.items.type)> Unsupported </div> <div ng-if=!$ctrl.isSimpleType($ctrl.schema.items.type)> <h4 class=page-header ng-if=$ctrl.schema.title> {{ $ctrl.schema.title }} </h4> <p ng-if=$ctrl.schema.description> {{ $ctrl.schema.description }} </p> <div ng-repeat="(index, childModel) in $ctrl.model"> <hr ng-if="index > 0" class="m-t-1 m-b-2"/> <div class=row> <div class=col-sm-9> <generic-schema schema=$ctrl.schema.items model=childModel errors=$ctrl.errors[index] locale=$ctrl.locale translations=$ctrl.translations submitted=$ctrl.submitted on-change="$ctrl.onModelChange(index, model, schema)"> </generic-schema> </div> <div class=col-sm-3> <button class="btn btn-danger btn-block m-t-3" ng-click=$ctrl.remove(index) ng-disabled="index < $ctrl.schema.minItems"> {{ $ctrl.translations.array.remove }} </button> </div> </div> </div> <button class="btn btn-default" ng-disabled="$ctrl.schema.maxItems && $ctrl.model.length >= $ctrl.schema.maxItems" ng-click=$ctrl.add()> {{ $ctrl.translations.array.add }} </button> </div> '},function(e,t){e.exports='<tw-field name="{{ $ctrl.key }}" model=$ctrl.internalModel field=$ctrl.schema required=$ctrl.required submitted=$ctrl.submitted locale="{{ $ctrl.locale }}" on-change=$ctrl.onModelChange(value) error-message=$ctrl.errors warning-message=$ctrl.schema.help.warning validation-messages=$ctrl.getValidationMessages() upload-options=$ctrl.translations.upload> </tw-field> '},function(e,t){e.exports='<one-of-schema ng-if=$ctrl.schema.oneOf model=$ctrl.model schema=$ctrl.schema errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations submitted=$ctrl.submitted on-change="$ctrl.onModelChange(model, schema)"> </one-of-schema> <all-of-schema ng-if=$ctrl.schema.allOf model=$ctrl.model schema=$ctrl.schema errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations submitted=$ctrl.submitted on-change="$ctrl.onModelChange(model, schema)"> </all-of-schema> <basic-type-schema ng-if="$ctrl.schema.type && ($ctrl.schema.type !== \'object\' && $ctrl.schema.type !== \'array\')" model=$ctrl.model schema=$ctrl.schema errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations required=$ctrl.required submitted=$ctrl.submitted on-change="$ctrl.onModelChange(model, schema)"> </basic-type-schema> <object-schema ng-if="$ctrl.schema.type === \'object\'" model=$ctrl.model schema=$ctrl.schema errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations submitted=$ctrl.submitted on-change="$ctrl.onModelChange(model, schema)" hide-title=$ctrl.hideTitle> </object-schema> <array-schema ng-if="$ctrl.schema.type === \'array\'" model=$ctrl.model schema=$ctrl.schema errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations submitted=$ctrl.submitted on-change="$ctrl.onModelChange(model, schema)"> </array-schema> '},function(e,t){e.exports="<fieldset> <legend ng-if=\"$ctrl.schema.title && !$ctrl.hideTitle\"> {{ $ctrl.schema.title }} </legend> <p ng-if=$ctrl.schema.description> {{ $ctrl.schema.description }} </p> <div ng-if=$ctrl.schema.help.warning class=\"alert alert-warning\"> {{ $ctrl.schema.help.warning }} </div> <div class=row> <div ng-repeat=\"(property, nestedSchema) in $ctrl.schema.properties\" class=col-xs-12 ng-hide=nestedSchema.hidden ng-class=\"{\n        'col-sm-4': !$ctrl.narrow  && nestedSchema.width === 'sm',\n        'col-sm-6': !$ctrl.narrow  && nestedSchema.width === 'md',\n        'col-sm-12': $ctrl.narrow || nestedSchema.width === 'lg'\n      }\"> <generic-schema schema=nestedSchema model=$ctrl.model[property] errors=$ctrl.errors[property] locale=$ctrl.locale translations=$ctrl.translations required=$ctrl.isRequired(property) submitted=$ctrl.submitted on-change=\"$ctrl.onModelChange(property, model, schema)\"> </generic-schema> </div> </div> </fieldset> "},function(e,t){e.exports='<label class=control-label ng-if=$ctrl.schema.title> {{ $ctrl.schema.title }} </label> <div class="form-group m-b-5"> <div class=radio ng-repeat="(index, schema) in $ctrl.schema.oneOf" ng-class="{\'radio-lg\': schema.description}"> <label> <tw-radio ng-model=$ctrl.activeIndex ng-value="(index + 1)" ng-change="$ctrl.onSchemaChange(schema, index)"></tw-radio> {{ schema.title }} <p ng-if=schema.description class="secondary m-b-0"> {{ schema.description }} </p> </label> </div> </div> <div ng-repeat="(index, schema) in $ctrl.schema.oneOf"> <generic-schema ng-if="$ctrl.activeIndex === (index + 1)" schema=schema model=$ctrl.models[index] errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations submitted=$ctrl.submitted on-change="$ctrl.onModelChange(model, schema, index)" hide-title=true> </generic-schema> </div> '},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),a=n(1),l=n(7);function s(e,t){return!(!Object(a.isObject)(e)||"object"!==t.type||!Object(a.isObject)(t.properties))&&Object.keys(t.properties).map(function(n){return function(e,t,n){if(void 0===e)return!n;return o(e,t)}(e[n],t.properties[n],t.required&&t.required.indexOf(n)>=0)}).every(function(e){return e})}function o(e,t){if(t.oneOf)return function(e,t){return!!Object(a.isArray)(t.oneOf)&&t.oneOf.some(function(t){return o(e,t)})}(e,t);if(t.allOf)return function(e,t){return!!Object(a.isArray)(t.allOf)&&t.allOf.map(function(t){return o(e,t)}).every(function(e){return e})}(e,t);if(t.enum)return function(e,t){return!Object(l.d)(e,t).length}(e,t);if(t.const)return function(e,t){return!Object(l.c)(e,t).length}(e,t);switch(t.type){case"string":return function(e,t){return!Object(l.g)(e,t).length}(e,t);case"number":return function(e,t){return!Object(l.f)(e,t).length}(e,t);case"integer":return function(e,t){return!Object(l.e)(e,t).length}(e,t);case"boolean":return function(e,t){return!Object(l.b)(e,t).length}(e,t);case"array":return function(e,t){return!("array"!==t.type||!Object(a.isObject)(t.items))&&(!Object(l.a)(e,t).length&&e.map(function(e){return o(e,t.items)}).every(function(e){return e}))}(e,t);case"object":return s(e,t);default:return!1}}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var u=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,(n=[{key:"onModelChange",value:function(e,t){if(this.onChange){var n=o(e,this.schema);this.onChange({model:e,isValid:n,schema:t})}}}])&&c(t.prototype,n),r&&c(t,r),e}(),d=n(89),h={controller:u,template:n.n(d).a,bindings:{schema:"<",model:"<",errors:"<",locale:"<",translations:"<",submitted:"<",onChange:"&"}},p=i.a.module("tw.json-schema.form",[]).component("jsonSchemaForm",h).name,f=n(10);function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var m=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,(n=[{key:"$onChanges",value:function(e){(e.schema||e.model)&&(this.models=function(e,t){var n=[];e&&t&&t.forEach(function(t){n.push(Object(f.a)(e,t)||{})});return n}(this.model,this.schema?this.schema.allOf:[]))}},{key:"onModelChange",value:function(e,t,n){var r,i=this.schema.allOf[e];this.models[e]=Object(f.a)(t,i),this.onChange&&this.onChange({model:(r=this.models,r.reduce(function(e,t){return angular.extend(t,e)},{})),schema:n})}}])&&g(t.prototype,n),r&&g(t,r),e}(),v=n(90),b={controller:m,template:n.n(v).a,bindings:{schema:"<",model:"<",errors:"<",locale:"<",translations:"<",submitted:"<",onChange:"&"}},$=i.a.module("tw.json-schema.all-of",[]).component("allOfSchema",b).name;function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var w=["string","number","integer","boolean"];function C(e){return e&&e.items&&e.items.type}function x(e){return"object"===e?{}:"array"===e?[]:null}var k=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,(n=[{key:"$onInit",value:function(){if(!Array.isArray(this.model)){var e=x(C(this.schema));this.model=[],e&&this.model.push(e)}}},{key:"onModelChange",value:function(e,t,n){this.model[e]=t,this.onChange&&this.onChange({model:this.model,schema:n})}},{key:"remove",value:function(e){this.model[e]&&this.model.splice(e,1)}},{key:"add",value:function(){var e=x(C(this.schema));e&&this.model.push(e)}},{key:"isSimpleType",value:function(e){return w.indexOf(e)>=0}}])&&y(t.prototype,n),r&&y(t,r),e}(),M=n(91),O={controller:k,template:n.n(M).a,bindings:{schema:"<",model:"<",errors:"<",locale:"<",translations:"<",submitted:"<",onChange:"&"}},S=i.a.module("tw.json-schema.array",[]).component("arraySchema",O).name;function j(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var D=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,(n=[{key:"$onInit",value:function(){this.key=Math.floor(1e8*Math.random())}},{key:"$onChanges",value:function(e){e.model&&this.handleNewModelFromParent(e.model.currentValue)}},{key:"handleNewModelFromParent",value:function(e){if(Object(a.isUndefined)(e)||Object(a.isNull)(e)){if(!Object(a.isUndefined)(this.internalModel)&&!Object(a.isNull)(this.internalModel))return;this.schema.default?this.onModelChange(this.schema.default):(this.lastModel=null,this.internalModel=null)}else this.lastModel=e,this.internalModel=e}},{key:"onModelChange",value:function(e){var t=Object(f.a)(e,this.schema);this.validationKeys=Object(l.h)(t,this.schema,this.required);var n=this.validationKeys.length?null:t;Object(a.isNull)(n)||(this.internalModel=e),this.onChange&&n!==this.lastModel&&this.onChange({model:n,schema:this.schema}),this.lastModel=n}},{key:"getValidationMessages",value:function(){return this.schema&&this.schema.validationMessages||this.translations&&this.translations.validation||null}}])&&j(t.prototype,n),r&&j(t,r),e}(),T=n(92),A={controller:D,template:n.n(T).a,bindings:{schema:"<",model:"<",errors:"<",locale:"<",translations:"<",required:"<",submitted:"<",onChange:"&"}},E=n(20),F=i.a.module("tw.json-schema.basic-type",[E.a]).component("basicTypeSchema",A).name;function L(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var P=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,(n=[{key:"$onChanges",value:function(e){if(e.schema){var t=e.schema.currentValue;t&&t.enum&&1===t.enum.length&&this.onModelChange(t.enum[0],t)}}},{key:"onModelChange",value:function(e,t){this.onChange&&this.onChange({model:e,schema:t})}}])&&L(t.prototype,n),r&&L(t,r),e}(),V=n(93),q={controller:P,template:n.n(V).a,bindings:{schema:"<",model:"<",errors:"<",locale:"<",translations:"<",required:"<",submitted:"<",hideTitle:"<",onChange:"&"}};function U(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var I=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,(n=[{key:"$onInit",value:function(){this.outputModel=angular.extend({},this.model||{})}},{key:"onModelChange",value:function(e,t,n){this.outputModel[e]=t,this.onChange&&this.onChange({model:this.outputModel,schema:n})}},{key:"isRequired",value:function(e){return this.schema.required&&this.schema.required.includes(e)}}])&&U(t.prototype,n),r&&U(t,r),e}(),N=n(94),R={controller:I,template:n.n(N).a,bindings:{schema:"<",model:"<",errors:"<",locale:"<",translations:"<",hideTitle:"<",submitted:"<",onChange:"&"}},B=i.a.module("tw.json-schema.object",[]).component("objectSchema",R).name;function z(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var Y=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.options=[],this.activeIndex=1}var t,n,r;return t=e,(n=[{key:"$onChanges",value:function(e){e.schema&&(this.activeIndex=function(e,t){if(!e||!e.oneOf)return 1;for(var n=0;n<e.oneOf.length;n++)if(o(t,e.oneOf[n]))return n+1;return 1}(this.schema,this.model),this.prefillModels())}},{key:"prefillModels",value:function(){var e;this.schema&&this.schema.oneOf&&(this.models=(e=this.model,this.schema.oneOf.map(function(t){return Object(f.a)(e,t)})))}},{key:"onSchemaChange",value:function(e,t){this.models[t]=Object(f.a)(this.models[t],e),this.onModelChange(this.models[t],e,t)}},{key:"onModelChange",value:function(e,t,n){this.models[n]=e,this.onChange&&this.onChange({model:e,schema:t})}}])&&z(t.prototype,n),r&&z(t,r),e}(),W=n(95),H={controller:Y,template:n.n(W).a,bindings:{schema:"<",model:"<",errors:"<",locale:"<",translations:"<",submitted:"<",onChange:"&"}},G=n(12),K=i.a.module("tw.json-schema.one-of",[G.a]).component("oneOfSchema",H).name,_=i.a.module("tw.json-schema.generic",[F,B,S,$,K]).component("genericSchema",q).name,J=n(3);var X=i.a.module("tw.json-schema.validation",[]).service("SchemaValidation",function(){this.getValidModelParts=f.a,this.getValidationFailures=l.h,this.isValidSchema=o,this.ruleValidators=J,this.typeValidators=a}).name;t.default=i.a.module("tw.json-schema",[p,$,S,F,_,B,K,X]).name}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiYW5ndWxhclwiIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS92YWxpZGF0aW9uL3R5cGUtdmFsaWRhdG9ycy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmljZXMvZG9tL2RvbS5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9zZXJ2aWNlcy9kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL3ZhbGlkYXRpb24vcnVsZS12YWxpZGF0b3JzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9mb2N1c2FibGUvZm9jdXNhYmxlLmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2ZvY3VzYWJsZS9mb2N1c2FibGUuZGlyZWN0aXZlLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9mb2N1c2FibGUvZm9ybS1jb250cm9sLmRpcmVjdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvZm9jdXNhYmxlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY3JlZW5mdWxsL2Rpc3Qvc2NyZWVuZnVsbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2VydmljZXMvZGF0ZS9kYXRlLnNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZpY2VzL2RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL3ZhbGlkYXRpb24vdmFsaWRhdGlvbi1mYWlsdXJlcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvc2VsZWN0L3NlbGVjdC5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9zZWxlY3Qvc2VsZWN0LmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvc2VsZWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9zZXJ2aWNlcy9yZXF1aXJlbWVudHMvcmVxdWlyZW1lbnRzLnNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZpY2VzL3JlcXVpcmVtZW50cy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvdmFsaWRhdGlvbi92YWxpZC1tb2RlbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbG9hZGluZy9wcm9jZXNzL3Byb2Nlc3MuY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbG9hZGluZy9wcm9jZXNzL3Byb2Nlc3MuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9sb2FkaW5nL3Byb2Nlc3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3JhZGlvL3JhZGlvLmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3JhZGlvL3JhZGlvLmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvcmFkaW8vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC91cGxvYWQuY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL3VwbG9hZC5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9jYXB0dXJlLWNhcmQvY2FwdHVyZS1jYXJkLmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9jYXB0dXJlLWNhcmQvY2FwdHVyZS1jYXJkLmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL2NhcHR1cmUtY2FyZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL2Ryb3BwaW5nLWNhcmQvZHJvcHBpbmctY2FyZC5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9kcm9wcGluZy1jYXJkL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvcHJvY2Vzc2luZy1jYXJkL3Byb2Nlc3NpbmctY2FyZC5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvcHJvY2Vzc2luZy1jYXJkL3Byb2Nlc3NpbmcuYmluZGluZ3MuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9wcm9jZXNzaW5nLWNhcmQvcHJvY2Vzc2luZy1jYXJkLmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL3Byb2Nlc3NpbmctY2FyZC9wcm9jZXNzaW5nLW1pbmkuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvc2VydmljZXMvYXN5bmMtZmlsZS1yZWFkZXIuc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL3NlcnZpY2VzL2FzeW5jLWZpbGUtc2F2ZXIuc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL3NlcnZpY2VzL2ZpbGUtdmFsaWRhdGlvbi5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvcHJvY2Vzc2luZy1jYXJkL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvc3VjY2Vzcy1jYXJkL3N1Y2Nlc3MtY2FyZC5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvc3VjY2Vzcy1jYXJkL3N1Y2Nlc3MtY2FyZC5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9zdWNjZXNzLWNhcmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9jYW1lcmEtY2FwdHVyZS9jYW1lcmEtY2FwdHVyZS5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvY2FtZXJhLWNhcHR1cmUvY2FtZXJhLWNhcHR1cmUuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvY2FtZXJhLWNhcHR1cmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC91cGxvYWQtYnV0dG9uL3VwbG9hZC1idXR0b24uY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL3VwbG9hZC1idXR0b24vdXBsb2FkLWJ1dHRvbi5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC91cGxvYWQtYnV0dG9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvY2FtZXJhLWJ1dHRvbi9jYW1lcmEtYnV0dG9uLmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9jYW1lcmEtYnV0dG9uL2NhbWVyYS1idXR0b24uY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvY2FtZXJhLWJ1dHRvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL2ZpbGUtaW5wdXQuZGlyZWN0aXZlLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvbXVsdGktdXBsb2FkL211bHRpLXVwbG9hZC5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvbXVsdGktdXBsb2FkL211bHRpLXVwbG9hZC5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2RyYWctYW5kLWRyb3AvZHJvcC5kaXJlY3RpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2RyYWctYW5kLWRyb3AvZHJhZy1lbnRlci5kaXJlY3RpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2RyYWctYW5kLWRyb3AvZHJhZy1sZWF2ZS5kaXJlY3RpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2RyYWctYW5kLWRyb3AvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9tdWx0aS11cGxvYWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvY2hlY2tib3gvY2hlY2tib3guY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvY2hlY2tib3gvY2hlY2tib3guY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9jaGVja2JveC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvY2hlY2tib3gtZ3JvdXAvY2hlY2tib3gtZ3JvdXAuY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvY2hlY2tib3gtZ3JvdXAvY2hlY2tib3gtZ3JvdXAuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9jaGVja2JveC1ncm91cC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvZGF0ZS9kYXRlLmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2RhdGUvZGF0ZS5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2RhdGUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1hdHRpbmcvZGF0ZS1mb3JtYXQvZGF0ZS1mb3JtYXQuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3JtYXR0aW5nL2RhdGUtZm9ybWF0L2RhdGUtZm9ybWF0LmZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybWF0dGluZy9kYXRlLWZvcm1hdC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvZm9ybS1jb250cm9sL2Zvcm0tY29udHJvbC5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9mb3JtLWNvbnRyb2wvZm9ybS1jb250cm9sLmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvZm9ybS1jb250cm9sL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9maWVsZC9maWVsZC5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9maWVsZC9maWVsZC5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2ZpZWxkL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy92YWxpZGF0aW9uL2NvbnRyb2wtdmFsaWRhdGlvbi9jb250cm9sLXZhbGlkYXRpb24uY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmFsaWRhdGlvbi9jb250cm9sLXZhbGlkYXRpb24vY29udHJvbC12YWxpZGF0aW9uLmRpcmVjdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdmFsaWRhdGlvbi9jb250cm9sLXZhbGlkYXRpb24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NlcnZpY2VzL2FzeW5jVGFza3NDb25maWcvYXN5bmNUYXNrc0NvbmZpZy5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9zZXJ2aWNlcy9hc3luY1Rhc2tzQ29uZmlnL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2NoZWNrYm94L2NoZWNrYm94Lmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL2NoZWNrYm94LWdyb3VwL2NoZWNrYm94LWdyb3VwLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3JhZGlvL3JhZGlvLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3NlbGVjdC9zZWxlY3QuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL3VwbG9hZC5odG1sIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvY2FwdHVyZS1jYXJkL2NhcHR1cmUtY2FyZC5odG1sIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvZHJvcHBpbmctY2FyZC9kcm9wcGluZy1jYXJkLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9wcm9jZXNzaW5nLWNhcmQvcHJvY2Vzc2luZy1jYXJkLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9wcm9jZXNzaW5nLWNhcmQvcHJvY2Vzc2luZy1taW5pLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xvYWRpbmcvcHJvY2Vzcy9wcm9jZXNzLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9zdWNjZXNzLWNhcmQvc3VjY2Vzcy1jYXJkLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9jYW1lcmEtY2FwdHVyZS9jYW1lcmEtY2FwdHVyZS5odG1sIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvdXBsb2FkLWJ1dHRvbi91cGxvYWQtYnV0dG9uLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9jYW1lcmEtYnV0dG9uL2NhbWVyYS1idXR0b24uaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL211bHRpLXVwbG9hZC9tdWx0aS11cGxvYWQuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvZGF0ZS9kYXRlLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1hdHRpbmcvZGF0ZS1mb3JtYXQvZGF0ZS1mb3JtYXQuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvZm9ybS1jb250cm9sL2Zvcm0tY29udHJvbC5odG1sIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy9maWVsZC9maWVsZC5odG1sIiwid2VicGFjazovLy8uL3NyYy9mb3Jtcy91cGxvYWQvdXBsb2FkLmxlc3M/M2I4ZCIsIndlYnBhY2s6Ly8vLi9zcmMvZm9ybXMvdXBsb2FkL3VwbG9hZC5sZXNzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL3VybHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9jYW1lcmEtY2FwdHVyZS9jYW1lcmEtY2FwdHVyZS5sZXNzPzlhMzQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Zvcm1zL3VwbG9hZC9jYW1lcmEtY2FwdHVyZS9jYW1lcmEtY2FwdHVyZS5sZXNzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9mb3JtL3RlbXBsYXRlLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL2FsbC1vZi1zY2hlbWEvdGVtcGxhdGUuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvYXJyYXktc2NoZW1hL3RlbXBsYXRlLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL2Jhc2ljLXR5cGUtc2NoZW1hL3RlbXBsYXRlLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL2dlbmVyaWMtc2NoZW1hL3RlbXBsYXRlLmh0bWwiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL29iamVjdC1zY2hlbWEvdGVtcGxhdGUuaHRtbCIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvb25lLW9mLXNjaGVtYS90ZW1wbGF0ZS5odG1sIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS92YWxpZGF0aW9uL3NjaGVtYS12YWxpZGF0b3JzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9mb3JtL2NvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL2Zvcm0vY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9mb3JtL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9hbGwtb2Ytc2NoZW1hL2NvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL2FsbC1vZi1zY2hlbWEvY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9hbGwtb2Ytc2NoZW1hL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9hcnJheS1zY2hlbWEvY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvYXJyYXktc2NoZW1hL2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvYXJyYXktc2NoZW1hL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9iYXNpYy10eXBlLXNjaGVtYS9jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9iYXNpYy10eXBlLXNjaGVtYS9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL2Jhc2ljLXR5cGUtc2NoZW1hL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9nZW5lcmljLXNjaGVtYS9jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9nZW5lcmljLXNjaGVtYS9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL29iamVjdC1zY2hlbWEvY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvb2JqZWN0LXNjaGVtYS9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL29iamVjdC1zY2hlbWEvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL29uZS1vZi1zY2hlbWEvY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvanNvbi1zY2hlbWEvb25lLW9mLXNjaGVtYS9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL29uZS1vZi1zY2hlbWEvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzb24tc2NoZW1hL2dlbmVyaWMtc2NoZW1hL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS92YWxpZGF0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9qc29uLXNjaGVtYS9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImFuZ3VsYXIiLCJpc1N0cmluZyIsImlzTnVtYmVyIiwiTnVtYmVyIiwiaXNOYU4iLCJpc0ludGVnZXIiLCJNYXRoIiwiZmxvb3IiLCJpc0Jvb2xlYW4iLCJpc09iamVjdCIsImlzTnVsbCIsImlzVW5kZWZpbmVkIiwiY29uc3RydWN0b3IiLCJpc0FycmF5IiwiQXJyYXkiLCJEb21TZXJ2aWNlIiwidGhpcyIsImdldENsb3Nlc3RQYXJlbnRCeVRhZ05hbWUiLCJlbGVtZW50IiwidGFnTmFtZSIsInRhZ05hbWVVcHBlciIsInRvVXBwZXJDYXNlIiwicGFyZW50IiwicGFyZW50Tm9kZSIsImdldENsb3Nlc3RQYXJlbnRCeUNsYXNzTmFtZSIsImNsYXNzTmFtZSIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwiZ2V0UHJldmlvdXNTaWJsaW5nV2l0aENsYXNzTmFtZSIsInNpYmxpbmciLCJwcmV2aW91c0VsZW1lbnRTaWJsaW5nIiwiZ2V0TmV4dFNpYmxpbmdXaXRoQ2xhc3NOYW1lIiwibmV4dEVsZW1lbnRTaWJsaW5nIiwic2VydmljZSIsImlzVmFsaWRSZXF1aXJlZCIsImlzUmVxdWlyZWQiLCJpc1ZhbGlkTWluTGVuZ3RoIiwibWluTGVuZ3RoIiwibGVuZ3RoIiwiaXNWYWxpZE1heExlbmd0aCIsIm1heExlbmd0aCIsImlzVmFsaWRQYXR0ZXJuIiwicGF0dGVybiIsInJlZ2V4IiwiUmVnRXhwIiwidGVzdCIsImVycm9yIiwiaXNWYWxpZE1heGltdW0iLCJtYXhpbXVtIiwiaXNWYWxpZE1pbmltdW0iLCJtaW5pbXVtIiwiaXNWYWxpZE1pbkl0ZW1zIiwibWluSXRlbXMiLCJpc1ZhbGlkTWF4SXRlbXMiLCJtYXhJdGVtcyIsIkZvY3VzYWJsZUNvbnRyb2xsZXIiLCIkZWxlbWVudCIsIlR3RG9tU2VydmljZSIsImZvcm1Hcm91cCIsImFkZEV2ZW50TGlzdGVuZXIiLCJhZGQiLCJyZW1vdmUiLCIkaW5qZWN0IiwiRm9jdXNhYmxlIiwicmVzdHJpY3QiLCJjb250cm9sbGVyIiwiRm9ybUNvbnRyb2xGb2N1cyIsImRpcmVjdGl2ZSIsImRvY3VtZW50Iiwid2luZG93IiwiaXNDb21tb25qcyIsImZuIiwidmFsIiwiZm5NYXAiLCJyZXQiLCJldmVudE5hbWVNYXAiLCJjaGFuZ2UiLCJmdWxsc2NyZWVuY2hhbmdlIiwiZnVsbHNjcmVlbmVycm9yIiwic2NyZWVuZnVsbCIsInJlcXVlc3QiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm9uRnVsbFNjcmVlbkVudGVyZWQiLCJvZmYiLCJvbiIsInJldHVyblByb21pc2UiLCJkb2N1bWVudEVsZW1lbnQiLCJyZXF1ZXN0RnVsbHNjcmVlbiIsInRoZW4iLCJjYXRjaCIsImV4aXQiLCJpc0Z1bGxzY3JlZW4iLCJvbkZ1bGxTY3JlZW5FeGl0IiwiZXhpdEZ1bGxzY3JlZW4iLCJ0b2dnbGUiLCJvbmNoYW5nZSIsImNhbGxiYWNrIiwib25lcnJvciIsImV2ZW50IiwiZXZlbnROYW1lIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInJhdyIsImRlZmluZVByb3BlcnRpZXMiLCJCb29sZWFuIiwiZnVsbHNjcmVlbkVsZW1lbnQiLCJpc0VuYWJsZWQiLCJmdWxsc2NyZWVuRW5hYmxlZCIsIkRhdGVTZXJ2aWNlIiwiZ2V0RGVmYXVsdERheU5hbWUiLCJkYXlPZldlZWsiLCJsb2NhbGUiLCJmb3JtYXQiLCJkZWZhdWx0RGF5TmFtZSIsImxhbmd1YWdlIiwiZ2V0TGFuZ3VhZ2VGcm9tTG9jYWxlIiwiREVGQVVMVF9EQVlfTkFNRVNfQllfTEFOR1VBR0UiLCJzdWJzdHIiLCJnZXREZWZhdWx0TW9udGhOYW1lIiwibW9udGgiLCJERUZBVUxUX01PTlRIX05BTUVTX0JZX0xBTkdVQUdFIiwiZ2V0RGF0ZU5hbWUiLCJkYXlPZk1vbnRoIiwibGFuZyIsInN1ZmZpeCIsImdldFN1ZmZpeCIsIkRBWV9TVUZGSVhFU19CWV9MQU5HVUFHRSIsImdldFllYXJOYW1lIiwieWVhciIsIllFQVJfU1VGRklYRVNfQllfTEFOR1VBR0UiLCJnZXRMb2NhbGlzZWREYXRlTmFtZSIsImRhdGUiLCJmb3JtYXR0aW5nT2JqZWN0IiwidG9Mb2NhbGVEYXRlU3RyaW5nIiwiaXNMb2NhbGVUcmFuc2xhdGlvblJlcXVpcmVzU3RyaXBwaW5nIiwicmVwbGFjZSIsInN1YnN0cmluZyIsImdldFZhbGlkRGF0ZUZvcm1hdCIsImluZGV4T2YiLCJnZXRWYWxpZExvY2FsZSIsIkludGwiLCJEYXRlVGltZUZvcm1hdCIsInN1cHBvcnRlZExvY2FsZXNPZiIsImlzSW50bFN1cHBvcnRlZEZvckxvY2FsZSIsImdldERlbGltaXRlciIsInVuZGVmaW5lZCIsIkRFTElNSVRFUlNfQllfTEFOR1VBR0UiLCJzdWZmaXhlcyIsImV4YWN0TWF0Y2giLCJlbmRzV2l0aCIsImdldExvY2FsZURhdGUiLCJEYXRlIiwiZ2V0RGF0ZSIsImdldExvY2FsZU1vbnRoIiwiZ2V0TW9udGgiLCJnZXRMb2NhbGVGdWxsWWVhciIsImdldEZ1bGxZZWFyIiwiZ2V0TG9jYWxlVG9kYXkiLCJub3ciLCJnZXRVVENEYXRlRnJvbVBhcnRzIiwiZ2V0VVRDRGF0ZSIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENUb2RheSIsImdldExhc3REYXlPZk1vbnRoIiwiZGF5IiwiaG91cnMiLCJtaW51dGVzIiwic2Vjb25kcyIsInNldFVUQ0Z1bGxZZWFyIiwic2V0VVRDSG91cnMiLCJzZXRVVENNaW51dGVzIiwic2V0VVRDU2Vjb25kcyIsInNldFVUQ01pbGxpc2Vjb25kcyIsImdldExvY2FsZURhdGVGcm9tUGFydHMiLCJzZXRGdWxsWWVhciIsInNldEhvdXJzIiwic2V0TWludXRlcyIsInNldFNlY29uZHMiLCJzZXRNaWxsaXNlY29uZHMiLCJnZXREYXRlUGFydHNGcm9tSXNvIiwiaXNvRGF0ZSIsImhvdXJzT2Zmc2V0IiwibWludXRlc09mZnNldCIsInBhcnNlSW50Iiwib2Zmc2V0IiwibWF0Y2giLCJpc0lzb1N0cmluZ1ZhbGlkIiwiZ2V0VVRDRGF0ZUZyb21Jc28iLCJnZXREYXlOYW1lc0ZvckxvY2FsZSIsImRheXMiLCJ2YWxpZEZvcm1hdCIsInB1c2giLCJnZXREYXlOYW1lRm9yTG9jYWxlIiwidmFsaWRMb2NhbGUiLCJ3ZWVrZGF5IiwiZ2V0TW9udGhOYW1lc0ZvckxvY2FsZSIsIm1vbnRocyIsImdldE1vbnRoTmFtZUZvckxvY2FsZSIsImRlZmF1bHRNb250aE5hbWUiLCJzbGljZSIsImdldFdlZWtkYXkiLCJnZXRVVENEYXkiLCJpc01vbnRoQmVmb3JlRGF5IiwiaXNZZWFyQmVmb3JlTW9udGgiLCJhZGRZZWFycyIsInllYXJzIiwiYWRkVG9EYXRlIiwiYWRkTW9udGhzIiwiYWRkRGF5cyIsImdldExvY2FsZVRpbWVTdHJpbmciLCJnZXRUaW1lU3RyaW5nIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImFtcG0iLCJnZXRZZWFyQW5kTW9udGhQcmVzZW50YXRpb24iLCJ5ZWFyTmFtZSIsIm1vbnRoTmFtZSIsImRlbGltaXRlciIsImpvaW4iLCJnZXRZZWFyTW9udGhEYXRlUHJlc2VudGF0aW9uIiwiZGF0ZU5hbWUiLCJkYXRlU3RyaW5nIiwiZ2V0TG9jYWxlTm93IiwiZ2V0VVRDTm93IiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsImdldExvY2FsZURhdGVTdHJpbmciLCJnZXREYXRlU3RyaW5nIiwiZ2V0RGF5IiwiZ2V0VVRDRGF0ZVN0cmluZyIsImN1cnJlbnRZZWFyIiwiaGFzVGltZSIsImFicyIsImhhc0RhdGUiLCJoYXNXZWVrZGF5IiwiaGFzTW9udGgiLCJ3ZWVrZGF5TmFtZSIsInRpbWVOYW1lIiwiY29tYmluZURhdGVQYXJ0cyIsImRheU5hbWUiLCJ0cmltIiwiZW4iLCJqYSIsIjExIiwiMTIiLCIxMyIsIjEiLCIyIiwiMyIsImRlZmF1bHQiLCJkZSIsImZpIiwiZ2V0VmFsaWRhdGlvbkZhaWx1cmVzIiwic2NoZW1hIiwiZ2V0RW51bVZhbGlkYXRpb25GYWlsdXJlcyIsImdldENvbnN0VmFsaWRhdGlvbkZhaWx1cmVzIiwidHlwZSIsImdldFN0cmluZ1ZhbGlkYXRpb25GYWlsdXJlcyIsImdldE51bWJlclZhbGlkYXRpb25GYWlsdXJlcyIsImdldEludGVnZXJWYWxpZGF0aW9uRmFpbHVyZXMiLCJnZXRCb29sZWFuVmFsaWRhdGlvbkZhaWx1cmVzIiwiZ2V0QXJyYXlWYWxpZGF0aW9uRmFpbHVyZXMiLCJyZXF1aXJlZCIsIm1hcCIsInByb3AiLCJyZWR1Y2UiLCJwcm9wSW5Nb2RlbCIsInZhbGlkU29GYXIiLCJnZXRPYmplY3RWYWxpZGF0aW9uRmFpbHVyZXMiLCJmYWlsdXJlcyIsIlNlbGVjdENvbnRyb2xsZXIiLCIkdHJhbnNjbHVkZSIsIiR0aW1lb3V0IiwiJGF0dHJzIiwiJHNjb3BlIiwiJG5nTW9kZWwiLCJkb20iLCIkd2F0Y2giLCJuZXdWYWx1ZSIsIm9sZFZhbHVlIiwib25Nb2RlbENoYW5nZSIsIiRjdHJsIiwiYnV0dG9uIiwiYnV0dG9uR3JvdXAiLCJkcm9wZG93biIsIm9uRm9jdXNPdXQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwic2VhcmNoIiwicHJlU2VsZWN0TW9kZWxWYWx1ZSIsInNldERlZmF1bHRJZlJlcXVpcmVkIiwib3B0aW9ucyIsImFjdGl2ZUVsZW1lbnQiLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCIkc2V0VG91Y2hlZCIsIm9wdGlvbktleXByZXNzIiwic2hvdWxkU2hvd1NlYXJjaCIsImZvY3VzIiwiZm9jdXNPbkFjdGl2ZUxpbmsiLCJ0YXJnZXQiLCJ0b0xvd2VyQ2FzZSIsImNsb25lIiwidGV4dCIsImhhc1RyYW5zY2x1ZGVkIiwiY2hlY2tGb3JUcmFuc2NsdWRlZENvbnRlbnQiLCJyZXNwb25zaXZlQ2xhc3NlcyIsIm9wdGlvbnNQYWdlU2l6ZSIsIm51bWJlck9mT3B0aW9uc1JldmVhbGVkIiwiaGFzTW9yZU9wdGlvbnNUb1JldmVhbCIsImZpbHRlclN0cmluZyIsImZpbHRlcmVkT3B0aW9ucyIsImdldEZpbHRlcmVkT3B0aW9ucyIsImNoYW5nZXMiLCJvbk9wdGlvbnNDaGFuZ2UiLCJjdXJyZW50VmFsdWUiLCJwcmV2aW91c1ZhbHVlIiwiJHNldERpcnR5Iiwib3B0aW9uIiwiZmluZE9wdGlvbkZyb21WYWx1ZSIsInNlbGVjdGVkIiwicmVzcG9uc2l2ZU9wdGlvbiIsImNsYXNzZXMiLCJzZWNvbmRhcnlDbGFzc2VzIiwiaGlkZVNlY29uZGFyeSIsInNlY29uZGFyeSIsIiRldmVudCIsImRpc2FibGVkIiwic3RvcFByb3BhZ2F0aW9uIiwic2VsZWN0T3B0aW9uIiwiZ2V0Q2hhcmFjdGVyQ29kZUZyb21LZXlwcmVzcyIsImNoYXJhY3RlciIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImdldENoYXJhY3RlckZyb21LZXlwcmVzcyIsImxldHRlciIsImZvdW5kIiwic2VhcmNoQW5kU2VsZWN0IiwiY29udGludWVTZWFyY2hBbmRTZWxlY3RNYXRjaCIsInByZXZlbnREZWZhdWx0IiwicmVzZXRPcHRpb24iLCJmaWx0ZXIiLCJmaWx0ZXJTdHJpbmdMb3dlciIsImVuY291bnRlcmVkTGFiZWxzQW5kVmFsdWVzIiwiaGVhZGVyIiwibGFiZWwiLCJpc0R1cGxpY2F0ZSIsImV4aXN0aW5nVmFsdWVzRm9yTGFiZWwiLCJoYXNFeGlzdGluZ1ZhbHVlcyIsImoiLCJlcXVhbHMiLCJsYWJlbE1hdGNoZXMiLCJub3RlTWF0Y2hlcyIsInNlY29uZGFyeU1hdGNoZXMiLCJzZWFyY2hhYmxlTWF0Y2hlcyIsImZpbHRlcklucHV0Iiwic2VsZWN0ZWRPcHRpb24iLCJmb3JFYWNoIiwiZmluZFNlbGVjdGVkIiwiY2hhcmFjdGVyQ29kZSIsIndoaWNoIiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYWN0aXZlT3B0aW9uIiwicXVlcnlTZWxlY3RvciIsImFjdGl2ZUxpbmsiLCJvcHRpb25MaW5rcyIsImtleXMiLCJkb3duIiwibW92ZURvd25PbmVPcHRpb24iLCJ1cCIsIm1vdmVVcE9uZU9wdGlvbiIsImNsaWNrIiwibGluayIsImdldEF0dHJpYnV0ZSIsInByZXZpb3VzT3B0aW9uIiwicHJldmlvdXNPcHRpb25MaW5rIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzZWxlY3RPcHRpb25Vc2luZ0xpbmsiLCJuZXh0T3B0aW9uIiwibmV4dE9wdGlvbkxpbmsiLCJ0cmFuc2NsdWRlZE9wdGlvbiIsIm5vdGUiLCJzZWFyY2hhYmxlIiwiaXNWYWxpZE1vZGVsIiwibmdNb2RlbCIsIm9wdGlvbk1hdGNoIiwibmdSZXF1aXJlZCIsInBsYWNlaG9sZGVyIiwibmdDaGFuZ2UiLCIkc2V0Vmlld1ZhbHVlIiwiJGNvbW1pdFZpZXdWYWx1ZSIsInRlcm0iLCJzZWFyY2hUZXJtIiwiY29udGFpbnNTZWFyY2giLCJicmVha3BvaW50cyIsInZhbGlkQnJlYWtwb2ludHMiLCJ4cyIsInNtIiwibWQiLCJsZyIsInhsIiwic3BsaXQiLCJicmVha3BvaW50IiwicmV0dXJuIiwiU2VsZWN0IiwidGVtcGxhdGUiLCJyZXF1aXJlIiwidHJhbnNjbHVkZSIsImJpbmRpbmdzIiwibmdEaXNhYmxlZCIsInNpemUiLCJkcm9wZG93blJpZ2h0IiwiZHJvcGRvd25VcCIsImRyb3Bkb3duV2lkdGgiLCJpbnZlcnNlIiwiaGlkZU5vdGUiLCJoaWRlSWNvbiIsImhpZGVDdXJyZW5jeSIsImhpZGVDaXJjbGUiLCJoaWRlTGFiZWwiLCJjb21wb25lbnQiLCJSZXF1aXJlbWVudHNTZXJ2aWNlIiwiJGh0dHAiLCJmbGF0dGVuRmllbGRzV2l0aEdyb3VwcyIsImZpZWxkcyIsImZsYXR0ZW5lZEZpZWxkcyIsImZpZWxkIiwiY29uY2F0IiwiZmxhdHRlbkZpZWxkV2l0aEdyb3VwIiwiZ3JvdXAiLCJzdWJGaWVsZHMiLCJ3aWR0aCIsInRvb2x0aXAiLCJoZWxwVGV4dCIsImluZm8iLCJuZXN0ZWRGaWVsZCIsInByZXBMZWdhY3lWYWx1ZSIsInRpdGxlIiwiY29kZSIsInByZXBSZXF1aXJlbWVudHMiLCJhbHRlcm5hdGl2ZXMiLCJwcmVwcGVkQWx0ZXJuYXRpdmVzIiwiY29weU9mIiwiYWx0ZXJuYXRpdmUiLCJwcmVwYXJlZCIsInByZXBMZWdhY3lBbHRlcm5hdGl2ZXMiLCJwcm9wZXJ0aWVzIiwicHJlcEZpZWxkcyIsInR5cGVzIiwiZW51bSIsImhpZGRlbiIsIm1vZGVsIiwidmFsaWRhdGlvbk1lc3NhZ2VzIiwicHJlcGFyZWRGaWVsZHMiLCJmaWVsZE1hcCIsIkVycm9yIiwibmVzdGVkRmllbGRzIiwicGF0aFNlY3Rpb25zIiwibmVzdGVkS2V5IiwidHJhbnNmb3JtTmVzdGVkS2V5c1RvTmVzdGVkU3BlY3MiLCJ0cmFuc2Zvcm1GaWVsZEFycmF5VG9NYXAiLCJwcmVwRmllbGQiLCJwcmVwYXJlZEZpZWxkIiwicHJlcExlZ2FjeVByb3BzIiwicHJlcFR5cGUiLCJwcmVwUGF0dGVybiIsInByZXBWYWx1ZXNBc3luYyIsInByZXBWYWxpZGF0aW9uTWVzc2FnZXMiLCJwcmVwSGVscCIsInByZXBDYW1lcmFHdWlkZWxpbmVzIiwiY29udHJvbCIsInNlbGVjdFR5cGUiLCJnZXRDb250cm9sRm9yQXJyYXkiLCJnZXRDb250cm9sVHlwZSIsIml0ZW1zIiwidGFiVHlwZSIsInRhYk5hbWVXaXRoU3BhY2VzIiwiY2hhckF0IiwiZ2V0TmFtZUZyb21UeXBlIiwiZGVzY3JpcHRpb24iLCJmaWVsZEdyb3VwcyIsInZhbGlkYXRpb25SZWdleHAiLCJtaW4iLCJtYXgiLCJleGFtcGxlIiwidmFsdWVzQWxsb3dlZCIsInZhbHVlcyIsInByZXBMZWdhY3lWYWx1ZXMiLCJoZWxwT3B0aW9ucyIsImhlbHAiLCJleCIsImNvbnNvbGUiLCJ3YXJuIiwidmFsdWVzQXN5bmMiLCJwb3N0RGF0YSIsInBhcmFtcyIsImdldFBhcmFtVmFsdWVzRnJvbU1vZGVsIiwiZmV0Y2hWYWx1ZXNBc3luYyIsIm1ldGhvZCIsInVybCIsImRhdGEiLCJyZXNwb25zZSIsInBhcmFtIiwicGFyYW1ldGVyTmFtZSIsIm1pbmxlbmd0aCIsIm1heGxlbmd0aCIsImhlbHBJbWFnZSIsImhlbHBMaXN0IiwidXBsb2FkUGxhY2Vob2xkZXJJbWFnZSIsIm1lc3NhZ2UiLCJpbWFnZSIsImxpc3QiLCJjYW1lcmEiLCJvdmVybGF5Iiwib3V0bGluZSIsImdldFJlcXVpcmVkRmllbGRzIiwiZ2V0U2VsZWN0aW9uVHlwZSIsImdldENvbnRyb2xGb3JTdHJpbmdGb3JtYXQiLCJvYmoiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJnZXRWYWxpZE1vZGVsUGFydHMiLCJhbGxPZiIsInZhbGlkU3Vic2V0T2ZNb2RlbCIsImNsZWFuZWRNb2RlbCIsIm5lc3RlZFNjaGVtYSIsImNsZWFuTW9kZWxXaXRoQWxsT2ZTY2hlbWEiLCJvbmVPZiIsImNvbWJpbmVkIiwiY3VycmVudCIsImRlZXBNZXJnZU9iamVjdCIsIm9iamVjdDEiLCJvYmplY3QyIiwiY2xlYW5Nb2RlbFdpdGhPbmVPZlNjaGVtYSIsImNsZWFuTW9kZWxXaXRoT2JqZWN0U2NoZW1hIiwiY2hpbGRNb2RlbCIsImNsZWFuTW9kZWxXaXRoQXJyYXlTY2hlbWEiLCJjbGVhbk1vZGVsV2l0aFN0cmluZ1NjaGVtYSIsImNsZWFuTW9kZWxXaXRoTnVtYmVyU2NoZW1hIiwiY2xlYW5Nb2RlbFdpdGhJbnRlZ2VyU2NoZW1hIiwiY2xlYW5Nb2RlbFdpdGhCb29sZWFuU2NoZW1hIiwiUHJvY2Vzc0NvbnRyb2xsZXIiLCIkaW50ZXJ2YWwiLCJpbnRlcnZhbCIsInByb2Nlc3NpbmciLCJzdGF0ZSIsIm9uU3RhdGVDaGFuZ2UiLCJvblNpemVDaGFuZ2UiLCJpc1N0b3BwZWQiLCJzdGFydFByb2Nlc3MiLCJzdG9wUHJvY2VzcyIsInJhZGl1cyIsIm5vdGlmeUNvbnN1bWVycyIsImNhbmNlbCIsIm9uU3RvcCIsIlByb2Nlc3MiLCJwcm9taXNlIiwiUmFkaW9Db250cm9sbGVyIiwiY2hlY2tlZCIsImlzQ2hlY2tlZCIsImFkZFdhdGNoZXJzIiwibmdWYWx1ZSIsInJhZGlvTGFiZWwiLCJzZXRBdHRyaWJ1dGUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJSYWRpbyIsIlVwbG9hZENvbnRyb2xsZXIiLCJGaWxlVmFsaWRhdGlvblNlcnZpY2UiLCJpc1Byb2Nlc3NpbmciLCJzb3VyY2UiLCJpc0xpdmVDYW1lcmFVcGxvYWQiLCJmaWxlIiwiaXNEb25lIiwiY2xlYXJIdG1sSW5wdXQiLCJzZXROZ01vZGVsIiwib25DYW5jZWwiLCJxdWVyeVNlbGVjdG9yQWxsIiwiaW5wdXQiLCJpc0Ryb3BwYWJsZSIsImlzRHJvcEVsaWdpYmxlIiwiZmlsZXMiLCJvbkZpbGVDYXB0dXJlIiwib25TdGFydCIsImRhdGFVcmwiLCJpZCIsImlzSW1hZ2UiLCJodHRwT3B0aW9ucyIsIm9uU3VjY2VzcyIsIm9uRmFpbHVyZSIsIlVwbG9hZCIsImljb24iLCJidXR0b25UZXh0IiwiY2FuY2VsVGV4dCIsImRyb3BwaW5nVGV4dCIsInByb2Nlc3NpbmdUZXh0Iiwic3VjY2Vzc1RleHQiLCJmYWlsdXJlVGV4dCIsIm5vQ2FtZXJhVGV4dCIsIm5vQ2FtZXJhTWVzc2FnZSIsInRvb0xhcmdlTWVzc2FnZSIsImFjY2VwdCIsIm1heFNpemUiLCJjYW1lcmFHdWlkZWxpbmVzIiwiaW5zdHJ1Y3Rpb25zIiwiQ29udHJvbGxlciIsInNob3dMaXZlQ2FwdHVyZVNjcmVlbiIsImNhbWVyYUZhaWxlZCIsInZpZXdJY29uIiwiQ2FwdHVyZUNhcmQiLCJpbnB1dEZpbGUiLCJEcm9wcGluZ0NhcmQiLCJBc3luY0ZpbGVSZWFkZXIiLCJBc3luY0ZpbGVTYXZlciIsIkFzeW5jVGFza3NDb25maWciLCJGaWxlVmFsaWRhdGlvbiIsInByb2Nlc3NpbmdTdGF0ZSIsInJlc2V0IiwiaXNTbWFsbGVyVGhhbk1heFNpemUiLCJhc3luY0ZhaWx1cmUiLCJzdGF0dXMiLCJhc3luY0ZpbGVSZWFkIiwiYXN5bmNGaWxlU2F2ZSIsImFzeW5jU3VjY2VzcyIsImV4dGVuZEh0dHBPcHRpb25zIiwic2F2ZSIsInJlYWQiLCJpc1N1Y2Nlc3MiLCJpc0Vycm9yIiwiaWRQcm9wZXJ0eSIsInJlc3BvbnNlRXJyb3JFeHRyYWN0b3IiLCJlcnJvck1lc3NhZ2UiLCJwcm9jZXNzaW5nTWVzc2FnZSIsInN1Y2Nlc3NNZXNzYWdlIiwiUHJvY2Vzc2luZ0NhcmQiLCIkcSIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJkZWZlcnJlZCIsImRlZmVyIiwib25sb2FkIiwicmVzdWx0IiwicmVhZEFzRGF0YVVSTCIsImZpZWxkTmFtZSIsImZvcm1EYXRhIiwiRm9ybURhdGEiLCJhcHBlbmQiLCIkaHR0cE9wdGlvbnMiLCIkaW5wdXRPcHRpb25zIiwiY29weSIsImhlYWRlcnMiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwiaWRlbnRpdHkiLCJwcmVwYXJlSHR0cE9wdGlvbnMiLCJwb3N0IiwiUHJvY2Vzc2luZ01pbmkiLCJTdWNjZXNzQ2FyZENvbnRyb2xsZXIiLCJmaWxlTmFtZSIsIlN1Y2Nlc3NDYXJkIiwiQ2FtZXJhQ2FwdHVyZUNvbnRyb2xsZXIiLCIkd2luZG93IiwiJGRvY3VtZW50IiwiJGxvZyIsImd1aWRlbGluZXMiLCJtZWRpYVN0cmVhbSIsIm92ZXJsYXlTcXVhcmVMZW5ndGgiLCJzZW5zb3JXaWR0aCIsIm5hdmlnYXRvciIsIm1lZGlhRGV2aWNlcyIsIm9uRXJyb3IiLCJnZXRVc2VyTWVkaWEiLCJwcmV2aW91c0JvZHlPdmVyZmxvd1N0eWxlIiwiYm9keSIsInN0eWxlIiwib3ZlcmZsb3ciLCJjYWxjdWxhdGVXaWR0aHNSZXNpemVMaXN0ZW5lciIsImNhbGN1bGF0ZVdpZHRocyIsInN0YXJ0TGl2ZUNhbUZsb3ciLCJjb250YWluZXIiLCJmaW5kQ29udGFpbmVyIiwic2NyZWVuV2lkdGgiLCJjbGllbnRXaWR0aCIsInNjcmVlbkhlaWdodCIsImNsaWVudEhlaWdodCIsInZpZXdmaW5kZXIiLCJmaW5kVmlld2ZpbmRlciIsImNhbWVyYVdpZHRoIiwidmlkZW9XaWR0aCIsImNhbWVyYUhlaWdodCIsInZpZGVvSGVpZ2h0Iiwic2NhbGVGYWN0b3IiLCJzZW5zb3JIZWlnaHQiLCJkZWJ1ZyIsInRyeUFjcXVpcmVNZWRpYVN0cmVhbSIsInN0cmVhbSIsInRyeUFjcXVpcmVGdWxsU2NyZWVuIiwiZSIsImFzc2lnblN0cmVhbVRvVmlkZW8iLCJlcnIiLCJjbG9zZVZpZGVvU3RyZWFtIiwidmlkZW8iLCJzcmNPYmplY3QiLCJwbGF5IiwiZGlyZWN0aW9uIiwiY2FtZXJhQ29uc3RyYWludHMiLCJpZGVhbCIsImhlaWdodCIsImZhY2luZ01vZGUiLCJhdWRpbyIsImdldFRyYWNrcyIsInRyYWNrIiwic3RvcCIsInZpZGVvRWxlbWVudCIsImNhbnZhc0VsZW1lbnQiLCJmaW5kU2Vuc29yIiwicGF1c2UiLCJnZXRDb250ZXh0IiwiZHJhd0ltYWdlIiwidG9CbG9iIiwiYmxvYiIsInNob3dWaWRlb1ByZXZpZXciLCIkYXBwbHlBc3luYyIsIm9uQ2FwdHVyZSIsIkNhbWVyYUNhcHR1cmUiLCJ0ZXN0TW9kZSIsIm9uQ2xpY2siLCJVcGxvYWRCdXR0b24iLCJpc1NlY29uZGFyeSIsInNtYWxsIiwiYmxvY2siLCJtdWx0aXBsZSIsIkNhbWVyYUJ1dHRvbiIsIkZpbGVJbnB1dENvbnRyb2xsZXIiLCJvblVzZXJJbnB1dCIsIkZpbGVJbnB1dERpcmVjdGl2ZSIsImNvbnRyb2xsZXJBcyIsImJpbmRUb0NvbnRyb2xsZXIiLCJzY29wZSIsImFyZUFsbEZpbGVzUHJvY2Vzc2VkIiwib2JqRGl2Iiwic2Nyb2xsVG9wIiwic2Nyb2xsSGVpZ2h0IiwiaW5kZXgiLCJmaWxlT2JqZWN0Iiwib25GaW5pc2giLCJzb21lIiwic3BsaWNlIiwiQ29tcG9uZW50IiwiYWRkTW9yZUJ1dHRvblRleHQiLCJ0d0Ryb3AiLCIkcGFyc2UiLCIkcm9vdFNjb3BlIiwiJGV4Y2VwdGlvbkhhbmRsZXIiLCJlbGVtIiwiYXR0ciIsImNvdW50ZXIiLCJkYXRhVHJhbnNmZXIiLCIkJHBoYXNlIiwiJGFwcGx5IiwidHdEcmFnRW50ZXIiLCIkZXZhbEFzeW5jIiwidHdEcmFnTGVhdmUiLCJEcm9wIiwiRHJhZ0VudGVyIiwiRHJhZ0xlYXZlIiwiRHJhZ0FuZERyb3AiLCJNdWx0aVVwbG9hZCIsIkZpbGVJbnB1dCIsIkNoZWNrYm94Q29udHJvbGxlciIsImFkZExhYmVsSGFuZGxlciIsImNoZWNrYm94Q29udGFpbmVyIiwibmdUcnVlVmFsdWUiLCJuZ0ZhbHNlVmFsdWUiLCJ2YWxpZGF0ZUNoZWNrYm94IiwiY2hlY2tib3giLCIkdG91Y2hlZCIsImNoZWNrYm94TGFiZWwiLCIkc2V0VmFsaWRpdHkiLCJDaGVja2JveCIsIkNoZWNrYm94R3JvdXBDb250cm9sbGVyIiwiJG5nTW9kZWxDb250cm9sbGVyIiwiaW50ZXJuYWxNb2RlbCIsImludGVybmFsT3B0aW9ucyIsIm9uRXh0ZXJuYWxPcHRpb25zQ2hhbmdlIiwib25FeHRlcm5hbE1vZGVsQ2hhbmdlIiwidmFsaWRhdGUiLCJuZXdPcHRpb25zIiwiY29udmVydE1vZGVsVG9PcHRpb25zIiwiY29udmVydE9wdGlvbnNUb01vZGVsIiwibmV3TW9kZWwiLCJpc1NlbGVjdGVkIiwiYWRkU2VsZWN0ZWRUb09wdGlvbiIsIkNoZWNrYm94R3JvdXAiLCJEYXRlQ29udHJvbGxlciIsIlR3RGF0ZVNlcnZpY2UiLCJpbml0aWFsaXNlZFdpdGhEYXRlIiwiYXBwbHlEYXRlTW9kZWxJZlZhbGlkT3JUaHJvd0Vycm9yIiwibW9kZWxUeXBlIiwiU1RSSU5HX1RZUEUiLCJPQkpFQ1RfVFlQRSIsImRhdGVNb2RlbFR5cGUiLCJzZXREYXRlUmVxdWlyZWQiLCJzZXREYXRlRGlzYWJsZWQiLCJzZXREYXRlTG9jYWxlIiwic2V0TW9udGhzIiwiYWRkVmFsaWRhdG9ycyIsImRheUlucHV0IiwieWVhcklucHV0IiwiYWRkRm9jdXNIYW5kbGVycyIsInllYXJUb3VjaGVkIiwiYWRkQmx1ckhhbmRsZXJzIiwidmFsaWREYXRlIiwiZXhwbG9kZURhdGVNb2RlbCIsImRhdGVNb250aHMiLCJnZXRNb250aHNCYXNlZE9uSW50bFN1cHBvcnRGb3JMb2NhbGUiLCJkYXRlUmVxdWlyZWQiLCJkYXRlRGlzYWJsZWQiLCJERUZBVUxUX0xPQ0FMRV9FTiIsIm1vbnRoQmVmb3JlRGF5IiwiZGF0ZU9iaiIsIiR2YWxpZGF0b3JzIiwibGltaXQiLCJwcmVwRGF0ZUxpbWl0Rm9yQ29tcGFyaXNvbiIsIm5nTWluIiwiZGF0ZVZhbHVlIiwicHJlcERhdGVWYWx1ZUZvckNvbXBhcmlzb24iLCJuZ01heCIsImFkanVzdExhc3REYXkiLCJtb250aE5hbWVzIiwiZXh0ZW5kTW9udGhzV2l0aElkcyIsImNvbWJpbmVEYXRlIiwiaXNvU3RyaW5nIiwidG9JU09TdHJpbmciLCJsYXN0VVRDRGF5Rm9yTW9udGhBbmRZZWFyIiwidmFsaWREYXRlT2JqZWN0IiwidG9TdHJpbmciLCJnZXRUaW1lIiwibmdMaW1pdCIsImF0dHJMaW1pdCIsIkRhdGVDb250cm9sIiwidHdMb2NhbGUiLCJEYXRlRm9ybWF0IiwiRGF0ZURpc3BsYXkiLCJEYXRlRm9ybWF0RmlsdGVyIiwiZGF0ZVN1cHBsaWVkIiwiRGF0ZUZpbHRlciIsIkZvcm1Db250cm9sQ29udHJvbGxlciIsInVwbG9hZE9wdGlvbnMiLCJvbkFzeW5jU3VjY2VzcyIsIm9uQXN5bmNGYWlsdXJlIiwiJGZvcm1hdHRlcnMiLCJtb2RlbFZhbHVlIiwiRm9ybUNvbnRyb2wiLCJzdGVwIiwidXBsb2FkQWNjZXB0IiwidXBsb2FkSWNvbiIsInVwbG9hZFRvb0xhcmdlTWVzc2FnZSIsIm5nRm9jdXMiLCJuZ0JsdXIiLCJ0ZXh0Rm9ybWF0IiwidmFsaWRhdGlvbkFzeW5jIiwicGVyc2lzdEFzeW5jIiwiZmlsZVVwbG9hZFNvdXJjZSIsImNhbWVyYU9wdGlvbnMiLCJGaWVsZENvbnRyb2xsZXIiLCJjaGFuZ2VkIiwidG91Y2hlZCIsImluaXRpYWxGaWVsZCIsImdsb2JhbFZhbGlkYXRpb25NZXNzYWdlcyIsImZpZWxkVmFsaWRhdGlvbk1lc3NhZ2VzIiwidmFsaWRhdGlvblN0cmluZ3MiLCJmb2N1c0hhbmRsZXIiLCJibHVySGFuZGxlciIsImNoYW5nZUhhbmRsZXIiLCJvcmlnaW5hbERhdGEiLCJleHRyYWN0RXJyb3JzIiwiZXJyb3JzIiwiY29udHJvbFR5cGUiLCJpc0Vycm9yU2hvd24iLCJpc1dhcm5pbmdTaG93biIsIndhcm5pbmdNZXNzYWdlIiwic3VibWl0dGVkIiwiRmllbGQiLCJDb250cm9sVmFsaWRhdGlvbiIsIlZhbGlkYXRpb25Db250cm9sbGVyIiwidmFsaWRhdGlvbiIsImNoZWNrTW9kZWxBbmRVcGRhdGUiLCIkdmFsaWQiLCIkZGlydHkiLCJUd1ZhbGlkYXRpb24iLCJiYXNlVXJsIiwiaW5wdXRPcHRpb25zIiwidXNlU291cmNlTWFwIiwiaXRlbSIsImNvbnRlbnQiLCJjc3NNYXBwaW5nIiwiYnRvYSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VNYXAiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlUm9vdCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJtZWRpYVF1ZXJ5IiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsIm1lbW8iLCJzdHlsZXNJbkRvbSIsImlzT2xkSUUiLCJhbGwiLCJhdG9iIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJnZXRFbGVtZW50Iiwic3R5bGVUYXJnZXQiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJzaW5nbGV0b24iLCJzaW5nbGV0b25Db3VudGVyIiwic3R5bGVzSW5zZXJ0ZWRBdFRvcCIsImZpeFVybHMiLCJhZGRTdHlsZXNUb0RvbSIsInN0eWxlcyIsImRvbVN0eWxlIiwicmVmcyIsInBhcnRzIiwiYWRkU3R5bGUiLCJsaXN0VG9TdHlsZXMiLCJuZXdTdHlsZXMiLCJiYXNlIiwicGFydCIsImNzcyIsIm1lZGlhIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwiaW5zZXJ0SW50byIsImxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wIiwiaW5zZXJ0QXQiLCJuZXh0U2libGluZyIsImluc2VydEJlZm9yZSIsImFwcGVuZENoaWxkIiwiZmlyc3RDaGlsZCIsImJlZm9yZSIsInJlbW92ZVN0eWxlRWxlbWVudCIsInJlbW92ZUNoaWxkIiwiaWR4IiwiY3JlYXRlU3R5bGVFbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImF0dHJzIiwibm9uY2UiLCJnZXROb25jZSIsImFkZEF0dHJzIiwiZWwiLCJ1cGRhdGUiLCJ0cmFuc2Zvcm0iLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJyZWwiLCJjcmVhdGVMaW5rRWxlbWVudCIsImF1dG9GaXhVcmxzIiwiY29udmVydFRvQWJzb2x1dGVVcmxzIiwib2xkU3JjIiwiaHJlZiIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiY3JlYXRlVGV4dE5vZGUiLCJuZXdPYmoiLCJERUJVRyIsIm5ld0xpc3QiLCJtYXlSZW1vdmUiLCJ0ZXh0U3RvcmUiLCJyZXBsYWNlVGV4dCIsInJlcGxhY2VtZW50IiwiY3NzTm9kZSIsImNoaWxkTm9kZXMiLCJsb2NhbHMiLCJsb2NhdGlvbiIsInByb3RvY29sIiwiaG9zdCIsImN1cnJlbnREaXIiLCJwYXRobmFtZSIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJuZXdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCIkMSIsImlzVmFsaWRPYmplY3RTY2hlbWEiLCJwcm9wZXJ0eU5hbWUiLCJwcm9wZXJ0eVZhbHVlIiwicHJvcGVydHlTY2hlbWEiLCJpc1ZhbGlkU2NoZW1hIiwiaXNPYmplY3RQcm9wZXJ0eVZhbGlkIiwiZXZlcnkiLCJjaGlsZFNjaGVtYSIsImlzVmFsaWRPbmVPZlNjaGVtYSIsInZhbGlkIiwiaXNWYWxpZEFsbE9mU2NoZW1hIiwiaXNWYWxpZEVudW1TY2hlbWEiLCJpc1ZhbGlkQ29uc3RTY2hlbWEiLCJpc1ZhbGlkU3RyaW5nU2NoZW1hIiwiaXNWYWxpZE51bWJlclNjaGVtYSIsImlzVmFsaWRJbnRlZ2VyU2NoZW1hIiwiaXNWYWxpZEJvb2xlYW5TY2hlbWEiLCJpc1ZhbGlkQXJyYXlTY2hlbWEiLCJvbkNoYW5nZSIsImlzVmFsaWQiLCJ0cmFuc2xhdGlvbnMiLCJtb2RlbHMiLCJzY2hlbWFzIiwic3BsaXRNb2RlbCIsInNjaGVtYUZvckluZGV4IiwiZXh0ZW5kIiwic2ltcGxlVHlwZXMiLCJnZXRBcnJheVR5cGUiLCJnZXROZXdJdGVtIiwiYXJyYXlUeXBlIiwibmV3SXRlbSIsInJhbmRvbSIsImhhbmRsZU5ld01vZGVsRnJvbVBhcmVudCIsImxhc3RNb2RlbCIsInZhbGlkTW9kZWwiLCJ2YWxpZGF0aW9uS2V5cyIsImJyb2FkY2FzdE1vZGVsIiwibmV3U2NoZW1hIiwiaGlkZVRpdGxlIiwib3V0cHV0TW9kZWwiLCJpbmNsdWRlcyIsImFjdGl2ZUluZGV4IiwiZ2V0QWN0aXZlU2NoZW1hSW5kZXgiLCJwcmVmaWxsTW9kZWxzIiwiQmFzaWNUeXBlU2NoZW1hIiwiT2JqZWN0U2NoZW1hIiwiQXJyYXlTY2hlbWEiLCJBbGxPZlNjaGVtYSIsIk9uZU9mU2NoZW1hIiwicnVsZVZhbGlkYXRvcnMiLCJ0eXBlVmFsaWRhdG9ycyIsIkZvcm0iLCJHZW5lcmljU2NoZW1hIiwiVmFsaWRhdGlvbiJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVC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d0JBLElBQzdCaFAsS0FBS3U5QixjQUFnQkEsRUFDckJ2OUIsS0FBS29nQyxlQUFpQkEsRUFDdEJwZ0MsS0FBS3FnQyxlQUFpQkEsSUFHeEIsS0NMZXJoQyxjQUFRakMsT0FBTyxpQkFBa0IsQ0FDOUN1akMsRUFDQUosRUFDQUQsRUFDQUYsRUFDQVEsRUFDQVAsRUFDQUcsRUFDQUssSUFSRiIsImZpbGUiOiJkaXN0L2pzL2pzb24tc2NoZW1hLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDk2KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gYW5ndWxhcjsiLCJmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJztcbn1cbmZ1bmN0aW9uIGlzTnVtYmVyKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmICFOdW1iZXIuaXNOYU4odmFsdWUpO1xufVxuZnVuY3Rpb24gaXNJbnRlZ2VyKHZhbHVlKSB7XG4gIHJldHVybiBpc051bWJlcih2YWx1ZSkgJiYgTWF0aC5mbG9vcih2YWx1ZSkgPT09IHZhbHVlO1xufVxuZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJztcbn1cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHJldHVybiAhaXNOdWxsKHZhbHVlKSAmJiAhaXNVbmRlZmluZWQodmFsdWUpICYmIHZhbHVlLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG59XG5mdW5jdGlvbiBpc0FycmF5KHZhbHVlKSB7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKTtcbn1cbmZ1bmN0aW9uIGlzTnVsbCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IG51bGw7XG59XG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJztcbn1cblxuZXhwb3J0IHtcbiAgaXNTdHJpbmcsIGlzTnVtYmVyLCBpc0ludGVnZXIsIGlzQm9vbGVhbiwgaXNPYmplY3QsIGlzQXJyYXksIGlzTnVsbCwgaXNVbmRlZmluZWRcbn07XG4iLCJmdW5jdGlvbiBEb21TZXJ2aWNlKCkge1xuICB0aGlzLmdldENsb3Nlc3RQYXJlbnRCeVRhZ05hbWUgPSAoZWxlbWVudCwgdGFnTmFtZSkgPT4ge1xuICAgIGNvbnN0IHRhZ05hbWVVcHBlciA9IHRhZ05hbWUudG9VcHBlckNhc2UoKTtcbiAgICBsZXQgcGFyZW50ID0gZWxlbWVudDtcblxuICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnROb2RlO1xuICAgICAgaWYgKHBhcmVudCAmJiBwYXJlbnQudGFnTmFtZSAmJiBwYXJlbnQudGFnTmFtZS50b1VwcGVyQ2FzZSgpID09PSB0YWdOYW1lVXBwZXIpIHtcbiAgICAgICAgcmV0dXJuIHBhcmVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgdGhpcy5nZXRDbG9zZXN0UGFyZW50QnlDbGFzc05hbWUgPSAoZWxlbWVudCwgY2xhc3NOYW1lKSA9PiB7XG4gICAgbGV0IHBhcmVudCA9IGVsZW1lbnQ7XG5cbiAgICB3aGlsZSAocGFyZW50KSB7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50Tm9kZTtcbiAgICAgIGlmIChwYXJlbnQgJiYgcGFyZW50LmNsYXNzTGlzdCAmJiBwYXJlbnQuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIHBhcmVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgdGhpcy5nZXRQcmV2aW91c1NpYmxpbmdXaXRoQ2xhc3NOYW1lID0gKGVsZW1lbnQsIGNsYXNzTmFtZSkgPT4ge1xuICAgIGxldCBzaWJsaW5nID0gZWxlbWVudC5wcmV2aW91c0VsZW1lbnRTaWJsaW5nO1xuXG4gICAgd2hpbGUgKHNpYmxpbmcpIHtcbiAgICAgIGlmIChzaWJsaW5nLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKSB7XG4gICAgICAgIHJldHVybiBzaWJsaW5nO1xuICAgICAgfVxuICAgICAgc2libGluZyA9IHNpYmxpbmcucHJldmlvdXNFbGVtZW50U2libGluZztcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgdGhpcy5nZXROZXh0U2libGluZ1dpdGhDbGFzc05hbWUgPSAoZWxlbWVudCwgY2xhc3NOYW1lKSA9PiB7XG4gICAgbGV0IHNpYmxpbmcgPSBlbGVtZW50Lm5leHRFbGVtZW50U2libGluZztcblxuICAgIHdoaWxlIChzaWJsaW5nKSB7XG4gICAgICBpZiAoc2libGluZy5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSkge1xuICAgICAgICByZXR1cm4gc2libGluZztcbiAgICAgIH1cbiAgICAgIHNpYmxpbmcgPSBzaWJsaW5nLm5leHRFbGVtZW50U2libGluZztcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IERvbVNlcnZpY2U7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBEb21TZXJ2aWNlIGZyb20gJy4vZG9tLnNlcnZpY2UuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuc2VydmljZXMuZG9tJywgW10pXG4gIC5zZXJ2aWNlKCdUd0RvbVNlcnZpY2UnLCBEb21TZXJ2aWNlKS5uYW1lO1xuIiwiaW1wb3J0IHtcbiAgaXNTdHJpbmcsIGlzTnVtYmVyLCBpc0FycmF5LCBpc1VuZGVmaW5lZFxufSBmcm9tICcuLi90eXBlLXZhbGlkYXRvcnMnO1xuXG5mdW5jdGlvbiBpc1ZhbGlkUmVxdWlyZWQodmFsdWUsIGlzUmVxdWlyZWQpIHtcbiAgcmV0dXJuICFpc1JlcXVpcmVkIHx8ICFpc1VuZGVmaW5lZCh2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRNaW5MZW5ndGgodmFsdWUsIG1pbkxlbmd0aCkge1xuICByZXR1cm4gIWlzTnVtYmVyKG1pbkxlbmd0aCkgfHwgKGlzU3RyaW5nKHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPj0gbWluTGVuZ3RoKTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZE1heExlbmd0aCh2YWx1ZSwgbWF4TGVuZ3RoKSB7XG4gIHJldHVybiAhaXNOdW1iZXIobWF4TGVuZ3RoKSB8fCAoaXNTdHJpbmcodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA8PSBtYXhMZW5ndGgpO1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkUGF0dGVybih2YWx1ZSwgcGF0dGVybikge1xuICB0cnkge1xuICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cChwYXR0ZXJuKTtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJyAmJiAhIXJlZ2V4LnRlc3QodmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRNYXhpbXVtKHZhbHVlLCBtYXhpbXVtKSB7XG4gIHJldHVybiAoXG4gICAgKCFpc051bWJlcihtYXhpbXVtKSAmJiAhaXNTdHJpbmcobWF4aW11bSkpXG4gICAgfHwgKChpc051bWJlcih2YWx1ZSkgfHwgaXNTdHJpbmcodmFsdWUpKSAmJiB2YWx1ZSA8PSBtYXhpbXVtKVxuICApO1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkTWluaW11bSh2YWx1ZSwgbWluaW11bSkge1xuICByZXR1cm4gKFxuICAgICghaXNOdW1iZXIobWluaW11bSkgJiYgIWlzU3RyaW5nKG1pbmltdW0pKVxuICAgIHx8ICgoaXNOdW1iZXIodmFsdWUpIHx8IGlzU3RyaW5nKHZhbHVlKSkgJiYgdmFsdWUgPj0gbWluaW11bSlcbiAgKTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZE1pbkl0ZW1zKHZhbHVlLCBtaW5JdGVtcykge1xuICByZXR1cm4gIWlzTnVtYmVyKG1pbkl0ZW1zKSB8fCAoaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID49IG1pbkl0ZW1zKTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZE1heEl0ZW1zKHZhbHVlLCBtYXhJdGVtcykge1xuICByZXR1cm4gIWlzTnVtYmVyKG1heEl0ZW1zKSB8fCAoaXNBcnJheSh2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoIDw9IG1heEl0ZW1zKTtcbn1cblxuZXhwb3J0IHtcbiAgaXNWYWxpZFJlcXVpcmVkLFxuICBpc1ZhbGlkTWluTGVuZ3RoLFxuICBpc1ZhbGlkTWF4TGVuZ3RoLFxuICBpc1ZhbGlkUGF0dGVybixcbiAgaXNWYWxpZE1heGltdW0sXG4gIGlzVmFsaWRNaW5pbXVtLFxuICBpc1ZhbGlkTWluSXRlbXMsXG4gIGlzVmFsaWRNYXhJdGVtc1xufTtcbiIsIlxuY2xhc3MgRm9jdXNhYmxlQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKCRlbGVtZW50LCBUd0RvbVNlcnZpY2UpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gJGVsZW1lbnRbMF07XG4gICAgY29uc3QgZm9ybUdyb3VwID0gVHdEb21TZXJ2aWNlLmdldENsb3Nlc3RQYXJlbnRCeUNsYXNzTmFtZShlbGVtZW50LCAnZm9ybS1ncm91cCcpO1xuXG4gICAgaWYgKGZvcm1Hcm91cCAmJiBlbGVtZW50KSB7XG4gICAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgKCkgPT4ge1xuICAgICAgICBmb3JtR3JvdXAuY2xhc3NMaXN0LmFkZCgnZm9jdXMnKTtcbiAgICAgIH0pO1xuICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgKCkgPT4ge1xuICAgICAgICBmb3JtR3JvdXAuY2xhc3NMaXN0LnJlbW92ZSgnZm9jdXMnKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufVxuXG5Gb2N1c2FibGVDb250cm9sbGVyLiRpbmplY3QgPSBbJyRlbGVtZW50JywgJ1R3RG9tU2VydmljZSddO1xuXG5leHBvcnQgZGVmYXVsdCBGb2N1c2FibGVDb250cm9sbGVyO1xuIiwiaW1wb3J0IEZvY3VzYWJsZUNvbnRyb2xsZXIgZnJvbSAnLi9mb2N1c2FibGUuY29udHJvbGxlci5qcyc7XG5cbmZ1bmN0aW9uIEZvY3VzYWJsZSgpIHtcbiAgcmV0dXJuIHtcbiAgICByZXN0cmljdDogJ0EnLFxuICAgIGNvbnRyb2xsZXI6IEZvY3VzYWJsZUNvbnRyb2xsZXJcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgRm9jdXNhYmxlO1xuIiwiLy8gVGhpcyBkaXJlY3RpdmUgcHJvdmlkZSBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuLy8gSXQgc2hvdWxkIG5vIGxvbmdlciBiZSBuZWNlc3Nhcnkgd2hlbiBicm93c2VycyBzdXBwb3J0IDpmb2N1cy13aXRoaW5cbmltcG9ydCBGb2N1c2FibGVDb250cm9sbGVyIGZyb20gJy4vZm9jdXNhYmxlLmNvbnRyb2xsZXIuanMnO1xuXG5mdW5jdGlvbiBGb3JtQ29udHJvbEZvY3VzKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQycsXG4gICAgY29udHJvbGxlcjogRm9jdXNhYmxlQ29udHJvbGxlclxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBGb3JtQ29udHJvbEZvY3VzO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgRm9jdXNhYmxlIGZyb20gJy4vZm9jdXNhYmxlLmRpcmVjdGl2ZS5qcyc7XG5pbXBvcnQgRm9ybUNvbnRyb2xGb2N1cyBmcm9tICcuL2Zvcm0tY29udHJvbC5kaXJlY3RpdmUuanMnO1xuaW1wb3J0IERvbVNlcnZpY2UgZnJvbSAnLi4vLi4vc2VydmljZXMvZG9tJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmZvcm1zLmZvY3VzYWJsZScsIFtcbiAgICBEb21TZXJ2aWNlXG4gIF0pXG4gIC5kaXJlY3RpdmUoJ3R3Rm9jdXNhYmxlJywgRm9jdXNhYmxlKVxuICAuZGlyZWN0aXZlKCdmb3JtQ29udHJvbCcsIEZvcm1Db250cm9sRm9jdXMpLm5hbWU7XG4iLCIvKiFcbiogc2NyZWVuZnVsbFxuKiB2NS4wLjIgLSAyMDIwLTAyLTEzXG4qIChjKSBTaW5kcmUgU29yaHVzOyBNSVQgTGljZW5zZVxuKi9cbihmdW5jdGlvbiAoKSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHR2YXIgZG9jdW1lbnQgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdy5kb2N1bWVudCA6IHt9O1xuXHR2YXIgaXNDb21tb25qcyA9IHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzO1xuXG5cdHZhciBmbiA9IChmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIHZhbDtcblxuXHRcdHZhciBmbk1hcCA9IFtcblx0XHRcdFtcblx0XHRcdFx0J3JlcXVlc3RGdWxsc2NyZWVuJyxcblx0XHRcdFx0J2V4aXRGdWxsc2NyZWVuJyxcblx0XHRcdFx0J2Z1bGxzY3JlZW5FbGVtZW50Jyxcblx0XHRcdFx0J2Z1bGxzY3JlZW5FbmFibGVkJyxcblx0XHRcdFx0J2Z1bGxzY3JlZW5jaGFuZ2UnLFxuXHRcdFx0XHQnZnVsbHNjcmVlbmVycm9yJ1xuXHRcdFx0XSxcblx0XHRcdC8vIE5ldyBXZWJLaXRcblx0XHRcdFtcblx0XHRcdFx0J3dlYmtpdFJlcXVlc3RGdWxsc2NyZWVuJyxcblx0XHRcdFx0J3dlYmtpdEV4aXRGdWxsc2NyZWVuJyxcblx0XHRcdFx0J3dlYmtpdEZ1bGxzY3JlZW5FbGVtZW50Jyxcblx0XHRcdFx0J3dlYmtpdEZ1bGxzY3JlZW5FbmFibGVkJyxcblx0XHRcdFx0J3dlYmtpdGZ1bGxzY3JlZW5jaGFuZ2UnLFxuXHRcdFx0XHQnd2Via2l0ZnVsbHNjcmVlbmVycm9yJ1xuXG5cdFx0XHRdLFxuXHRcdFx0Ly8gT2xkIFdlYktpdFxuXHRcdFx0W1xuXHRcdFx0XHQnd2Via2l0UmVxdWVzdEZ1bGxTY3JlZW4nLFxuXHRcdFx0XHQnd2Via2l0Q2FuY2VsRnVsbFNjcmVlbicsXG5cdFx0XHRcdCd3ZWJraXRDdXJyZW50RnVsbFNjcmVlbkVsZW1lbnQnLFxuXHRcdFx0XHQnd2Via2l0Q2FuY2VsRnVsbFNjcmVlbicsXG5cdFx0XHRcdCd3ZWJraXRmdWxsc2NyZWVuY2hhbmdlJyxcblx0XHRcdFx0J3dlYmtpdGZ1bGxzY3JlZW5lcnJvcidcblxuXHRcdFx0XSxcblx0XHRcdFtcblx0XHRcdFx0J21velJlcXVlc3RGdWxsU2NyZWVuJyxcblx0XHRcdFx0J21vekNhbmNlbEZ1bGxTY3JlZW4nLFxuXHRcdFx0XHQnbW96RnVsbFNjcmVlbkVsZW1lbnQnLFxuXHRcdFx0XHQnbW96RnVsbFNjcmVlbkVuYWJsZWQnLFxuXHRcdFx0XHQnbW96ZnVsbHNjcmVlbmNoYW5nZScsXG5cdFx0XHRcdCdtb3pmdWxsc2NyZWVuZXJyb3InXG5cdFx0XHRdLFxuXHRcdFx0W1xuXHRcdFx0XHQnbXNSZXF1ZXN0RnVsbHNjcmVlbicsXG5cdFx0XHRcdCdtc0V4aXRGdWxsc2NyZWVuJyxcblx0XHRcdFx0J21zRnVsbHNjcmVlbkVsZW1lbnQnLFxuXHRcdFx0XHQnbXNGdWxsc2NyZWVuRW5hYmxlZCcsXG5cdFx0XHRcdCdNU0Z1bGxzY3JlZW5DaGFuZ2UnLFxuXHRcdFx0XHQnTVNGdWxsc2NyZWVuRXJyb3InXG5cdFx0XHRdXG5cdFx0XTtcblxuXHRcdHZhciBpID0gMDtcblx0XHR2YXIgbCA9IGZuTWFwLmxlbmd0aDtcblx0XHR2YXIgcmV0ID0ge307XG5cblx0XHRmb3IgKDsgaSA8IGw7IGkrKykge1xuXHRcdFx0dmFsID0gZm5NYXBbaV07XG5cdFx0XHRpZiAodmFsICYmIHZhbFsxXSBpbiBkb2N1bWVudCkge1xuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgdmFsLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0cmV0W2ZuTWFwWzBdW2ldXSA9IHZhbFtpXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fSkoKTtcblxuXHR2YXIgZXZlbnROYW1lTWFwID0ge1xuXHRcdGNoYW5nZTogZm4uZnVsbHNjcmVlbmNoYW5nZSxcblx0XHRlcnJvcjogZm4uZnVsbHNjcmVlbmVycm9yXG5cdH07XG5cblx0dmFyIHNjcmVlbmZ1bGwgPSB7XG5cdFx0cmVxdWVzdDogZnVuY3Rpb24gKGVsZW1lbnQpIHtcblx0XHRcdHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG5cdFx0XHRcdHZhciBvbkZ1bGxTY3JlZW5FbnRlcmVkID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRcdHRoaXMub2ZmKCdjaGFuZ2UnLCBvbkZ1bGxTY3JlZW5FbnRlcmVkKTtcblx0XHRcdFx0XHRyZXNvbHZlKCk7XG5cdFx0XHRcdH0uYmluZCh0aGlzKTtcblxuXHRcdFx0XHR0aGlzLm9uKCdjaGFuZ2UnLCBvbkZ1bGxTY3JlZW5FbnRlcmVkKTtcblxuXHRcdFx0XHRlbGVtZW50ID0gZWxlbWVudCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0dmFyIHJldHVyblByb21pc2UgPSBlbGVtZW50W2ZuLnJlcXVlc3RGdWxsc2NyZWVuXSgpO1xuXG5cdFx0XHRcdGlmIChyZXR1cm5Qcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuXHRcdFx0XHRcdHJldHVyblByb21pc2UudGhlbihvbkZ1bGxTY3JlZW5FbnRlcmVkKS5jYXRjaChyZWplY3QpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LmJpbmQodGhpcykpO1xuXHRcdH0sXG5cdFx0ZXhpdDogZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdFx0aWYgKCF0aGlzLmlzRnVsbHNjcmVlbikge1xuXHRcdFx0XHRcdHJlc29sdmUoKTtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgb25GdWxsU2NyZWVuRXhpdCA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0XHR0aGlzLm9mZignY2hhbmdlJywgb25GdWxsU2NyZWVuRXhpdCk7XG5cdFx0XHRcdFx0cmVzb2x2ZSgpO1xuXHRcdFx0XHR9LmJpbmQodGhpcyk7XG5cblx0XHRcdFx0dGhpcy5vbignY2hhbmdlJywgb25GdWxsU2NyZWVuRXhpdCk7XG5cblx0XHRcdFx0dmFyIHJldHVyblByb21pc2UgPSBkb2N1bWVudFtmbi5leGl0RnVsbHNjcmVlbl0oKTtcblxuXHRcdFx0XHRpZiAocmV0dXJuUHJvbWlzZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcblx0XHRcdFx0XHRyZXR1cm5Qcm9taXNlLnRoZW4ob25GdWxsU2NyZWVuRXhpdCkuY2F0Y2gocmVqZWN0KTtcblx0XHRcdFx0fVxuXHRcdFx0fS5iaW5kKHRoaXMpKTtcblx0XHR9LFxuXHRcdHRvZ2dsZTogZnVuY3Rpb24gKGVsZW1lbnQpIHtcblx0XHRcdHJldHVybiB0aGlzLmlzRnVsbHNjcmVlbiA/IHRoaXMuZXhpdCgpIDogdGhpcy5yZXF1ZXN0KGVsZW1lbnQpO1xuXHRcdH0sXG5cdFx0b25jaGFuZ2U6IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHRcdFx0dGhpcy5vbignY2hhbmdlJywgY2FsbGJhY2spO1xuXHRcdH0sXG5cdFx0b25lcnJvcjogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG5cdFx0XHR0aGlzLm9uKCdlcnJvcicsIGNhbGxiYWNrKTtcblx0XHR9LFxuXHRcdG9uOiBmdW5jdGlvbiAoZXZlbnQsIGNhbGxiYWNrKSB7XG5cdFx0XHR2YXIgZXZlbnROYW1lID0gZXZlbnROYW1lTWFwW2V2ZW50XTtcblx0XHRcdGlmIChldmVudE5hbWUpIHtcblx0XHRcdFx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIGNhbGxiYWNrLCBmYWxzZSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRvZmY6IGZ1bmN0aW9uIChldmVudCwgY2FsbGJhY2spIHtcblx0XHRcdHZhciBldmVudE5hbWUgPSBldmVudE5hbWVNYXBbZXZlbnRdO1xuXHRcdFx0aWYgKGV2ZW50TmFtZSkge1xuXHRcdFx0XHRkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgY2FsbGJhY2ssIGZhbHNlKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHJhdzogZm5cblx0fTtcblxuXHRpZiAoIWZuKSB7XG5cdFx0aWYgKGlzQ29tbW9uanMpIHtcblx0XHRcdG1vZHVsZS5leHBvcnRzID0ge2lzRW5hYmxlZDogZmFsc2V9O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3aW5kb3cuc2NyZWVuZnVsbCA9IHtpc0VuYWJsZWQ6IGZhbHNlfTtcblx0XHR9XG5cblx0XHRyZXR1cm47XG5cdH1cblxuXHRPYmplY3QuZGVmaW5lUHJvcGVydGllcyhzY3JlZW5mdWxsLCB7XG5cdFx0aXNGdWxsc2NyZWVuOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0cmV0dXJuIEJvb2xlYW4oZG9jdW1lbnRbZm4uZnVsbHNjcmVlbkVsZW1lbnRdKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGVsZW1lbnQ6IHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0cmV0dXJuIGRvY3VtZW50W2ZuLmZ1bGxzY3JlZW5FbGVtZW50XTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGlzRW5hYmxlZDoge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24gKCkge1xuXHRcdFx0XHQvLyBDb2VyY2UgdG8gYm9vbGVhbiBpbiBjYXNlIG9mIG9sZCBXZWJLaXRcblx0XHRcdFx0cmV0dXJuIEJvb2xlYW4oZG9jdW1lbnRbZm4uZnVsbHNjcmVlbkVuYWJsZWRdKTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdGlmIChpc0NvbW1vbmpzKSB7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBzY3JlZW5mdWxsO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5zY3JlZW5mdWxsID0gc2NyZWVuZnVsbDtcblx0fVxufSkoKTtcbiIsIlxuZnVuY3Rpb24gRGF0ZVNlcnZpY2UoKSB7XG4gIHRoaXMuZ2V0TG9jYWxlRGF0ZSA9IChkYXRlKSA9PiB7XG4gICAgaWYgKCFkYXRlKSB7IGRhdGUgPSBuZXcgRGF0ZSgpOyB9XG4gICAgcmV0dXJuIGRhdGUuZ2V0RGF0ZSgpO1xuICB9O1xuXG4gIHRoaXMuZ2V0TG9jYWxlTW9udGggPSAoZGF0ZSkgPT4ge1xuICAgIGlmICghZGF0ZSkgeyBkYXRlID0gbmV3IERhdGUoKTsgfVxuICAgIHJldHVybiBkYXRlLmdldE1vbnRoKCk7XG4gIH07XG5cbiAgdGhpcy5nZXRMb2NhbGVGdWxsWWVhciA9IChkYXRlKSA9PiB7XG4gICAgaWYgKCFkYXRlKSB7IGRhdGUgPSBuZXcgRGF0ZSgpOyB9XG4gICAgcmV0dXJuIGRhdGUuZ2V0RnVsbFllYXIoKTtcbiAgfTtcblxuICAvLyBnZXQgVVRDIGRhdGUgZm9yIHVzZXJzIGN1cnJlbnQgZGF5XG4gIHRoaXMuZ2V0TG9jYWxlVG9kYXkgPSAoKSA9PiB7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICByZXR1cm4gdGhpcy5nZXRVVENEYXRlRnJvbVBhcnRzKFxuICAgICAgdGhpcy5nZXRMb2NhbGVGdWxsWWVhcihub3cpLFxuICAgICAgdGhpcy5nZXRMb2NhbGVNb250aChub3cpLFxuICAgICAgdGhpcy5nZXRMb2NhbGVEYXRlKG5vdylcbiAgICApO1xuICB9O1xuXG4gIHRoaXMuZ2V0VVRDRGF0ZSA9IChkYXRlKSA9PiB7XG4gICAgaWYgKCFkYXRlKSB7IGRhdGUgPSBuZXcgRGF0ZSgpOyB9XG4gICAgcmV0dXJuIGRhdGUuZ2V0VVRDRGF0ZSgpO1xuICB9O1xuXG4gIHRoaXMuZ2V0VVRDTW9udGggPSAoZGF0ZSkgPT4ge1xuICAgIGlmICghZGF0ZSkgeyBkYXRlID0gbmV3IERhdGUoKTsgfVxuICAgIHJldHVybiBkYXRlLmdldFVUQ01vbnRoKCk7XG4gIH07XG5cbiAgdGhpcy5nZXRVVENGdWxsWWVhciA9IChkYXRlKSA9PiB7XG4gICAgaWYgKCFkYXRlKSB7IGRhdGUgPSBuZXcgRGF0ZSgpOyB9XG4gICAgcmV0dXJuIGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgfTtcblxuICB0aGlzLmdldFVUQ1RvZGF5ID0gKCkgPT4ge1xuICAgIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VVRDRGF0ZUZyb21QYXJ0cyhcbiAgICAgIHRoaXMuZ2V0VVRDRnVsbFllYXIobm93KSxcbiAgICAgIHRoaXMuZ2V0VVRDTW9udGgobm93KSxcbiAgICAgIHRoaXMuZ2V0VVRDRGF0ZShub3cpXG4gICAgKTtcbiAgfTtcblxuICB0aGlzLmdldExhc3REYXlPZk1vbnRoID0gKHllYXIsIG1vbnRoKSA9PiB7XG4gICAgY29uc3QgbGFzdERheSA9IHRoaXMuZ2V0VVRDRGF0ZUZyb21QYXJ0cyh5ZWFyLCBtb250aCArIDEsIDApO1xuICAgIHJldHVybiBsYXN0RGF5LmdldFVUQ0RhdGUoKTtcbiAgfTtcblxuICB0aGlzLmdldFVUQ0RhdGVGcm9tUGFydHMgPSAoeWVhciwgbW9udGgsIGRheSwgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMpID0+IHtcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUoKTtcbiAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHllYXIsIG1vbnRoLCBkYXkpO1xuICAgIGRhdGUuc2V0VVRDSG91cnMoaG91cnMgfHwgMCk7XG4gICAgZGF0ZS5zZXRVVENNaW51dGVzKG1pbnV0ZXMgfHwgMCk7XG4gICAgZGF0ZS5zZXRVVENTZWNvbmRzKHNlY29uZHMgfHwgMCk7XG4gICAgZGF0ZS5zZXRVVENNaWxsaXNlY29uZHMoMCk7XG4gICAgcmV0dXJuIGRhdGU7XG4gIH07XG5cbiAgdGhpcy5nZXRMb2NhbGVEYXRlRnJvbVBhcnRzID0gKHllYXIsIG1vbnRoLCBkYXksIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzKSA9PiB7XG4gICAgY29uc3QgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgZGF0ZS5zZXRGdWxsWWVhcih5ZWFyLCBtb250aCwgZGF5KTtcbiAgICBkYXRlLnNldEhvdXJzKGhvdXJzIHx8IDApO1xuICAgIGRhdGUuc2V0TWludXRlcyhtaW51dGVzIHx8IDApO1xuICAgIGRhdGUuc2V0U2Vjb25kcyhzZWNvbmRzIHx8IDApO1xuICAgIGRhdGUuc2V0TWlsbGlzZWNvbmRzKDApO1xuICAgIHJldHVybiBkYXRlO1xuICB9O1xuXG4gIHRoaXMuZ2V0RGF0ZVBhcnRzRnJvbUlzbyA9IChpc29EYXRlKSA9PiB7XG4gICAgbGV0IGhvdXJzT2Zmc2V0ID0gMDtcbiAgICBsZXQgbWludXRlc09mZnNldCA9IDA7XG5cbiAgICBjb25zdCB5ZWFyID0gcGFyc2VJbnQoaXNvRGF0ZS5zdWJzdHIoMCwgNCksIDEwKTtcbiAgICBjb25zdCBtb250aCA9IHBhcnNlSW50KGlzb0RhdGUuc3Vic3RyKDUsIDIpLCAxMCkgLSAxO1xuICAgIGNvbnN0IGRheSA9IHBhcnNlSW50KGlzb0RhdGUuc3Vic3RyKDgsIDIpLCAxMCk7XG4gICAgY29uc3QgaG91cnMgPSBwYXJzZUludChpc29EYXRlLnN1YnN0cigxMSwgMiksIDEwKSB8fCAwO1xuICAgIGNvbnN0IG1pbnV0ZXMgPSBwYXJzZUludChpc29EYXRlLnN1YnN0cigxNCwgMiksIDEwKSB8fCAwO1xuICAgIGNvbnN0IHNlY29uZHMgPSBwYXJzZUludChpc29EYXRlLnN1YnN0cigxNywgMiksIDEwKSB8fCAwO1xuXG4gICAgLy8gSXQncyBwb3NzaWJsZSBmb3IgdGhlIGRhdGUgdG8gbWF0Y2ggdGhlIG9mZnNldCByZWdleFxuICAgIGNvbnN0IHN0cmluZ0FmdGVyRGF0ZSA9IGlzb0RhdGUuc3Vic3RyaW5nKDEwKTtcbiAgICBjb25zdCBvZmZzZXRSZWdleCA9ICdbKy1dezF9WzAtOV17Mn0oOlswLTldezJ9KT8kJztcbiAgICBjb25zdCBvZmZzZXQgPSBzdHJpbmdBZnRlckRhdGUubWF0Y2gob2Zmc2V0UmVnZXgpO1xuXG4gICAgaWYgKG9mZnNldCkge1xuICAgICAgLy8gVE9ETyBpZiB0aGVyZSBhcmUgbWlsbGlzZWNvbmRzLCBuZWVkIHRvIGFkanVzdCB0aGlzXG4gICAgICBob3Vyc09mZnNldCA9IHBhcnNlSW50KG9mZnNldFswXS5zdWJzdHIoMSwgMiksIDEwKSB8fCAwO1xuICAgICAgbWludXRlc09mZnNldCA9IHBhcnNlSW50KG9mZnNldFswXS5zdWJzdHIoNCwgMiksIDEwKSB8fCAwO1xuXG4gICAgICBpZiAob2Zmc2V0WzBdLnN1YnN0cigwLCAxKSA9PT0gJy0nKSB7XG4gICAgICAgIGhvdXJzT2Zmc2V0ICo9IC0xO1xuICAgICAgICBtaW51dGVzT2Zmc2V0ICo9IC0xO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBbeWVhciwgbW9udGgsIGRheSwgaG91cnMsIG1pbnV0ZXMsIHNlY29uZHMsIGhvdXJzT2Zmc2V0LCBtaW51dGVzT2Zmc2V0XTtcbiAgfTtcblxuICB0aGlzLmlzSXNvU3RyaW5nVmFsaWQgPSAoaXNvRGF0ZSkgPT4ge1xuICAgIGNvbnN0IGRhdGVTZWN0aW9uID0gJ1swLTldezR9LVswLTldezJ9LVswLTldezJ9JztcbiAgICBjb25zdCB0aW1lU2VjdGlvbiA9ICdUWzAtOV17Mn06WzAtOV17Mn06WzAtOV17Mn0nO1xuICAgIGNvbnN0IG1pbGxpc2Vjb25kU2VjdGlvbiA9ICcoLlswLTldezN9KT8nO1xuICAgIGNvbnN0IHpvbmVTZWN0aW9uID0gJyhafFsrLC1dWzAtOV17Mn0oOlswLTldezJ9KT8pJztcbiAgICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoYF4ke2RhdGVTZWN0aW9ufSgke3RpbWVTZWN0aW9ufSR7bWlsbGlzZWNvbmRTZWN0aW9ufSR7em9uZVNlY3Rpb259KT8kYCk7XG4gICAgcmV0dXJuIHJlZ2V4LnRlc3QoaXNvRGF0ZSk7XG4gIH07XG5cbiAgdGhpcy5nZXRVVENEYXRlRnJvbUlzbyA9IChpc29EYXRlKSA9PiB7XG4gICAgaWYgKCF0aGlzLmlzSXNvU3RyaW5nVmFsaWQoaXNvRGF0ZSkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IFtcbiAgICAgIHllYXIsXG4gICAgICBtb250aCxcbiAgICAgIGRheSxcbiAgICAgIGhvdXJzLFxuICAgICAgbWludXRlcyxcbiAgICAgIHNlY29uZHMsXG4gICAgICBob3Vyc09mZnNldCxcbiAgICAgIG1pbnV0ZXNPZmZzZXRcbiAgICBdID0gdGhpcy5nZXREYXRlUGFydHNGcm9tSXNvKGlzb0RhdGUpO1xuXG4gICAgcmV0dXJuIHRoaXMuZ2V0VVRDRGF0ZUZyb21QYXJ0cyhcbiAgICAgIHllYXIsIG1vbnRoLCBkYXksXG4gICAgICBob3VycyArIGhvdXJzT2Zmc2V0LCBtaW51dGVzICsgbWludXRlc09mZnNldCwgc2Vjb25kc1xuICAgICk7XG4gIH07XG5cblxuICAvLyBTdW5kYXkgaXMgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrIGluIEpTXG4gIHRoaXMuZ2V0RGF5TmFtZXNGb3JMb2NhbGUgPSAobG9jYWxlLCBmb3JtYXQpID0+IHtcbiAgICBjb25zdCBkYXlzID0gW107XG4gICAgY29uc3QgdmFsaWRGb3JtYXQgPSBnZXRWYWxpZERhdGVGb3JtYXQoZm9ybWF0KTtcbiAgICBmb3IgKGxldCBkYXkgPSAwOyBkYXkgPCA3OyBkYXkrKykge1xuICAgICAgZGF5cy5wdXNoKHRoaXMuZ2V0RGF5TmFtZUZvckxvY2FsZShkYXksIGxvY2FsZSwgdmFsaWRGb3JtYXQpKTtcbiAgICB9XG4gICAgcmV0dXJuIGRheXM7XG4gIH07XG5cbiAgdGhpcy5nZXREYXlOYW1lRm9yTG9jYWxlID0gKGRheU9mV2VlaywgbG9jYWxlLCBmb3JtYXQpID0+IHtcbiAgICBjb25zdCBkZWZhdWx0RGF5TmFtZSA9IGdldERlZmF1bHREYXlOYW1lKGRheU9mV2VlaywgbG9jYWxlLCBmb3JtYXQpO1xuICAgIGlmIChkZWZhdWx0RGF5TmFtZSkge1xuICAgICAgcmV0dXJuIGRlZmF1bHREYXlOYW1lO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbGlkTG9jYWxlID0gZ2V0VmFsaWRMb2NhbGUobG9jYWxlKTtcbiAgICBjb25zdCB2YWxpZEZvcm1hdCA9IGdldFZhbGlkRGF0ZUZvcm1hdChmb3JtYXQpO1xuXG4gICAgY29uc3QgZGF0ZSA9IHRoaXMuZ2V0VVRDRGF0ZUZyb21QYXJ0cygyMDA2LCAwLCBkYXlPZldlZWsgKyAxKTsgLy8gMjAwNiBzdGFydGVkIHdpdGggYSBTdW5kYXlcblxuICAgIGNvbnN0IGxvY2FsRGF0ZU5hbWUgPSBnZXRMb2NhbGlzZWREYXRlTmFtZShkYXRlLCB2YWxpZExvY2FsZSwgeyB3ZWVrZGF5OiAnbG9uZycgfSk7XG5cbiAgICByZXR1cm4gbG9jYWxEYXRlTmFtZSB8fCBnZXREZWZhdWx0RGF5TmFtZShkYXlPZldlZWssICdlbi1HQicsIHZhbGlkRm9ybWF0KTtcbiAgfTtcblxuICBmdW5jdGlvbiBnZXREZWZhdWx0RGF5TmFtZShkYXlPZldlZWssIGxvY2FsZSwgZm9ybWF0KSB7XG4gICAgbGV0IGRlZmF1bHREYXlOYW1lO1xuICAgIGNvbnN0IGxhbmd1YWdlID0gZ2V0TGFuZ3VhZ2VGcm9tTG9jYWxlKGxvY2FsZSk7XG5cbiAgICBpZiAoREVGQVVMVF9EQVlfTkFNRVNfQllfTEFOR1VBR0VbbGFuZ3VhZ2VdKSB7XG4gICAgICBkZWZhdWx0RGF5TmFtZSA9IERFRkFVTFRfREFZX05BTUVTX0JZX0xBTkdVQUdFW2xhbmd1YWdlXVtkYXlPZldlZWtdO1xuICAgIH1cblxuICAgIGlmIChkZWZhdWx0RGF5TmFtZSkge1xuICAgICAgaWYgKGZvcm1hdCA9PT0gJ3Nob3J0Jykge1xuICAgICAgICByZXR1cm4gZGVmYXVsdERheU5hbWUuc3Vic3RyKDAsIDMpO1xuICAgICAgfVxuICAgICAgaWYgKGZvcm1hdCA9PT0gJ25hcnJvdycpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHREYXlOYW1lLnN1YnN0cigwLCAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBkZWZhdWx0RGF5TmFtZTtcbiAgICB9XG5cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHRoaXMuZ2V0TW9udGhOYW1lc0ZvckxvY2FsZSA9IChsb2NhbGUsIGZvcm1hdCkgPT4ge1xuICAgIGNvbnN0IG1vbnRocyA9IFtdO1xuICAgIGNvbnN0IHZhbGlkRm9ybWF0ID0gZ2V0VmFsaWREYXRlRm9ybWF0KGZvcm1hdCk7XG5cbiAgICBmb3IgKGxldCBtb250aCA9IDA7IG1vbnRoIDwgMTI7IG1vbnRoKyspIHtcbiAgICAgIG1vbnRocy5wdXNoKHRoaXMuZ2V0TW9udGhOYW1lRm9yTG9jYWxlKG1vbnRoLCBsb2NhbGUsIHZhbGlkRm9ybWF0KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1vbnRocztcbiAgfTtcblxuICB0aGlzLmdldE1vbnRoTmFtZUZvckxvY2FsZSA9IChtb250aCwgbG9jYWxlLCBmb3JtYXQpID0+IHtcbiAgICBjb25zdCBkZWZhdWx0TW9udGhOYW1lID0gZ2V0RGVmYXVsdE1vbnRoTmFtZShtb250aCwgbG9jYWxlLCBmb3JtYXQpO1xuXG4gICAgaWYgKGRlZmF1bHRNb250aE5hbWUpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0TW9udGhOYW1lO1xuICAgIH1cblxuICAgIGNvbnN0IHZhbGlkTG9jYWxlID0gZ2V0VmFsaWRMb2NhbGUobG9jYWxlKTtcbiAgICBjb25zdCB2YWxpZEZvcm1hdCA9IGdldFZhbGlkRGF0ZUZvcm1hdChmb3JtYXQpO1xuXG4gICAgLy8gRGF5IGluIG1pZGRsZSBvZiBtb250aCBhdm9pZHMgdGltZXpvbmUgaXNzdWVzXG4gICAgY29uc3QgZGF0ZSA9IHRoaXMuZ2V0VVRDRGF0ZUZyb21QYXJ0cygyMDAwLCBtb250aCwgMTUpO1xuICAgIGlmIChmb3JtYXQgPT09ICdzaG9ydCcpIHtcbiAgICAgIG1vbnRoID0gZ2V0TG9jYWxpc2VkRGF0ZU5hbWUoZGF0ZSwgdmFsaWRMb2NhbGUsIHsgbW9udGg6ICdsb25nJyB9KTtcbiAgICAgIHJldHVybiAobW9udGgubGVuZ3RoID4gNCkgPyBtb250aC5zbGljZSgwLCAzKSA6IG1vbnRoO1xuICAgIH1cbiAgICBjb25zdCBsb2NhbE1vbnRoTmFtZSA9IGdldExvY2FsaXNlZERhdGVOYW1lKGRhdGUsIHZhbGlkTG9jYWxlLCB7IG1vbnRoOiAnbG9uZycgfSk7XG5cbiAgICByZXR1cm4gbG9jYWxNb250aE5hbWUgfHwgZ2V0RGVmYXVsdE1vbnRoTmFtZShtb250aCwgJ2VuLUdCJywgdmFsaWRGb3JtYXQpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGdldERlZmF1bHRNb250aE5hbWUobW9udGgsIGxvY2FsZSwgZm9ybWF0KSB7XG4gICAgY29uc3QgbGFuZ3VhZ2UgPSBnZXRMYW5ndWFnZUZyb21Mb2NhbGUobG9jYWxlKTtcblxuICAgIGlmIChsYW5ndWFnZVxuICAgICAgJiYgREVGQVVMVF9NT05USF9OQU1FU19CWV9MQU5HVUFHRVtsYW5ndWFnZV1cbiAgICAgICYmIChmb3JtYXQgIT09ICdzaG9ydCcgfHwgbGFuZ3VhZ2UgPT09ICdqYScpKSB7XG4gICAgICByZXR1cm4gREVGQVVMVF9NT05USF9OQU1FU19CWV9MQU5HVUFHRVtsYW5ndWFnZV1bbW9udGhdO1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG5cblxuICB0aGlzLmdldFdlZWtkYXkgPSAoeWVhciwgbW9udGgsIGRheSkgPT4ge1xuICAgIGNvbnN0IHV0Y0RhdGUgPSB0aGlzLmdldFVUQ0RhdGVGcm9tUGFydHMoeWVhciwgbW9udGgsIGRheSk7XG4gICAgcmV0dXJuIHV0Y0RhdGUuZ2V0VVRDRGF5KCk7XG4gIH07XG5cbiAgdGhpcy5pc01vbnRoQmVmb3JlRGF5ID0gKGxvY2FsZSkgPT4ge1xuICAgIGNvbnN0IGxhbmcgPSBnZXRMYW5ndWFnZUZyb21Mb2NhbGUobG9jYWxlKTtcbiAgICByZXR1cm4gKChsYW5nID09PSAnamEnKSB8fCAobG9jYWxlICYmIGxvY2FsZS5pbmRleE9mKCdVUycsIGxvY2FsZS5sZW5ndGggLSAyKSAhPT0gLTEpKTtcbiAgfTtcblxuICB0aGlzLmlzWWVhckJlZm9yZU1vbnRoID0gKGxvY2FsZSkgPT4ge1xuICAgIGNvbnN0IGxhbmcgPSBnZXRMYW5ndWFnZUZyb21Mb2NhbGUobG9jYWxlKTtcbiAgICByZXR1cm4gKGxhbmcgPT09ICdqYScpO1xuICB9O1xuXG4gIHRoaXMuYWRkWWVhcnMgPSAoZGF0ZSwgeWVhcnMpID0+IHRoaXMuYWRkVG9EYXRlKGRhdGUsIHllYXJzLCAwLCAwKTtcbiAgdGhpcy5hZGRNb250aHMgPSAoZGF0ZSwgbW9udGhzKSA9PiB0aGlzLmFkZFRvRGF0ZShkYXRlLCAwLCBtb250aHMsIDApO1xuICB0aGlzLmFkZERheXMgPSAoZGF0ZSwgZGF5cykgPT4gdGhpcy5hZGRUb0RhdGUoZGF0ZSwgMCwgMCwgZGF5cyk7XG5cbiAgdGhpcy5hZGRUb0RhdGUgPSAoZGF0ZSwgeWVhcnMsIG1vbnRocywgZGF5cykgPT4gdGhpcy5nZXRVVENEYXRlRnJvbVBhcnRzKFxuICAgIGRhdGUuZ2V0VVRDRnVsbFllYXIoKSArIHllYXJzLFxuICAgIGRhdGUuZ2V0VVRDTW9udGgoKSArIG1vbnRocyxcbiAgICBkYXRlLmdldFVUQ0RhdGUoKSArIGRheXNcbiAgKTtcblxuICB0aGlzLmdldExvY2FsZVRpbWVTdHJpbmcgPSAoZGF0ZSwgbG9jYWxlKSA9PiB0aGlzLmdldFRpbWVTdHJpbmcoXG4gICAgZGF0ZS5nZXRIb3VycygpLFxuICAgIGRhdGUuZ2V0TWludXRlcygpLFxuICAgIGRhdGUuZ2V0U2Vjb25kcygpLFxuICAgIGxvY2FsZVxuICApO1xuXG4gIHRoaXMuZ2V0VGltZVN0cmluZyA9IChob3VycywgbWludXRlcywgc2Vjb25kcywgbG9jYWxlKSA9PiB7XG4gICAgY29uc3QgbGFuZyA9IGdldExhbmd1YWdlRnJvbUxvY2FsZShsb2NhbGUpO1xuXG4gICAgaWYgKGhvdXJzIDwgMTApIHtcbiAgICAgIGhvdXJzID0gYDAke2hvdXJzfWA7XG4gICAgfVxuICAgIGlmIChtaW51dGVzIDwgMTApIHtcbiAgICAgIG1pbnV0ZXMgPSBgMCR7bWludXRlc31gO1xuICAgIH1cblxuICAgIGlmIChsYW5nID09PSAnZW4nKSB7XG4gICAgICBjb25zdCBhbXBtID0gaG91cnMgPj0gMTIgPyAncG0nIDogJ2FtJztcbiAgICAgIGhvdXJzICU9IDEyO1xuICAgICAgaWYgKGhvdXJzID09PSAwKSB7XG4gICAgICAgIGhvdXJzID0gMTI7XG4gICAgICB9XG4gICAgICBpZiAobWludXRlcyA9PT0gJzAwJykge1xuICAgICAgICByZXR1cm4gYCR7aG91cnN9JHthbXBtfWA7XG4gICAgICB9XG4gICAgICByZXR1cm4gYCR7aG91cnN9OiR7bWludXRlc30ke2FtcG19YDtcbiAgICB9XG4gICAgcmV0dXJuIGAke2hvdXJzfToke21pbnV0ZXN9YDtcbiAgfTtcblxuICB0aGlzLmdldFllYXJBbmRNb250aFByZXNlbnRhdGlvbiA9ICh5ZWFyLCBtb250aCwgbG9jYWxlLCBmb3JtYXQpID0+IHtcbiAgICBjb25zdCB5ZWFyTmFtZSA9IGdldFllYXJOYW1lKHllYXIsIGxvY2FsZSk7XG4gICAgY29uc3QgbW9udGhOYW1lID0gdGhpcy5nZXRNb250aE5hbWVGb3JMb2NhbGUobW9udGgsIGxvY2FsZSwgZm9ybWF0IHx8ICdsb25nJyk7XG5cbiAgICBjb25zdCBsYW5ndWFnZSA9IGdldExhbmd1YWdlRnJvbUxvY2FsZShsb2NhbGUpO1xuICAgIGNvbnN0IGRlbGltaXRlciA9IGdldERlbGltaXRlcihsYW5ndWFnZSk7XG5cbiAgICBpZiAodGhpcy5pc1llYXJCZWZvcmVNb250aChsb2NhbGUpKSB7XG4gICAgICByZXR1cm4gW3llYXJOYW1lLCBtb250aE5hbWVdLmpvaW4oZGVsaW1pdGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIFttb250aE5hbWUsIHllYXJOYW1lXS5qb2luKGRlbGltaXRlcik7XG4gIH07XG5cbiAgdGhpcy5nZXRZZWFyTW9udGhEYXRlUHJlc2VudGF0aW9uID0gKHllYXIsIG1vbnRoLCBkYXksIGxvY2FsZSwgZm9ybWF0KSA9PiB7XG4gICAgY29uc3QgeWVhck5hbWUgPSBnZXRZZWFyTmFtZSh5ZWFyLCBsb2NhbGUpO1xuICAgIGNvbnN0IG1vbnRoTmFtZSA9IHRoaXMuZ2V0TW9udGhOYW1lRm9yTG9jYWxlKG1vbnRoLCBsb2NhbGUsIGZvcm1hdCB8fCAnbG9uZycpO1xuICAgIGNvbnN0IGRhdGVOYW1lID0gZ2V0RGF0ZU5hbWUoZGF5LCBsb2NhbGUpO1xuXG4gICAgY29uc3QgbGFuZ3VhZ2UgPSBnZXRMYW5ndWFnZUZyb21Mb2NhbGUobG9jYWxlKTtcbiAgICBjb25zdCBkZWxpbWl0ZXIgPSBnZXREZWxpbWl0ZXIobGFuZ3VhZ2UpO1xuXG4gICAgaWYgKHRoaXMuaXNZZWFyQmVmb3JlTW9udGgobG9jYWxlKSkge1xuICAgICAgcmV0dXJuIFt5ZWFyTmFtZSwgbW9udGhOYW1lLCBkYXRlTmFtZV0uam9pbihkZWxpbWl0ZXIpO1xuICAgIH1cbiAgICBpZiAodGhpcy5pc01vbnRoQmVmb3JlRGF5KGxvY2FsZSkpIHtcbiAgICAgIGNvbnN0IGRhdGVTdHJpbmcgPSBbbW9udGhOYW1lLCBkYXRlTmFtZV0uam9pbihkZWxpbWl0ZXIpO1xuICAgICAgcmV0dXJuIGAke2RhdGVTdHJpbmd9LCAke3llYXJOYW1lfWA7XG4gICAgfVxuICAgIHJldHVybiBbZGF0ZU5hbWUsIG1vbnRoTmFtZSwgeWVhck5hbWVdLmpvaW4oZGVsaW1pdGVyKTtcbiAgfTtcblxuICB0aGlzLmdldExvY2FsZU5vdyA9ICgpID0+IG5ldyBEYXRlKCk7XG5cbiAgdGhpcy5nZXRVVENOb3cgPSAoKSA9PiB7XG4gICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICByZXR1cm4gdGhpcy5nZXRVVENEYXRlRnJvbVBhcnRzKFxuICAgICAgbm93LmdldFVUQ0Z1bGxZZWFyKCksXG4gICAgICBub3cuZ2V0VVRDTW9udGgoKSxcbiAgICAgIG5vdy5nZXRVVENEYXRlKCksXG4gICAgICBub3cuZ2V0VVRDSG91cnMoKSxcbiAgICAgIG5vdy5nZXRVVENNaW51dGVzKCksXG4gICAgICBub3cuZ2V0VVRDU2Vjb25kcygpXG4gICAgKTtcbiAgfTtcblxuICB0aGlzLmdldExvY2FsZURhdGVTdHJpbmcgPSAoZGF0ZSwgbG9jYWxlLCBmb3JtYXQpID0+IHtcbiAgICAvLyBDaGVjayB0aGF0IHRoZSBkYXRlIGV4aXN0c1xuICAgIGlmICghZGF0ZS5nZXRGdWxsWWVhcikge1xuICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSB2YXJpYWJsZXNcbiAgICBjb25zdCBub3cgPSB0aGlzLmdldExvY2FsZU5vdygpO1xuXG4gICAgcmV0dXJuIHRoaXMuZ2V0RGF0ZVN0cmluZyhcbiAgICAgIGRhdGUuZ2V0RnVsbFllYXIoKSxcbiAgICAgIGRhdGUuZ2V0TW9udGgoKSxcbiAgICAgIGRhdGUuZ2V0RGF0ZSgpLFxuICAgICAgZGF0ZS5nZXRIb3VycygpLFxuICAgICAgZGF0ZS5nZXRNaW51dGVzKCksXG4gICAgICBkYXRlLmdldFNlY29uZHMoKSxcbiAgICAgIGRhdGUuZ2V0RGF5KCksXG4gICAgICBsb2NhbGUsXG4gICAgICBkYXRlIC0gbm93LFxuICAgICAgbm93LmdldEZ1bGxZZWFyKCksXG4gICAgICBmb3JtYXRcbiAgICApO1xuICB9O1xuXG4gIHRoaXMuZ2V0VVRDRGF0ZVN0cmluZyA9IChkYXRlLCBsb2NhbGUsIGZvcm1hdCkgPT4ge1xuICAgIC8vIENoZWNrIHRoYXQgdGhlIGRhdGUgZXhpc3RzXG4gICAgaWYgKCFkYXRlKSB7XG4gICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG5cbiAgICBjb25zdCBub3cgPSB0aGlzLmdldFVUQ05vdygpO1xuXG4gICAgcmV0dXJuIHRoaXMuZ2V0RGF0ZVN0cmluZyhcbiAgICAgIGRhdGUuZ2V0VVRDRnVsbFllYXIoKSxcbiAgICAgIGRhdGUuZ2V0VVRDTW9udGgoKSxcbiAgICAgIGRhdGUuZ2V0VVRDRGF0ZSgpLFxuICAgICAgZGF0ZS5nZXRVVENIb3VycygpLFxuICAgICAgZGF0ZS5nZXRVVENNaW51dGVzKCksXG4gICAgICBkYXRlLmdldFVUQ1NlY29uZHMoKSxcbiAgICAgIGRhdGUuZ2V0VVRDRGF5KCksXG4gICAgICBsb2NhbGUsXG4gICAgICBkYXRlIC0gbm93LFxuICAgICAgbm93LmdldFVUQ0Z1bGxZZWFyKCksXG4gICAgICBmb3JtYXRcbiAgICApO1xuICB9O1xuXG4gIHRoaXMuZ2V0RGF0ZVN0cmluZyA9IChcbiAgICB5ZWFyLFxuICAgIG1vbnRoLFxuICAgIGRheSxcbiAgICBob3VycyxcbiAgICBtaW51dGVzLFxuICAgIHNlY29uZHMsXG4gICAgZGF5T2ZXZWVrLFxuICAgIGxvY2FsZSxcbiAgICBvZmZzZXQsXG4gICAgY3VycmVudFllYXIsXG4gICAgZm9ybWF0XG4gICkgPT4ge1xuICAgIGNvbnN0IHNpeERheXMgPSAxNDQgKiA2MCAqIDYwICogMTAwMDtcbiAgICBjb25zdCBlaWdodERheXMgPSA4ICogMjQgKiA2MCAqIDYwICogMTAwMDtcblxuICAgIGNvbnN0IGhhc1RpbWUgPSBNYXRoLmFicyhvZmZzZXQpIDwgc2l4RGF5cyAmJiBmb3JtYXQgIT09ICdsb25nJztcbiAgICBjb25zdCBoYXNEYXRlID0gIWhhc1RpbWU7XG4gICAgY29uc3QgaGFzV2Vla2RheSA9IE1hdGguYWJzKG9mZnNldCkgPCBlaWdodERheXMgfHwgZm9ybWF0ID09PSAnbG9uZyc7XG4gICAgY29uc3QgaGFzTW9udGggPSAhaGFzV2Vla2RheSB8fCBmb3JtYXQgPT09ICdsb25nJztcbiAgICBjb25zdCBoYXNZZWFyID0gKCFoYXNXZWVrZGF5ICYmIGN1cnJlbnRZZWFyICE9PSB5ZWFyKSB8fCBmb3JtYXQgPT09ICdsb25nJztcblxuICAgIGNvbnN0IHllYXJOYW1lID0gaGFzWWVhciA/IGdldFllYXJOYW1lKHllYXIsIGxvY2FsZSkgOiAnJztcbiAgICBjb25zdCBtb250aE5hbWUgPSBoYXNNb250aCA/IHRoaXMuZ2V0TW9udGhOYW1lRm9yTG9jYWxlKFxuICAgICAgbW9udGgsXG4gICAgICBsb2NhbGUsXG4gICAgICBmb3JtYXQgPT09ICdzaG9ydCcgPyAnc2hvcnQnIDogJ2xvbmcnXG4gICAgKSA6ICcnO1xuICAgIGNvbnN0IGRhdGVOYW1lID0gaGFzRGF0ZSA/IGdldERhdGVOYW1lKGRheSwgbG9jYWxlKSA6ICcnO1xuICAgIGNvbnN0IHdlZWtkYXlOYW1lID0gaGFzV2Vla2RheSA/IHRoaXMuZ2V0RGF5TmFtZUZvckxvY2FsZShcbiAgICAgIGRheU9mV2VlayxcbiAgICAgIGxvY2FsZSxcbiAgICAgIGZvcm1hdCA9PT0gJ3Nob3J0JyA/ICdzaG9ydCcgOiAnbG9uZydcbiAgICApIDogJyc7XG4gICAgY29uc3QgdGltZU5hbWUgPSBoYXNUaW1lID8gdGhpcy5nZXRUaW1lU3RyaW5nKGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBsb2NhbGUpIDogJyc7XG5cbiAgICByZXR1cm4gdGhpcy5jb21iaW5lRGF0ZVBhcnRzKHllYXJOYW1lLCBtb250aE5hbWUsIGRhdGVOYW1lLCB0aW1lTmFtZSwgd2Vla2RheU5hbWUsIGxvY2FsZSk7XG4gIH07XG5cbiAgdGhpcy5jb21iaW5lRGF0ZVBhcnRzID0gKHllYXJOYW1lLCBtb250aE5hbWUsIGRhdGVOYW1lLCB0aW1lTmFtZSwgZGF5TmFtZSwgbG9jYWxlKSA9PiB7XG4gICAgY29uc3QgbGFuZyA9IGdldExhbmd1YWdlRnJvbUxvY2FsZShsb2NhbGUpO1xuICAgIGNvbnN0IGRlbGltaXRlciA9IGdldERlbGltaXRlcihsYW5nKTtcblxuICAgIGxldCBkYXRlU3RyaW5nO1xuXG4gICAgaWYgKHRoaXMuaXNZZWFyQmVmb3JlTW9udGgobG9jYWxlKSkge1xuICAgICAgZGF0ZVN0cmluZyA9IFt5ZWFyTmFtZSwgbW9udGhOYW1lLCBkYXRlTmFtZV0uam9pbihkZWxpbWl0ZXIpLnRyaW0oKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNNb250aEJlZm9yZURheShsb2NhbGUpKSB7XG4gICAgICBkYXRlU3RyaW5nID0gW21vbnRoTmFtZSwgZGF0ZU5hbWVdLmpvaW4oZGVsaW1pdGVyKS50cmltKCk7XG4gICAgICBpZiAoeWVhck5hbWUpIHtcbiAgICAgICAgZGF0ZVN0cmluZyArPSBgLCAke3llYXJOYW1lfWA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGVTdHJpbmcgPSBbZGF0ZU5hbWUsIG1vbnRoTmFtZSwgeWVhck5hbWVdLmpvaW4oZGVsaW1pdGVyKS50cmltKCk7XG4gICAgfVxuXG4gICAgaWYgKGRheU5hbWUpIHtcbiAgICAgIGlmIChsYW5nID09PSAnamEnKSB7XG4gICAgICAgIHJldHVybiBgJHtkYXRlU3RyaW5nfSAke3RpbWVOYW1lfSAoJHtkYXlOYW1lfSlgLnRyaW0oKTtcbiAgICAgIH1cbiAgICAgIC8vIEZvciBsb25nZXIgZGF0ZXMgdXNlIGEgY29tbWFcbiAgICAgIGlmIChtb250aE5hbWUgfHwgeWVhck5hbWUpIHtcbiAgICAgICAgZGF0ZVN0cmluZyA9IGAke2RheU5hbWV9LCAke2RhdGVTdHJpbmd9YC50cmltKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRlU3RyaW5nID0gYCR7ZGF5TmFtZX0gJHtkYXRlU3RyaW5nfWAudHJpbSgpO1xuICAgICAgfVxuICAgIH1cbiAgICBkYXRlU3RyaW5nID0gYCR7ZGF0ZVN0cmluZ30gJHt0aW1lTmFtZX1gO1xuXG4gICAgcmV0dXJuIGRhdGVTdHJpbmcudHJpbSgpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIGdldERhdGVOYW1lKGRheU9mTW9udGgsIGxvY2FsZSkge1xuICAgIGNvbnN0IGxhbmcgPSBnZXRMYW5ndWFnZUZyb21Mb2NhbGUobG9jYWxlKTtcbiAgICBjb25zdCBzdWZmaXggPSBnZXRTdWZmaXgoREFZX1NVRkZJWEVTX0JZX0xBTkdVQUdFLCBkYXlPZk1vbnRoLCBsYW5nKSB8fCAnJztcbiAgICByZXR1cm4gYCR7ZGF5T2ZNb250aH0ke3N1ZmZpeH1gO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0WWVhck5hbWUoeWVhciwgbG9jYWxlKSB7XG4gICAgY29uc3QgbGFuZyA9IGdldExhbmd1YWdlRnJvbUxvY2FsZShsb2NhbGUpO1xuICAgIGNvbnN0IHN1ZmZpeCA9IGdldFN1ZmZpeChZRUFSX1NVRkZJWEVTX0JZX0xBTkdVQUdFLCB5ZWFyLCBsYW5nKTtcbiAgICByZXR1cm4gYCR7eWVhcn0ke3N1ZmZpeH1gO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TG9jYWxpc2VkRGF0ZU5hbWUoZGF0ZSwgbG9jYWxlLCBmb3JtYXR0aW5nT2JqZWN0KSB7XG4gICAgaWYgKCFkYXRlLnRvTG9jYWxlRGF0ZVN0cmluZykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgbGV0IG5hbWUgPSBkYXRlLnRvTG9jYWxlRGF0ZVN0cmluZyhsb2NhbGUsIGZvcm1hdHRpbmdPYmplY3QpO1xuXG4gICAgaWYgKGlzTG9jYWxlVHJhbnNsYXRpb25SZXF1aXJlc1N0cmlwcGluZyhsb2NhbGUpKSB7XG4gICAgICAvLyBzdHJpcCBvdXQgYW55IG51bWJlcnMsIHNwYWNlcywgY29tbWFzIGFuZCBkb3RzIGluIGNhc2UgYnJvd3NlciAoY291Z2guLi5TYWZhcmkpXG4gICAgICAvLyBkb2Vzbid0IHJlc3BlY3QgZm9ybWF0XG4gICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKC9bMC05XXxcXHN8LHxcXC4vZywgJycpO1xuICAgIH1cblxuICAgIHJldHVybiBuYW1lWzBdLnRvVXBwZXJDYXNlKCkgKyBuYW1lLnN1YnN0cmluZygxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFZhbGlkRGF0ZUZvcm1hdChmb3JtYXQpIHtcbiAgICBjb25zdCB2YWxpZEZvcm1hdHMgPSBbJ25hcnJvdycsICdzaG9ydCcsICdsb25nJ107XG4gICAgaWYgKCFmb3JtYXQgfHwgdmFsaWRGb3JtYXRzLmluZGV4T2YoZm9ybWF0KSA8IDApIHtcbiAgICAgIHJldHVybiAnbG9uZyc7XG4gICAgfVxuICAgIHJldHVybiBmb3JtYXQ7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRWYWxpZExvY2FsZShsb2NhbGUpIHtcbiAgICBpZiAoIWlzSW50bFN1cHBvcnRlZEZvckxvY2FsZShsb2NhbGUpKSB7XG4gICAgICByZXR1cm4gJ2VuLUdCJztcbiAgICB9XG4gICAgcmV0dXJuIGxvY2FsZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzSW50bFN1cHBvcnRlZEZvckxvY2FsZShsb2NhbGUpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3Qgc3VwcG9ydGVkTG9jYWxlcyA9IHdpbmRvdy5JbnRsLkRhdGVUaW1lRm9ybWF0LnN1cHBvcnRlZExvY2FsZXNPZihbbG9jYWxlXSk7XG4gICAgICByZXR1cm4gc3VwcG9ydGVkTG9jYWxlcy5sZW5ndGggPiAwO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNMb2NhbGVUcmFuc2xhdGlvblJlcXVpcmVzU3RyaXBwaW5nKGxvY2FsZSkge1xuICAgIGlmICghbG9jYWxlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBsYW5nID0gZ2V0TGFuZ3VhZ2VGcm9tTG9jYWxlKGxvY2FsZSk7XG4gICAgaWYgKGxhbmcgPT09ICdqYScpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldExhbmd1YWdlRnJvbUxvY2FsZShsb2NhbGUpIHtcbiAgICBpZiAoIWxvY2FsZSkge1xuICAgICAgcmV0dXJuICdlbic7XG4gICAgfVxuICAgIHJldHVybiBsb2NhbGUuc3Vic3RyaW5nKDAsIDIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0RGVsaW1pdGVyKGxhbmcpIHtcbiAgICByZXR1cm4gKERFTElNSVRFUlNfQllfTEFOR1VBR0VbbGFuZ10gIT09IHVuZGVmaW5lZCkgPyBERUxJTUlURVJTX0JZX0xBTkdVQUdFW2xhbmddIDogJyAnO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0U3VmZml4KHN1ZmZpeGVzLCB2YWx1ZSwgbGFuZykge1xuICAgIGlmICghc3VmZml4ZXNbbGFuZ10pIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgaWYgKHN1ZmZpeGVzW2xhbmddLmV4YWN0TWF0Y2ggJiYgc3VmZml4ZXNbbGFuZ10uZXhhY3RNYXRjaFt2YWx1ZV0pIHtcbiAgICAgIHJldHVybiBzdWZmaXhlc1tsYW5nXS5leGFjdE1hdGNoW3ZhbHVlXTtcbiAgICB9XG4gICAgaWYgKHN1ZmZpeGVzW2xhbmddLmVuZHNXaXRoICYmIHN1ZmZpeGVzW2xhbmddLmVuZHNXaXRoW3ZhbHVlICUgMTBdKSB7XG4gICAgICByZXR1cm4gc3VmZml4ZXNbbGFuZ10uZW5kc1dpdGhbdmFsdWUgJSAxMF07XG4gICAgfVxuICAgIHJldHVybiBzdWZmaXhlc1tsYW5nXS5kZWZhdWx0O1xuICB9XG5cbiAgY29uc3QgREVGQVVMVF9NT05USF9OQU1FU19CWV9MQU5HVUFHRSA9IHtcbiAgICBlbjogW1xuICAgICAgJ0phbnVhcnknLFxuICAgICAgJ0ZlYnJ1YXJ5JyxcbiAgICAgICdNYXJjaCcsXG4gICAgICAnQXByaWwnLFxuICAgICAgJ01heScsXG4gICAgICAnSnVuZScsXG4gICAgICAnSnVseScsXG4gICAgICAnQXVndXN0JyxcbiAgICAgICdTZXB0ZW1iZXInLFxuICAgICAgJ09jdG9iZXInLFxuICAgICAgJ05vdmVtYmVyJyxcbiAgICAgICdEZWNlbWJlcidcbiAgICBdLFxuICAgIGphOiBbXG4gICAgICAnMeaciCcsXG4gICAgICAnMuaciCcsXG4gICAgICAnM+aciCcsXG4gICAgICAnNOaciCcsXG4gICAgICAnNeaciCcsXG4gICAgICAnNuaciCcsXG4gICAgICAnN+aciCcsXG4gICAgICAnOOaciCcsXG4gICAgICAnOeaciCcsXG4gICAgICAnMTDmnIgnLFxuICAgICAgJzEx5pyIJyxcbiAgICAgICcxMuaciCdcbiAgICBdXG4gIH07XG5cbiAgY29uc3QgREVGQVVMVF9EQVlfTkFNRVNfQllfTEFOR1VBR0UgPSB7XG4gICAgZW46IFtcbiAgICAgICdTdW5kYXknLFxuICAgICAgJ01vbmRheScsXG4gICAgICAnVHVlc2RheScsXG4gICAgICAnV2VkbmVzZGF5JyxcbiAgICAgICdUaHVyc2RheScsXG4gICAgICAnRnJpZGF5JyxcbiAgICAgICdTYXR1cmRheSdcbiAgICBdLFxuICAgIGphOiBbXG4gICAgICAn5pelJywgJ+aciCcsICfngasnLCAn5rC0JywgJ+acqCcsICfph5EnLCAn5ZyfJ1xuICAgIF1cbiAgfTtcblxuICBjb25zdCBEQVlfU1VGRklYRVNfQllfTEFOR1VBR0UgPSB7XG4gICAgZW46IHtcbiAgICAgIGV4YWN0TWF0Y2g6IHtcbiAgICAgICAgMTE6ICd0aCcsXG4gICAgICAgIDEyOiAndGgnLFxuICAgICAgICAxMzogJ3RoJ1xuICAgICAgfSxcbiAgICAgIGVuZHNXaXRoOiB7XG4gICAgICAgIDE6ICdzdCcsXG4gICAgICAgIDI6ICduZCcsXG4gICAgICAgIDM6ICdyZCdcbiAgICAgIH0sXG4gICAgICBkZWZhdWx0OiAndGgnXG4gICAgfSxcbiAgICBkZToge1xuICAgICAgZGVmYXVsdDogJy4nXG4gICAgfSxcbiAgICBmaToge1xuICAgICAgZGVmYXVsdDogJy4nXG4gICAgfSxcbiAgICBqYToge1xuICAgICAgZGVmYXVsdDogJ+aXpSdcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgWUVBUl9TVUZGSVhFU19CWV9MQU5HVUFHRSA9IHtcbiAgICBqYToge1xuICAgICAgZGVmYXVsdDogJ+W5tCdcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgREVMSU1JVEVSU19CWV9MQU5HVUFHRSA9IHtcbiAgICBqYTogJydcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgRGF0ZVNlcnZpY2U7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBEYXRlU2VydmljZSBmcm9tICcuL2RhdGUuc2VydmljZS5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5zZXJ2aWNlcy5kYXRlJywgW10pXG4gIC5zZXJ2aWNlKCdUd0RhdGVTZXJ2aWNlJywgRGF0ZVNlcnZpY2UpLm5hbWU7XG4iLCJpbXBvcnQge1xuICBpc09iamVjdCxcbiAgaXNBcnJheSxcbiAgaXNTdHJpbmcsXG4gIGlzTnVtYmVyLFxuICBpc0ludGVnZXIsXG4gIGlzQm9vbGVhbixcbiAgaXNOdWxsXG59IGZyb20gJy4uL3R5cGUtdmFsaWRhdG9ycyc7XG5cbmltcG9ydCB7XG4gIGlzVmFsaWRSZXF1aXJlZCxcbiAgaXNWYWxpZE1pbkxlbmd0aCxcbiAgaXNWYWxpZE1heExlbmd0aCxcbiAgaXNWYWxpZFBhdHRlcm4sXG4gIGlzVmFsaWRNYXhpbXVtLFxuICBpc1ZhbGlkTWluaW11bSxcbiAgaXNWYWxpZE1pbkl0ZW1zLFxuICBpc1ZhbGlkTWF4SXRlbXNcbn0gZnJvbSAnLi4vcnVsZS12YWxpZGF0b3JzJztcblxuZnVuY3Rpb24gZ2V0VmFsaWRhdGlvbkZhaWx1cmVzKHZhbHVlLCBzY2hlbWEsIGlzUmVxdWlyZWQpIHtcbiAgaWYgKGlzTnVsbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gaXNSZXF1aXJlZCA/IFsncmVxdWlyZWQnXSA6IFtdO1xuICB9XG5cbiAgaWYgKHNjaGVtYS5lbnVtKSB7XG4gICAgcmV0dXJuIGdldEVudW1WYWxpZGF0aW9uRmFpbHVyZXModmFsdWUsIHNjaGVtYSwgaXNSZXF1aXJlZCk7XG4gIH1cblxuICBpZiAoc2NoZW1hLmNvbnN0KSB7XG4gICAgcmV0dXJuIGdldENvbnN0VmFsaWRhdGlvbkZhaWx1cmVzKHZhbHVlLCBzY2hlbWEsIGlzUmVxdWlyZWQpO1xuICB9XG5cbiAgc3dpdGNoIChzY2hlbWEudHlwZSkge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICByZXR1cm4gZ2V0U3RyaW5nVmFsaWRhdGlvbkZhaWx1cmVzKHZhbHVlLCBzY2hlbWEsIGlzUmVxdWlyZWQpO1xuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICByZXR1cm4gZ2V0TnVtYmVyVmFsaWRhdGlvbkZhaWx1cmVzKHZhbHVlLCBzY2hlbWEsIGlzUmVxdWlyZWQpO1xuICAgIGNhc2UgJ2ludGVnZXInOlxuICAgICAgcmV0dXJuIGdldEludGVnZXJWYWxpZGF0aW9uRmFpbHVyZXModmFsdWUsIHNjaGVtYSwgaXNSZXF1aXJlZCk7XG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICByZXR1cm4gZ2V0Qm9vbGVhblZhbGlkYXRpb25GYWlsdXJlcyh2YWx1ZSwgc2NoZW1hLCBpc1JlcXVpcmVkKTtcbiAgICBjYXNlICdhcnJheSc6XG4gICAgICByZXR1cm4gZ2V0QXJyYXlWYWxpZGF0aW9uRmFpbHVyZXModmFsdWUsIHNjaGVtYSk7XG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIHJldHVybiBnZXRPYmplY3RWYWxpZGF0aW9uRmFpbHVyZXModmFsdWUsIHNjaGVtYSk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBbXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRTdHJpbmdWYWxpZGF0aW9uRmFpbHVyZXModmFsdWUsIHNjaGVtYSwgaXNSZXF1aXJlZCkge1xuICBpZiAoIWlzU3RyaW5nKHZhbHVlKSAmJiAhaXNOdWxsKHZhbHVlKSkge1xuICAgIHJldHVybiBbJ3R5cGUnXTtcbiAgfVxuXG4gIGlmICh2YWx1ZSA9PT0gJycgJiYgaXNSZXF1aXJlZCkge1xuICAgIHJldHVybiBbJ3JlcXVpcmVkJ107XG4gIH1cblxuICBjb25zdCBmYWlsdXJlcyA9IFtdO1xuICBpZiAoIWlzVmFsaWRSZXF1aXJlZCh2YWx1ZSwgaXNSZXF1aXJlZCkpIHtcbiAgICBmYWlsdXJlcy5wdXNoKCdyZXF1aXJlZCcpO1xuICB9XG4gIGlmICghaXNWYWxpZE1pbkxlbmd0aCh2YWx1ZSwgc2NoZW1hLm1pbkxlbmd0aCkpIHtcbiAgICBmYWlsdXJlcy5wdXNoKCdtaW5MZW5ndGgnKTtcbiAgfVxuICBpZiAoIWlzVmFsaWRNYXhMZW5ndGgodmFsdWUsIHNjaGVtYS5tYXhMZW5ndGgpKSB7XG4gICAgZmFpbHVyZXMucHVzaCgnbWF4TGVuZ3RoJyk7XG4gIH1cbiAgaWYgKCFpc1ZhbGlkUGF0dGVybih2YWx1ZSwgc2NoZW1hLnBhdHRlcm4pKSB7XG4gICAgZmFpbHVyZXMucHVzaCgncGF0dGVybicpO1xuICB9XG4gIGlmICghaXNWYWxpZE1pbmltdW0odmFsdWUsIHNjaGVtYS5taW5pbXVtKSkge1xuICAgIGZhaWx1cmVzLnB1c2goJ21pbmltdW0nKTtcbiAgfVxuICBpZiAoIWlzVmFsaWRNYXhpbXVtKHZhbHVlLCBzY2hlbWEubWF4aW11bSkpIHtcbiAgICBmYWlsdXJlcy5wdXNoKCdtYXhpbXVtJyk7XG4gIH1cbiAgcmV0dXJuIGZhaWx1cmVzO1xufVxuXG5mdW5jdGlvbiBnZXROdW1iZXJWYWxpZGF0aW9uRmFpbHVyZXModmFsdWUsIHNjaGVtYSwgaXNSZXF1aXJlZCkge1xuICBpZiAoIWlzTnVtYmVyKHZhbHVlKSAmJiAhaXNOdWxsKHZhbHVlKSkge1xuICAgIHJldHVybiBbJ3R5cGUnXTtcbiAgfVxuXG4gIGNvbnN0IGZhaWx1cmVzID0gW107XG4gIGlmICghaXNWYWxpZFJlcXVpcmVkKHZhbHVlLCBpc1JlcXVpcmVkKSkge1xuICAgIGZhaWx1cmVzLnB1c2goJ3JlcXVpcmVkJyk7XG4gIH1cbiAgaWYgKCFpc1ZhbGlkTWluaW11bSh2YWx1ZSwgc2NoZW1hLm1pbmltdW0pKSB7XG4gICAgZmFpbHVyZXMucHVzaCgnbWluaW11bScpO1xuICB9XG4gIGlmICghaXNWYWxpZE1heGltdW0odmFsdWUsIHNjaGVtYS5tYXhpbXVtKSkge1xuICAgIGZhaWx1cmVzLnB1c2goJ21heGltdW0nKTtcbiAgfVxuICByZXR1cm4gZmFpbHVyZXM7XG59XG5cbmZ1bmN0aW9uIGdldEludGVnZXJWYWxpZGF0aW9uRmFpbHVyZXModmFsdWUsIHNjaGVtYSwgaXNSZXF1aXJlZCkge1xuICBpZiAoIWlzSW50ZWdlcih2YWx1ZSkpIHtcbiAgICByZXR1cm4gWyd0eXBlJ107XG4gIH1cbiAgcmV0dXJuIGdldE51bWJlclZhbGlkYXRpb25GYWlsdXJlcyh2YWx1ZSwgc2NoZW1hLCBpc1JlcXVpcmVkKTtcbn1cblxuZnVuY3Rpb24gZ2V0Qm9vbGVhblZhbGlkYXRpb25GYWlsdXJlcyh2YWx1ZSwgc2NoZW1hLCBpc1JlcXVpcmVkKSB7XG4gIGlmICghaXNCb29sZWFuKHZhbHVlKSAmJiAhaXNOdWxsKHZhbHVlKSkge1xuICAgIHJldHVybiBbJ3R5cGUnXTtcbiAgfVxuXG4gIGNvbnN0IGZhaWx1cmVzID0gW107XG4gIGlmICghaXNWYWxpZFJlcXVpcmVkKHZhbHVlLCBpc1JlcXVpcmVkKSkge1xuICAgIGZhaWx1cmVzLnB1c2goJ3JlcXVpcmVkJyk7XG4gIH1cbiAgcmV0dXJuIGZhaWx1cmVzO1xufVxuXG5mdW5jdGlvbiBnZXRFbnVtVmFsaWRhdGlvbkZhaWx1cmVzKHZhbHVlLCBzY2hlbWEsIGlzUmVxdWlyZWQpIHtcbiAgaWYgKCFpc1ZhbGlkUmVxdWlyZWQodmFsdWUsIGlzUmVxdWlyZWQpKSB7XG4gICAgcmV0dXJuIFsncmVxdWlyZWQnXTtcbiAgfVxuXG4gIGlmICghaXNOdWxsKHZhbHVlKSAmJiBzY2hlbWEuZW51bS5pbmRleE9mKHZhbHVlKSA9PT0gLTEpIHtcbiAgICByZXR1cm4gWydlbnVtJ107XG4gIH1cbiAgcmV0dXJuIFtdO1xufVxuXG5mdW5jdGlvbiBnZXRDb25zdFZhbGlkYXRpb25GYWlsdXJlcyh2YWx1ZSwgc2NoZW1hLCBpc1JlcXVpcmVkKSB7XG4gIGlmICghaXNWYWxpZFJlcXVpcmVkKHZhbHVlLCBpc1JlcXVpcmVkKSkge1xuICAgIHJldHVybiBbJ3JlcXVpcmVkJ107XG4gIH1cblxuICBpZiAoIWlzTnVsbCh2YWx1ZSkgJiYgdmFsdWUgIT09IHNjaGVtYS5jb25zdCkge1xuICAgIHJldHVybiBbJ2NvbnN0J107XG4gIH1cbiAgcmV0dXJuIFtdO1xufVxuXG5mdW5jdGlvbiBnZXRBcnJheVZhbGlkYXRpb25GYWlsdXJlcyh2YWx1ZSwgc2NoZW1hKSB7XG4gIGlmICghaXNBcnJheSh2YWx1ZSkgJiYgIWlzTnVsbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gWyd0eXBlJ107XG4gIH1cblxuICBjb25zdCBmYWlsdXJlcyA9IFtdO1xuICBpZiAoIWlzVmFsaWRNaW5JdGVtcyh2YWx1ZSwgc2NoZW1hLm1pbkl0ZW1zKSkge1xuICAgIGZhaWx1cmVzLnB1c2goJ21pbkl0ZW1zJyk7XG4gIH1cbiAgaWYgKCFpc1ZhbGlkTWF4SXRlbXModmFsdWUsIHNjaGVtYS5tYXhJdGVtcykpIHtcbiAgICBmYWlsdXJlcy5wdXNoKCdtYXhJdGVtcycpO1xuICB9XG4gIHJldHVybiBmYWlsdXJlcztcbn1cblxuLyoqXG4gKiBXaGVuIHZhbGlkYXRpbmcgYW4gb2JqZWN0IHdlIG9ubHkgY2hlY2tpbmcgdGhhdCBpdCBpcyBhbiBvYmplY3QgYW5kIHRoYXQgaXRcbiAqIGhhcyB0aGUgcmVxdWlyZWQgcHJvcGVydGllcywgd2UgZG8gbm90IGNoZWNrIGlmIHRoZSBwcm9wZXJ0aWVzIGFyZSB2YWxpZC5cbiAqL1xuZnVuY3Rpb24gZ2V0T2JqZWN0VmFsaWRhdGlvbkZhaWx1cmVzKHZhbHVlLCBzY2hlbWEpIHtcbiAgaWYgKCFpc09iamVjdCh2YWx1ZSkgJiYgIWlzTnVsbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gWyd0eXBlJ107XG4gIH1cblxuICBpZiAoIWlzQXJyYXkoc2NoZW1hLnJlcXVpcmVkKSkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGNvbnN0IGFsbFByZXNlbnQgPSBzY2hlbWEucmVxdWlyZWRcbiAgICAubWFwKHByb3AgPT4gdHlwZW9mIHZhbHVlW3Byb3BdICE9PSAndW5kZWZpbmVkJylcbiAgICAucmVkdWNlKChwcm9wSW5Nb2RlbCwgdmFsaWRTb0ZhcikgPT4gcHJvcEluTW9kZWwgJiYgdmFsaWRTb0ZhciwgdHJ1ZSk7XG5cbiAgcmV0dXJuIGFsbFByZXNlbnQgPyBbXSA6IFsncmVxdWlyZWQnXTtcbn1cblxuZXhwb3J0IHtcbiAgZ2V0VmFsaWRhdGlvbkZhaWx1cmVzLFxuICBnZXRTdHJpbmdWYWxpZGF0aW9uRmFpbHVyZXMsXG4gIGdldE51bWJlclZhbGlkYXRpb25GYWlsdXJlcyxcbiAgZ2V0SW50ZWdlclZhbGlkYXRpb25GYWlsdXJlcyxcbiAgZ2V0Qm9vbGVhblZhbGlkYXRpb25GYWlsdXJlcyxcbiAgZ2V0RW51bVZhbGlkYXRpb25GYWlsdXJlcyxcbiAgZ2V0Q29uc3RWYWxpZGF0aW9uRmFpbHVyZXMsXG4gIGdldEFycmF5VmFsaWRhdGlvbkZhaWx1cmVzLFxuICBnZXRPYmplY3RWYWxpZGF0aW9uRmFpbHVyZXNcbn07XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcblxuY2xhc3MgU2VsZWN0Q29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKCRlbGVtZW50LCAkdHJhbnNjbHVkZSwgJHRpbWVvdXQsICRhdHRycywgVHdEb21TZXJ2aWNlLCAkc2NvcGUpIHtcbiAgICB0aGlzLiRuZ01vZGVsID0gJGVsZW1lbnQuY29udHJvbGxlcignbmdNb2RlbCcpO1xuICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDtcbiAgICB0aGlzLiRhdHRycyA9ICRhdHRycztcbiAgICB0aGlzLiR0aW1lb3V0ID0gJHRpbWVvdXQ7XG4gICAgdGhpcy4kdHJhbnNjbHVkZSA9ICR0cmFuc2NsdWRlO1xuICAgIHRoaXMuZG9tID0gVHdEb21TZXJ2aWNlO1xuXG4gICAgdGhpcy5lbGVtZW50ID0gJGVsZW1lbnRbMF07XG4gICAgJHNjb3BlLiR3YXRjaCgnJGN0cmwubmdNb2RlbCcsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHRoaXMub25Nb2RlbENoYW5nZShuZXdWYWx1ZSwgb2xkVmFsdWUpKTtcbiAgfVxuXG4gICRvbkluaXQoKSB7XG4gICAgdGhpcy5idXR0b24gPSB0aGlzLmVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnYnRuJylbMF07XG4gICAgdGhpcy5zZWFyY2ggPSAnJztcblxuICAgIHByZVNlbGVjdE1vZGVsVmFsdWUodGhpcy4kbmdNb2RlbCwgdGhpcyk7XG4gICAgc2V0RGVmYXVsdElmUmVxdWlyZWQodGhpcy4kbmdNb2RlbCwgdGhpcywgdGhpcy4kYXR0cnMsIHRoaXMuJHRpbWVvdXQpO1xuXG4gICAgYWRkRXZlbnRIYW5kbGVycyh0aGlzLCB0aGlzLiRlbGVtZW50LCB0aGlzLiRuZ01vZGVsLCB0aGlzLm9wdGlvbnMsIHRoaXMuJHRpbWVvdXQpO1xuXG4gICAgY2hlY2tGb3JUcmFuc2NsdWRlZENvbnRlbnQodGhpcy4kdHJhbnNjbHVkZSwgdGhpcyk7XG5cbiAgICB0aGlzLnJlc3BvbnNpdmVDbGFzc2VzID0gcmVzcG9uc2l2ZUNsYXNzZXM7XG5cbiAgICB0aGlzLm9wdGlvbnNQYWdlU2l6ZSA9IDMwMDtcbiAgICB0aGlzLm51bWJlck9mT3B0aW9uc1JldmVhbGVkID0gdGhpcy5vcHRpb25zUGFnZVNpemU7IC8vIEluaXQuXG4gICAgdGhpcy5oYXNNb3JlT3B0aW9uc1RvUmV2ZWFsID0gZmFsc2U7XG5cbiAgICB0aGlzLmZpbHRlclN0cmluZyA9ICcnO1xuICAgIHRoaXMuZmlsdGVyZWRPcHRpb25zID0gdGhpcy5nZXRGaWx0ZXJlZE9wdGlvbnMoKTtcbiAgfVxuXG4gICRvbkNoYW5nZXMoY2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLm9wdGlvbnMpIHtcbiAgICAgIHRoaXMub25PcHRpb25zQ2hhbmdlKFxuICAgICAgICBjaGFuZ2VzLm9wdGlvbnMuY3VycmVudFZhbHVlLFxuICAgICAgICBjaGFuZ2VzLm9wdGlvbnMucHJldmlvdXNWYWx1ZVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBvbk1vZGVsQ2hhbmdlKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xuICAgIGlmIChuZXdWYWx1ZSA9PT0gb2xkVmFsdWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG5ld1ZhbHVlIHx8IG9sZFZhbHVlKSB7XG4gICAgICB0aGlzLiRuZ01vZGVsLiRzZXREaXJ0eSgpO1xuICAgIH1cbiAgICBjb25zdCBvcHRpb24gPSBmaW5kT3B0aW9uRnJvbVZhbHVlKHRoaXMub3B0aW9ucywgbmV3VmFsdWUpO1xuICAgIGlmIChvcHRpb24pIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWQgPSBvcHRpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWQgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIG9uT3B0aW9uc0NoYW5nZShuZXdWYWx1ZSwgb2xkVmFsdWUpIHtcbiAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICBwcmVTZWxlY3RNb2RlbFZhbHVlKHRoaXMuJG5nTW9kZWwsIHRoaXMpO1xuICAgICAgc2V0RGVmYXVsdElmUmVxdWlyZWQodGhpcy4kbmdNb2RlbCwgdGhpcywgdGhpcy4kYXR0cnMsIHRoaXMuJHRpbWVvdXQpO1xuICAgICAgdGhpcy5maWx0ZXJlZE9wdGlvbnMgPSB0aGlzLmdldEZpbHRlcmVkT3B0aW9ucygpO1xuICAgIH1cbiAgfVxuXG4gIGNpcmNsZUNsYXNzZXMocmVzcG9uc2l2ZU9wdGlvbikge1xuICAgIGxldCBjbGFzc2VzID0gcmVzcG9uc2l2ZUNsYXNzZXMocmVzcG9uc2l2ZU9wdGlvbik7XG4gICAgY29uc3Qgc2Vjb25kYXJ5Q2xhc3NlcyA9IHJlc3BvbnNpdmVDbGFzc2VzKHRoaXMuaGlkZVNlY29uZGFyeSk7XG4gICAgLy8gSWYgc2Vjb25kYXJ5IHRleHQgbGluZSwgYW5kIGl0IHdvbid0IGJlIGhpZGRlbiBhdCBzb21lIHBvaW50LCB1c2UgbGFyZ2VyIGNpcmNsZVxuICAgIGlmICh0aGlzLnNlbGVjdGVkLnNlY29uZGFyeSAmJiBzZWNvbmRhcnlDbGFzc2VzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY2xhc3NlcyArPSAnIGNpcmNsZS1zbSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNsYXNzZXMgKz0gJyBjaXJjbGUteHMnO1xuICAgIH1cbiAgICByZXR1cm4gY2xhc3NlcztcbiAgfVxuXG4gIGJ1dHRvbkZvY3VzKCkge1xuICAgIHRoaXMuZWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnZm9jdXMnKSk7XG4gIH1cblxuICBvcHRpb25DbGljayhvcHRpb24sICRldmVudCkge1xuICAgIGlmIChvcHRpb24uZGlzYWJsZWQpIHtcbiAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgc2VsZWN0T3B0aW9uKHRoaXMuJG5nTW9kZWwsIHRoaXMsIG9wdGlvbik7XG4gICAgdGhpcy5idXR0b24uZm9jdXMoKTtcbiAgfVxuXG4gIG9wdGlvbkZvY3VzKG9wdGlvbikge1xuICAgIHNlbGVjdE9wdGlvbih0aGlzLiRuZ01vZGVsLCB0aGlzLCBvcHRpb24pO1xuICB9XG5cbiAgb3B0aW9uS2V5cHJlc3MoZXZlbnQpIHtcbiAgICAvLyBJZiB3ZSdyZSBpbiB0aGUgZmlsdGVyIGRvbid0IGFsbG93IG5vcm1hbCBiZWhhdmlvdXJcbiAgICBpZiAoZXZlbnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygndHctc2VsZWN0LWZpbHRlcicpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gUHJldmVudCBkZWxldGUgdGFraW5nIHVzIGJhY2tcbiAgICBjb25zdCBjaGFyYWN0ZXJDb2RlID0gZ2V0Q2hhcmFjdGVyQ29kZUZyb21LZXlwcmVzcyhldmVudCk7XG4gICAgaWYgKGNoYXJhY3RlckNvZGUgPT09IDgpIHtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gU2VhcmNoIGZvciBvcHRpb24gYmFzZWQgb24gY2hhcmFjdGVyXG4gICAgY29uc3QgY2hhcmFjdGVyID0gZ2V0Q2hhcmFjdGVyRnJvbUtleXByZXNzKGV2ZW50KTtcbiAgICBjb250aW51ZVNlYXJjaEFuZFNlbGVjdE1hdGNoKFxuICAgICAgdGhpcy4kbmdNb2RlbCxcbiAgICAgIHRoaXMsXG4gICAgICB0aGlzLm9wdGlvbnMsXG4gICAgICBjaGFyYWN0ZXJcbiAgICApO1xuICAgIGZvY3VzT25BY3RpdmVMaW5rKHRoaXMuZWxlbWVudCk7XG4gIH1cblxuICBwbGFjZWhvbGRlckNsaWNrKCkge1xuICAgIHJlc2V0T3B0aW9uKHRoaXMuJG5nTW9kZWwsIHRoaXMpO1xuICAgIHRoaXMuYnV0dG9uLmZvY3VzKCk7XG4gIH1cblxuICBwbGFjZWhvbGRlckZvY3VzKCkge1xuICAgIHJlc2V0T3B0aW9uKHRoaXMuJG5nTW9kZWwsIHRoaXMpO1xuICB9XG5cbiAgZ2V0RmlsdGVyZWRPcHRpb25zKCkge1xuICAgIHRoaXMuaGFzTW9yZU9wdGlvbnNUb1JldmVhbCA9IGZhbHNlO1xuICAgIGlmICghdGhpcy5vcHRpb25zIHx8ICF0aGlzLm9wdGlvbnMuZmlsdGVyKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgY29uc3QgZmlsdGVyU3RyaW5nTG93ZXIgPSB0aGlzLmZpbHRlclN0cmluZyAmJiBlc2NhcGVSZWdFeHAodGhpcy5maWx0ZXJTdHJpbmcudG9Mb3dlckNhc2UoKSk7XG5cbiAgICBjb25zdCBlbmNvdW50ZXJlZExhYmVsc0FuZFZhbHVlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICBjb25zdCBmaWx0ZXJlZE9wdGlvbnMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMub3B0aW9ucy5sZW5ndGg7ICsraSkge1xuICAgICAgY29uc3Qgb3B0aW9uID0gdGhpcy5vcHRpb25zW2ldO1xuXG4gICAgICBpZiAob3B0aW9uLmhlYWRlciAmJiAhb3B0aW9uLnZhbHVlICYmICFvcHRpb24ubGFiZWwpIHtcbiAgICAgICAgZmlsdGVyZWRPcHRpb25zLnB1c2gob3B0aW9uKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBsZXQgaXNEdXBsaWNhdGUgPSBmYWxzZTtcblxuICAgICAgY29uc3QgZXhpc3RpbmdWYWx1ZXNGb3JMYWJlbCA9IGVuY291bnRlcmVkTGFiZWxzQW5kVmFsdWVzW29wdGlvbi5sYWJlbF07XG4gICAgICBjb25zdCBoYXNFeGlzdGluZ1ZhbHVlcyA9IGFuZ3VsYXIuaXNBcnJheShleGlzdGluZ1ZhbHVlc0ZvckxhYmVsKTtcblxuICAgICAgaWYgKGhhc0V4aXN0aW5nVmFsdWVzKSB7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgZXhpc3RpbmdWYWx1ZXNGb3JMYWJlbC5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGlmIChhbmd1bGFyLmVxdWFscyhleGlzdGluZ1ZhbHVlc0ZvckxhYmVsW2pdLCBvcHRpb24udmFsdWUpKSB7XG4gICAgICAgICAgICBpc0R1cGxpY2F0ZSA9IHRydWU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3Qgc2hvdWxkQWRkT3B0aW9uID0gIWlzRHVwbGljYXRlXG4gICAgICAgICYmICghZmlsdGVyU3RyaW5nTG93ZXIgLy8gZW1wdHkgZmlsdGVyc3RyaW5nIG1lYW5zIHBhc3MgZXZlcnl0aGluZy5cbiAgICAgICAgICB8fCBsYWJlbE1hdGNoZXMob3B0aW9uLCBmaWx0ZXJTdHJpbmdMb3dlcilcbiAgICAgICAgICB8fCBub3RlTWF0Y2hlcyhvcHRpb24sIGZpbHRlclN0cmluZ0xvd2VyKVxuICAgICAgICAgIHx8IHNlY29uZGFyeU1hdGNoZXMob3B0aW9uLCBmaWx0ZXJTdHJpbmdMb3dlcilcbiAgICAgICAgICB8fCBzZWFyY2hhYmxlTWF0Y2hlcyhvcHRpb24sIGZpbHRlclN0cmluZ0xvd2VyKSk7XG5cbiAgICAgIGlmIChzaG91bGRBZGRPcHRpb24pIHtcbiAgICAgICAgLy8gVG9vIG1hbnkgb3B0aW9ucz8gRG9uJ3QgYWRkIGFueW1vcmUsIGluZGljYXRlIHRoYXQgdGhlcmUncyBtb3JlIGluc3RlYWQuXG4gICAgICAgIGlmIChmaWx0ZXJlZE9wdGlvbnMubGVuZ3RoID49IHRoaXMubnVtYmVyT2ZPcHRpb25zUmV2ZWFsZWQpIHtcbiAgICAgICAgICB0aGlzLmhhc01vcmVPcHRpb25zVG9SZXZlYWwgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc0V4aXN0aW5nVmFsdWVzKSB7XG4gICAgICAgICAgZXhpc3RpbmdWYWx1ZXNGb3JMYWJlbC5wdXNoKG9wdGlvbi52YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZW5jb3VudGVyZWRMYWJlbHNBbmRWYWx1ZXNbb3B0aW9uLmxhYmVsXSA9IFtvcHRpb24udmFsdWVdO1xuICAgICAgICB9XG5cbiAgICAgICAgZmlsdGVyZWRPcHRpb25zLnB1c2gob3B0aW9uKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZmlsdGVyZWRPcHRpb25zO1xuICB9XG5cbiAgZm9jdXNPbkZpbHRlcklucHV0KCkge1xuICAgIGNvbnN0IGZpbHRlcklucHV0ID0gdGhpcy5lbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3R3LXNlbGVjdC1maWx0ZXInKVswXTtcbiAgICBpZiAoZmlsdGVySW5wdXQpIHtcbiAgICAgIGZpbHRlcklucHV0LmZvY3VzKCk7XG4gICAgfVxuICB9XG5cbiAgZmlsdGVyQ2hhbmdlKCkge1xuICAgIHRoaXMubnVtYmVyT2ZPcHRpb25zUmV2ZWFsZWQgPSB0aGlzLm9wdGlvbnNQYWdlU2l6ZTsgLy8gUmVzZXQuXG4gICAgdGhpcy5maWx0ZXJlZE9wdGlvbnMgPSB0aGlzLmdldEZpbHRlcmVkT3B0aW9ucygpO1xuICAgIGNvbnN0IHNlbGVjdGVkT3B0aW9uID0gZmluZFNlbGVjdGVkKHRoaXMuZmlsdGVyZWRPcHRpb25zLCB0aGlzLnNlbGVjdGVkKTtcblxuICAgIC8vIENob29zZSBhIG5ldyBzZWxlY3RlZCB2YWx1ZSBpZiB0aGUgb2xkIG9uZSB3YXMgaGlkZGVuXG4gICAgaWYgKCFzZWxlY3RlZE9wdGlvbiAmJiB0aGlzLmZpbHRlcmVkT3B0aW9ucy5sZW5ndGgpIHtcbiAgICAgIHNlbGVjdE9wdGlvbih0aGlzLiRuZ01vZGVsLCB0aGlzLCB0aGlzLmZpbHRlcmVkT3B0aW9uc1swXSk7XG4gICAgfVxuICB9XG5cbiAgLy8gS2V5ZG93biBhcyBrZXlwcmVzcyBkaWQgbm90IHdvcmsgaW4gY2hyb21lL3NhZmFyaVxuICBmaWx0ZXJLZXlkb3duKGV2ZW50KSB7XG4gICAgY29uc3QgY2hhcmFjdGVyQ29kZSA9IGV2ZW50LndoaWNoIHx8IGV2ZW50LmNoYXJDb2RlIHx8IGV2ZW50LmtleUNvZGU7XG4gICAgY29uc3QgYWN0aXZlT3B0aW9uID0gdGhpcy5lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hY3RpdmUnKTtcbiAgICBjb25zdCBhY3RpdmVMaW5rID0gYWN0aXZlT3B0aW9uID8gYWN0aXZlT3B0aW9uLnF1ZXJ5U2VsZWN0b3IoJ2EnKSA6IGZhbHNlO1xuICAgIGNvbnN0IG9wdGlvbkxpbmtzID0gdGhpcy5lbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3R3LXNlbGVjdC1vcHRpb24tbGluaycpO1xuXG4gICAgaWYgKGNoYXJhY3RlckNvZGUgPT09IGtleXMuZG93bikge1xuICAgICAgdGhpcy5tb3ZlRG93bk9uZU9wdGlvbihhY3RpdmVPcHRpb24sIGFjdGl2ZUxpbmssIG9wdGlvbkxpbmtzKTtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIFByZXZlbnQgY3Vyc29yIGp1bXBpbmcgYXJvdW5kIGluIGlucHV0XG4gICAgfSBlbHNlIGlmIChjaGFyYWN0ZXJDb2RlID09PSBrZXlzLnVwKSB7XG4gICAgICB0aGlzLm1vdmVVcE9uZU9wdGlvbihhY3RpdmVPcHRpb24sIGFjdGl2ZUxpbmssIG9wdGlvbkxpbmtzKTtcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIFByZXZlbnQgY3Vyc29yIGp1bXBpbmcgaW4gaW5wdXRcbiAgICB9IGVsc2UgaWYgKGNoYXJhY3RlckNvZGUgPT09IGtleXMucmV0dXJuKSB7XG4gICAgICBpZiAoYWN0aXZlT3B0aW9uKSB7XG4gICAgICAgIGFjdGl2ZU9wdGlvbi5jbGljaygpO1xuICAgICAgICB0aGlzLmJ1dHRvbi5mb2N1cygpO1xuICAgICAgfVxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgLy8gUHJldmVudCBmb3JtIGFjdGlvbiBhcyBpbnB1dCBhY3RpdmVcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICBzZWxlY3RPcHRpb25Vc2luZ0xpbmsobGluaykge1xuICAgIGNvbnN0IG9wdGlvbiA9IHRoaXMuZmlsdGVyZWRPcHRpb25zW2xpbmsuZ2V0QXR0cmlidXRlKCdpbmRleCcpXTtcbiAgICBzZWxlY3RPcHRpb24odGhpcy4kbmdNb2RlbCwgdGhpcywgb3B0aW9uKTtcbiAgfVxuXG4gIG1vdmVVcE9uZU9wdGlvbihhY3RpdmVPcHRpb24sIGFjdGl2ZUxpbmssIG9wdGlvbkxpbmtzKSB7XG4gICAgLy8gSWYgbm9uZSBhY3RpdmUsIHNlbGVjdCBsYXN0XG4gICAgaWYgKCFhY3RpdmVPcHRpb24gJiYgb3B0aW9uTGlua3MubGVuZ3RoKSB7XG4gICAgICB0aGlzLnNlbGVjdE9wdGlvblVzaW5nTGluayhvcHRpb25MaW5rc1tvcHRpb25MaW5rcy5sZW5ndGggLSAxXSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gSWYgYWN0aXZlIG9wdGlvbiBub3QgZmlyc3QsIG1vdmUgdXBcbiAgICBpZiAoYWN0aXZlTGluayAhPT0gb3B0aW9uTGlua3NbMF0pIHtcbiAgICAgIGNvbnN0IHByZXZpb3VzT3B0aW9uID0gdGhpcy5kb20uZ2V0UHJldmlvdXNTaWJsaW5nV2l0aENsYXNzTmFtZShcbiAgICAgICAgYWN0aXZlT3B0aW9uLFxuICAgICAgICAndHctc2VsZWN0LW9wdGlvbidcbiAgICAgICk7XG4gICAgICBpZiAocHJldmlvdXNPcHRpb24pIHtcbiAgICAgICAgY29uc3QgcHJldmlvdXNPcHRpb25MaW5rID0gcHJldmlvdXNPcHRpb24uZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2EnKVswXTtcbiAgICAgICAgdGhpcy5zZWxlY3RPcHRpb25Vc2luZ0xpbmsocHJldmlvdXNPcHRpb25MaW5rKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBtb3ZlRG93bk9uZU9wdGlvbihhY3RpdmVPcHRpb24sIGFjdGl2ZUxpbmssIG9wdGlvbkxpbmtzKSB7XG4gICAgLy8gSWYgbm9uZSBhY3RpdmUsIHNlbGVjdCBmaXJzdFxuICAgIGlmICghYWN0aXZlT3B0aW9uICYmIG9wdGlvbkxpbmtzLmxlbmd0aCkge1xuICAgICAgdGhpcy5zZWxlY3RPcHRpb25Vc2luZ0xpbmsob3B0aW9uTGlua3NbMF0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBJZiBhY3RpdmUgb3B0aW9uIG5vdCBsYXN0LCBtb3ZlIGRvd25cbiAgICBpZiAoYWN0aXZlTGluayAhPT0gb3B0aW9uTGlua3Nbb3B0aW9uTGlua3MubGVuZ3RoIC0gMV0pIHtcbiAgICAgIGNvbnN0IG5leHRPcHRpb24gPSB0aGlzLmRvbS5nZXROZXh0U2libGluZ1dpdGhDbGFzc05hbWUoXG4gICAgICAgIGFjdGl2ZU9wdGlvbixcbiAgICAgICAgJ3R3LXNlbGVjdC1vcHRpb24nXG4gICAgICApO1xuICAgICAgaWYgKG5leHRPcHRpb24pIHtcbiAgICAgICAgY29uc3QgbmV4dE9wdGlvbkxpbmsgPSBuZXh0T3B0aW9uLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhJylbMF07XG4gICAgICAgIHRoaXMuc2VsZWN0T3B0aW9uVXNpbmdMaW5rKG5leHRPcHRpb25MaW5rKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBJZiBhY3RpdmUgaXMgbGFzdCBhbmQgY3VzdG9tIGFjdGlvbiwgZm9jdXMgb24gaXRcbiAgICBjb25zdCB0cmFuc2NsdWRlZE9wdGlvbiA9IHRoaXMuZWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd0dy1zZWxlY3QtdHJhbnNjbHVkZWQnKTtcblxuICAgIGlmICh0cmFuc2NsdWRlZE9wdGlvbi5sZW5ndGgpIHtcbiAgICAgIHRyYW5zY2x1ZGVkT3B0aW9uWzBdLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhJylbMF0uZm9jdXMoKTtcbiAgICB9XG4gIH1cblxuICBzaG91bGRTaG93U2VhcmNoKCkge1xuICAgIC8vIEZvciBsb25nZXIgbGlzdCBhdXRvLXNob3cgc2VhcmNoLlxuICAgIC8vIFdlIGNob29zZSB0d2VsdmUgYXMgd2UgZG9uJ3QgbmVlZCBpdCBmb3IgbW9udGggc2VsZWN0b3JcbiAgICByZXR1cm4gdGhpcy5maWx0ZXIgfHwgKHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMubGVuZ3RoID4gMTIpO1xuICB9XG5cbiAgcmV2ZWFsTW9yZU9wdGlvbnMoJGV2ZW50KSB7XG4gICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHRoaXMubnVtYmVyT2ZPcHRpb25zUmV2ZWFsZWQgKz0gdGhpcy5vcHRpb25zUGFnZVNpemU7XG4gICAgdGhpcy5maWx0ZXJlZE9wdGlvbnMgPSB0aGlzLmdldEZpbHRlcmVkT3B0aW9ucygpOyAvLyBSZS1jYWxjIG9wdGlvbnMgYmFzZWQgb24gbGFyZ2VyIGxpc3Qgc2l6ZS5cbiAgfVxufVxuXG5mdW5jdGlvbiBsYWJlbE1hdGNoZXMob3B0aW9uLCBzZWFyY2gpIHtcbiAgcmV0dXJuIG9wdGlvbi5sYWJlbCAmJiBvcHRpb24ubGFiZWwudG9Mb3dlckNhc2UoKS5zZWFyY2goc2VhcmNoKSA+PSAwO1xufVxuZnVuY3Rpb24gbm90ZU1hdGNoZXMob3B0aW9uLCBzZWFyY2gpIHtcbiAgcmV0dXJuIG9wdGlvbi5ub3RlICYmIG9wdGlvbi5ub3RlLnRvTG93ZXJDYXNlKCkuc2VhcmNoKHNlYXJjaCkgPj0gMDtcbn1cbmZ1bmN0aW9uIHNlY29uZGFyeU1hdGNoZXMob3B0aW9uLCBzZWFyY2gpIHtcbiAgcmV0dXJuIG9wdGlvbi5zZWNvbmRhcnkgJiYgb3B0aW9uLnNlY29uZGFyeS50b0xvd2VyQ2FzZSgpLnNlYXJjaChzZWFyY2gpID49IDA7XG59XG5mdW5jdGlvbiBzZWFyY2hhYmxlTWF0Y2hlcyhvcHRpb24sIHNlYXJjaCkge1xuICByZXR1cm4gb3B0aW9uLnNlYXJjaGFibGUgJiYgb3B0aW9uLnNlYXJjaGFibGUudG9Mb3dlckNhc2UoKS5zZWFyY2goc2VhcmNoKSA+PSAwO1xufVxuXG5mdW5jdGlvbiBhZGRFdmVudEhhbmRsZXJzKCRjdHJsLCAkZWxlbWVudCwgJG5nTW9kZWwsIG9wdGlvbnMsICR0aW1lb3V0KSB7XG4gIGNvbnN0IGVsZW1lbnQgPSAkZWxlbWVudFswXTtcbiAgY29uc3QgYnV0dG9uID0gZWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdidG4nKVswXTtcbiAgY29uc3QgYnV0dG9uR3JvdXAgPSBlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2J0bi1ncm91cCcpWzBdO1xuICBjb25zdCBkcm9wZG93biA9IGVsZW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnZHJvcGRvd24tbWVudScpWzBdO1xuXG4gIGNvbnN0IG9uRm9jdXNPdXQgPSAoKSA9PiB7XG4gICAgJHRpbWVvdXQoKCkgPT4ge1xuICAgICAgLy8gSWYgYnV0dG9uIGlzbid0IGZvY3VzZWQgYW5kIGRyb3Bkb3duIG5vdCBvcGVuLCBibHVyXG4gICAgICBpZiAoYnV0dG9uICE9PSBkb2N1bWVudC5hY3RpdmVFbGVtZW50XG4gICAgICAgICYmICFidXR0b25Hcm91cC5jbGFzc0xpc3QuY29udGFpbnMoJ29wZW4nKSkge1xuICAgICAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdibHVyJykpO1xuICAgICAgfVxuICAgIH0sIDE1MCk7IC8vIG5lZWQgdGltZW91dCBiZWNhdXNlIHVzaW5nIGRyb3Bkb3duLmpzLFxuICB9O1xuXG4gIGNvbnN0IG9uQnV0dG9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgJHRpbWVvdXQoKCkgPT4ge1xuICAgICAgaWYgKCRjdHJsLnNob3VsZFNob3dTZWFyY2goKSkge1xuICAgICAgICAvLyBJZiBmaWx0ZXIgaW4gdXNlLCBmb2N1cyBvbiB0aGF0XG4gICAgICAgIGNvbnN0IGZpbHRlcklucHV0ID0gZWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCd0dy1zZWxlY3QtZmlsdGVyJylbMF07XG4gICAgICAgIGZpbHRlcklucHV0LmZvY3VzKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBPdGhlcndpc2UgZm9jdXMgb24gc2VsZWN0ZWQgb3B0aW9uXG4gICAgICAgIGZvY3VzT25BY3RpdmVMaW5rKGVsZW1lbnQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIGNvbnN0IG9uQnV0dG9uS2V5cHJlc3MgPSAoZXZlbnQpID0+IHtcbiAgICAkY3RybC5vcHRpb25LZXlwcmVzcyhldmVudCk7XG4gIH07XG5cbiAgY29uc3Qgb25Ecm9wZG93bktleXByZXNzID0gKGV2ZW50KSA9PiB7XG4gICAgaWYgKGV2ZW50LnRhcmdldC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdhJykge1xuICAgICAgJGN0cmwub3B0aW9uS2V5cHJlc3MoZXZlbnQpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBvbkNvbXBvbmVudEJsdXIgPSAoKSA9PiB7XG4gICAgJG5nTW9kZWwuJHNldFRvdWNoZWQoKTtcbiAgfTtcblxuICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBvbkNvbXBvbmVudEJsdXIpO1xuICBidXR0b24uYWRkRXZlbnRMaXN0ZW5lcigna2V5cHJlc3MnLCBvbkJ1dHRvbktleXByZXNzKTtcbiAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25CdXR0b25DbGljayk7XG4gIGJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdmb2N1c291dCcsIG9uRm9jdXNPdXQpO1xuICBkcm9wZG93bi5hZGRFdmVudExpc3RlbmVyKCdmb2N1c291dCcsIG9uRm9jdXNPdXQpO1xuICBkcm9wZG93bi5hZGRFdmVudExpc3RlbmVyKCdrZXlwcmVzcycsIG9uRHJvcGRvd25LZXlwcmVzcyk7XG59XG5cbmZ1bmN0aW9uIGZvY3VzT25BY3RpdmVMaW5rKGVsZW1lbnQpIHtcbiAgY29uc3QgYWN0aXZlT3B0aW9uID0gZWxlbWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdhY3RpdmUnKVswXTtcbiAgaWYgKGFjdGl2ZU9wdGlvbikge1xuICAgIGFjdGl2ZU9wdGlvbi5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYScpWzBdLmZvY3VzKCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tGb3JUcmFuc2NsdWRlZENvbnRlbnQoJHRyYW5zY2x1ZGUsICRjdHJsKSB7XG4gICR0cmFuc2NsdWRlKChjbG9uZSkgPT4ge1xuICAgIGlmIChjbG9uZS5sZW5ndGggPiAxIHx8IGNsb25lLnRleHQoKS50cmltKCkgIT09ICcnKSB7XG4gICAgICAkY3RybC5oYXNUcmFuc2NsdWRlZCA9IHRydWU7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2hhcmFjdGVyQ29kZUZyb21LZXlwcmVzcyhldmVudCkge1xuICByZXR1cm4gZXZlbnQud2hpY2ggfHwgZXZlbnQuY2hhckNvZGUgfHwgZXZlbnQua2V5Q29kZTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2hhcmFjdGVyRnJvbUtleXByZXNzKGV2ZW50KSB7XG4gIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGdldENoYXJhY3RlckNvZGVGcm9tS2V5cHJlc3MoZXZlbnQpKTtcbn1cblxuZnVuY3Rpb24gZXNjYXBlUmVnRXhwKHN0cikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1lc2NhcGVcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bXFwtXFxbXFxdXFwvXFx7XFx9XFwoXFwpXFwqXFwrXFw/XFwuXFxcXFxcXlxcJFxcfF0vZywgJ1xcXFwkJicpO1xufVxuXG5mdW5jdGlvbiBwcmVTZWxlY3RNb2RlbFZhbHVlKCRuZ01vZGVsLCAkY3RybCkge1xuICBpZiAoaXNWYWxpZE1vZGVsKCRjdHJsLm5nTW9kZWwpKSB7XG4gICAgY29uc3Qgb3B0aW9uID0gZmluZE9wdGlvbkZyb21WYWx1ZSgkY3RybC5vcHRpb25zLCAkY3RybC5uZ01vZGVsKTtcbiAgICBpZiAob3B0aW9uKSB7XG4gICAgICBzZWxlY3RPcHRpb24oJG5nTW9kZWwsICRjdHJsLCBvcHRpb24pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kT3B0aW9uRnJvbVZhbHVlKG9wdGlvbnMsIHZhbHVlKSB7XG4gIGxldCBvcHRpb25NYXRjaCA9IGZhbHNlO1xuICBvcHRpb25zLmZvckVhY2goKG9wdGlvbikgPT4ge1xuICAgIGlmIChhbmd1bGFyLmVxdWFscyhvcHRpb24udmFsdWUsIHZhbHVlKSkge1xuICAgICAgb3B0aW9uTWF0Y2ggPSBvcHRpb247XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIG9wdGlvbk1hdGNoO1xufVxuXG5mdW5jdGlvbiBzZXREZWZhdWx0SWZSZXF1aXJlZCgkbmdNb2RlbCwgJGN0cmwsICRhdHRycywgJHRpbWVvdXQpIHtcbiAgLy8gSWYgcmVxdWlyZWQgYW5kIG1vZGVsIGVtcHR5LCBzZWxlY3QgZmlyc3Qgb3B0aW9uIHdpdGggdmFsdWVcbiAgaWYgKCgkY3RybC5uZ1JlcXVpcmVkIHx8ICRhdHRycy5yZXF1aXJlZCkgJiYgIWlzVmFsaWRNb2RlbCgkY3RybC5uZ01vZGVsKSAmJiAhJGN0cmwucGxhY2Vob2xkZXIpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8ICRjdHJsLm9wdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChpc1ZhbGlkTW9kZWwoJGN0cmwub3B0aW9uc1tpXS52YWx1ZSkpIHtcbiAgICAgICAgc2VsZWN0T3B0aW9uKCRuZ01vZGVsLCAkY3RybCwgJGN0cmwub3B0aW9uc1tpXSk7XG4gICAgICAgICR0aW1lb3V0KCRjdHJsLm5nQ2hhbmdlKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNlbGVjdE9wdGlvbigkbmdNb2RlbCwgJGN0cmwsIG9wdGlvbikge1xuICBpZiAob3B0aW9uLmRpc2FibGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gICRuZ01vZGVsLiRzZXRWaWV3VmFsdWUob3B0aW9uLnZhbHVlKTtcbiAgLy8gRm9yY2UgY29tbWl0IHNvIHRoYXQgbmctY2hhbmdlIGFsd2F5cyBoYXMgbmV3IHZhbHVlXG4gICRuZ01vZGVsLiRjb21taXRWaWV3VmFsdWUoKTtcbiAgJGN0cmwuc2VsZWN0ZWQgPSBvcHRpb247XG59XG5cbmZ1bmN0aW9uIGZpbmRTZWxlY3RlZChvcHRpb25zLCBzZWxlY3RlZCkge1xuICAvLyBUaGVyZSBjYW4gYmUgc2NlbmFyaW9zIHdoZW4gdGhlIGBmaWx0ZXJlZE9wdGlvbnNgIGFyZSBsb2FkZWQgYXN5bmNocm9ub3VzbHlcbiAgLy8gc28gdGhpcyBtZXRob2QgbWF5IGJlIGNhbGxlZCB3aXRoIGFuIHVuZGVmaW5lZCBhcyBgb3B0aW9uc2AgYXJndW1lbnQsIHNvXG4gIC8vIHdlIHNob3VsZCBjaGVjayBpZiB0aGF0IHBhc3NlZCBhcmd1bWVudCBpcyByZWFsbHkgYW4gYXJyYXkgYmVmb3JlIGNhbGxpbmdcbiAgLy8gYC5mb3JFYWNoYCBvbiBpdFxuICBpZiAoIWFuZ3VsYXIuaXNBcnJheShvcHRpb25zKSkge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICAvLyBQcmVmZXIgZm9yRWFjaCBvdmVyIGZpbmQgZm9yIGJyb3dzZXIgc3VwcG9ydFxuICBsZXQgc2VsZWN0ZWRPcHRpb247XG4gIG9wdGlvbnMuZm9yRWFjaCgob3B0aW9uKSA9PiB7XG4gICAgaWYgKHNlbGVjdGVkICYmIGFuZ3VsYXIuZXF1YWxzKHNlbGVjdGVkLnZhbHVlLCBvcHRpb24udmFsdWUpKSB7XG4gICAgICBzZWxlY3RlZE9wdGlvbiA9IHNlbGVjdGVkO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBzZWxlY3RlZE9wdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVzZXRPcHRpb24oJG5nTW9kZWwsICRjdHJsKSB7XG4gICRuZ01vZGVsLiRzZXRWaWV3VmFsdWUobnVsbCk7XG4gIC8vIEZvcmNlIGNvbW1pdCBzbyB0aGF0IG5nLWNoYW5nZSBhbHdheXMgaGFzIG5ldyB2YWx1ZVxuICAkbmdNb2RlbC4kY29tbWl0Vmlld1ZhbHVlKCk7XG4gICRjdHJsLnNlbGVjdGVkID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGNvbnRpbnVlU2VhcmNoQW5kU2VsZWN0TWF0Y2goJG5nTW9kZWwsICRjdHJsLCBvcHRpb25zLCBsZXR0ZXIpIHtcbiAgbGV0IGZvdW5kID0gc2VhcmNoQW5kU2VsZWN0KCRuZ01vZGVsLCAkY3RybCwgb3B0aW9ucywgJGN0cmwuc2VhcmNoICsgbGV0dGVyKTtcbiAgaWYgKGZvdW5kKSB7XG4gICAgJGN0cmwuc2VhcmNoICs9IGxldHRlcjtcbiAgfSBlbHNlIHtcbiAgICAkY3RybC5zZWFyY2ggPSBsZXR0ZXI7XG4gICAgZm91bmQgPSBzZWFyY2hBbmRTZWxlY3QoJG5nTW9kZWwsICRjdHJsLCBvcHRpb25zLCAkY3RybC5zZWFyY2gpO1xuICB9XG4gIHJldHVybiBmb3VuZDtcbn1cblxuZnVuY3Rpb24gc2VhcmNoQW5kU2VsZWN0KCRuZ01vZGVsLCAkY3RybCwgb3B0aW9ucywgdGVybSkge1xuICBsZXQgZm91bmQgPSBmYWxzZTtcbiAgY29uc3Qgc2VhcmNoVGVybSA9IHRlcm0udG9Mb3dlckNhc2UoKTtcblxuICBvcHRpb25zLmZvckVhY2goKG9wdGlvbikgPT4ge1xuICAgIGlmIChmb3VuZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY29udGFpbnNTZWFyY2gob3B0aW9uLmxhYmVsLCBzZWFyY2hUZXJtKVxuICAgICAgfHwgY29udGFpbnNTZWFyY2gob3B0aW9uLm5vdGUsIHNlYXJjaFRlcm0pXG4gICAgICB8fCBjb250YWluc1NlYXJjaChvcHRpb24uc2Vjb25kYXJ5LCBzZWFyY2hUZXJtKVxuICAgICAgfHwgY29udGFpbnNTZWFyY2gob3B0aW9uLnNlYXJjaGFibGUsIHNlYXJjaFRlcm0pKSB7XG4gICAgICBzZWxlY3RPcHRpb24oJG5nTW9kZWwsICRjdHJsLCBvcHRpb24pO1xuICAgICAgZm91bmQgPSB0cnVlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBmb3VuZDtcbn1cblxuZnVuY3Rpb24gY29udGFpbnNTZWFyY2godGVybSwgc2VhcmNoKSB7XG4gIHJldHVybiB0ZXJtICYmIHRlcm0udG9Mb3dlckNhc2UoKS5pbmRleE9mKHNlYXJjaCkgPT09IDA7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRNb2RlbCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgfHwgdmFsdWUgPT09IDAgfHwgdmFsdWUgPT09IGZhbHNlO1xufVxuXG5mdW5jdGlvbiByZXNwb25zaXZlQ2xhc3Nlcyh2YWx1ZSkge1xuICBsZXQgY2xhc3NlcyA9ICcnO1xuICBsZXQgYnJlYWtwb2ludHMgPSBbXTtcbiAgY29uc3QgdmFsaWRCcmVha3BvaW50cyA9IHtcbiAgICB4czogdHJ1ZSxcbiAgICBzbTogdHJ1ZSxcbiAgICBtZDogdHJ1ZSxcbiAgICBsZzogdHJ1ZSxcbiAgICB4bDogdHJ1ZVxuICB9O1xuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyAmJiB2YWx1ZSkge1xuICAgIHJldHVybiAnaGlkZGVuJztcbiAgfVxuXG4gIGlmICh2YWx1ZSAmJiB2YWx1ZS50b0xvd2VyQ2FzZSAmJiB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZScpIHtcbiAgICByZXR1cm4gJ2hpZGRlbic7XG4gIH1cblxuICBpZiAodmFsdWUpIHtcbiAgICBicmVha3BvaW50cyA9IHZhbHVlLnNwbGl0KCcsJyk7XG4gIH1cblxuICBicmVha3BvaW50cy5mb3JFYWNoKChicmVha3BvaW50KSA9PiB7XG4gICAgaWYgKHZhbGlkQnJlYWtwb2ludHNbYnJlYWtwb2ludF0pIHtcbiAgICAgIGNsYXNzZXMgKz0gYGhpZGRlbi0ke2JyZWFrcG9pbnR9IGA7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gY2xhc3Nlcztcbn1cblxuY29uc3Qga2V5cyA9IHtcbiAgdXA6IDM4LFxuICBkb3duOiA0MCxcbiAgcmV0dXJuOiAxM1xufTtcblxuU2VsZWN0Q29udHJvbGxlci4kaW5qZWN0ID0gW1xuICAnJGVsZW1lbnQnLFxuICAnJHRyYW5zY2x1ZGUnLFxuICAnJHRpbWVvdXQnLFxuICAnJGF0dHJzJyxcbiAgJ1R3RG9tU2VydmljZScsXG4gICckc2NvcGUnXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBTZWxlY3RDb250cm9sbGVyO1xuIiwiaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9zZWxlY3QuY29udHJvbGxlci5qcyc7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9zZWxlY3QuaHRtbCc7XG5cbmNvbnN0IFNlbGVjdCA9IHtcbiAgY29udHJvbGxlcixcbiAgdGVtcGxhdGUsXG4gIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAgdHJhbnNjbHVkZTogdHJ1ZSxcbiAgYmluZGluZ3M6IHtcbiAgICBuZ01vZGVsOiAnPScsXG4gICAgbmdDaGFuZ2U6ICcmJyxcbiAgICBuZ1JlcXVpcmVkOiAnPCcsXG4gICAgbmdEaXNhYmxlZDogJzwnLFxuICAgIG9wdGlvbnM6ICc8JyxcbiAgICBuYW1lOiAnQCcsXG4gICAgcGxhY2Vob2xkZXI6ICdAJyxcbiAgICBmaWx0ZXI6ICdAJyxcbiAgICBzaXplOiAnQCcsXG4gICAgZHJvcGRvd25SaWdodDogJ0AnLFxuICAgIGRyb3Bkb3duVXA6ICdAJyxcbiAgICBkcm9wZG93bldpZHRoOiAnQCcsXG4gICAgaW52ZXJzZTogJzwnLFxuICAgIGhpZGVOb3RlOiAnQCcsXG4gICAgaGlkZVNlY29uZGFyeTogJ0AnLFxuICAgIGhpZGVJY29uOiAnQCcsXG4gICAgaGlkZUN1cnJlbmN5OiAnQCcsXG4gICAgaGlkZUNpcmNsZTogJ0AnLFxuICAgIGhpZGVMYWJlbDogJ0AnXG4gIH1cbn07XG5cbi8qXG4vLyBUT0RPIG1heSBiZSBiZXR0ZXIgZm9yIGFjY2Vzc2liaWxpdHkgdG8gaGF2ZSBoaWRkZW4gc2VsZWN0P1xuPHNlbGVjdCBuYW1lPSd7eyRjdHJsLm5hbWV9fScgY2xhc3M9J3NyLW9ubHkgdHctc2VsZWN0LWhpZGRlbicgXFxcbiAgbmctbW9kZWw9JyRjdHJsLm5nTW9kZWwnIFxcXG4gIG5nLW9wdGlvbnM9J29wdGlvbi52YWx1ZSBhcyBvcHRpb24ubGFiZWwgZm9yIG9wdGlvbiBpbiAkY3RybC5vcHRpb25zJyBcXFxuICBuZy1kaXNhYmxlZD0nJGN0cmwubmdEaXNhYmxlZCcgXFxcbiAgbmctcmVxdWlyZWQ9JyRjdHJsLm5nUmVxdWlyZWQnPiBcXFxuPC9zZWxlY3Q+XCJcbiovXG5cbmV4cG9ydCBkZWZhdWx0IFNlbGVjdDtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IFNlbGVjdCBmcm9tICcuL3NlbGVjdC5jb21wb25lbnQuanMnO1xuaW1wb3J0IERvbVNlcnZpY2UgZnJvbSAnLi4vLi4vc2VydmljZXMvZG9tJztcbmltcG9ydCBGb2N1c2FibGUgZnJvbSAnLi4vZm9jdXNhYmxlJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmZvcm1zLnNlbGVjdCcsIFtcbiAgICBEb21TZXJ2aWNlLFxuICAgIEZvY3VzYWJsZVxuICBdKVxuICAuY29tcG9uZW50KCd0d1NlbGVjdCcsIFNlbGVjdCkubmFtZTtcbiIsImZ1bmN0aW9uIFJlcXVpcmVtZW50c1NlcnZpY2UoJGh0dHApIHtcbiAgdGhpcy5wcmVwUmVxdWlyZW1lbnRzID0gKGFsdGVybmF0aXZlcykgPT4ge1xuICAgIGlmICghYWx0ZXJuYXRpdmVzIHx8ICFhbHRlcm5hdGl2ZXMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgY29uc3QgcHJlcHBlZEFsdGVybmF0aXZlcyA9IGNvcHlPZihhbHRlcm5hdGl2ZXMpO1xuXG4gICAgcHJlcHBlZEFsdGVybmF0aXZlcy5mb3JFYWNoKChhbHRlcm5hdGl2ZSkgPT4ge1xuICAgICAgaWYgKGFsdGVybmF0aXZlLnByZXBhcmVkKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgdGhpcy5wcmVwTGVnYWN5QWx0ZXJuYXRpdmVzKGFsdGVybmF0aXZlKTtcblxuICAgICAgYWx0ZXJuYXRpdmUucHJvcGVydGllcyA9IHRoaXMucHJlcEZpZWxkcyhhbHRlcm5hdGl2ZS5wcm9wZXJ0aWVzIHx8IGFsdGVybmF0aXZlLmZpZWxkcyk7XG5cbiAgICAgIC8vIElmIHdlJ3JlIHN0aWxsIHRyZWF0aW5nIHR5cGUgYXMgYSBzcGVjaWFsIGNhc2UsIG1vdmUgaXQgdG8gYSBoaWRkZW4gdmFsdWVcbiAgICAgIGlmIChhbHRlcm5hdGl2ZS50eXBlICYmIGFsdGVybmF0aXZlLnR5cGUgIT09ICdvYmplY3QnICYmICFhbHRlcm5hdGl2ZS50eXBlcykge1xuICAgICAgICBhbHRlcm5hdGl2ZS5wcm9wZXJ0aWVzLnR5cGUgPSB7XG4gICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgZW51bTogW2FsdGVybmF0aXZlLnR5cGVdLFxuICAgICAgICAgIHJlcXVpcmVkOiB0cnVlLFxuICAgICAgICAgIGhpZGRlbjogdHJ1ZVxuICAgICAgICB9O1xuXG4gICAgICAgIGFsdGVybmF0aXZlLnR5cGUgPSAnb2JqZWN0JztcbiAgICAgIH1cblxuICAgICAgYWx0ZXJuYXRpdmUucHJlcGFyZWQgPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHByZXBwZWRBbHRlcm5hdGl2ZXM7XG4gIH07XG5cbiAgdGhpcy5wcmVwRmllbGRzID0gKGZpZWxkcywgbW9kZWwsIHZhbGlkYXRpb25NZXNzYWdlcykgPT4ge1xuICAgIGlmICghZmllbGRzKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuXG4gICAgbGV0IHByZXBhcmVkRmllbGRzID0gY29weU9mKGZpZWxkcyk7XG5cbiAgICBwcmVwYXJlZEZpZWxkcyA9IGZsYXR0ZW5GaWVsZHNXaXRoR3JvdXBzKHByZXBhcmVkRmllbGRzKTtcbiAgICBwcmVwYXJlZEZpZWxkcyA9IHRyYW5zZm9ybUZpZWxkQXJyYXlUb01hcChwcmVwYXJlZEZpZWxkcyk7XG4gICAgcHJlcGFyZWRGaWVsZHMgPSB0cmFuc2Zvcm1OZXN0ZWRLZXlzVG9OZXN0ZWRTcGVjcyhwcmVwYXJlZEZpZWxkcyk7XG5cbiAgICBPYmplY3Qua2V5cyhwcmVwYXJlZEZpZWxkcykuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBwcmVwYXJlZEZpZWxkc1trZXldID0gdGhpcy5wcmVwRmllbGQocHJlcGFyZWRGaWVsZHNba2V5XSwgbW9kZWwsIHZhbGlkYXRpb25NZXNzYWdlcyk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcHJlcGFyZWRGaWVsZHM7XG4gIH07XG5cbiAgdGhpcy5wcmVwRmllbGQgPSAoZmllbGQsIG1vZGVsLCB2YWxpZGF0aW9uTWVzc2FnZXMpID0+IHtcbiAgICBjb25zdCBwcmVwYXJlZEZpZWxkID0gY29weU9mKGZpZWxkKTtcblxuICAgIHRoaXMucHJlcExlZ2FjeVByb3BzKHByZXBhcmVkRmllbGQpO1xuICAgIHRoaXMucHJlcFR5cGUocHJlcGFyZWRGaWVsZCk7XG4gICAgdGhpcy5wcmVwUGF0dGVybihwcmVwYXJlZEZpZWxkKTtcbiAgICB0aGlzLnByZXBWYWx1ZXNBc3luYyhwcmVwYXJlZEZpZWxkLCBtb2RlbCk7XG4gICAgdGhpcy5wcmVwVmFsaWRhdGlvbk1lc3NhZ2VzKHByZXBhcmVkRmllbGQsIHZhbGlkYXRpb25NZXNzYWdlcyk7XG4gICAgdGhpcy5wcmVwSGVscChwcmVwYXJlZEZpZWxkKTtcbiAgICB0aGlzLnByZXBDYW1lcmFHdWlkZWxpbmVzKHByZXBhcmVkRmllbGQpO1xuXG4gICAgcmV0dXJuIHByZXBhcmVkRmllbGQ7XG4gIH07XG5cbiAgLyoqXG4gICAqIEluIGFuIG9sZGVyIGZvcm1hdCB3ZSBoYWQgYW4gZXh0cmEgZmllbGRHcm91cCBsZXZlbCwgaGVyZSB3ZSBmbGF0dGVuIHRoYXQgb3V0XG4gICAqIFNvIHRoZSBpbm5lciBhcnJheXMgb2YgZmllbGRzIHdpdGhpbiB0aGUgZGlmZmVyZW50IGZpZWxkIGdyb3VwcyBhcmUgZmxhdHRlbmVkXG4gICAqIHRvIGEgc2luZ2xlIGFycmF5LCB3aGljaCBpcyByZXR1cm5lZC5cbiAgICovXG4gIGZ1bmN0aW9uIGZsYXR0ZW5GaWVsZHNXaXRoR3JvdXBzKGZpZWxkcykge1xuICAgIGlmIChmaWVsZHMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgbGV0IGZsYXR0ZW5lZEZpZWxkcyA9IFtdO1xuICAgICAgZmllbGRzLmZvckVhY2goKGZpZWxkKSA9PiB7XG4gICAgICAgIC8vIElmIHdlJ3ZlIGJlZW4gZ2l2ZW4gYSBncm91cCB3aXRoIG5lc3RlZCBmaWVsZHMsIGJyZWFrIHRoZW0gb3V0LlxuICAgICAgICBpZiAoZmllbGQuZmllbGRzKSB7XG4gICAgICAgICAgZmxhdHRlbmVkRmllbGRzID0gZmxhdHRlbmVkRmllbGRzLmNvbmNhdChmbGF0dGVuRmllbGRXaXRoR3JvdXAoZmllbGQsIGZpZWxkLmZpZWxkcykpO1xuICAgICAgICB9IGVsc2UgaWYgKGZpZWxkLmdyb3VwKSB7XG4gICAgICAgICAgZmxhdHRlbmVkRmllbGRzID0gZmxhdHRlbmVkRmllbGRzLmNvbmNhdChmbGF0dGVuRmllbGRXaXRoR3JvdXAoZmllbGQsIGZpZWxkLmdyb3VwKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlIGl0J3MgYSByZWd1bGFyIGZpZWxkLCBqdXN0IGFkZCBpdC5cbiAgICAgICAgICBmbGF0dGVuZWRGaWVsZHMucHVzaChmaWVsZCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZsYXR0ZW5lZEZpZWxkcztcbiAgICB9XG4gICAgcmV0dXJuIGZpZWxkcztcbiAgfVxuXG4gIGZ1bmN0aW9uIGZsYXR0ZW5GaWVsZFdpdGhHcm91cChmaWVsZCwgc3ViRmllbGRzKSB7XG4gICAgLy8gSWYgZmlyc3QgZmllbGQgZG9lc24ndCBoYXZlIGEgbGFiZWwsIHVzZSB0aGUgb25lIGZyb20gdGhlIGdyb3VwXG4gICAgaWYgKGZpZWxkLm5hbWUgJiYgc3ViRmllbGRzLmxlbmd0aCAmJiAhc3ViRmllbGRzWzBdLm5hbWUpIHtcbiAgICAgIHN1YkZpZWxkc1swXS5uYW1lID0gZmllbGQubmFtZTtcbiAgICB9XG5cbiAgICBpZiAoZmllbGQud2lkdGggJiYgc3ViRmllbGRzLmxlbmd0aCAmJiAhc3ViRmllbGRzWzBdLndpZHRoKSB7XG4gICAgICBzdWJGaWVsZHNbMF0ud2lkdGggPSBmaWVsZC53aWR0aDtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGVyZSB3YXMgYSB0b29sdGlwIGF0IGZpZWxkR3JvdXAgbGV2ZWwgbW92ZSBpdCB0byBmaXJzdCBmaWVsZC5cbiAgICBpZiAoZmllbGQudG9vbHRpcCAmJiBzdWJGaWVsZHMubGVuZ3RoICYmICFzdWJGaWVsZHNbMF0uaGVscFRleHQpIHtcbiAgICAgIHN1YkZpZWxkc1swXS5oZWxwVGV4dCA9IGZpZWxkLnRvb2x0aXA7XG4gICAgfVxuXG4gICAgaWYgKGZpZWxkLmluZm8gJiYgc3ViRmllbGRzLmxlbmd0aCAmJiAhc3ViRmllbGRzWzBdLmhlbHBUZXh0KSB7XG4gICAgICBzdWJGaWVsZHNbMF0uaGVscFRleHQgPSBmaWVsZC5pbmZvO1xuICAgIH1cblxuICAgIC8vIElmIHRoZXJlIGFyZSB0d28gcGFydHMgb2YgdGhpcyBncm91cCwgcmVuZGVyIHRoZW0gc2lkZSBieSBzaWRlXG4gICAgaWYgKHN1YkZpZWxkcy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHN1YkZpZWxkcy5mb3JFYWNoKChuZXN0ZWRGaWVsZCkgPT4ge1xuICAgICAgICBuZXN0ZWRGaWVsZC53aWR0aCA9ICdtZCc7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBJZiB0aGVyZSBhcmUgdGhyZWUgcGFydHMsIHJlbmRlciB0aGUgZmlyc3QgdHdvIHNpZGUgYnkgc2lkZVxuICAgIGlmIChzdWJGaWVsZHMubGVuZ3RoID09PSAzKSB7XG4gICAgICBzdWJGaWVsZHNbMF0ud2lkdGggPSAnbWQnO1xuICAgICAgc3ViRmllbGRzWzFdLndpZHRoID0gJ21kJztcbiAgICB9XG5cbiAgICByZXR1cm4gc3ViRmllbGRzO1xuICB9XG5cbiAgLypcbiAgICogU29tZSBvbGRlciByZXF1aXJlbWVudHMgcmV0dXJuIGFuIGFycmF5IG9mIGZpZWxkcywgd2hlcmUgaXQgc2hvdWxkIGJlIGEgbWFwXG4gICAqIGZyb20gdGhlIHByb3BlcnR5IG5hbWUgdG8gdGhlIHNwZWMuICBUaGlzIGNvbnZlcnRzIGFycmF5cyB0byBtYXBzLlxuICAgKi9cbiAgZnVuY3Rpb24gdHJhbnNmb3JtRmllbGRBcnJheVRvTWFwKGZpZWxkcykge1xuICAgIGlmIChmaWVsZHMgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgY29uc3QgZmllbGRNYXAgPSB7fTtcbiAgICAgIGZpZWxkcy5mb3JFYWNoKChmaWVsZCkgPT4ge1xuICAgICAgICBjb25zdCBrZXkgPSBmaWVsZC5rZXkgfHwgZmllbGQubmFtZTtcbiAgICAgICAgZGVsZXRlIGZpZWxkLmtleTtcblxuICAgICAgICBmaWVsZE1hcFtrZXldID0gY29weU9mKGZpZWxkKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZpZWxkTWFwO1xuICAgIH1cbiAgICByZXR1cm4gZmllbGRzO1xuICB9XG5cbiAgLypcbiAgICogU29tZSBvbGRlciBmb3JtYXQgcmV0dXJuIGtleXMgbGlrZSAnYWRkcmVzcy5jaXR5JywgZXhwZWN0aW5nIHRoZSB2YWx1ZSBvZlxuICAgKiBjaXR5IHRvIGJlIG5lc3RlZCBpbnNpZGUgYW4gYWRkcmVzcyBvYmplY3QuICBUaGlzIGZ1bmN0aW9uIGNyZWF0ZXMgYSBzcGVjIG9mXG4gICAqIHR5cGUgJ29iamVjdCcsIGFuZCBuZXN0cyBzdWNoIGZpZWxkcyBpbnNpZGUgb2YgaXQuICBXaGVuIHdlIHJlbmRlciB3ZSBwYXNzXG4gICAqIHRoaXMgb2JqZWN0IHNwZWMgdG8gYSBuZXN0ZWQgZmllbGRzZXQuXG4gICAqL1xuICBmdW5jdGlvbiB0cmFuc2Zvcm1OZXN0ZWRLZXlzVG9OZXN0ZWRTcGVjcyhmaWVsZE1hcCkge1xuICAgIGlmIChmaWVsZE1hcCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGluZyBhIG1hcCBvZiBmaWVsZHMsIG5vdCBhbiBhcnJheScpO1xuICAgIH1cblxuICAgIGNvbnN0IG5lc3RlZEZpZWxkcyA9IHt9O1xuICAgIE9iamVjdC5rZXlzKGZpZWxkTWFwKS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGlmIChrZXkuaW5kZXhPZignLicpID4gMCkge1xuICAgICAgICAvLyBJZiB0aGUga2V5IGNvbnRhaW5zIGEgcGVyaW9kIHdlIG5lZWQgdG8gbmVzdCB0aGUgZmllbGRzIGluIGFub3RoZXIgb2JqZWN0XG4gICAgICAgIGNvbnN0IHBhdGhTZWN0aW9ucyA9IGtleS5zcGxpdCgnLicpO1xuICAgICAgICBjb25zdCBuZXN0ZWRLZXkgPSBwYXRoU2VjdGlvbnNbMF07XG5cbiAgICAgICAgLy8gSWYgdGhpcyBzdWIgb2JqZWN0IGRvZXNuJ3QgZXhpc3QgeWV0LCBjcmVhdGUgaXRcbiAgICAgICAgaWYgKCFuZXN0ZWRGaWVsZHNbbmVzdGVkS2V5XSkge1xuICAgICAgICAgIG5lc3RlZEZpZWxkc1tuZXN0ZWRLZXldID0ge1xuICAgICAgICAgICAgdHlwZTogJ29iamVjdCcsXG4gICAgICAgICAgICBwcm9wZXJ0aWVzOiB7fVxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgbmVzdGVkRmllbGRzW25lc3RlZEtleV0ucHJvcGVydGllc1twYXRoU2VjdGlvbnNbMV1dID0gZmllbGRNYXBba2V5XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5lc3RlZEZpZWxkc1trZXldID0gZmllbGRNYXBba2V5XTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbmVzdGVkRmllbGRzO1xuICB9XG5cbiAgdGhpcy5wcmVwVHlwZSA9IChmaWVsZCkgPT4ge1xuICAgIGNvbnN0IHR5cGUgPSBmaWVsZC50eXBlICYmIGZpZWxkLnR5cGUudG9Mb3dlckNhc2UgJiYgZmllbGQudHlwZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICd0ZXh0JzpcbiAgICAgICAgZmllbGQudHlwZSA9ICdzdHJpbmcnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICBmaWVsZC50eXBlID0gJ3N0cmluZyc7XG4gICAgICAgIGZpZWxkLmZvcm1hdCA9ICdkYXRlJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdwYXNzd29yZCc6XG4gICAgICAgIGZpZWxkLnR5cGUgPSAnc3RyaW5nJztcbiAgICAgICAgZmllbGQuY29udHJvbCA9ICdwYXNzd29yZCc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnY2hlY2tib3gnOlxuICAgICAgICBmaWVsZC50eXBlID0gJ2Jvb2xlYW4nO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3NlbGVjdCc6XG4gICAgICAgIGlmIChmaWVsZC5zZWxlY3RUeXBlID09PSAnQ0hFQ0tCT1gnKSB7XG4gICAgICAgICAgZmllbGQudHlwZSA9ICdhcnJheSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKCFmaWVsZC5jb250cm9sKSB7XG4gICAgICAgICAgICBmaWVsZC5jb250cm9sID0gJ3NlbGVjdCc7XG4gICAgICAgICAgfVxuICAgICAgICAgIGRlbGV0ZSBmaWVsZC50eXBlO1xuICAgICAgICB9XG5cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdyYWRpbyc6XG4gICAgICAgIGZpZWxkLmNvbnRyb2wgPSAncmFkaW8nO1xuICAgICAgICBkZWxldGUgZmllbGQudHlwZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd1cGxvYWQnOlxuICAgICAgICBmaWVsZC50eXBlID0gJ3N0cmluZyc7XG4gICAgICAgIGZpZWxkLmZvcm1hdCA9ICdiYXNlNjR1cmwnO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ3RlbCc6XG4gICAgICAgIGZpZWxkLnR5cGUgPSAnc3RyaW5nJztcbiAgICAgICAgZmllbGQuZm9ybWF0ID0gJ3Bob25lJztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICd0ZXh0YXJlYSc6XG4gICAgICAgIGZpZWxkLnR5cGUgPSAnc3RyaW5nJztcbiAgICAgICAgZmllbGQuY29udHJvbCA9ICd0ZXh0YXJlYSc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnYXJyYXknOlxuICAgICAgICBmaWVsZC5jb250cm9sID0gdGhpcy5nZXRDb250cm9sRm9yQXJyYXkoZmllbGQpO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgfVxuXG4gICAgaWYgKCFmaWVsZC5jb250cm9sICYmIGZpZWxkLnR5cGUgIT09ICdvYmplY3QnKSB7XG4gICAgICBmaWVsZC5jb250cm9sID0gdGhpcy5nZXRDb250cm9sVHlwZShmaWVsZCk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuZ2V0Q29udHJvbEZvckFycmF5ID0gKGZpZWxkKSA9PiB7XG4gICAgaWYgKGZpZWxkLml0ZW1zLmVudW0pIHtcbiAgICAgIHJldHVybiAnY2hlY2tib3gtZ3JvdXAnO1xuICAgIH1cbiAgICBpZiAoZmllbGQuaXRlbXMuZm9ybWF0ID09PSAnYmFzZTY0dXJsJykge1xuICAgICAgcmV0dXJuICdtdWx0aS11cGxvYWQnO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICB0aGlzLnByZXBMZWdhY3lBbHRlcm5hdGl2ZXMgPSAoYWx0ZXJuYXRpdmUpID0+IHtcbiAgICBpZiAoIWFsdGVybmF0aXZlLnRpdGxlICYmIGFsdGVybmF0aXZlLmxhYmVsKSB7XG4gICAgICBhbHRlcm5hdGl2ZS50aXRsZSA9IGFsdGVybmF0aXZlLmxhYmVsO1xuICAgIH1cbiAgICBpZiAoIWFsdGVybmF0aXZlLnRpdGxlKSB7XG4gICAgICBhbHRlcm5hdGl2ZS50aXRsZSA9IGdldE5hbWVGcm9tVHlwZShhbHRlcm5hdGl2ZS50eXBlKTtcbiAgICB9XG4gICAgaWYgKCFhbHRlcm5hdGl2ZS50eXBlICYmIGFsdGVybmF0aXZlLm5hbWUpIHtcbiAgICAgIGFsdGVybmF0aXZlLnR5cGUgPSBhbHRlcm5hdGl2ZS5uYW1lO1xuICAgIH1cbiAgICBpZiAoIWFsdGVybmF0aXZlLmRlc2NyaXB0aW9uICYmIGFsdGVybmF0aXZlLnRvb2x0aXApIHtcbiAgICAgIGFsdGVybmF0aXZlLmRlc2NyaXB0aW9uID0gYWx0ZXJuYXRpdmUudG9vbHRpcDtcbiAgICB9XG4gICAgaWYgKGFsdGVybmF0aXZlLmZpZWxkR3JvdXBzICYmICFhbHRlcm5hdGl2ZS5maWVsZHMpIHtcbiAgICAgIGFsdGVybmF0aXZlLmZpZWxkcyA9IGZsYXR0ZW5GaWVsZHNXaXRoR3JvdXBzKGFsdGVybmF0aXZlLmZpZWxkR3JvdXBzKTtcbiAgICAgIGRlbGV0ZSBhbHRlcm5hdGl2ZS5maWVsZEdyb3VwcztcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5wcmVwTGVnYWN5UHJvcHMgPSAoZmllbGQpID0+IHtcbiAgICBpZiAoZmllbGQubmFtZSAmJiAhZmllbGQudGl0bGUpIHtcbiAgICAgIGZpZWxkLnRpdGxlID0gZmllbGQubmFtZTtcbiAgICAgIGRlbGV0ZSBmaWVsZC5uYW1lO1xuICAgIH1cblxuICAgIGlmIChmaWVsZC52YWxpZGF0aW9uUmVnZXhwKSB7XG4gICAgICBmaWVsZC5wYXR0ZXJuID0gZmllbGQudmFsaWRhdGlvblJlZ2V4cDtcbiAgICAgIGRlbGV0ZSBmaWVsZC52YWxpZGF0aW9uUmVnZXhwO1xuICAgIH1cblxuICAgIGlmIChmaWVsZC5taW4gJiYgIWZpZWxkLm1pbmltdW0pIHtcbiAgICAgIGZpZWxkLm1pbmltdW0gPSBmaWVsZC5taW47XG4gICAgICBkZWxldGUgZmllbGQubWluO1xuICAgIH1cblxuICAgIGlmIChmaWVsZC5tYXggJiYgIWZpZWxkLm1heGltdW0pIHtcbiAgICAgIGZpZWxkLm1heGltdW0gPSBmaWVsZC5tYXg7XG4gICAgICBkZWxldGUgZmllbGQubWF4O1xuICAgIH1cblxuICAgIGlmIChmaWVsZC5leGFtcGxlICYmICFmaWVsZC5wbGFjZWhvbGRlcikge1xuICAgICAgZmllbGQucGxhY2Vob2xkZXIgPSBmaWVsZC5leGFtcGxlO1xuICAgICAgZGVsZXRlIGZpZWxkLmV4YW1wbGU7XG4gICAgfVxuXG4gICAgaWYgKGZpZWxkLnRvb2x0aXAgJiYgIWZpZWxkLmhlbHBUZXh0KSB7XG4gICAgICBmaWVsZC5oZWxwVGV4dCA9IGZpZWxkLnRvb2x0aXA7XG4gICAgICBkZWxldGUgZmllbGQudG9vbHRpcDtcbiAgICB9XG5cbiAgICBpZiAoZmllbGQudmFsdWVzQWxsb3dlZCAmJiAhZmllbGQudmFsdWVzICYmIGZpZWxkLnNlbGVjdFR5cGUgIT09ICdDSEVDS0JPWCcpIHtcbiAgICAgIGZpZWxkLnZhbHVlcyA9IGZpZWxkLnZhbHVlc0FsbG93ZWQ7XG4gICAgICBkZWxldGUgZmllbGQudmFsdWVzQWxsb3dlZDtcbiAgICB9XG5cbiAgICBpZiAoZmllbGQudmFsdWVzQWxsb3dlZCAmJiAhZmllbGQuaXRlbXMgJiYgZmllbGQuc2VsZWN0VHlwZSA9PT0gJ0NIRUNLQk9YJykge1xuICAgICAgZmllbGQuaXRlbXMgPSB7XG4gICAgICAgIHZhbHVlczogZmllbGQudmFsdWVzQWxsb3dlZFxuICAgICAgfTtcbiAgICAgIGRlbGV0ZSBmaWVsZC52YWx1ZXNBbGxvd2VkO1xuICAgIH1cblxuICAgIGlmIChmaWVsZC52YWx1ZXMgJiYgZmllbGQudmFsdWVzLm1hcCkge1xuICAgICAgZmllbGQudmFsdWVzID0gdGhpcy5wcmVwTGVnYWN5VmFsdWVzKGZpZWxkLnZhbHVlcyk7XG4gICAgfVxuXG4gICAgaWYgKGZpZWxkLnZhbHVlICYmICFmaWVsZC5kZWZhdWx0KSB7XG4gICAgICBmaWVsZC5kZWZhdWx0ID0gZmllbGQudmFsdWU7XG4gICAgICBkZWxldGUgZmllbGQudmFsdWU7XG4gICAgfVxuXG4gICAgaWYgKGZpZWxkLnZhbHVlcykge1xuICAgICAgLy8gSW4gc29tZSBsZWdhY3kgYXJyYXlzIHRoZSBmaXJzdCB2YWx1ZSBpcyBhIHBsYWNlaG9sZGVyLCBleHRyYWN0IGl0LlxuICAgICAgaWYgKFxuICAgICAgICBmaWVsZC52YWx1ZXNcbiAgICAgICAgJiYgZmllbGQudmFsdWVzLmxlbmd0aFxuICAgICAgICAmJiBmaWVsZC52YWx1ZXNbMF1cbiAgICAgICAgJiYgIWZpZWxkLnZhbHVlc1swXS52YWx1ZVxuICAgICAgICAmJiBmaWVsZC52YWx1ZXNbMF0ubGFiZWxcbiAgICAgICAgJiYgIWZpZWxkLnBsYWNlaG9sZGVyXG4gICAgICApIHtcbiAgICAgICAgZmllbGQucGxhY2Vob2xkZXIgPSBmaWVsZC52YWx1ZXNbMF0ubGFiZWw7XG4gICAgICAgIGZpZWxkLnZhbHVlcyA9IGZpZWxkLnZhbHVlcy5zbGljZSgxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZmllbGQuaGVscE9wdGlvbnMgJiYgIWZpZWxkLmhlbHApIHtcbiAgICAgIGZpZWxkLmhlbHAgPSBmaWVsZC5oZWxwT3B0aW9ucztcbiAgICAgIGRlbGV0ZSBmaWVsZC5oZWxwT3B0aW9ucztcbiAgICB9XG4gIH07XG5cbiAgdGhpcy5wcmVwTGVnYWN5VmFsdWVzID0gdmFsdWVzID0+IHZhbHVlcy5tYXAocHJlcExlZ2FjeVZhbHVlKTtcblxuICBmdW5jdGlvbiBwcmVwTGVnYWN5VmFsdWUodmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlLmxhYmVsICYmIHZhbHVlLnRpdGxlKSB7XG4gICAgICB2YWx1ZS5sYWJlbCA9IHZhbHVlLnRpdGxlO1xuICAgICAgZGVsZXRlIHZhbHVlLnRpdGxlO1xuICAgIH1cbiAgICBpZiAoIXZhbHVlLmxhYmVsICYmIHZhbHVlLm5hbWUpIHtcbiAgICAgIHZhbHVlLmxhYmVsID0gdmFsdWUubmFtZTtcbiAgICAgIGRlbGV0ZSB2YWx1ZS5uYW1lO1xuICAgIH1cblxuICAgIGlmICghdmFsdWUudmFsdWUgJiYgdmFsdWUuY29kZSkge1xuICAgICAgdmFsdWUudmFsdWUgPSB2YWx1ZS5jb2RlO1xuICAgICAgZGVsZXRlIHZhbHVlLmNvZGU7XG4gICAgfVxuICAgIGlmICghdmFsdWUudmFsdWUgJiYgdmFsdWUua2V5KSB7XG4gICAgICB2YWx1ZS52YWx1ZSA9IHZhbHVlLmtleTtcbiAgICAgIGRlbGV0ZSB2YWx1ZS5rZXk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgdGhpcy5wcmVwUGF0dGVybiA9IChmaWVsZCkgPT4ge1xuICAgIGlmIChmaWVsZC5wYXR0ZXJuKSB7XG4gICAgICB0cnkge1xuICAgICAgICBSZWdFeHAoZmllbGQucGF0dGVybik7XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICBjb25zb2xlLndhcm4oJ0FQSSByZWdleHAgaXMgaW52YWxpZCcpO1xuICAgICAgICBkZWxldGUgZmllbGQucGF0dGVybjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIGZpZWxkLnBhdHRlcm47XG4gICAgfVxuICB9O1xuXG4gIHRoaXMucHJlcFZhbHVlc0FzeW5jID0gKGZpZWxkLCBtb2RlbCkgPT4ge1xuICAgIGlmICghZmllbGQudmFsdWVzQXN5bmMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgcG9zdERhdGEgPSB7fTtcbiAgICBpZiAoZmllbGQudmFsdWVzQXN5bmMucGFyYW1zICYmIGZpZWxkLnZhbHVlc0FzeW5jLnBhcmFtcy5sZW5ndGgpIHtcbiAgICAgIHBvc3REYXRhID0gdGhpcy5nZXRQYXJhbVZhbHVlc0Zyb21Nb2RlbChtb2RlbCwgZmllbGQudmFsdWVzQXN5bmMucGFyYW1zKTtcbiAgICB9XG5cbiAgICAvLyBSZXRyeSBvbmNlIG9uIGZhaWx1cmVcbiAgICB0aGlzLmZldGNoVmFsdWVzQXN5bmMoZmllbGQsIHBvc3REYXRhKS5jYXRjaCgoKSA9PiB0aGlzLmZldGNoVmFsdWVzQXN5bmMoZmllbGQsIHBvc3REYXRhKSk7XG4gIH07XG5cbiAgdGhpcy5mZXRjaFZhbHVlc0FzeW5jID0gKGZpZWxkLCBwb3N0RGF0YSkgPT4gJGh0dHAoe1xuICAgIG1ldGhvZDogZmllbGQudmFsdWVzQXN5bmMubWV0aG9kIHx8ICdHRVQnLFxuICAgIHVybDogZmllbGQudmFsdWVzQXN5bmMudXJsLFxuICAgIGRhdGE6IHBvc3REYXRhIHx8IHt9XG4gIH0pLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgZmllbGQudmFsdWVzID0gdGhpcy5wcmVwTGVnYWN5VmFsdWVzKHJlc3BvbnNlLmRhdGEpO1xuICB9KTtcblxuICB0aGlzLmdldFBhcmFtVmFsdWVzRnJvbU1vZGVsID0gKG1vZGVsLCBwYXJhbXMpID0+IHtcbiAgICBjb25zdCBkYXRhID0ge307XG4gICAgcGFyYW1zLmZvckVhY2goKHBhcmFtKSA9PiB7XG4gICAgICBpZiAobW9kZWxbcGFyYW0ua2V5XSkge1xuICAgICAgICBkYXRhW3BhcmFtLnBhcmFtZXRlck5hbWVdID0gbW9kZWxbcGFyYW0ua2V5XTtcbiAgICAgIH0gZWxzZSBpZiAocGFyYW0ucmVxdWlyZWQpIHtcbiAgICAgICAgLy8gVE9ETyBQcm9ibGVtLCBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQsIGJ1dCBkYXRhIGlzIG1pc3NpbmcuXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgdGhpcy5wcmVwVmFsaWRhdGlvbk1lc3NhZ2VzID0gKGZpZWxkKSA9PiB7XG4gICAgaWYgKGZpZWxkLnZhbGlkYXRpb25NZXNzYWdlcyAmJiBmaWVsZC52YWxpZGF0aW9uTWVzc2FnZXMubWluKSB7XG4gICAgICBmaWVsZC52YWxpZGF0aW9uTWVzc2FnZXMubWluaW11bSA9IGZpZWxkLnZhbGlkYXRpb25NZXNzYWdlcy5taW47XG4gICAgICBkZWxldGUgZmllbGQudmFsaWRhdGlvbk1lc3NhZ2VzLm1pbjtcbiAgICB9XG4gICAgaWYgKGZpZWxkLnZhbGlkYXRpb25NZXNzYWdlcyAmJiBmaWVsZC52YWxpZGF0aW9uTWVzc2FnZXMubWF4KSB7XG4gICAgICBmaWVsZC52YWxpZGF0aW9uTWVzc2FnZXMubWF4aW11bSA9IGZpZWxkLnZhbGlkYXRpb25NZXNzYWdlcy5tYXg7XG4gICAgICBkZWxldGUgZmllbGQudmFsaWRhdGlvbk1lc3NhZ2VzLm1heDtcbiAgICB9XG4gICAgaWYgKGZpZWxkLnZhbGlkYXRpb25NZXNzYWdlcyAmJiBmaWVsZC52YWxpZGF0aW9uTWVzc2FnZXMubWlubGVuZ3RoKSB7XG4gICAgICBmaWVsZC52YWxpZGF0aW9uTWVzc2FnZXMubWluTGVuZ3RoID0gZmllbGQudmFsaWRhdGlvbk1lc3NhZ2VzLm1pbmxlbmd0aDtcbiAgICAgIGRlbGV0ZSBmaWVsZC52YWxpZGF0aW9uTWVzc2FnZXMubWlubGVuZ3RoO1xuICAgIH1cbiAgICBpZiAoZmllbGQudmFsaWRhdGlvbk1lc3NhZ2VzICYmIGZpZWxkLnZhbGlkYXRpb25NZXNzYWdlcy5tYXhsZW5ndGgpIHtcbiAgICAgIGZpZWxkLnZhbGlkYXRpb25NZXNzYWdlcy5tYXhMZW5ndGggPSBmaWVsZC52YWxpZGF0aW9uTWVzc2FnZXMubWF4bGVuZ3RoO1xuICAgICAgZGVsZXRlIGZpZWxkLnZhbGlkYXRpb25NZXNzYWdlcy5tYXhsZW5ndGg7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMucHJlcEhlbHAgPSAoZmllbGQpID0+IHtcbiAgICBpZiAoXG4gICAgICAhZmllbGQuaGVscFxuICAgICAgJiYgKGZpZWxkLmhlbHBUZXh0IHx8IGZpZWxkLmhlbHBJbWFnZSB8fCBmaWVsZC5oZWxwTGlzdCB8fCBmaWVsZC51cGxvYWRQbGFjZWhvbGRlckltYWdlKVxuICAgICkge1xuICAgICAgZmllbGQuaGVscCA9IHt9O1xuICAgIH1cbiAgICBpZiAoZmllbGQuaGVscFRleHQpIHtcbiAgICAgIGZpZWxkLmhlbHAubWVzc2FnZSA9IGZpZWxkLmhlbHBUZXh0O1xuICAgICAgZGVsZXRlIGZpZWxkLmhlbHBUZXh0O1xuICAgIH1cbiAgICBpZiAoZmllbGQuaGVscEltYWdlKSB7XG4gICAgICBmaWVsZC5oZWxwLmltYWdlID0gZmllbGQuaGVscEltYWdlO1xuICAgICAgZGVsZXRlIGZpZWxkLmhlbHBJbWFnZTtcbiAgICB9XG4gICAgLy8gaGVscEltYWdlIGRvZXMgbm90IGhhdmUgc2FtZSBsaW5lYWdlIHBsYWNlaG9sZGVyIGltYWdlXG4gICAgLy8gMiBmaWVsZHMgY2FuIG92ZXJ3cml0ZSBlYWNoIG90aGVyIHNhZmVseSAob25seSBvbmUgd2lsbCBiZSBwcmVzZW50IGF0IGEgdGltZSlcbiAgICBpZiAoZmllbGQudXBsb2FkUGxhY2Vob2xkZXJJbWFnZSkge1xuICAgICAgZmllbGQuaGVscC5pbWFnZSA9IGZpZWxkLnVwbG9hZFBsYWNlaG9sZGVySW1hZ2U7XG4gICAgICBkZWxldGUgZmllbGQudXBsb2FkUGxhY2Vob2xkZXJJbWFnZTtcbiAgICB9XG4gICAgaWYgKGZpZWxkLmxpc3QpIHtcbiAgICAgIGZpZWxkLmhlbHAubGlzdCA9IGZpZWxkLmhlbHBMaXN0O1xuICAgICAgZGVsZXRlIGZpZWxkLmhlbHBMaXN0O1xuICAgIH1cbiAgfTtcblxuICAvLyBJbiBhbiBvbGRlciBmb3JtYXQgd2UgZXhwZWN0ZWQgYSBjYW1lcmEgb3V0bGluZSBndWlkZSB1bmRlciB0aGUgJ2NhbWVyYS5vdmVybGF5JyBwcm9wLlxuICAvLyBCdXQgaW4gdGhlIGZpbmFsIGNhbWVyYSBndWlkZWxpbmVzIHNwZWMsICdjYW1lcmEub3ZlcmxheScgaXMgbWVhbnQgZm9yIHRoZSBzb2xpZCBtYXNrLFxuICAvLyBub3QgdGhlIG91dGxpbmUuXG4gIC8vIFJlbW92ZSB3aGVuIGxlZ2FjeSBwcm9kdWNlcnMgaGF2ZSBiZWVuIHVwZ3JhZGVkIChKYXBhbiBlS1lDIGxpdmUgdXBsb2FkcykuXG4gIHRoaXMucHJlcENhbWVyYUd1aWRlbGluZXMgPSAoZmllbGQpID0+IHtcbiAgICBpZiAoXG4gICAgICBmaWVsZC5jYW1lcmFcbiAgICAgICYmIGZpZWxkLmNhbWVyYS5vdmVybGF5XG4gICAgICAmJiAhZmllbGQuY2FtZXJhLm91dGxpbmVcbiAgICApIHtcbiAgICAgIGZpZWxkLmNhbWVyYS5vdXRsaW5lID0gZmllbGQuY2FtZXJhLm92ZXJsYXk7XG4gICAgICBkZWxldGUgZmllbGQuY2FtZXJhLm92ZXJsYXk7XG4gICAgfVxuICB9O1xuXG4gIHRoaXMuZ2V0UmVxdWlyZWRGaWVsZHMgPSBnZXRSZXF1aXJlZEZpZWxkcztcbiAgdGhpcy5nZXRDb250cm9sVHlwZSA9IGdldENvbnRyb2xUeXBlO1xufVxuXG4vKipcbiAqIE9sZGVyIHN0eWxlIGZvcm1hdCBoYWQgcmVxdWlyZWQgYXMgYSBwcm9wZXJ0eSBvZiBmaWVsZHMsIGluIEpTT04gc2NoZW1hIGl0XG4gKiBzaG91bGQgYmUgYSBzZXBhcmF0ZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lc1xuICovXG5mdW5jdGlvbiBnZXRSZXF1aXJlZEZpZWxkcyhmaWVsZHMpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZmllbGRzKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgZmllbGQgbWFwJyk7XG4gIH1cbiAgLy8gUmV0dXJuIGFycmF5IG9mIGtleXMgdGhhdCBoYXZlIHJlcXVpcmVkIHNldFxuICByZXR1cm4gT2JqZWN0LmtleXMoZmllbGRzKS5maWx0ZXIocHJvcGVydHkgPT4gZmllbGRzW3Byb3BlcnR5XS5yZXF1aXJlZCk7XG59XG5cbmZ1bmN0aW9uIGdldENvbnRyb2xUeXBlKGZpZWxkKSB7XG4gIGlmIChmaWVsZC5jb250cm9sKSB7XG4gICAgaWYgKGZpZWxkLmNvbnRyb2wgPT09ICdzZWxlY3QnICYmIGZpZWxkLnNlbGVjdFR5cGUgPT09ICdDSEVDS0JPWCcpIHtcbiAgICAgIHJldHVybiAnY2hlY2tib3gtZ3JvdXAnO1xuICAgIH1cblxuICAgIHJldHVybiBmaWVsZC5jb250cm9sLnRvTG93ZXJDYXNlKCk7XG4gIH1cbiAgaWYgKGZpZWxkLmhpZGRlbikge1xuICAgIHJldHVybiAnaGlkZGVuJztcbiAgfVxuICBpZiAoZmllbGQudmFsdWVzQXN5bmMpIHtcbiAgICByZXR1cm4gJ3NlbGVjdCc7XG4gIH1cbiAgaWYgKGZpZWxkLnZhbHVlcyAmJiBmaWVsZC52YWx1ZXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGdldFNlbGVjdGlvblR5cGUoZmllbGQpO1xuICB9XG5cbiAgc3dpdGNoIChmaWVsZC50eXBlKSB7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHJldHVybiBnZXRDb250cm9sRm9yU3RyaW5nRm9ybWF0KGZpZWxkLmZvcm1hdCk7XG4gICAgY2FzZSAnbnVtYmVyJzpcbiAgICBjYXNlICdpbnRlZ2VyJzpcbiAgICAgIHJldHVybiAnbnVtYmVyJztcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiAnY2hlY2tib3gnO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gJ3RleHQnO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldENvbnRyb2xGb3JTdHJpbmdGb3JtYXQoZm9ybWF0KSB7XG4gIHN3aXRjaCAoZm9ybWF0KSB7XG4gICAgY2FzZSAnZGF0ZSc6XG4gICAgICByZXR1cm4gJ2RhdGUnO1xuICAgIGNhc2UgJ2Jhc2U2NHVybCc6XG4gICAgICByZXR1cm4gJ2ZpbGUnO1xuICAgIGNhc2UgJ3Bhc3N3b3JkJzpcbiAgICAgIHJldHVybiAncGFzc3dvcmQnO1xuICAgIGNhc2UgJ3VyaSc6XG4gICAgICByZXR1cm4gJ3RleHQnOyAvLyAndXJsJzsgLSBub3QgaW1wbGVtZW50ZWRcbiAgICBjYXNlICdlbWFpbCc6XG4gICAgICByZXR1cm4gJ3RleHQnOyAvLyAnZW1haWwnOyAtIG5vdCBpbXBsZW1lbnRlZFxuICAgIGNhc2UgJ3Bob25lJzpcbiAgICAgIHJldHVybiAndGVsJztcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuICd0ZXh0JztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRTZWxlY3Rpb25UeXBlKGZpZWxkKSB7XG4gIGlmIChmaWVsZC5jb250cm9sKSB7XG4gICAgcmV0dXJuIGZpZWxkLmNvbnRyb2w7XG4gIH1cblxuICBpZiAoZmllbGQudHlwZSA9PT0gJ3NlbGVjdCcpIHtcbiAgICByZXR1cm4gJ3NlbGVjdCc7XG4gIH1cblxuICBpZiAoZmllbGQudHlwZSA9PT0gJ3JhZGlvJykge1xuICAgIHJldHVybiAncmFkaW8nO1xuICB9XG5cbiAgY29uc3QgdmFsdWVzID0gZmllbGQuZW51bSB8fCBmaWVsZC52YWx1ZXM7XG4gIGlmICh2YWx1ZXMpIHtcbiAgICByZXR1cm4gdmFsdWVzLmxlbmd0aCA+IDMgPyAnc2VsZWN0JyA6ICdyYWRpbyc7XG4gIH1cbiAgcmV0dXJuICdzZWxlY3QnO1xufVxuXG5mdW5jdGlvbiBjb3B5T2Yob2JqKSB7XG4gIC8vIE9iamVjdC5hc3NpZ24gaXMgbmljZXIsIGJ1dCBsYWNrcyBpZSBzdXBwb3J0XG4gIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpO1xufVxuXG4vKipcbiAqIFNvbWUgb2xkZXIgcmVxdWlybWVudHMgZm9ybWF0cyBkbyBub3QgaW5jbHVkZSBhIGxhYmVsIGZvciBhbHRlcm5hdGl2ZXNcbiAqL1xuZnVuY3Rpb24gZ2V0TmFtZUZyb21UeXBlKHRhYlR5cGUpIHtcbiAgaWYgKHRhYlR5cGUgJiYgdGFiVHlwZS5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgdGFiTmFtZVdpdGhTcGFjZXMgPSB0YWJUeXBlXG4gICAgICAudG9Mb3dlckNhc2UoKVxuICAgICAgLnNwbGl0KCdfJylcbiAgICAgIC5qb2luKCcgJyk7IC8vIFN0cmluZy5yZXBsYWNlIG1ldGhvZCBvbmx5IHJlcGxhY2VzIGZpcnN0IGluc3RhbmNlXG4gICAgcmV0dXJuIHRhYk5hbWVXaXRoU3BhY2VzLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdGFiTmFtZVdpdGhTcGFjZXMuc2xpY2UoMSk7XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5SZXF1aXJlbWVudHNTZXJ2aWNlLiRpbmplY3QgPSBbJyRodHRwJ107XG5cbmV4cG9ydCBkZWZhdWx0IFJlcXVpcmVtZW50c1NlcnZpY2U7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBSZXF1aXJlbWVudHNTZXJ2aWNlIGZyb20gJy4vcmVxdWlyZW1lbnRzLnNlcnZpY2UuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuc2VydmljZXMucmVxdWlyZW1lbnRzJywgW10pXG4gIC5zZXJ2aWNlKCdUd1JlcXVpcmVtZW50c1NlcnZpY2UnLCBSZXF1aXJlbWVudHNTZXJ2aWNlKS5uYW1lO1xuIiwiaW1wb3J0IHtcbiAgaXNTdHJpbmcsXG4gIGlzTnVtYmVyLFxuICBpc0ludGVnZXIsXG4gIGlzQm9vbGVhbixcbiAgaXNPYmplY3QsXG4gIGlzQXJyYXksXG4gIGlzVW5kZWZpbmVkLFxuICBpc051bGxcbn0gZnJvbSAnLi4vdHlwZS12YWxpZGF0b3JzJztcblxuZnVuY3Rpb24gZ2V0VmFsaWRNb2RlbFBhcnRzKG1vZGVsLCBzY2hlbWEpIHtcbiAgaWYgKHNjaGVtYS5hbGxPZikge1xuICAgIHJldHVybiBjbGVhbk1vZGVsV2l0aEFsbE9mU2NoZW1hKG1vZGVsLCBzY2hlbWEpO1xuICB9XG5cbiAgaWYgKHNjaGVtYS5vbmVPZikge1xuICAgIHJldHVybiBjbGVhbk1vZGVsV2l0aE9uZU9mU2NoZW1hKG1vZGVsLCBzY2hlbWEpO1xuICB9XG5cbiAgaWYgKHNjaGVtYS5lbnVtICYmIHNjaGVtYS5lbnVtLmluZGV4T2YobW9kZWwpID49IDApIHtcbiAgICByZXR1cm4gbW9kZWw7XG4gIH1cblxuICBpZiAoIWlzVW5kZWZpbmVkKHNjaGVtYS5jb25zdCkgJiYgbW9kZWwgPT09IHNjaGVtYS5jb25zdCkge1xuICAgIHJldHVybiBtb2RlbDtcbiAgfVxuXG4gIGlmIChzY2hlbWEudHlwZSkge1xuICAgIHN3aXRjaCAoc2NoZW1hLnR5cGUpIHtcbiAgICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICAgIHJldHVybiBjbGVhbk1vZGVsV2l0aE9iamVjdFNjaGVtYShtb2RlbCwgc2NoZW1hKTtcbiAgICAgIGNhc2UgJ2FycmF5JzpcbiAgICAgICAgcmV0dXJuIGNsZWFuTW9kZWxXaXRoQXJyYXlTY2hlbWEobW9kZWwsIHNjaGVtYSk7XG4gICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICByZXR1cm4gY2xlYW5Nb2RlbFdpdGhTdHJpbmdTY2hlbWEobW9kZWwpO1xuICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgcmV0dXJuIGNsZWFuTW9kZWxXaXRoTnVtYmVyU2NoZW1hKG1vZGVsKTtcbiAgICAgIGNhc2UgJ2ludGVnZXInOlxuICAgICAgICByZXR1cm4gY2xlYW5Nb2RlbFdpdGhJbnRlZ2VyU2NoZW1hKG1vZGVsKTtcbiAgICAgIGNhc2UgJ2Jvb2xlYW4nOlxuICAgICAgICByZXR1cm4gY2xlYW5Nb2RlbFdpdGhCb29sZWFuU2NoZW1hKG1vZGVsKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8vIFVucmVjb2duaXNlZCBzY2hlbWFcbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGNsZWFuTW9kZWxXaXRoT2JqZWN0U2NoZW1hKG1vZGVsLCBzY2hlbWEpIHtcbiAgY29uc3QgY2xlYW5lZE1vZGVsID0ge307XG4gIE9iamVjdC5rZXlzKHNjaGVtYS5wcm9wZXJ0aWVzKS5mb3JFYWNoKChwcm9wZXJ0eSkgPT4ge1xuICAgIC8vIElmIHRoZSBwcm9wZXJ0eSBleGlzdHMgaW4gdGhlIG1vZGVsLCBjbGVhbiBpdCwgYW5kIGFkZCBpdFxuICAgIGlmIChtb2RlbCAmJiAhaXNVbmRlZmluZWQobW9kZWxbcHJvcGVydHldKSkge1xuICAgICAgY29uc3QgbmV3VmFsdWUgPSBnZXRWYWxpZE1vZGVsUGFydHMobW9kZWxbcHJvcGVydHldLCBzY2hlbWEucHJvcGVydGllc1twcm9wZXJ0eV0pO1xuICAgICAgaWYgKCFpc051bGwobmV3VmFsdWUpKSB7XG4gICAgICAgIGNsZWFuZWRNb2RlbFtwcm9wZXJ0eV0gPSBuZXdWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICByZXR1cm4gY2xlYW5lZE1vZGVsO1xufVxuXG5mdW5jdGlvbiBjbGVhbk1vZGVsV2l0aEFycmF5U2NoZW1hKG1vZGVsLCBzY2hlbWEpIHtcbiAgaWYgKGlzQXJyYXkobW9kZWwpKSB7XG4gICAgcmV0dXJuIG1vZGVsLm1hcChjaGlsZE1vZGVsID0+IGdldFZhbGlkTW9kZWxQYXJ0cyhjaGlsZE1vZGVsLCBzY2hlbWEpKTtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gY2xlYW5Nb2RlbFdpdGhTdHJpbmdTY2hlbWEobW9kZWwpIHtcbiAgaWYgKGlzU3RyaW5nKG1vZGVsKSkge1xuICAgIHJldHVybiBtb2RlbDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gY2xlYW5Nb2RlbFdpdGhOdW1iZXJTY2hlbWEobW9kZWwpIHtcbiAgaWYgKGlzTnVtYmVyKG1vZGVsKSkge1xuICAgIHJldHVybiBtb2RlbDtcbiAgfVxuICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gY2xlYW5Nb2RlbFdpdGhJbnRlZ2VyU2NoZW1hKG1vZGVsKSB7XG4gIGlmIChpc0ludGVnZXIobW9kZWwpKSB7XG4gICAgcmV0dXJuIG1vZGVsO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBjbGVhbk1vZGVsV2l0aEJvb2xlYW5TY2hlbWEobW9kZWwpIHtcbiAgaWYgKGlzQm9vbGVhbihtb2RlbCkpIHtcbiAgICByZXR1cm4gbW9kZWw7XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIGNsZWFuTW9kZWxXaXRoQWxsT2ZTY2hlbWEobW9kZWwsIHNjaGVtYSkge1xuICBsZXQgY2xlYW5lZE1vZGVsID0ge307XG4gIGxldCB2YWxpZFN1YnNldE9mTW9kZWw7XG5cbiAgc2NoZW1hLmFsbE9mLmZvckVhY2goKG5lc3RlZFNjaGVtYSkgPT4ge1xuICAgIHZhbGlkU3Vic2V0T2ZNb2RlbCA9IGdldFZhbGlkTW9kZWxQYXJ0cyhtb2RlbCwgbmVzdGVkU2NoZW1hKTtcblxuICAgIGlmICh0eXBlb2YgdmFsaWRTdWJzZXRPZk1vZGVsID09PSAnb2JqZWN0Jykge1xuICAgICAgLy8gRXh0ZW5kIG1vZGVsIHdpdGggdmFsaWQgc3Vic2V0XG4gICAgICBjbGVhbmVkTW9kZWwgPSB7IC4uLmNsZWFuZWRNb2RlbCwgLi4udmFsaWRTdWJzZXRPZk1vZGVsIH07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGNsZWFuZWRNb2RlbDtcbn1cblxuZnVuY3Rpb24gY2xlYW5Nb2RlbFdpdGhPbmVPZlNjaGVtYShtb2RlbCwgc2NoZW1hKSB7XG4gIHJldHVybiBzY2hlbWEub25lT2ZcbiAgICAubWFwKG5lc3RlZFNjaGVtYSA9PiBnZXRWYWxpZE1vZGVsUGFydHMobW9kZWwsIG5lc3RlZFNjaGVtYSkpXG4gICAgLnJlZHVjZSgoY29tYmluZWQsIGN1cnJlbnQpID0+IHtcbiAgICAgIC8vIElmIHdlIGRpZG4ndCBmaW5kIGFueXRoaW5nIHZhbGlkIHlldCwgYW5kIGN1cnJlbnQgaXMgZ29vZCwgcmV0dXJuIGl0XG4gICAgICBpZiAoaXNOdWxsKGNvbWJpbmVkKSkge1xuICAgICAgICByZXR1cm4gY3VycmVudDtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgd2UncmUgZGVhbGluZyB3aXRoIHR3byBvYmplY3RzLCBkZWVwIG1lcmdlIHRoZW0gaW50byBvbmVcbiAgICAgIGlmIChpc09iamVjdChjb21iaW5lZCkgJiYgaXNPYmplY3QoY3VycmVudCkpIHtcbiAgICAgICAgcmV0dXJuIGRlZXBNZXJnZU9iamVjdChjb21iaW5lZCwgY3VycmVudCk7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoZSBjdXJyZW50IG9uZSBpcyBudWxsLCByZXR1cm4gd2hhdCB3ZSBhbHJlYWR5IGhhZFxuICAgICAgaWYgKGlzTnVsbChjdXJyZW50KSkge1xuICAgICAgICByZXR1cm4gY29tYmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjdXJyZW50O1xuICAgIH0sIG51bGwpO1xufVxuXG5mdW5jdGlvbiBkZWVwTWVyZ2VPYmplY3Qob2JqZWN0MSwgb2JqZWN0Mikge1xuICBjb25zdCBjb21iaW5lZCA9IHsgLi4ub2JqZWN0MSB9O1xuICBPYmplY3Qua2V5cyhvYmplY3QyKS5mb3JFYWNoKChwcm9wZXJ0eSkgPT4ge1xuICAgIGlmIChpc09iamVjdChvYmplY3QxW3Byb3BlcnR5XSkgJiYgaXNPYmplY3Qob2JqZWN0Mltwcm9wZXJ0eV0pKSB7XG4gICAgICBjb21iaW5lZFtwcm9wZXJ0eV0gPSBkZWVwTWVyZ2VPYmplY3Qob2JqZWN0MVtwcm9wZXJ0eV0sIG9iamVjdDJbcHJvcGVydHldKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29tYmluZWRbcHJvcGVydHldID0gb2JqZWN0Mltwcm9wZXJ0eV07XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGNvbWJpbmVkO1xufVxuXG5leHBvcnQgeyBnZXRWYWxpZE1vZGVsUGFydHMgfTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuIiwiY2xhc3MgUHJvY2Vzc0NvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3Rvcigkc2NvcGUsICRpbnRlcnZhbCwgJHRpbWVvdXQpIHtcbiAgICB0aGlzLiRpbnRlcnZhbCA9ICRpbnRlcnZhbDtcbiAgICB0aGlzLiR0aW1lb3V0ID0gJHRpbWVvdXQ7XG5cbiAgICB0aGlzLmludGVydmFsID0gbnVsbDtcbiAgICB0aGlzLnByb2Nlc3NpbmcgPSB0aGlzLnN0YXRlO1xuICAgIHRoaXMub25TdGF0ZUNoYW5nZSgpO1xuICB9XG5cbiAgJG9uQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuc3RhdGUpIHtcbiAgICAgIHRoaXMub25TdGF0ZUNoYW5nZSgpO1xuICAgIH1cblxuICAgIGlmIChjaGFuZ2VzLnN0YXRlKSB7XG4gICAgICB0aGlzLm9uU2l6ZUNoYW5nZSgpO1xuICAgIH1cbiAgfVxuXG4gIG9uU3RhdGVDaGFuZ2UoKSB7XG4gICAgLy8gVGhpcyBhbGxvd3MgdXMgdG8gY2FuY2VsIHRoZSBpbnRlcnZhbCB3aGVuIG5vdCBuZWVkZWQuXG4gICAgaWYgKGlzU3RvcHBlZCh0aGlzLnByb2Nlc3NpbmcpKSB7XG4gICAgICB0aGlzLnByb2Nlc3NpbmcgPSBudWxsO1xuICAgICAgdGhpcy5zdGFydFByb2Nlc3MoKTtcbiAgICB9XG4gIH1cblxuICBvblNpemVDaGFuZ2UoKSB7XG4gICAgLy8gS2lsbCB0aGUgaW50ZXJ2YWwgYW5kIHJlc3RhcnQgb24gc2l6ZSBjaGFuZ2UgYXMgYW5pbWF0aW9uIHdpbGwgcmVzdGFydFxuICAgIHRoaXMuc3RvcFByb2Nlc3MoKTtcbiAgICB0aGlzLnN0YXJ0UHJvY2VzcygpO1xuXG4gICAgaWYgKCF0aGlzLnNpemUpIHtcbiAgICAgIHRoaXMuc2l6ZSA9ICdzbSc7XG4gICAgfVxuXG4gICAgLy8gNDYlIGlzIG9rIGZvciBtb3N0IGNhc2VzLCBidXQgd2UgY2FuIG1ha2UgaXQgcGVyZmVjdC5cbiAgICBzd2l0Y2ggKHRoaXMuc2l6ZSkge1xuICAgICAgY2FzZSAneHMnOlxuICAgICAgICB0aGlzLnJhZGl1cyA9ICcxMSc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnc20nOlxuICAgICAgICB0aGlzLnJhZGl1cyA9ICcyMic7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAneGwnOlxuICAgICAgICB0aGlzLnJhZGl1cyA9ICc2MSc7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgdGhpcy5yYWRpdXMgPSAnNDYlJztcbiAgICB9XG4gIH1cblxuICBzdGFydFByb2Nlc3MoKSB7XG4gICAgLy8gRG9uJ3Qgc3RhcnQgYSBuZXcgaW50ZXJ2YWwgaWYgb25lIGlzIHJ1bm5pbmdcbiAgICBpZiAodGhpcy5pbnRlcnZhbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFdlIHdhbnQgdG8gY2hlY2sgZm9yIHN0YXRlIGNoYW5nZSBvbmNlIHBlciBhbmltYXRpb24gY3ljbGUuXG4gICAgdGhpcy5pbnRlcnZhbCA9IHRoaXMuJGludGVydmFsKCgpID0+IHtcbiAgICAgIHRoaXMucHJvY2Vzc2luZyA9IHRoaXMuc3RhdGU7XG4gICAgICBpZiAoaXNTdG9wcGVkKHRoaXMuc3RhdGUpKSB7XG4gICAgICAgIHRoaXMuc3RvcFByb2Nlc3MoKTtcbiAgICAgICAgdGhpcy5ub3RpZnlDb25zdW1lcnMoKTtcbiAgICAgIH1cbiAgICB9LCAxNTAwKTtcbiAgfVxuXG4gIHN0b3BQcm9jZXNzKCkge1xuICAgIGlmICh0aGlzLmludGVydmFsKSB7XG4gICAgICB0aGlzLiRpbnRlcnZhbC5jYW5jZWwodGhpcy5pbnRlcnZhbCk7XG4gICAgICB0aGlzLmludGVydmFsID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBub3RpZnlDb25zdW1lcnMoKSB7XG4gICAgaWYgKHRoaXMub25TdG9wKSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gMCkge1xuICAgICAgICB0aGlzLm9uU3RvcCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gMTgwMCBtYXRjaGVzIDEuNXMgZGVsYXkgYW5kIDAuM3MgYW5pbWF0aW9uXG4gICAgICAgIHRoaXMuJHRpbWVvdXQodGhpcy5vblN0b3AsIDE4MDApO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc1N0b3BwZWQoc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlID09PSAtMSB8fCBzdGF0ZSA9PT0gMCB8fCBzdGF0ZSA9PT0gMTtcbn1cblxuUHJvY2Vzc0NvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRpbnRlcnZhbCcsICckdGltZW91dCddO1xuXG5leHBvcnQgZGVmYXVsdCBQcm9jZXNzQ29udHJvbGxlcjtcbiIsImltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vcHJvY2Vzcy5jb250cm9sbGVyLmpzJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL3Byb2Nlc3MuaHRtbCc7XG5cbmNvbnN0IFByb2Nlc3MgPSB7XG4gIGNvbnRyb2xsZXIsXG4gIHRlbXBsYXRlLFxuICBiaW5kaW5nczoge1xuICAgIHN0YXRlOiAnPCcsIC8vIG51bGwgLSBwcm9jZXNzaW5nLCAtMSAtIGZhaWxlZCwgMCAtIGhpZGRlbiwgMSAtIHN1Y2Nlc3NcbiAgICBzaXplOiAnQCcsXG4gICAgb25TdG9wOiAnJicsXG4gICAgcHJvbWlzZTogJzwnXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IFByb2Nlc3M7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBQcm9jZXNzIGZyb20gJy4vcHJvY2Vzcy5jb21wb25lbnQuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUubG9hZGluZy5wcm9jZXNzJywgW10pXG4gIC5jb21wb25lbnQoJ3R3UHJvY2VzcycsIFByb2Nlc3MpLm5hbWU7XG4iLCJcbmNsYXNzIFJhZGlvQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKCRzY29wZSwgJGVsZW1lbnQsIFR3RG9tU2VydmljZSkge1xuICAgIGNvbnN0ICRuZ01vZGVsID0gJGVsZW1lbnQuY29udHJvbGxlcignbmdNb2RlbCcpO1xuXG4gICAgdGhpcy5kb20gPSBUd0RvbVNlcnZpY2U7XG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xuICAgIHRoaXMuZWxlbWVudCA9ICRlbGVtZW50WzBdO1xuICAgIHRoaXMuY2hlY2tlZCA9IHRoaXMuaXNDaGVja2VkKCk7XG4gICAgdGhpcy5sYWJlbCA9IHRoaXMuZG9tLmdldENsb3Nlc3RQYXJlbnRCeVRhZ05hbWUodGhpcy5lbGVtZW50LCAnbGFiZWwnKTtcblxuICAgICRlbGVtZW50WzBdLmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCAoKSA9PiB7XG4gICAgICAkbmdNb2RlbC4kc2V0VG91Y2hlZCgpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5hZGRXYXRjaGVycygkc2NvcGUsIHRoaXMuZWxlbWVudCk7XG4gIH1cblxuICBpc0NoZWNrZWQoKSB7XG4gICAgcmV0dXJuICh0aGlzLm5nVmFsdWUgJiYgdGhpcy5uZ01vZGVsID09PSB0aGlzLm5nVmFsdWUpXG4gICAgICB8fCB0aGlzLnZhbHVlID09PSB0aGlzLm5nTW9kZWw7XG4gIH1cblxuICBidXR0b25DbGljaygpIHtcbiAgICBpZiAodGhpcy5uZ0Rpc2FibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5jaGVja2VkID0gdHJ1ZTtcbiAgICB0aGlzLiRuZ01vZGVsLiRzZXRWaWV3VmFsdWUodGhpcy5uZ1ZhbHVlIHx8IHRoaXMudmFsdWUpO1xuICB9XG5cbiAgYnV0dG9uRm9jdXMoKSB7XG4gICAgaWYgKHRoaXMubGFiZWwpIHtcbiAgICAgIHRoaXMubGFiZWwuY2xhc3NMaXN0LmFkZCgnZm9jdXMnKTtcbiAgICB9XG4gICAgdGhpcy5lbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdmb2N1cycpKTtcbiAgfVxuXG4gIGJ1dHRvbkJsdXIoKSB7XG4gICAgaWYgKHRoaXMubGFiZWwpIHtcbiAgICAgIHRoaXMubGFiZWwuY2xhc3NMaXN0LnJlbW92ZSgnZm9jdXMnKTtcbiAgICB9XG4gICAgdGhpcy5lbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdibHVyJykpO1xuICB9XG5cbiAgaGlkZGVuSW5wdXRDaGFuZ2UoKSB7XG4gICAgLy8gVGhpcyBvbmx5IGZpcmVzIG9uIGxhYmVsIGNsaWNrXG4gICAgLy8gU2V0dGluZyB2aWV3IHZhbHVlIHdpbGwgYWxzbyB0cmlnZ2VyIG9uQ2hhbmdlXG4gICAgdGhpcy4kbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKHRoaXMubmdWYWx1ZSB8fCB0aGlzLnZhbHVlKTtcbiAgfVxuXG4gIGFkZFdhdGNoZXJzKCRzY29wZSwgZWxlbWVudCkge1xuICAgICRzY29wZS4kd2F0Y2goJyRjdHJsLm5nTW9kZWwnLCAobmV3VmFsdWUsIG9sZFZhbHVlKSA9PiB7XG4gICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICAgIHRoaXMuJG5nTW9kZWwuJHNldERpcnR5KCk7XG4gICAgICB9XG4gICAgICB0aGlzLmNoZWNrZWQgPSB0aGlzLmlzQ2hlY2tlZCgpO1xuICAgIH0pO1xuXG4gICAgJHNjb3BlLiR3YXRjaCgnJGN0cmwubmdEaXNhYmxlZCcsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHtcbiAgICAgIGNvbnN0IHJhZGlvTGFiZWwgPSB0aGlzLmRvbS5nZXRDbG9zZXN0UGFyZW50QnlDbGFzc05hbWUoZWxlbWVudCwgJ3JhZGlvJyk7XG5cbiAgICAgIGlmICghcmFkaW9MYWJlbCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAobmV3VmFsdWUgJiYgIW9sZFZhbHVlKSB7XG4gICAgICAgIHJhZGlvTGFiZWwuY2xhc3NMaXN0LmFkZCgnZGlzYWJsZWQnKTtcbiAgICAgICAgcmFkaW9MYWJlbC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJ3RydWUnKTtcbiAgICAgIH0gZWxzZSBpZiAoIW5ld1ZhbHVlICYmIG9sZFZhbHVlKSB7XG4gICAgICAgIHJhZGlvTGFiZWwuY2xhc3NMaXN0LnJlbW92ZSgnZGlzYWJsZWQnKTtcbiAgICAgICAgcmFkaW9MYWJlbC5yZW1vdmVBdHRyaWJ1dGUoJ2Rpc2FibGVkJyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuUmFkaW9Db250cm9sbGVyLiRpbmplY3QgPSBbJyRzY29wZScsICckZWxlbWVudCcsICdUd0RvbVNlcnZpY2UnXTtcblxuZXhwb3J0IGRlZmF1bHQgUmFkaW9Db250cm9sbGVyO1xuIiwiaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9yYWRpby5jb250cm9sbGVyLmpzJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL3JhZGlvLmh0bWwnO1xuXG5jb25zdCBSYWRpbyA9IHtcbiAgY29udHJvbGxlcixcbiAgdGVtcGxhdGUsXG4gIHJlcXVpcmU6IHtcbiAgICAkbmdNb2RlbDogJ25nTW9kZWwnXG4gIH0sXG4gIGJpbmRpbmdzOiB7XG4gICAgbmFtZTogJ0AnLFxuICAgIHZhbHVlOiAnQCcsXG4gICAgbmdNb2RlbDogJz0nLFxuICAgIG5nVmFsdWU6ICc8JyxcbiAgICBuZ1JlcXVpcmVkOiAnPCcsXG4gICAgbmdEaXNhYmxlZDogJzwnLFxuICAgIG5nQ2hhbmdlOiAnJidcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUmFkaW87XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBSYWRpbyBmcm9tICcuL3JhZGlvLmNvbXBvbmVudC5qcyc7XG5pbXBvcnQgRG9tU2VydmljZSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9kb20nO1xuaW1wb3J0IEZvY3VzYWJsZSBmcm9tICcuLi9mb2N1c2FibGUnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuZm9ybXMucmFkaW8nLCBbXG4gICAgRG9tU2VydmljZSxcbiAgICBGb2N1c2FibGVcbiAgXSlcbiAgLmNvbXBvbmVudCgndHdSYWRpbycsIFJhZGlvKS5uYW1lO1xuIiwiY2xhc3MgVXBsb2FkQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgICRlbGVtZW50LFxuICAgICRzY29wZSxcbiAgICAkYXR0cnMsXG4gICAgRmlsZVZhbGlkYXRpb25TZXJ2aWNlLFxuICApIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gJGVsZW1lbnQ7XG4gICAgdGhpcy4kYXR0cnMgPSAkYXR0cnM7XG4gICAgdGhpcy5GaWxlVmFsaWRhdGlvblNlcnZpY2UgPSBGaWxlVmFsaWRhdGlvblNlcnZpY2U7XG5cbiAgICB0aGlzLmlzUHJvY2Vzc2luZyA9IGZhbHNlO1xuICB9XG5cbiAgJG9uQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuc291cmNlKSB7XG4gICAgICB0aGlzLmlzTGl2ZUNhbWVyYVVwbG9hZCA9IGNoYW5nZXMuc291cmNlLmN1cnJlbnRWYWx1ZSA9PT0gJ0NBTUVSQV9PTkxZJztcbiAgICB9XG4gIH1cblxuICBvbkZpbGVDYXB0dXJlKGZpbGUpIHtcbiAgICBpZiAodGhpcy5uZ0Rpc2FibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFmaWxlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvdWxkIG5vdCByZXRyaWV2ZSBmaWxlJyk7XG4gICAgfVxuXG4gICAgdGhpcy5maWxlID0gZmlsZTtcbiAgfVxuXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuaXNQcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgdGhpcy5pc0RvbmUgPSBmYWxzZTtcblxuICAgIHRoaXMuY2xlYXJIdG1sSW5wdXQoKTtcbiAgICB0aGlzLnNldE5nTW9kZWwobnVsbCk7XG5cbiAgICBpZiAodGhpcy5vbkNhbmNlbCkge1xuICAgICAgdGhpcy5vbkNhbmNlbCgpO1xuICAgIH1cbiAgfVxuXG4gIGNsZWFySHRtbElucHV0KCkge1xuICAgIGlmICh0aGlzLiRlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0JykpIHtcbiAgICAgIHRoaXMuJGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQnKS5mb3JFYWNoKChpbnB1dCkgPT4ge1xuICAgICAgICBpbnB1dC52YWx1ZSA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBzZXROZ01vZGVsKHZhbHVlKSB7XG4gICAgLy8gSWYgbmdNb2RlbCBub3QgYXNzaWduYWJsZSwgd2UgZG9uJ3Qgd2FudCB0byBlcnJvci5cbiAgICBpZiAodHlwZW9mIHRoaXMuJGF0dHJzLm5nTW9kZWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCAkbmdNb2RlbCA9IHRoaXMuJGVsZW1lbnQuY29udHJvbGxlcignbmdNb2RlbCcpO1xuICAgICAgaWYgKCEkbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgICRuZ01vZGVsLiRzZXRWaWV3VmFsdWUodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIGlzRHJvcEVsaWdpYmxlKCkge1xuICAgIHJldHVybiB0aGlzLnNvdXJjZSAhPT0gJ0NBTUVSQV9PTkxZJztcbiAgfVxuXG4gIG9uRHJhZ0VudGVyKCkge1xuICAgIHRoaXMuaXNEcm9wcGFibGUgPSB0aGlzLmlzRHJvcEVsaWdpYmxlKCk7XG4gIH1cblxuICBvbkRyYWdMZWF2ZSgpIHtcbiAgICB0aGlzLmlzRHJvcHBhYmxlID0gZmFsc2U7XG4gIH1cblxuICBvbkRyb3AoZmlsZXMpIHtcbiAgICB0aGlzLmlzRHJvcHBhYmxlID0gZmFsc2U7XG4gICAgdGhpcy5vbkZpbGVDYXB0dXJlKGZpbGVzWzBdKTtcbiAgfVxuXG4gIG9uUHJvY2Vzc1N0YXJ0KGZpbGUpIHtcbiAgICB0aGlzLmlzRG9uZSA9IGZhbHNlO1xuICAgIHRoaXMuaXNQcm9jZXNzaW5nID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLm9uU3RhcnQpIHtcbiAgICAgIHRoaXMub25TdGFydCh7IGZpbGUgfSk7XG4gICAgfVxuICB9XG5cbiAgb25Qcm9jZXNzU3VjY2VzcyhmaWxlLCBkYXRhVXJsLCBpZCwgcmVzcG9uc2UpIHtcbiAgICB0aGlzLmlzRG9uZSA9IHRydWU7XG4gICAgdGhpcy5pc1Byb2Nlc3NpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmRhdGFVcmwgPSBkYXRhVXJsO1xuICAgIHRoaXMuaXNJbWFnZSA9IHRoaXMuRmlsZVZhbGlkYXRpb25TZXJ2aWNlLmlzSW1hZ2UoZmlsZSk7XG5cbiAgICBpZiAodGhpcy5odHRwT3B0aW9ucyAmJiBpZCkge1xuICAgICAgdGhpcy5zZXROZ01vZGVsKGlkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXROZ01vZGVsKGRhdGFVcmwpO1xuICAgIH1cblxuICAgIHRoaXMub25TdWNjZXNzKGZpbGUsIHJlc3BvbnNlKTtcbiAgfVxuXG4gIG9uUHJvY2Vzc0ZhaWx1cmUoZXJyb3IpIHtcbiAgICBpZiAodGhpcy5vbkZhaWx1cmUpIHtcbiAgICAgIHRoaXMub25GYWlsdXJlKGVycm9yKTtcbiAgICB9XG4gIH1cbn1cblxuVXBsb2FkQ29udHJvbGxlci4kaW5qZWN0ID0gW1xuICAnJGVsZW1lbnQnLFxuICAnJHNjb3BlJyxcbiAgJyRhdHRycycsXG4gICdGaWxlVmFsaWRhdGlvblNlcnZpY2UnXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBVcGxvYWRDb250cm9sbGVyO1xuIiwiaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi91cGxvYWQuY29udHJvbGxlci5qcyc7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi91cGxvYWQuaHRtbCc7XG5pbXBvcnQgJy4vdXBsb2FkLmxlc3MnO1xuXG5jb25zdCBVcGxvYWQgPSB7XG4gIGNvbnRyb2xsZXIsXG4gIHRlbXBsYXRlLFxuICBiaW5kaW5nczoge1xuICAgIG5nRGlzYWJsZWQ6ICc8JyxcbiAgICBuZ01vZGVsOiAnPScsXG4gICAgbmdDaGFuZ2U6ICcmJyxcbiAgICBuYW1lOiAnQCcsXG4gICAgaWNvbjogJ0AnLCAvLyBpbGx1c3RyYXRpb24gaW4gaWNvbiBzaG93biBpbiB1cGxvYWQgYm94XG4gICAgaGVscEltYWdlOiAnQCcsIC8vIGlsbHVzdHJhdGlvbiBpbiBpbWFnZSBzaG93aW4gaW4gdXBsb2FkIGJveCwgaWYgc3BlY2lmaWVkLCByZXBsYWNlcyBpY29uXG4gICAgbGFiZWw6ICdAJyxcbiAgICBwbGFjZWhvbGRlcjogJ0AnLFxuXG4gICAgYnV0dG9uVGV4dDogJ0AnLCAvLyBCdXR0b24gdGV4dCBzaG93biBpbiBkZWZhdWx0IHN0YXRlXG4gICAgY2FuY2VsVGV4dDogJ0AnLCAvLyBUZXh0IGluc3RydWN0aW5nIHRvIGdvIGJhY2sgdG8gcmUtdXBsb2FkIGFmdGVyIHVwbG9hZCBpcyBkb25lXG4gICAgZHJvcHBpbmdUZXh0OiAnQCcsIC8vIFRleHQgc2hvd24gd2hlbiBob3ZlcmluZyB3aXRoIGEgZmlsZVxuXG4gICAgcHJvY2Vzc2luZ1RleHQ6ICdAJywgLy8gVGV4dCBzaG93biB3aGlsZSBwcm9jZXNzaW5nL3VwbG9hZGluZ1xuICAgIHN1Y2Nlc3NUZXh0OiAnQCcsIC8vIFRleHQgYWZ0ZXIgdXBsb2FkIGlzIHN1Y2Nlc3NmdWwsIHNob3duIHF1aXRlIGJyaWVmbHkgYmVmb3JlIHByZXZpZXdcbiAgICBmYWlsdXJlVGV4dDogJ0AnLFxuICAgIG5vQ2FtZXJhVGV4dDogJ0AnLFxuICAgIG5vQ2FtZXJhTWVzc2FnZTogJ0AnLFxuXG4gICAgdG9vTGFyZ2VNZXNzYWdlOiAnQCcsXG4gICAgLy8gd3JvbmdUeXBlTWVzc2FnZTogJ0AnLFxuXG4gICAgdmFsaWRhdGlvbk1lc3NhZ2VzOiAnPCcsXG5cbiAgICBzaXplOiAnQCcsXG4gICAgYWNjZXB0OiAnQCcsXG4gICAgaHR0cE9wdGlvbnM6ICc8JyxcblxuICAgIG9uU3RhcnQ6ICc9JyxcbiAgICBvblN1Y2Nlc3M6ICc9JyxcbiAgICBvbkZhaWx1cmU6ICc9JyxcbiAgICBvbkNhbmNlbDogJz0nLFxuXG4gICAgbWF4U2l6ZTogJzwnLCAvLyBUT0RPIG1vdmUgdG8gbmdNYXg/XG5cbiAgICAvLyBDYW1lcmEgY2FwdHVyZSB1cGxvYWQgb3B0aW9uc1xuXG4gICAgLyogU291cmNlIG9mIGZpbGUgdG8gdXBsb2FkXG4gICAgICogUG9zc2libGUgdmFsdWVzXG4gICAgICogQ0FNRVJBX09OTFkgKGFsbG93IG9ubHkgY2FtZXJhIHVwbG9hZClcbiAgICAgKiBGSUxFX09OTFkgKGFsbG93IG9ubHkgdXBsb2FkIGZyb20gZmlsZSBzeXN0ZW0pXG4gICAgICogQU5ZICh3ZSBkb250IGNhcmUpXG4gICAgICovXG4gICAgc291cmNlOiAnPCcsXG4gICAgY2FtZXJhR3VpZGVsaW5lczogJzwnLFxuXG4gICAgZGVzY3JpcHRpb246ICdAJywgLy8gREVQUkVDQVRFRCBmb3IgbGFiZWxcbiAgICBpbnN0cnVjdGlvbnM6ICdAJywgLy8gREVQUkVDQVRFRCBmb3IgcGxhY2Vob2xkZXJcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgVXBsb2FkO1xuIiwiY2xhc3MgQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKCRlbGVtZW50KSB7XG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xuICAgIHRoaXMuc2hvd0xpdmVDYXB0dXJlU2NyZWVuID0gZmFsc2U7XG4gICAgdGhpcy5jYW1lcmFGYWlsZWQgPSBmYWxzZTtcbiAgfVxuXG4gICRvbkNoYW5nZXMoY2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmljb24gfHwgY2hhbmdlcy5pc0xpdmVDYW1lcmFVcGxvYWQpIHtcbiAgICAgIGlmICgoY2hhbmdlcy5pY29uIHx8IHt9KS5jdXJyZW50VmFsdWUpIHtcbiAgICAgICAgdGhpcy52aWV3SWNvbiA9IGNoYW5nZXMuaWNvbi5jdXJyZW50VmFsdWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnZpZXdJY29uID0gKGNoYW5nZXMuaXNMaXZlQ2FtZXJhVXBsb2FkIHx8IHt9KS5jdXJyZW50VmFsdWUgPyAnY2FtZXJhJyA6ICd1cGxvYWQnO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG9uQ2FtZXJhQ2FuY2VsKCkge1xuICAgIHRoaXMuc2hvd0xpdmVDYXB0dXJlU2NyZWVuID0gZmFsc2U7XG4gIH1cblxuICBvbkNhbWVyYUVycm9yKCkge1xuICAgIHRoaXMuc2hvd0xpdmVDYXB0dXJlU2NyZWVuID0gZmFsc2U7XG4gICAgdGhpcy5jYW1lcmFGYWlsZWQgPSB0cnVlO1xuICB9XG5cbiAgb25DYW1lcmFDYXB0dXJlKGZpbGUpIHtcbiAgICB0aGlzLnNob3dMaXZlQ2FwdHVyZVNjcmVlbiA9IGZhbHNlO1xuICAgIHRoaXMub25GaWxlQ2FwdHVyZSh7IGZpbGUgfSk7XG4gIH1cblxuICBvbkNhbWVyYUJ1dHRvbkNsaWNrKCkge1xuICAgIHRoaXMuc2hvd0xpdmVDYXB0dXJlU2NyZWVuID0gdHJ1ZTtcbiAgICB0aGlzLmNhbWVyYUZhaWxlZCA9IGZhbHNlO1xuICB9XG5cbiAgb25CdXR0b25DYXB0dXJlKGZpbGVzKSB7XG4gICAgY29uc3QgZmlsZSA9IGZpbGVzWzBdO1xuICAgIHRoaXMub25GaWxlQ2FwdHVyZSh7IGZpbGUgfSk7XG4gIH1cbn1cblxuQ29udHJvbGxlci4kaW5qZWN0ID0gWyckZWxlbWVudCddO1xuXG5leHBvcnQgZGVmYXVsdCBDb250cm9sbGVyO1xuIiwiaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vY2FwdHVyZS1jYXJkLmh0bWwnO1xuaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9jYXB0dXJlLWNhcmQuY29udHJvbGxlcic7XG5cbmNvbnN0IENhcHR1cmVDYXJkID0ge1xuICB0ZW1wbGF0ZSxcbiAgY29udHJvbGxlcixcbiAgYmluZGluZ3M6IHtcbiAgICBsYWJlbDogJzwnLFxuICAgIGljb246ICc8JyxcbiAgICBhY2NlcHQ6ICc8JyxcbiAgICBidXR0b25UZXh0OiAnPCcsXG4gICAgbmdEaXNhYmxlZDogJzwnLFxuICAgIHBsYWNlaG9sZGVyOiAnPCcsXG4gICAgaW5wdXRGaWxlOiAnPCcsXG4gICAgaGVscEltYWdlOiAnPCcsXG4gICAgbm9DYW1lcmFUZXh0OiAnPCcsXG4gICAgbm9DYW1lcmFNZXNzYWdlOiAnPCcsXG5cbiAgICBpc0xpdmVDYW1lcmFVcGxvYWQ6ICc8JyxcbiAgICBjYW1lcmFHdWlkZWxpbmVzOiAnPCcsXG5cbiAgICBvbkZpbGVDYXB0dXJlOiAnJidcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ2FwdHVyZUNhcmQ7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBDYXB0dXJlQ2FyZCBmcm9tICcuL2NhcHR1cmUtY2FyZC5jb21wb25lbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuZm9ybXMudXBsb2FkLmNhcHR1cmUnLCBbXSlcbiAgLmNvbXBvbmVudCgndHdVcGxvYWRDYXB0dXJlJywgQ2FwdHVyZUNhcmQpXG4gIC5uYW1lO1xuIiwiaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vZHJvcHBpbmctY2FyZC5odG1sJztcblxuY29uc3QgRHJvcHBpbmdDYXJkID0ge1xuICB0ZW1wbGF0ZSxcbiAgYmluZGluZ3M6IHtcbiAgICBkcm9wcGluZ1RleHQ6ICc8J1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBEcm9wcGluZ0NhcmQ7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBEcm9wcGluZ0NhcmQgZnJvbSAnLi9kcm9wcGluZy1jYXJkLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy51cGxvYWQuZHJvcHBpbmcnLCBbXSlcbiAgLmNvbXBvbmVudCgndHdVcGxvYWREcm9wcGluZycsIERyb3BwaW5nQ2FyZClcbiAgLm5hbWU7XG4iLCJjbGFzcyBDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgJHRpbWVvdXQsXG4gICAgQXN5bmNGaWxlUmVhZGVyLFxuICAgIEFzeW5jRmlsZVNhdmVyLFxuICAgIEFzeW5jVGFza3NDb25maWcsXG4gICAgRmlsZVZhbGlkYXRpb25TZXJ2aWNlXG4gICkge1xuICAgIHRoaXMuJHRpbWVvdXQgPSAkdGltZW91dDtcbiAgICB0aGlzLkFzeW5jRmlsZVJlYWRlciA9IEFzeW5jRmlsZVJlYWRlcjtcbiAgICB0aGlzLkFzeW5jRmlsZVNhdmVyID0gQXN5bmNGaWxlU2F2ZXI7XG4gICAgdGhpcy5Bc3luY1Rhc2tzQ29uZmlnID0gQXN5bmNUYXNrc0NvbmZpZztcbiAgICB0aGlzLkZpbGVWYWxpZGF0aW9uID0gRmlsZVZhbGlkYXRpb25TZXJ2aWNlO1xuXG4gICAgdGhpcy5wcm9jZXNzaW5nU3RhdGUgPSBudWxsO1xuICB9XG5cbiAgJG9uQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuZmlsZSAmJiBjaGFuZ2VzLmZpbGUuY3VycmVudFZhbHVlKSB7XG4gICAgICB0aGlzLm9uRmlsZUNhcHR1cmUoY2hhbmdlcy5maWxlLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgb25GaWxlQ2FwdHVyZShmaWxlKSB7XG4gICAgaWYgKHRoaXMubmdEaXNhYmxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghZmlsZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgcmV0cmlldmUgZmlsZScpO1xuICAgIH1cblxuICAgIHRoaXMucmVzZXQoKTtcblxuICAgIHRoaXMuZmlsZSA9IGZpbGU7XG5cbiAgICB0aGlzLmlzUHJvY2Vzc2luZyA9IHRydWU7XG4gICAgdGhpcy5wcm9jZXNzaW5nU3RhdGUgPSBudWxsO1xuXG4gICAgdGhpcy5vblN0YXJ0KHsgZmlsZSB9KTtcblxuICAgIGlmICghdGhpcy5GaWxlVmFsaWRhdGlvbi5pc1NtYWxsZXJUaGFuTWF4U2l6ZShmaWxlLCB0aGlzLm1heFNpemUpKSB7XG4gICAgICB0aGlzLnZhbGlkYXRpb25NZXNzYWdlcyA9IFt0aGlzLnRvb0xhcmdlTWVzc2FnZV07XG4gICAgICBhc3luY0ZhaWx1cmUoe1xuICAgICAgICBzdGF0dXM6IDQxMyxcbiAgICAgICAgZGF0YTogeyBtZXNzYWdlOiB0aGlzLnRvb0xhcmdlTWVzc2FnZSB9XG4gICAgICB9LCBudWxsLCB0aGlzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5odHRwT3B0aW9ucykge1xuICAgICAgLy8gUG9zdCBmaWxlIG5vd1xuICAgICAgdGhpcy5hc3luY0ZpbGVSZWFkKGZpbGUpXG4gICAgICAgIC50aGVuKGRhdGFVcmwgPT4gdGhpcy5hc3luY0ZpbGVTYXZlKGZpbGUpXG4gICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4gYXN5bmNTdWNjZXNzKHJlc3BvbnNlLCBkYXRhVXJsLCB0aGlzKSkpXG4gICAgICAgIC5jYXRjaChlcnJvciA9PiBhc3luY0ZhaWx1cmUoZXJyb3IsIG51bGwsIHRoaXMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUG9zdCBvbiBmb3JtIHN1Ym1pdFxuICAgICAgdGhpcy5hc3luY0ZpbGVSZWFkKGZpbGUpXG4gICAgICAgIC50aGVuKGRhdGFVcmwgPT4gYXN5bmNTdWNjZXNzKG51bGwsIGRhdGFVcmwsIHRoaXMpKVxuICAgICAgICAuY2F0Y2goZXJyb3IgPT4gYXN5bmNGYWlsdXJlKGVycm9yLCBudWxsLCB0aGlzKSk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmNGaWxlU2F2ZShmaWxlKSB7XG4gICAgY29uc3QgaHR0cE9wdGlvbnMgPSB0aGlzLkFzeW5jVGFza3NDb25maWcuZXh0ZW5kSHR0cE9wdGlvbnModGhpcy5odHRwT3B0aW9ucyk7XG4gICAgcmV0dXJuIHRoaXMuQXN5bmNGaWxlU2F2ZXIuc2F2ZShodHRwT3B0aW9ucy5wYXJhbSB8fCB0aGlzLm5hbWUsIGZpbGUsIGh0dHBPcHRpb25zKTtcbiAgfVxuXG4gIGFzeW5jRmlsZVJlYWQoZmlsZSkge1xuICAgIHJldHVybiB0aGlzLkFzeW5jRmlsZVJlYWRlci5yZWFkKGZpbGUpO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5wcm9jZXNzaW5nU3RhdGUgPSAwO1xuICAgIHRoaXMuaXNQcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgdGhpcy5pc1N1Y2Nlc3MgPSBmYWxzZTtcbiAgICB0aGlzLmlzRXJyb3IgPSBmYWxzZTtcbiAgfVxuXG4gIG9uUmVtb3ZlKCkge1xuICAgIHRoaXMub25DYW5jZWwoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3luY1N1Y2Nlc3MocmVzcG9uc2UsIGRhdGFVcmwsICRjdHJsKSB7XG4gICRjdHJsLnByb2Nlc3NpbmdTdGF0ZSA9IDE7XG4gIGxldCBpZCA9IG51bGw7XG4gIGNvbnN0IGZpbGUgPSAkY3RybC5maWxlO1xuICBjb25zdCBodHRwT3B0aW9ucyA9ICRjdHJsLmh0dHBPcHRpb25zO1xuXG4gIGlmIChodHRwT3B0aW9uc1xuICAgICAgJiYgaHR0cE9wdGlvbnMuaWRQcm9wZXJ0eVxuICAgICAgJiYgcmVzcG9uc2VcbiAgICAgICYmIHJlc3BvbnNlLmRhdGFcbiAgICAgICYmIHJlc3BvbnNlLmRhdGFbaHR0cE9wdGlvbnMuaWRQcm9wZXJ0eV0pIHtcbiAgICBpZCA9IHJlc3BvbnNlLmRhdGFbaHR0cE9wdGlvbnMuaWRQcm9wZXJ0eV07XG4gIH1cblxuICAvLyBUaW1lIHN1Y2Nlc3MgbWVzc2FnaW5nIHRvIG1hdGNoIGFuaW1hdGlvblxuICAkY3RybC4kdGltZW91dCgoKSA9PiB7XG4gICAgJGN0cmwuaXNQcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgJGN0cmwuaXNTdWNjZXNzID0gdHJ1ZTtcbiAgICAkY3RybC5vblN1Y2Nlc3MoeyBmaWxlLCBkYXRhVXJsLCBpZCwgcmVzcG9uc2UgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgfSwgMzYwMCk7XG5cbiAgcmV0dXJuIGRhdGFVcmw7XG59XG5mdW5jdGlvbiBhc3luY0ZhaWx1cmUoZXJyb3IsIGRhdGFVcmwsICRjdHJsKSB7XG4gIC8vIFN0YXJ0IGNoYW5naW5nIHByb2Nlc3MgaW5kaWNhdG9yIGltbWVkaWF0ZWx5XG4gICRjdHJsLnByb2Nlc3NpbmdTdGF0ZSA9IC0xO1xuXG4gIGlmICgkY3RybC5yZXNwb25zZUVycm9yRXh0cmFjdG9yKSB7XG4gICAgJGN0cmwuZXJyb3JNZXNzYWdlID0gJGN0cmwucmVzcG9uc2VFcnJvckV4dHJhY3Rvcih7IGVycm9yIH0pIHx8ICRjdHJsLmVycm9yTWVzc2FnZTtcbiAgfVxuXG4gIC8vIFdhaXQgYmVmb3JlIHVwZGF0aW5nIHRleHRcbiAgJGN0cmwuJHRpbWVvdXQoKCkgPT4ge1xuICAgICRjdHJsLmlzUHJvY2Vzc2luZyA9IGZhbHNlO1xuICAgICRjdHJsLmlzRXJyb3IgPSB0cnVlO1xuICB9LCAzNjAwKTtcbiAgLy8gQWxsb3cgYSBzbWFsbCBhbW91bnQgb2YgZXh0cmEgdGltZSBiZWZvcmUgbm90aWZ5aW5nIGV4dGVybmFsIGhhbmRsZXJzXG4gICRjdHJsLiR0aW1lb3V0KCgpID0+IHtcbiAgICAkY3RybC5vbkZhaWx1cmUoeyBlcnJvciB9KTtcbiAgfSwgMzYwMCk7IC8vIDM1MDApOyBUT0RPIGZvciBzb21lIHJlYXNvbiBtb3JlIHRpbWUgaXMgbmVlZGVkXG5cbiAgcmV0dXJuIGVycm9yO1xufVxuXG5Db250cm9sbGVyLiRpbmplY3QgPSBbXG4gICckdGltZW91dCcsXG4gICdBc3luY0ZpbGVSZWFkZXInLFxuICAnQXN5bmNGaWxlU2F2ZXInLFxuICAnQXN5bmNUYXNrc0NvbmZpZycsXG4gICdGaWxlVmFsaWRhdGlvblNlcnZpY2UnXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBDb250cm9sbGVyO1xuIiwiZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiAnPCcsXG4gIGZpbGU6ICc8JyxcblxuICBvblN0YXJ0OiAnJicsXG4gIG9uU3VjY2VzczogJyYnLFxuICBvbkZhaWx1cmU6ICcmJyxcbiAgb25DYW5jZWw6ICcmJyxcbiAgcmVzcG9uc2VFcnJvckV4dHJhY3RvcjogJyYnLFxuXG4gIG1heFNpemU6ICc8JyxcbiAgYWNjZXB0OiAnPCcsXG4gIGh0dHBPcHRpb25zOiAnPCcsXG5cbiAgcHJvY2Vzc2luZ01lc3NhZ2U6ICc8JyxcbiAgc3VjY2Vzc01lc3NhZ2U6ICc8JyxcbiAgZXJyb3JNZXNzYWdlOiAnPCcsXG4gIHRvb0xhcmdlTWVzc2FnZTogJzwnLFxuXG4gIHZhbGlkYXRpb25NZXNzYWdlczogJzwnLFxuXG4gIGNhbmNlbFRleHQ6ICc8J1xufTtcbiIsImltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vcHJvY2Vzc2luZy1jYXJkLmNvbnRyb2xsZXInO1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vcHJvY2Vzc2luZy1jYXJkLmh0bWwnO1xuaW1wb3J0IGJpbmRpbmdzIGZyb20gJy4vcHJvY2Vzc2luZy5iaW5kaW5ncyc7XG5cbmNvbnN0IFByb2Nlc3NpbmdDYXJkID0ge1xuICBjb250cm9sbGVyLFxuICB0ZW1wbGF0ZSxcbiAgYmluZGluZ3Ncbn07XG5cbmV4cG9ydCBkZWZhdWx0IFByb2Nlc3NpbmdDYXJkO1xuIiwiaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9wcm9jZXNzaW5nLWNhcmQuY29udHJvbGxlcic7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9wcm9jZXNzaW5nLW1pbmkuaHRtbCc7XG5pbXBvcnQgYmluZGluZ3MgZnJvbSAnLi9wcm9jZXNzaW5nLmJpbmRpbmdzJztcblxuY29uc3QgUHJvY2Vzc2luZ0NhcmQgPSB7XG4gIGNvbnRyb2xsZXIsXG4gIHRlbXBsYXRlLFxuICBiaW5kaW5nc1xufTtcblxuZXhwb3J0IGRlZmF1bHQgUHJvY2Vzc2luZ0NhcmQ7XG4iLCJcbmNsYXNzIEFzeW5jRmlsZVJlYWRlciB7XG4gIGNvbnN0cnVjdG9yKCRxKSB7XG4gICAgdGhpcy4kcSA9ICRxO1xuICB9XG5cbiAgcmVhZChmaWxlKSB7XG4gICAgY29uc3QgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICBjb25zdCBkZWZlcnJlZCA9IHRoaXMuJHEuZGVmZXIoKTtcblxuICAgIC8vIFdoZW4gdGhlIHJlYWRlciBmaW5pc2hlcyBsb2FkaW5nIHJlc29sdmUgdGhlIHByb21pc2VcbiAgICByZWFkZXIub25sb2FkID0gKGV2ZW50KSA9PiB7XG4gICAgICBkZWZlcnJlZC5yZXNvbHZlKGV2ZW50LnRhcmdldC5yZXN1bHQpO1xuICAgIH07XG5cbiAgICByZWFkZXIub25lcnJvciA9IChldmVudCkgPT4ge1xuICAgICAgZGVmZXJyZWQucmVqZWN0KGV2ZW50KTtcbiAgICB9O1xuXG4gICAgLy8gTG9hZCB0aGUgZmlsZVxuICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpO1xuXG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gIH1cbn1cblxuQXN5bmNGaWxlUmVhZGVyLiRpbmplY3QgPSBbJyRxJ107XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy51cGxvYWQuZmlsZS1yZWFkZXInLCBbXSlcbiAgLnNlcnZpY2UoJ0FzeW5jRmlsZVJlYWRlcicsIEFzeW5jRmlsZVJlYWRlcilcbiAgLm5hbWU7XG4iLCJcbmNsYXNzIEFzeW5jRmlsZVNhdmVyIHtcbiAgY29uc3RydWN0b3IoJGh0dHApIHtcbiAgICB0aGlzLiRodHRwID0gJGh0dHA7XG4gIH1cblxuICBzYXZlKGZpZWxkTmFtZSwgZmlsZSwgaHR0cE9wdGlvbnMpIHtcbiAgICBpZiAoIWh0dHBPcHRpb25zKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtdXN0IHN1cHBseSBodHRwT3B0aW9ucycpO1xuICAgIH1cbiAgICBjb25zdCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgIGNvbnN0IGtleSA9IGh0dHBPcHRpb25zLnBhcmFtIHx8IGZpZWxkTmFtZTtcbiAgICBmb3JtRGF0YS5hcHBlbmQoa2V5LCBmaWxlKTtcblxuICAgIGNvbnN0ICRodHRwT3B0aW9ucyA9IHByZXBhcmVIdHRwT3B0aW9ucyhodHRwT3B0aW9ucyk7XG5cbiAgICBkZWxldGUgJGh0dHBPcHRpb25zLm1ldGhvZDtcblxuICAgIC8vIEZvciB0ZXN0aW5nXG4gICAgcmV0dXJuIHRoaXMuJGh0dHAucG9zdCgkaHR0cE9wdGlvbnMudXJsLCBmb3JtRGF0YSwgJGh0dHBPcHRpb25zKTtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHByZXBhcmVIdHRwT3B0aW9ucygkaW5wdXRPcHRpb25zKSB7XG4gIGNvbnN0ICRodHRwT3B0aW9ucyA9IGFuZ3VsYXIuY29weSgkaW5wdXRPcHRpb25zKTtcblxuICBpZiAoISRodHRwT3B0aW9ucy51cmwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtdXN0IHN1cHBseSBhIFVSTCB0byBwb3N0IGltYWdlIGRhdGEgYXN5bmNocm9ub3VzbHknKTtcbiAgfVxuICBpZiAoISRodHRwT3B0aW9ucy5oZWFkZXJzKSB7XG4gICAgJGh0dHBPcHRpb25zLmhlYWRlcnMgPSB7fTtcbiAgfVxuXG4gIC8vIENvbnRlbnQtVHlwZSA9IHVuZGVmaW5lZCBhbGxvd3MgdGhlIGJyb3dzZXIgdG8gY2hvb3NlIHRoZSByaWdodCB0eXBlXG4gIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQxNjA3NjU2L3B1cnBvc2Utb2YtY29udGVudC10eXBlLXVuZGVmaW5lZC1pbi1hbmd1bGFyanMtZmlsZXVwbG9hZFxuICAkaHR0cE9wdGlvbnMuaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB1bmRlZmluZWQ7XG4gICRodHRwT3B0aW9ucy50cmFuc2Zvcm1SZXF1ZXN0ID0gYW5ndWxhci5pZGVudGl0eTtcblxuICByZXR1cm4gJGh0dHBPcHRpb25zO1xufVxuXG5Bc3luY0ZpbGVTYXZlci4kaW5qZWN0ID0gWyckaHR0cCddO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuZm9ybXMudXBsb2FkLmZpbGUtc2F2ZXInLCBbXSlcbiAgLnNlcnZpY2UoJ0FzeW5jRmlsZVNhdmVyJywgQXN5bmNGaWxlU2F2ZXIpXG4gIC5uYW1lO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5cbmNsYXNzIEZpbGVWYWxpZGF0aW9uU2VydmljZSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBpc0ltYWdlKGZpbGUpIHtcbiAgICByZXR1cm4gZmlsZS50eXBlICYmIGZpbGUudHlwZS5pbmRleE9mKCdpbWFnZScpID4gLTE7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgaXNTbWFsbGVyVGhhbk1heFNpemUoZmlsZSwgbWF4U2l6ZSkge1xuICAgIHJldHVybiAhYW5ndWxhci5pc051bWJlcihtYXhTaXplKSB8fCBmaWxlLnNpemUgPD0gbWF4U2l6ZTtcbiAgfVxuXG4gIC8qXG4gIC8vIFRPRE8gdmFsaWRhdGUgZmlsZSB0eXBlXG4gIGlzVHlwZVZhbGlkKGZpbGUsIGFjY2VwdCkge1xuICAgIHJldHVybiB0cnVlO1xuICAgIC8vIHRoaXMuaXNXcm9uZ1R5cGUgPSB0cnVlO1xuICB9XG4gICovXG59XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy51cGxvYWQudmFsaWRhdGlvbi1zZXJ2aWNlJywgW10pXG4gIC5zZXJ2aWNlKCdGaWxlVmFsaWRhdGlvblNlcnZpY2UnLCBGaWxlVmFsaWRhdGlvblNlcnZpY2UpXG4gIC5uYW1lO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgUHJvY2Vzc2luZ0NhcmQgZnJvbSAnLi9wcm9jZXNzaW5nLWNhcmQuY29tcG9uZW50JztcbmltcG9ydCBQcm9jZXNzaW5nTWluaSBmcm9tICcuL3Byb2Nlc3NpbmctbWluaS5jb21wb25lbnQnO1xuaW1wb3J0IEFzeW5jRmlsZVJlYWRlciBmcm9tICcuLi9zZXJ2aWNlcy9hc3luYy1maWxlLXJlYWRlci5zZXJ2aWNlLmpzJztcbmltcG9ydCBBc3luY0ZpbGVTYXZlciBmcm9tICcuLi9zZXJ2aWNlcy9hc3luYy1maWxlLXNhdmVyLnNlcnZpY2UuanMnO1xuaW1wb3J0IEZpbGVWYWxpZGF0aW9uU2VydmljZSBmcm9tICcuLi9zZXJ2aWNlcy9maWxlLXZhbGlkYXRpb24uc2VydmljZS5qcyc7XG5pbXBvcnQgQXN5bmNUYXNrc0NvbmZpZyBmcm9tICcuLi8uLi8uLi9zZXJ2aWNlcy9hc3luY1Rhc2tzQ29uZmlnJztcbmltcG9ydCBQcm9jZXNzIGZyb20gJy4uLy4uLy4uL2xvYWRpbmcvcHJvY2Vzcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy51cGxvYWQucHJvY2Vzc2luZycsIFtcbiAgICBBc3luY1Rhc2tzQ29uZmlnLFxuICAgIEFzeW5jRmlsZVJlYWRlcixcbiAgICBBc3luY0ZpbGVTYXZlcixcbiAgICBGaWxlVmFsaWRhdGlvblNlcnZpY2UsXG4gICAgUHJvY2Vzc1xuICBdKVxuICAuY29tcG9uZW50KCd0d1VwbG9hZFByb2Nlc3NpbmcnLCBQcm9jZXNzaW5nQ2FyZClcbiAgLmNvbXBvbmVudCgndHdVcGxvYWRQcm9jZXNzaW5nTWluaScsIFByb2Nlc3NpbmdNaW5pKVxuICAubmFtZTtcbiIsImNsYXNzIFN1Y2Nlc3NDYXJkQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKCRlbGVtZW50LCBGaWxlVmFsaWRhdGlvblNlcnZpY2UpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gJGVsZW1lbnQ7XG4gICAgdGhpcy5GaWxlVmFsaWRhdGlvblNlcnZpY2UgPSBGaWxlVmFsaWRhdGlvblNlcnZpY2U7XG4gIH1cblxuICAkb25DaGFuZ2VzKGNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5maWxlICYmIGNoYW5nZXMuZmlsZS5jdXJyZW50VmFsdWUpIHtcbiAgICAgIHRoaXMuZmlsZU5hbWUgPSBjaGFuZ2VzLmZpbGUuY3VycmVudFZhbHVlLm5hbWU7XG4gICAgfVxuICB9XG5cbiAgb25NYW51YWxSZXVwbG9hZCgpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gdGhpcy4kZWxlbWVudFswXTtcbiAgICBjb25zdCB1cGxvYWRJbnB1dCA9IGVsZW1lbnQucXVlcnlTZWxlY3RvcignLnR3LWRyb3BwYWJsZS1pbnB1dC1yZXVwbG9hZCcpO1xuICAgIGNvbnN0IGZpbGUgPSB1cGxvYWRJbnB1dC5maWxlc1swXTtcblxuICAgIHRoaXMub25GaWxlQ2FwdHVyZShmaWxlKTtcbiAgfVxufVxuXG5TdWNjZXNzQ2FyZENvbnRyb2xsZXIuJGluamVjdCA9IFtcbiAgJyRlbGVtZW50JyxcbiAgJ0ZpbGVWYWxpZGF0aW9uU2VydmljZSdcbl07XG5cbmV4cG9ydCBkZWZhdWx0IFN1Y2Nlc3NDYXJkQ29udHJvbGxlcjtcbiIsImltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL3N1Y2Nlc3MtY2FyZC5odG1sJztcbmltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vc3VjY2Vzcy1jYXJkLmNvbnRyb2xsZXInO1xuXG5jb25zdCBTdWNjZXNzQ2FyZCA9IHtcbiAgdGVtcGxhdGUsXG4gIGNvbnRyb2xsZXIsXG4gIGJpbmRpbmdzOiB7XG4gICAgbGFiZWw6ICc8JyxcbiAgICBmaWxlOiAnPCcsXG4gICAgZGF0YTogJzwnLFxuICAgIGlzSW1hZ2U6ICc8JyxcbiAgICBzdWNjZXNzTWVzc2FnZTogJzwnLFxuICAgIGNhbmNlbFRleHQ6ICc8JyxcbiAgICBvbkNhbmNlbDogJyYnLFxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBTdWNjZXNzQ2FyZDtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IFN1Y2Nlc3NDYXJkIGZyb20gJy4vc3VjY2Vzcy1jYXJkLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy51cGxvYWQuc3VjY2VzcycsIFtdKVxuICAuY29tcG9uZW50KCd0d1VwbG9hZFN1Y2Nlc3MnLCBTdWNjZXNzQ2FyZClcbiAgLm5hbWU7XG4iLCJpbXBvcnQgc2NyZWVuZnVsbCBmcm9tICdzY3JlZW5mdWxsJzsgLy8gTUlUQGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvc2NyZWVuZnVsbC5qc1xuXG5jbGFzcyBDYW1lcmFDYXB0dXJlQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgICRlbGVtZW50LFxuICAgICRzY29wZSxcbiAgICAkd2luZG93LFxuICAgICRkb2N1bWVudCxcbiAgICAkcSxcbiAgICAkYXR0cnMsXG4gICAgJGxvZyxcbiAgICAkdGltZW91dCxcbiAgKSB7XG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xuICAgIHRoaXMuJGF0dHJzID0gJGF0dHJzO1xuICAgIHRoaXMuJHNjb3BlID0gJHNjb3BlO1xuICAgIHRoaXMuJGxvZyA9ICRsb2c7XG4gICAgdGhpcy4kdGltZW91dCA9ICR0aW1lb3V0O1xuICAgIHRoaXMuJHEgPSAkcTtcbiAgICB0aGlzLiR3aW5kb3cgPSAkd2luZG93O1xuICAgIHRoaXMuJGRvY3VtZW50ID0gJGRvY3VtZW50O1xuICB9XG5cbiAgJG9uSW5pdCgpIHtcbiAgICB0aGlzLmd1aWRlbGluZXMgPSB0aGlzLmd1aWRlbGluZXMgfHwge307XG5cbiAgICB0aGlzLm1vZGUgPSAnbG9hZGluZyc7IC8vIDMgc3RhdGVzOiAnbG9hZGluZycgLT4gJ2NhcHR1cmUnIDwtPiAnY29uZmlybScuXG5cbiAgICB0aGlzLm1lZGlhU3RyZWFtID0gbnVsbDtcblxuICAgIC8vIFVzZWQgdG8gcHJvZ3JhbWF0aWNhbGx5IHNpemUgb3ZlcmxheSBhbmQgc2Vuc29yLlxuICAgIHRoaXMub3ZlcmxheVNxdWFyZUxlbmd0aCA9IDA7XG4gICAgdGhpcy5zZW5zb3JXaWR0aCA9IDA7XG5cbiAgICBpZiAodGhpcy4kd2luZG93Lm5hdmlnYXRvci5tZWRpYURldmljZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy4kbG9nLmVycm9yKCduYXZpZ2F0b3IubWVkaWFEZXZpY2VzIG5vdCBhY2Nlc3NpYmxlIG9uIHRoaXMgYnJvd3NlcicpO1xuICAgICAgdGhpcy5vbkVycm9yKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuJHdpbmRvdy5uYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLiRsb2cuZXJyb3IoJ21lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEgaXMgbm90IGltcGxlbWVudGVkIG9uIHRoaXMgYnJvd3NlcicpO1xuICAgICAgdGhpcy5vbkVycm9yKCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gbG9jayBkb2N1bWVudCBzY3JvbGwuXG4gICAgdGhpcy5wcmV2aW91c0JvZHlPdmVyZmxvd1N0eWxlID0gdGhpcy4kZG9jdW1lbnRbMF0uYm9keS5zdHlsZS5vdmVyZmxvdztcbiAgICB0aGlzLiRkb2N1bWVudFswXS5ib2R5LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7IC8vIGxvY2sgZG9jdW1lbnQgc2Nyb2xsLlxuXG4gICAgdGhpcy5jYWxjdWxhdGVXaWR0aHNSZXNpemVMaXN0ZW5lciA9IHRoaXMuY2FsY3VsYXRlV2lkdGhzLmJpbmQodGhpcyk7XG4gICAgdGhpcy4kd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuY2FsY3VsYXRlV2lkdGhzUmVzaXplTGlzdGVuZXIpO1xuXG4gICAgLy8gVE9ETyBoYW95dWFuIDogYWRkIGNoYW5nZSBldmVudCBsaXN0ZW5lciB0byBzY3JlZW5mdWwsXG4gICAgLy8gIGV4aXN0aW5nIGZ1bGwgc2NyZWVuIHNob3VsZCBxdWl0IGNhcHR1cmUgaW5zdGVhZCBvZiBzaG93aW5nIG5vbiBmdWxsIHNjcmVlbiBjYW1lcmFcbiAgICB0aGlzLnN0YXJ0TGl2ZUNhbUZsb3coKTtcbiAgfVxuXG4gICRvbkRlc3Ryb3koKSB7XG4gICAgdGhpcy4kd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuY2FsY3VsYXRlV2lkdGhzUmVzaXplTGlzdGVuZXIpO1xuXG4gICAgLy8gcmVzdG9yZSBkb2N1bWVudCBzY3JvbGwuXG4gICAgdGhpcy4kZG9jdW1lbnRbMF0uYm9keS5zdHlsZS5vdmVyZmxvdyA9IHRoaXMucHJldmlvdXNCb2R5T3ZlcmZsb3dTdHlsZTtcbiAgfVxuXG4gIC8vIFByb2dyYW1hdGljYWxseSB1cGRhdGUgb3ZlcmxheS9zZW5zb3Igd2lkdGhzLCBhcyBpdCdzIG5vdCBhY2hpZXZhYmxlIHRocm91Z2ggQ1NTLlxuICBjYWxjdWxhdGVXaWR0aHMoKSB7XG4gICAgdGhpcy4kdGltZW91dCgoKSA9PiB7IC8vIGhlbHBzIGVuc3VyZSBpdCdzIGFsd2F5cyBpbiBhIGRpZ2VzdCBjeWNsZS5cbiAgICAgIGNvbnN0IGNvbnRhaW5lciA9IHRoaXMuZmluZENvbnRhaW5lcigpO1xuICAgICAgY29uc3Qgc2NyZWVuV2lkdGggPSBjb250YWluZXIuY2xpZW50V2lkdGg7XG4gICAgICBjb25zdCBzY3JlZW5IZWlnaHQgPSBjb250YWluZXIuY2xpZW50SGVpZ2h0O1xuXG4gICAgICBjb25zdCB2aWV3ZmluZGVyID0gdGhpcy5maW5kVmlld2ZpbmRlcigpO1xuICAgICAgY29uc3QgY2FtZXJhV2lkdGggPSB2aWV3ZmluZGVyLnZpZGVvV2lkdGg7XG4gICAgICBjb25zdCBjYW1lcmFIZWlnaHQgPSB2aWV3ZmluZGVyLnZpZGVvSGVpZ2h0O1xuXG4gICAgICBpZiAoIWNhbWVyYVdpZHRoIHx8ICFjYW1lcmFIZWlnaHQpIHtcbiAgICAgICAgdGhpcy4kdGltZW91dCh0aGlzLmNhbGN1bGF0ZVdpZHRocy5iaW5kKHRoaXMpLCAxMDApOyAvLyBLZWVwIHRyeWluZyB1bnRpbCB2aWRlbydzIHJlYWR5LlxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHNjYWxlRmFjdG9yID0gTWF0aC5taW4oc2NyZWVuV2lkdGggLyBjYW1lcmFXaWR0aCwgc2NyZWVuSGVpZ2h0IC8gY2FtZXJhSGVpZ2h0KTtcblxuICAgICAgY29uc3Qgc2Vuc29yV2lkdGggPSBzY2FsZUZhY3RvciAqIGNhbWVyYVdpZHRoO1xuICAgICAgY29uc3Qgc2Vuc29ySGVpZ2h0ID0gc2NhbGVGYWN0b3IgKiBjYW1lcmFIZWlnaHQ7XG5cbiAgICAgIC8vIFNldHRpbmcgd2lkdGggaXMgc3VmZmljaWVudCwgaGVpZ2h0IGF1dG8tc2NhbGVzIHRvIG1haW50YWluIGFzcGVjdCByYXRpby5cbiAgICAgIHRoaXMuc2Vuc29yV2lkdGggPSBzZW5zb3JXaWR0aDtcblxuICAgICAgLy8gOTAlIGJlY2F1c2Ugd2UgbGVhdmUgYSA1JSBtYXJnaW4gb24gZWFjaCBzaWRlLFxuICAgICAgLy8gaW4gb3JkZXIgZm9yIG92ZXJsYXkgaW1hZ2UgdG8gbmV2ZXIgdG91Y2ggc2NyZWVuIGVkZ2UuXG4gICAgICB0aGlzLm92ZXJsYXlTcXVhcmVMZW5ndGggPSBNYXRoLm1pbihzZW5zb3JXaWR0aCwgc2Vuc29ySGVpZ2h0KSAqIDAuOTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIEFjcXVpcmUgYW5kIGF0dGFjaCB2aWRlbyBzdHJlYW0gdG8gdmlkZW8gdGFnLlxuICBzdGFydExpdmVDYW1GbG93KCkge1xuICAgIHRoaXMuJGxvZy5kZWJ1ZygnLS0tLS0gTGl2ZSBjYW0gZmxvdyBzdGFydCAtLS0tLScpO1xuXG4gICAgLy8gYWNxdWlyZSBtZWRpYSAxc3QsIHN3aXRjaCB0byBmdWxsc2NyZWVuIDJuZCwgc28gdGhhdCBwZXJtaXNzaW9ucyBnZXQgYXNrZWQgYmVmb3JlIGZ1bGxzY3JlZW4uXG4gICAgdGhpcy50cnlBY3F1aXJlTWVkaWFTdHJlYW0oKVxuICAgICAgLnRoZW4oKHN0cmVhbSkgPT4ge1xuICAgICAgICB0aGlzLm1lZGlhU3RyZWFtID0gc3RyZWFtO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnRyeUFjcXVpcmVGdWxsU2NyZWVuKClcbiAgICAgICAgICAuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgIHRoaXMuJGxvZy53YXJuKGUpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmZpbmFsbHkoKCkgPT4ge1xuICAgICAgICAgICAgLy8gcmVnYXJkbGVzcyBvZiB3aGV0aGVyIGZ1bGxzY3JlZW4gd29ya3MsIGNvbnRpbnVlIHRvIGxpbmsgdGhlIHN0cmVhbSBhbmQgdmlkZW8uXG4gICAgICAgICAgICB0aGlzLmFzc2lnblN0cmVhbVRvVmlkZW8oKTtcbiAgICAgICAgICB9KTtcbiAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgLy8gVE9ETyBoYW95dWFuIDogU2hvdWxkIHNvbWVob3cgYXNrIHVzZXIgdG8gcmVmcmVzaCBwYWdlIHRvIHJlYXF1aXJlIHBlcm1pc3Npb25cbiAgICAgICAgdGhpcy4kbG9nLmVycm9yKGVycik7XG4gICAgICAgIHRoaXMuY2xvc2VWaWRlb1N0cmVhbSgpO1xuICAgICAgICB0aGlzLm9uRXJyb3IoKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgdHJ5QWNxdWlyZUZ1bGxTY3JlZW4oKSB7XG4gICAgaWYgKHNjcmVlbmZ1bGwuaXNFbmFibGVkKSB7XG4gICAgICBpZiAoIXNjcmVlbmZ1bGwuaXNGdWxsc2NyZWVuKSB7XG4gICAgICAgIGNvbnN0IGRlZmVycmVkID0gdGhpcy4kcS5kZWZlcigpO1xuICAgICAgICAvLyBzY3JlZW5mdWxsIGlzbid0IGFjdHVhbGx5IDEwMCUgcmVsaWFibGUuIEdpdmUgaXQgYSAxLjVzIHRpbWVvdXQuXG4gICAgICAgIHRoaXMuJHRpbWVvdXQoZGVmZXJyZWQucmVqZWN0LmJpbmQobnVsbCwgJ0Z1bGxzY3JlZW4gcmVxdWVzdCB0aW1lZCBvdXQuJyksIDE1MDApO1xuICAgICAgICBzY3JlZW5mdWxsLm9uKCdlcnJvcicsIGRlZmVycmVkLnJlamVjdCk7IC8vIHNjcmVlbmZ1bGwgcmVqZWN0aW5nIGEgcHJvbWlzZSBpc24ndCBhbHdheXMgZ3VhcmFudGVlZC5cbiAgICAgICAgc2NyZWVuZnVsbC5yZXF1ZXN0KHRoaXMuY29udGFpbmVyKS50aGVuKGRlZmVycmVkLnJlc29sdmUsIGRlZmVycmVkLnJlamVjdCk7XG5cbiAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy4kcS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLiRxLnJlamVjdCgnU3dpdGNoaW5nIHRvIGZ1bGwgc2NyZWVuIGlzIG5vdCBlbmFibGVkLicpO1xuICB9XG5cbiAgYXNzaWduU3RyZWFtVG9WaWRlbygpIHtcbiAgICBjb25zdCB2aWRlbyA9IHRoaXMuZmluZFZpZXdmaW5kZXIoKTtcblxuICAgIC8vIFRoaXMgaXMgZG9uZSBpbnN0ZWFkIG9mIGp1c3QgcmVhc3NpZ25pbmcgdmlkZW8gc3RyZWFtIGV2ZXJ5dGltZVxuICAgIC8vIHRvIHByZXZlbnQgc2NyZWVuIGZyb20gYmxpbmtpbmcgZXhjZXNzaXZlbHkgZHVyaW5nIHN3aXRjaFxuICAgIGlmICh2aWRlby5zcmNPYmplY3QgIT09IHRoaXMubWVkaWFTdHJlYW0pIHtcbiAgICAgIHZpZGVvLnNyY09iamVjdCA9IHRoaXMubWVkaWFTdHJlYW07XG4gICAgfVxuXG5cbiAgICB2aWRlby5wbGF5KCkudGhlbih0aGlzLmNhbGN1bGF0ZVdpZHRocy5iaW5kKHRoaXMpKTtcblxuICAgIHRoaXMubW9kZSA9ICdjYXB0dXJlJztcbiAgfVxuXG4gIHRyeUFjcXVpcmVNZWRpYVN0cmVhbSgpIHtcbiAgICBpZiAoIXRoaXMubWVkaWFTdHJlYW0pIHtcbiAgICAgIGlmICghdGhpcy5ndWlkZWxpbmVzLmRpcmVjdGlvbiB8fCBbJ2Vudmlyb25tZW50JywgJ3VzZXInXS5pbmRleE9mKHRoaXMuZ3VpZGVsaW5lcy5kaXJlY3Rpb24udG9Mb3dlckNhc2UoKSkgPT09IC0xKSB7XG4gICAgICAgIC8vIEFzc3VtZSBlbnZpcm9ubWVudCBjYW0gYnkgZGVmYXVsdCwgaWYgdW5zcGVjaWZpZWQuXG4gICAgICAgIC8vIFRPRE86IFRoaXMgZmF2b3VycyBzaW5nbGUtY2FtZXJhIHNtYXJ0cGhvbmVzLCBidXQgZGlzZmF2b3VycyBkZXNrdG9wIHdlYmNhbXMuXG4gICAgICAgIC8vIHdlIGNhbiBpbXBvcnQgQHRyYW5zZmVyd2lzZS9uZy1icm93c2VyLWluZm8gdG8gaW5mZXIgaWYgd2UncmUgbW9iaWxlLFxuICAgICAgICAvLyBhbmQgZGVmYXVsdCB0byB1c2VyL2Vudmlyb25tZW50IGFjY29yZGluZ2x5LlxuICAgICAgICB0aGlzLmd1aWRlbGluZXMuZGlyZWN0aW9uID0gJ2Vudmlyb25tZW50JztcbiAgICAgIH1cblxuICAgICAgdGhpcy5jYW1lcmFDb25zdHJhaW50cyA9IHtcbiAgICAgICAgdmlkZW86IHtcbiAgICAgICAgICB3aWR0aDogeyBpZGVhbDogMTYwMCB9LFxuICAgICAgICAgIGhlaWdodDogeyBpZGVhbDogMTYwMCB9LFxuICAgICAgICAgIGZhY2luZ01vZGU6IHtcbiAgICAgICAgICAgIGlkZWFsOiB0aGlzLmd1aWRlbGluZXMuZGlyZWN0aW9uLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGF1ZGlvOiBmYWxzZVxuICAgICAgfTtcbiAgICAgIHJldHVybiB0aGlzLiR3aW5kb3cubmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEodGhpcy5jYW1lcmFDb25zdHJhaW50cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuJHEucmVzb2x2ZSh0aGlzLm1lZGlhU3RyZWFtKTtcbiAgfVxuXG4gIGNsb3NlVmlkZW9TdHJlYW0oKSB7XG4gICAgaWYgKHNjcmVlbmZ1bGwuaXNFbmFibGVkKSB7XG4gICAgICBzY3JlZW5mdWxsLmV4aXQoKTtcbiAgICB9XG4gICAgdGhpcy5maW5kVmlld2ZpbmRlcigpLnNyY09iamVjdCA9IG51bGw7XG4gICAgaWYgKHRoaXMubWVkaWFTdHJlYW0pIHtcbiAgICAgIHRoaXMubWVkaWFTdHJlYW0uZ2V0VHJhY2tzKCkuZm9yRWFjaCh0cmFjayA9PiB0cmFjay5zdG9wKCkpO1xuICAgICAgdGhpcy5tZWRpYVN0cmVhbSA9IG51bGw7XG4gICAgfVxuICB9XG5cbiAgb25DYW5jZWxCdG5DbGljaygpIHtcbiAgICB0aGlzLmNsb3NlVmlkZW9TdHJlYW0oKTtcbiAgICB0aGlzLm9uQ2FuY2VsKCk7XG4gIH1cblxuICBvbkNhcHR1cmVCdG5DbGljaygpIHtcbiAgICBjb25zdCB2aWRlb0VsZW1lbnQgPSB0aGlzLmZpbmRWaWV3ZmluZGVyKCk7XG4gICAgY29uc3QgY2FudmFzRWxlbWVudCA9IHRoaXMuZmluZFNlbnNvcigpO1xuXG4gICAgdmlkZW9FbGVtZW50LnBhdXNlKCk7XG4gICAgY2FudmFzRWxlbWVudC53aWR0aCA9IHZpZGVvRWxlbWVudC52aWRlb1dpZHRoO1xuICAgIGNhbnZhc0VsZW1lbnQuaGVpZ2h0ID0gdmlkZW9FbGVtZW50LnZpZGVvSGVpZ2h0O1xuICAgIGNhbnZhc0VsZW1lbnQuZ2V0Q29udGV4dCgnMmQnKS5kcmF3SW1hZ2UodmlkZW9FbGVtZW50LCAwLCAwKTtcblxuICAgIHRoaXMubW9kZSA9ICdjb25maXJtJztcbiAgfVxuXG4gIG9uUmVjYXB0dXJlQnRuQ2xpY2soKSB7XG4gICAgdGhpcy5maW5kVmlld2ZpbmRlcigpLnBsYXkoKTtcbiAgICB0aGlzLm1vZGUgPSAnY2FwdHVyZSc7XG4gIH1cblxuICBvblVwbG9hZEJ0bkNsaWNrKCkge1xuICAgIC8vIFN1cHBvcnQgOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvSFRNTENhbnZhc0VsZW1lbnQvdG9CbG9iXG4gICAgdGhpcy5maW5kU2Vuc29yKCkudG9CbG9iKGNyZWF0ZVVwbG9hZENhbGxiYWNrKHRoaXMpLCAnaW1hZ2UvanBlZycsIDAuOTIpO1xuICB9XG5cbiAgLy8gVE9ETzogd2hhdCBpcyB0aGlzP1xuICBzZXROZ01vZGVsKHZhbHVlKSB7XG4gICAgLy8gSWYgbmdNb2RlbCBub3QgYXNzaWduYWJsZSwgd2UgZG9uJ3Qgd2FudCB0byBlcnJvci5cbiAgICBpZiAodHlwZW9mIHRoaXMuJGF0dHJzLm5nTW9kZWwgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBjb25zdCAkbmdNb2RlbCA9IHRoaXMuJGVsZW1lbnQuY29udHJvbGxlcignbmdNb2RlbCcpO1xuICAgICAgaWYgKCEkbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgICRuZ01vZGVsLiRzZXRWaWV3VmFsdWUodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIGZpbmRDb250YWluZXIoKSB7IHJldHVybiB0aGlzLiRlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJyNjYW1lcmEnKTsgfVxuXG4gIGZpbmRWaWV3ZmluZGVyKCkgeyByZXR1cm4gdGhpcy4kZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCcjY2FtZXJhVmlld2ZpbmRlcicpOyB9XG5cbiAgZmluZFNlbnNvcigpIHsgcmV0dXJuIHRoaXMuJGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvcignI2NhbWVyYVNlbnNvcicpOyB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVVwbG9hZENhbGxiYWNrKCRjdHJsKSB7XG4gIHJldHVybiBmdW5jdGlvbiB1cGxvYWRDYWxsYmFjayhibG9iKSB7XG4gICAgaWYgKHNjcmVlbmZ1bGwuaXNFbmFibGVkKSB7XG4gICAgICBzY3JlZW5mdWxsLmV4aXQoKTtcbiAgICB9XG4gICAgJGN0cmwuc2hvd1ZpZGVvUHJldmlldyA9IGZhbHNlO1xuICAgICRjdHJsLmNsb3NlVmlkZW9TdHJlYW0oKTtcbiAgICAkY3RybC4kc2NvcGUuJGFwcGx5QXN5bmMoKCkgPT4ge1xuICAgICAgJGN0cmwub25DYXB0dXJlKHsgZmlsZTogYmxvYiB9KTtcbiAgICB9KTtcbiAgfTtcbn1cblxuQ2FtZXJhQ2FwdHVyZUNvbnRyb2xsZXIuJGluamVjdCA9IFtcbiAgJyRlbGVtZW50JyxcbiAgJyRzY29wZScsXG4gICckd2luZG93JyxcbiAgJyRkb2N1bWVudCcsXG4gICckcScsXG4gICckYXR0cnMnLFxuICAnJGxvZycsXG4gICckdGltZW91dCcsXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBDYW1lcmFDYXB0dXJlQ29udHJvbGxlcjtcbiIsImltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vY2FtZXJhLWNhcHR1cmUuY29udHJvbGxlci5qcyc7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9jYW1lcmEtY2FwdHVyZS5odG1sJztcbmltcG9ydCAnLi9jYW1lcmEtY2FwdHVyZS5sZXNzJztcblxuY29uc3QgQ2FtZXJhQ2FwdHVyZSA9IHtcbiAgY29udHJvbGxlcixcbiAgdGVtcGxhdGUsXG4gIGJpbmRpbmdzOiB7XG4gICAgZ3VpZGVsaW5lczogJzwnLFxuXG4gICAgb25DYW5jZWw6ICcmJyxcbiAgICBvbkNhcHR1cmU6ICcmJyxcbiAgICBvbkVycm9yOiAnJicsXG5cbiAgICAvKipcbiAgICAgKiBOZWVkIHRoaXMgcGFyYW1ldGVyIHRvIHNraXAgdXNlciBpbnRlcmFjdGlvblxuICAgICAqIGR1cmluZyBjb250cm9sbGVyIGluaXRpYWxpemF0aW9uIGluIHVuaXQgdGVzdHNcbiAgICAgKi9cbiAgICB0ZXN0TW9kZTogJ0AnIC8vIHRydWUvZmFsc2VcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ2FtZXJhQ2FwdHVyZTtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IENhbWVyYUNhcHR1cmUgZnJvbSAnLi9jYW1lcmEtY2FwdHVyZS5jb21wb25lbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuZm9ybXMudXBsb2FkLmNhbWVyYS1jYXB0dXJlJywgW10pXG4gIC5jb21wb25lbnQoJ3R3Q2FtZXJhQ2FwdHVyZScsIENhbWVyYUNhcHR1cmUpXG4gIC5uYW1lO1xuIiwiY2xhc3MgQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKCRlbGVtZW50KSB7XG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xuICB9XG5cbiAgb25CdXR0b25DbGljaygpIHtcbiAgICBpZiAodGhpcy5vbkNsaWNrKSB7XG4gICAgICB0aGlzLm9uQ2xpY2soKTtcbiAgICB9XG4gIH1cblxuICBvbkJ1dHRvbkNhcHR1cmUoKSB7XG4gICAgY29uc3QgZWxlbWVudCA9IHRoaXMuJGVsZW1lbnRbMF07XG4gICAgY29uc3QgdXBsb2FkSW5wdXQgPSBlbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy50dy1kcm9wcGFibGUtaW5wdXQnKTtcbiAgICBjb25zdCBmaWxlcyA9IHVwbG9hZElucHV0LmZpbGVzO1xuXG4gICAgdGhpcy5vbkNhcHR1cmUoeyBmaWxlcyB9KTtcbiAgfVxufVxuXG5Db250cm9sbGVyLiRpbmplY3QgPSBbJyRlbGVtZW50J107XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xsZXI7XG4iLCJpbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi91cGxvYWQtYnV0dG9uLmh0bWwnO1xuaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi91cGxvYWQtYnV0dG9uLmNvbnRyb2xsZXInO1xuXG5jb25zdCBVcGxvYWRCdXR0b24gPSB7XG4gIHRlbXBsYXRlLFxuICBjb250cm9sbGVyLFxuICBiaW5kaW5nczoge1xuICAgIG5hbWU6ICc8JyxcbiAgICBsYWJlbDogJzwnLFxuICAgIGlzU2Vjb25kYXJ5OiAnPCcsXG4gICAgc21hbGw6ICc8JyxcbiAgICBibG9jazogJzwnLFxuICAgIGFjY2VwdDogJzwnLFxuICAgIG1vZGVsOiAnPCcsXG4gICAgbXVsdGlwbGU6ICc8JyxcbiAgICBkaXNhYmxlZDogJzwnLFxuICAgIG9uQ2xpY2s6ICcmJyxcbiAgICBvbkNhcHR1cmU6ICcmJ1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBVcGxvYWRCdXR0b247XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBVcGxvYWRCdXR0b24gZnJvbSAnLi91cGxvYWQtYnV0dG9uLmNvbXBvbmVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy51cGxvYWQuYnV0dG9uJywgW10pXG4gIC5jb21wb25lbnQoJ3R3VXBsb2FkQnV0dG9uJywgVXBsb2FkQnV0dG9uKVxuICAubmFtZTtcbiIsImNsYXNzIENvbnRyb2xsZXIge1xuICBvbkJ1dHRvbkNsaWNrKCkge1xuICAgIGlmICh0aGlzLm9uQ2xpY2spIHtcbiAgICAgIHRoaXMub25DbGljaygpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb250cm9sbGVyO1xuIiwiaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vY2FtZXJhLWJ1dHRvbi5odG1sJztcbmltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vY2FtZXJhLWJ1dHRvbi5jb250cm9sbGVyJztcblxuY29uc3QgQ2FtZXJhQnV0dG9uID0ge1xuICB0ZW1wbGF0ZSxcbiAgY29udHJvbGxlcixcbiAgYmluZGluZ3M6IHtcbiAgICBsYWJlbDogJzwnLFxuICAgIGRpc2FibGVkOiAnPCcsXG4gICAgb25DbGljazogJyYnLFxuICAgIG9uQ2FwdHVyZTogJyYnXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENhbWVyYUJ1dHRvbjtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IENhbWVyYUJ1dHRvbiBmcm9tICcuL2NhbWVyYS1idXR0b24uY29tcG9uZW50JztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmZvcm1zLnVwbG9hZC5jYW1lcmEtYnV0dG9uJywgW10pXG4gIC5jb21wb25lbnQoJ3R3Q2FtZXJhQnV0dG9uJywgQ2FtZXJhQnV0dG9uKVxuICAubmFtZTtcbiIsIlxuZnVuY3Rpb24gRmlsZUlucHV0RGlyZWN0aXZlKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29udHJvbGxlcjogRmlsZUlucHV0Q29udHJvbGxlcixcbiAgICBjb250cm9sbGVyQXM6ICckY3RybCcsXG4gICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcbiAgICBzY29wZToge1xuICAgICAgb25Vc2VySW5wdXQ6ICcmJ1xuICAgIH1cbiAgfTtcbn1cblxuY2xhc3MgRmlsZUlucHV0Q29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKCRlbGVtZW50KSB7XG4gICAgY29uc3QgZWxlbWVudCA9ICRlbGVtZW50WzBdO1xuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgKCkgPT4ge1xuICAgICAgaWYgKHRoaXMub25Vc2VySW5wdXRcbiAgICAgICAgJiYgdHlwZW9mIHRoaXMub25Vc2VySW5wdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhpcy5vblVzZXJJbnB1dCgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbkZpbGVJbnB1dENvbnRyb2xsZXIuJGluamVjdCA9IFsnJGVsZW1lbnQnXTtcblxuZXhwb3J0IGRlZmF1bHQgRmlsZUlucHV0RGlyZWN0aXZlO1xuIiwiY2xhc3MgQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgICRlbGVtZW50LFxuICAgICRzY29wZSxcbiAgICAkYXR0cnMsXG4gICAgJHRpbWVvdXQsXG4gICkge1xuICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDtcbiAgICB0aGlzLiRhdHRycyA9ICRhdHRycztcbiAgICB0aGlzLmZpbGVzID0gW107XG4gICAgdGhpcy5tb2RlbCA9IFtdO1xuICAgIHRoaXMuJHRpbWVvdXQgPSAkdGltZW91dDtcbiAgfVxuXG4gICRvbkNoYW5nZXMoY2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmljb24pIHtcbiAgICAgIHRoaXMudmlld0ljb24gPSBjaGFuZ2VzLmljb24uY3VycmVudFZhbHVlID8gY2hhbmdlcy5pY29uLmN1cnJlbnRWYWx1ZSA6ICd1cGxvYWQnO1xuICAgIH1cbiAgfVxuXG4gIG9uRmlsZUNhcHR1cmUoZmlsZXMpIHtcbiAgICBpZiAodGhpcy5uZ0Rpc2FibGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFmaWxlcykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb3VsZCBub3QgcmV0cmlldmUgZmlsZScpO1xuICAgIH1cblxuICAgIGlmIChmaWxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vblN0YXJ0ICYmIHRoaXMuYXJlQWxsRmlsZXNQcm9jZXNzZWQoKSkge1xuICAgICAgdGhpcy5vblN0YXJ0KCk7XG4gICAgfVxuXG4gICAgdGhpcy5maWxlcyA9IFsuLi50aGlzLmZpbGVzLCAuLi5maWxlc107XG5cbiAgICB0aGlzLiR0aW1lb3V0KCgpID0+IHtcbiAgICAgIGNvbnN0IG9iakRpdiA9IHRoaXMuJGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvcignLnByb2Nlc3NpbmctbGlzdCcpO1xuICAgICAgaWYgKG9iakRpdikge1xuICAgICAgICBvYmpEaXYuc2Nyb2xsVG9wID0gb2JqRGl2LnNjcm9sbEhlaWdodDtcbiAgICAgIH1cbiAgICB9LCA2MDApO1xuICB9XG5cbiAgb25Qcm9jZXNzU3VjY2VzcyhpbmRleCwgZmlsZSwgZGF0YVVybCwgaWQpIHtcbiAgICBjb25zdCBrZXkgPSB0aGlzLmh0dHBPcHRpb25zID8gJ2lkJyA6ICdkYXRhVXJsJztcblxuICAgIHRoaXMuZmlsZXNbaW5kZXhdW2tleV0gPSB0aGlzLmh0dHBPcHRpb25zID8gaWQgOiBkYXRhVXJsO1xuXG4gICAgY29uc3QgbW9kZWwgPSB0aGlzLmZpbGVzLm1hcChmaWxlT2JqZWN0ID0+IGZpbGVPYmplY3Rba2V5XSkuZmlsdGVyKHZhbHVlID0+ICEhdmFsdWUpO1xuXG4gICAgdGhpcy5zZXROZ01vZGVsKG1vZGVsKTtcblxuICAgIGlmICh0aGlzLm9uRmluaXNoICYmIHRoaXMuYXJlQWxsRmlsZXNQcm9jZXNzZWQoKSkge1xuICAgICAgdGhpcy5vbkZpbmlzaCgpO1xuICAgIH1cbiAgfVxuXG4gIGFyZUFsbEZpbGVzUHJvY2Vzc2VkKCkge1xuICAgIGNvbnN0IGtleSA9IHRoaXMuaHR0cE9wdGlvbnMgPyAnaWQnIDogJ2RhdGFVcmwnO1xuXG4gICAgY29uc3QgcHJvY2Vzc2luZ0ZpbGUgPSB0aGlzLmZpbGVzLnNvbWUoZmlsZSA9PiBmaWxlW2tleV0gPT0gbnVsbCAmJiBmaWxlLmVycm9yID09IG51bGwpO1xuXG4gICAgcmV0dXJuICFwcm9jZXNzaW5nRmlsZTtcbiAgfVxuXG4gIG9uUHJvY2Vzc0ZhaWx1cmUoaW5kZXgsIGZpbGUsIGVycm9yKSB7XG4gICAgdGhpcy5maWxlc1tpbmRleF0uZXJyb3IgPSBlcnJvcjtcblxuICAgIGlmICh0aGlzLm9uRmFpbHVyZSkge1xuICAgICAgdGhpcy5vbkZhaWx1cmUoeyBlcnJvciB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vbkZpbmlzaCAmJiB0aGlzLmFyZUFsbEZpbGVzUHJvY2Vzc2VkKCkpIHtcbiAgICAgIHRoaXMub25GaW5pc2goKTtcbiAgICB9XG4gIH1cblxuICBvblByb2Nlc3NDYW5jZWwoaW5kZXgpIHtcbiAgICBjb25zdCBrZXkgPSB0aGlzLmh0dHBPcHRpb25zID8gJ2lkJyA6ICdkYXRhVXJsJztcblxuICAgIHRoaXMuZmlsZXMuc3BsaWNlKGluZGV4LCAxKTtcblxuICAgIGNvbnN0IG1vZGVsID0gdGhpcy5maWxlcy5tYXAoZmlsZU9iamVjdCA9PiBmaWxlT2JqZWN0W2tleV0pLmZpbHRlcih2YWx1ZSA9PiAhIXZhbHVlKTtcblxuICAgIHRoaXMuc2V0TmdNb2RlbChtb2RlbCk7XG4gIH1cblxuICBvbkRyYWdFbnRlcigpIHtcbiAgICB0aGlzLmlzRHJvcHBhYmxlID0gdHJ1ZTtcbiAgfVxuXG4gIG9uRHJhZ0xlYXZlKCkge1xuICAgIHRoaXMuaXNEcm9wcGFibGUgPSBmYWxzZTtcbiAgfVxuXG4gIG9uRHJvcChmaWxlcykge1xuICAgIHRoaXMuaXNEcm9wcGFibGUgPSBmYWxzZTtcbiAgICB0aGlzLm9uRmlsZUNhcHR1cmUoZmlsZXMpO1xuICB9XG5cbiAgcmVzZXQoKSB7XG4gICAgdGhpcy5zZXROZ01vZGVsKG51bGwpO1xuICB9XG5cbiAgc2V0TmdNb2RlbCh2YWx1ZSkge1xuICAgIC8vIElmIG5nTW9kZWwgbm90IGFzc2lnbmFibGUsIHdlIGRvbid0IHdhbnQgdG8gZXJyb3IuXG4gICAgaWYgKHR5cGVvZiB0aGlzLiRhdHRycy5uZ01vZGVsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3QgJG5nTW9kZWwgPSB0aGlzLiRlbGVtZW50LmNvbnRyb2xsZXIoJ25nTW9kZWwnKTtcbiAgICAgIGlmICghJG5nTW9kZWwuJHNldFZpZXdWYWx1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICAkbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKHZhbHVlKTtcbiAgICB9XG4gIH1cbn1cblxuQ29udHJvbGxlci4kaW5qZWN0ID0gW1xuICAnJGVsZW1lbnQnLFxuICAnJHNjb3BlJyxcbiAgJyRhdHRycycsXG4gICckdGltZW91dCcsXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBDb250cm9sbGVyO1xuIiwiaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9tdWx0aS11cGxvYWQuY29udHJvbGxlcic7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9tdWx0aS11cGxvYWQuaHRtbCc7XG5cbmNvbnN0IENvbXBvbmVudCA9IHtcbiAgY29udHJvbGxlcixcbiAgdGVtcGxhdGUsXG4gIGJpbmRpbmdzOiB7XG4gICAgbmdEaXNhYmxlZDogJzwnLFxuICAgIG5nTW9kZWw6ICc9JyxcbiAgICBuZ0NoYW5nZTogJyYnLFxuICAgIG5hbWU6ICdAJyxcbiAgICBsYWJlbDogJ0AnLFxuICAgIHBsYWNlaG9sZGVyOiAnQCcsXG4gICAgaWNvbjogJ0AnLCAvLyBpbGx1c3RyYXRpb24gaW4gaWNvbiBzaG93biBpbiB1cGxvYWQgYm94XG5cbiAgICBidXR0b25UZXh0OiAnQCcsIC8vIEJ1dHRvbiB0ZXh0IHNob3duIGluIGRlZmF1bHQgc3RhdGVcbiAgICBhZGRNb3JlQnV0dG9uVGV4dDogJ0AnLCAvLyBCdXR0b24gdGV4dCBzaG93biB3aGVuIGF0IGxlYXN0IG9uZSBmaWxlIGlzIHVwbG9hZGluZ1xuXG4gICAgZHJvcHBpbmdUZXh0OiAnQCcsIC8vIFRleHQgc2hvd24gd2hlbiBob3ZlcmluZyB3aXRoIGEgZmlsZVxuICAgIHByb2Nlc3NpbmdUZXh0OiAnQCcsIC8vIFRleHQgc2hvd24gd2hpbGUgcHJvY2Vzc2luZy91cGxvYWRpbmdcbiAgICBzdWNjZXNzVGV4dDogJ0AnLCAvLyBUZXh0IGFmdGVyIHVwbG9hZCBpcyBzdWNjZXNzZnVsLCBzaG93biBxdWl0ZSBicmllZmx5IGJlZm9yZSBwcmV2aWV3XG4gICAgZmFpbHVyZVRleHQ6ICdAJyxcblxuICAgIHRvb0xhcmdlTWVzc2FnZTogJ0AnLFxuICAgIC8vIHdyb25nVHlwZU1lc3NhZ2U6ICdAJyxcblxuICAgIHZhbGlkYXRpb25NZXNzYWdlczogJzwnLFxuXG4gICAgb25TdGFydDogJyYnLFxuICAgIG9uRmluaXNoOiAnJicsXG4gICAgb25GYWlsdXJlOiAnJicsXG4gICAgcmVzcG9uc2VFcnJvckV4dHJhY3RvcjogJyYnLFxuXG4gICAgYWNjZXB0OiAnQCcsXG4gICAgaHR0cE9wdGlvbnM6ICc8JyxcblxuICAgIG1heFNpemU6ICc8JywgLy8gVE9ETyBtb3ZlIHRvIG5nTWF4P1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQ7XG4iLCJmdW5jdGlvbiB0d0Ryb3AoJHBhcnNlLCAkcm9vdFNjb3BlLCAkZXhjZXB0aW9uSGFuZGxlcikge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgY29udHJvbGxlcjogKCkgPT4ge1xuXG4gICAgfSxcbiAgICBsaW5rOiAoc2NvcGUsIGVsZW0sIGF0dHIpID0+IHtcbiAgICAgIHNjb3BlLmNvdW50ZXIgPSAwO1xuICAgICAgZWxlbVswXS5hZGRFdmVudExpc3RlbmVyKCdkcm9wJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGZuID0gJHBhcnNlKGF0dHIudHdEcm9wKTtcblxuICAgICAgICBjb25zdCBjYWxsYmFjayA9ICgpID0+IHtcbiAgICAgICAgICBmbihzY29wZSwge1xuICAgICAgICAgICAgZmlsZXM6IGV2ZW50LmRhdGFUcmFuc2Zlci5maWxlc1xuICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICghJHJvb3RTY29wZS4kJHBoYXNlKSB7XG4gICAgICAgICAgc2NvcGUuJGFwcGx5KGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgJGV4Y2VwdGlvbkhhbmRsZXIoZXJyb3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIHNjb3BlLmNvdW50ZXIgPSAwO1xuICAgICAgfSwgZmFsc2UpO1xuXG4gICAgICBlbGVtWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdvdmVyJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9LCBmYWxzZSk7XG4gICAgfVxuICB9O1xufVxuXG50d0Ryb3AuJGluamVjdCA9IFsnJHBhcnNlJywgJyRyb290U2NvcGUnLCAnJGV4Y2VwdGlvbkhhbmRsZXInXTtcblxuZXhwb3J0IGRlZmF1bHQgdHdEcm9wO1xuIiwiZnVuY3Rpb24gdHdEcmFnRW50ZXIoJHBhcnNlLCAkcm9vdFNjb3BlKSB7XG4gIHJldHVybiB7XG4gICAgcmVzdHJpY3Q6ICdBJyxcbiAgICByZXF1aXJlOiAndHdEcm9wJyxcbiAgICBsaW5rOiAoc2NvcGUsIGVsZW0sIGF0dHIpID0+IHtcbiAgICAgIGVsZW1bMF0uYWRkRXZlbnRMaXN0ZW5lcignZHJhZ2VudGVyJywgKGV2ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGZuID0gJHBhcnNlKGF0dHIudHdEcmFnRW50ZXIpO1xuICAgICAgICBzY29wZS5jb3VudGVyKys7XG5cbiAgICAgICAgaWYgKHNjb3BlLmNvdW50ZXIgPj0gMSkge1xuICAgICAgICAgIGNvbnN0IGNhbGxiYWNrID0gKCkgPT4ge1xuICAgICAgICAgICAgZm4oc2NvcGUsIHsgJGV2ZW50OiBldmVudCB9KTtcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgaWYgKCEkcm9vdFNjb3BlLiQkcGhhc2UpIHtcbiAgICAgICAgICAgIHNjb3BlLiRhcHBseShjYWxsYmFjayk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNjb3BlLiRldmFsQXN5bmMoY2FsbGJhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9LCBmYWxzZSk7XG4gICAgfVxuICB9O1xufVxuXG50d0RyYWdFbnRlci4kaW5qZWN0ID0gWyckcGFyc2UnLCAnJHJvb3RTY29wZSddO1xuXG5leHBvcnQgZGVmYXVsdCB0d0RyYWdFbnRlcjtcbiIsImZ1bmN0aW9uIHR3RHJhZ0xlYXZlKCRwYXJzZSwgJHJvb3RTY29wZSkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZTogJ3R3RHJvcCcsXG4gICAgbGluazogKHNjb3BlLCBlbGVtLCBhdHRyKSA9PiB7XG4gICAgICBlbGVtWzBdLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdsZWF2ZScsIChldmVudCkgPT4ge1xuICAgICAgICBjb25zdCBmbiA9ICRwYXJzZShhdHRyLnR3RHJhZ0xlYXZlKTtcbiAgICAgICAgc2NvcGUuY291bnRlci0tO1xuXG4gICAgICAgIGlmIChzY29wZS5jb3VudGVyIDw9IDApIHtcbiAgICAgICAgICBjb25zdCBjYWxsYmFjayA9ICgpID0+IHtcbiAgICAgICAgICAgIGZuKHNjb3BlLCB7ICRldmVudDogZXZlbnQgfSk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIGlmICghJHJvb3RTY29wZS4kJHBoYXNlKSB7XG4gICAgICAgICAgICBzY29wZS4kYXBwbHkoY2FsbGJhY2spO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzY29wZS4kZXZhbEFzeW5jKGNhbGxiYWNrKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfSwgZmFsc2UpO1xuICAgIH1cbiAgfTtcbn1cblxudHdEcmFnTGVhdmUuJGluamVjdCA9IFsnJHBhcnNlJywgJyRyb290U2NvcGUnXTtcblxuZXhwb3J0IGRlZmF1bHQgdHdEcmFnTGVhdmU7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBEcm9wIGZyb20gJy4vZHJvcC5kaXJlY3RpdmUnO1xuaW1wb3J0IERyYWdFbnRlciBmcm9tICcuL2RyYWctZW50ZXIuZGlyZWN0aXZlJztcbmltcG9ydCBEcmFnTGVhdmUgZnJvbSAnLi9kcmFnLWxlYXZlLmRpcmVjdGl2ZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy5kcmFnLWFuZC1kcm9wJywgW10pXG4gIC5kaXJlY3RpdmUoJ3R3RHJvcCcsIERyb3ApXG4gIC5kaXJlY3RpdmUoJ3R3RHJhZ0VudGVyJywgRHJhZ0VudGVyKVxuICAuZGlyZWN0aXZlKCd0d0RyYWdMZWF2ZScsIERyYWdMZWF2ZSlcbiAgLm5hbWU7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBNdWx0aVVwbG9hZCBmcm9tICcuL211bHRpLXVwbG9hZC5jb21wb25lbnQnO1xuaW1wb3J0IERyYWdBbmREcm9wIGZyb20gJy4uLy4uL2RyYWctYW5kLWRyb3AnO1xuaW1wb3J0IFByb2Nlc3NpbmdDYXJkIGZyb20gJy4uL3Byb2Nlc3NpbmctY2FyZCc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuc3R5bGVndWlkZS5mb3Jtcy51cGxvYWQubXVsdGknLCBbXG4gICAgUHJvY2Vzc2luZ0NhcmQsXG4gICAgRHJhZ0FuZERyb3BcbiAgXSlcbiAgLmNvbXBvbmVudCgndHdNdWx0aVVwbG9hZCcsIE11bHRpVXBsb2FkKVxuICAubmFtZTtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuXG5pbXBvcnQgVXBsb2FkIGZyb20gJy4vdXBsb2FkLmNvbXBvbmVudC5qcyc7XG5cbmltcG9ydCBDYXB0dXJlQ2FyZCBmcm9tICcuL2NhcHR1cmUtY2FyZCc7XG5pbXBvcnQgRHJvcHBpbmdDYXJkIGZyb20gJy4vZHJvcHBpbmctY2FyZCc7XG5pbXBvcnQgUHJvY2Vzc2luZ0NhcmQgZnJvbSAnLi9wcm9jZXNzaW5nLWNhcmQnO1xuaW1wb3J0IFN1Y2Nlc3NDYXJkIGZyb20gJy4vc3VjY2Vzcy1jYXJkJztcbmltcG9ydCBDYW1lcmFDYXB0dXJlIGZyb20gJy4vY2FtZXJhLWNhcHR1cmUnO1xuaW1wb3J0IFVwbG9hZEJ1dHRvbiBmcm9tICcuL3VwbG9hZC1idXR0b24nO1xuaW1wb3J0IENhbWVyYUJ1dHRvbiBmcm9tICcuL2NhbWVyYS1idXR0b24nO1xuXG5pbXBvcnQgRmlsZUlucHV0IGZyb20gJy4vZmlsZS1pbnB1dC5kaXJlY3RpdmUuanMnO1xuaW1wb3J0IE11bHRpVXBsb2FkIGZyb20gJy4vbXVsdGktdXBsb2FkJztcbmltcG9ydCBEcmFnQW5kRHJvcCBmcm9tICcuLi9kcmFnLWFuZC1kcm9wJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmZvcm1zLnVwbG9hZCcsIFtcbiAgICBDYXB0dXJlQ2FyZCxcbiAgICBEcm9wcGluZ0NhcmQsXG4gICAgUHJvY2Vzc2luZ0NhcmQsXG4gICAgU3VjY2Vzc0NhcmQsXG4gICAgQ2FtZXJhQ2FwdHVyZSxcbiAgICBVcGxvYWRCdXR0b24sXG4gICAgQ2FtZXJhQnV0dG9uLFxuICAgIE11bHRpVXBsb2FkLFxuICAgIERyYWdBbmREcm9wXG4gIF0pXG4gIC5kaXJlY3RpdmUoJ3R3RmlsZUlucHV0JywgRmlsZUlucHV0KVxuICAuY29tcG9uZW50KCd0d1VwbG9hZCcsIFVwbG9hZClcbiAgLm5hbWU7XG4iLCJcbmNsYXNzIENoZWNrYm94Q29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKCRzY29wZSwgJGVsZW1lbnQsIFR3RG9tU2VydmljZSkge1xuICAgIGNvbnN0ICRuZ01vZGVsID0gJGVsZW1lbnQuY29udHJvbGxlcignbmdNb2RlbCcpO1xuXG4gICAgdGhpcy5kb20gPSBUd0RvbVNlcnZpY2U7XG4gICAgdGhpcy4kZWxlbWVudCA9ICRlbGVtZW50O1xuICAgIHRoaXMuZWxlbWVudCA9ICRlbGVtZW50WzBdO1xuXG4gICAgdGhpcy5hZGRMYWJlbEhhbmRsZXIoKTtcbiAgICB0aGlzLmFkZFdhdGNoZXJzKCRzY29wZSwgJGVsZW1lbnQsICRuZ01vZGVsKTtcblxuICAgIHRoaXMuY2hlY2tib3hDb250YWluZXIgPSB0aGlzLmRvbS5nZXRDbG9zZXN0UGFyZW50QnlDbGFzc05hbWUoXG4gICAgICB0aGlzLmVsZW1lbnQsXG4gICAgICAnY2hlY2tib3gnXG4gICAgKTtcblxuICAgIHRoaXMubGFiZWwgPSB0aGlzLmNoZWNrYm94Q29udGFpbmVyXG4gICAgICA/IHRoaXMuY2hlY2tib3hDb250YWluZXIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2xhYmVsJylbMF1cbiAgICAgIDogZmFsc2U7XG4gIH1cblxuICAkb25Jbml0KCkge1xuICAgIHRoaXMuY2hlY2tlZCA9IHRoaXMuaXNDaGVja2VkKCk7XG4gIH1cblxuICBpc0NoZWNrZWQoKSB7XG4gICAgcmV0dXJuICh0aGlzLm5nVHJ1ZVZhbHVlICYmIHRoaXMubmdUcnVlVmFsdWUgPT09IHRoaXMubmdNb2RlbClcbiAgICAgIHx8ICghdGhpcy5uZ1RydWVWYWx1ZSAmJiB0aGlzLm5nTW9kZWwpXG4gICAgICB8fCBmYWxzZTtcbiAgfVxuXG4gIGJ1dHRvbkNsaWNrKGV2ZW50KSB7XG4gICAgaWYgKHRoaXMuY2hlY2tlZCkge1xuICAgICAgdGhpcy5jaGVja2VkID0gZmFsc2U7XG4gICAgICB0aGlzLiRuZ01vZGVsLiRzZXRWaWV3VmFsdWUodGhpcy5uZ0ZhbHNlVmFsdWUgfHwgZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNoZWNrZWQgPSB0cnVlO1xuICAgICAgdGhpcy4kbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKHRoaXMubmdUcnVlVmFsdWUgfHwgdHJ1ZSk7XG4gICAgfVxuICAgIHRoaXMuJG5nTW9kZWwuJHNldFRvdWNoZWQoKTtcblxuICAgIGlmIChldmVudCkge1xuICAgICAgLy8gUHJldmVudCBidXR0b24gY2xpY2sgcHJvcGdhdGlvbiBmcm9tIGZpcmluZyBsYWJlbFxuICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgfVxuXG4gICAgdmFsaWRhdGVDaGVja2JveChcbiAgICAgIHRoaXMuY2hlY2tlZCxcbiAgICAgIHRoaXMuJGVsZW1lbnQsXG4gICAgICB0aGlzLiRuZ01vZGVsLFxuICAgICAgdGhpcy5uZ1JlcXVpcmVkLFxuICAgICAgdGhpcy5kb21cbiAgICApO1xuICB9XG5cbiAgYnV0dG9uRm9jdXMoKSB7XG4gICAgaWYgKHRoaXMubGFiZWwpIHtcbiAgICAgIHRoaXMubGFiZWwuY2xhc3NMaXN0LmFkZCgnZm9jdXMnKTtcbiAgICB9XG5cbiAgICB0aGlzLmVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2ZvY3VzJykpO1xuICB9XG5cbiAgYnV0dG9uQmx1cigpIHtcbiAgICBpZiAodGhpcy5sYWJlbCkge1xuICAgICAgdGhpcy5sYWJlbC5jbGFzc0xpc3QucmVtb3ZlKCdmb2N1cycpO1xuICAgIH1cblxuICAgIHRoaXMuZWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnYmx1cicpKTtcbiAgICB0aGlzLiRuZ01vZGVsLiRzZXRUb3VjaGVkKCk7XG5cbiAgICB2YWxpZGF0ZUNoZWNrYm94KFxuICAgICAgdGhpcy5jaGVja2VkLFxuICAgICAgdGhpcy4kZWxlbWVudCxcbiAgICAgIHRoaXMuJG5nTW9kZWwsXG4gICAgICB0aGlzLm5nUmVxdWlyZWQsXG4gICAgICB0aGlzLmRvbVxuICAgICk7XG4gIH1cblxuICAvLyBJRSAnY2xpY2tzJyB0aGUgaGlkZGVuIGlucHV0IHdoZW4gbGFiZWwgaXMgY2xpY2tlZFxuICBzdGF0aWMgaGlkZGVuQ2xpY2soJGV2ZW50KSB7XG4gICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuICB9XG5cbiAgYWRkTGFiZWxIYW5kbGVyKCkge1xuICAgIGNvbnN0IGxhYmVsID0gdGhpcy5kb20uZ2V0Q2xvc2VzdFBhcmVudEJ5VGFnTmFtZSh0aGlzLmVsZW1lbnQsICdsYWJlbCcpO1xuXG4gICAgaWYgKCFsYWJlbCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBsYWJlbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4ge1xuICAgICAgY29uc3QgaXNEaXNhYmxlZCA9IGxhYmVsLmdldEF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAgICAgIGlmICghaXNEaXNhYmxlZCkge1xuICAgICAgICBjb25zdCBidXR0b24gPSB0aGlzLmVsZW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2J1dHRvbicpWzBdO1xuICAgICAgICAvLyBUcmlnZ2VyIG91ciBidXR0b24sIHByZXZlbnQgZGVmYXVsdCBsYWJlbCBiZWhhdmlvdXJcbiAgICAgICAgYnV0dG9uLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdjbGljaycpKTtcbiAgICAgIH1cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9KTtcbiAgfVxuXG4gIGFkZFdhdGNoZXJzKCRzY29wZSwgJGVsZW1lbnQsICRuZ01vZGVsKSB7XG4gICAgJHNjb3BlLiR3YXRjaCgnJGN0cmwubmdNb2RlbCcsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHtcbiAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgICAgJG5nTW9kZWwuJHNldERpcnR5KCk7XG4gICAgICAgIHZhbGlkYXRlQ2hlY2tib3goXG4gICAgICAgICAgdGhpcy5jaGVja2VkLFxuICAgICAgICAgICRlbGVtZW50LFxuICAgICAgICAgICRuZ01vZGVsLFxuICAgICAgICAgIHRoaXMubmdSZXF1aXJlZCxcbiAgICAgICAgICB0aGlzLmRvbVxuICAgICAgICApO1xuICAgICAgICB0aGlzLmNoZWNrZWQgPSB0aGlzLmlzQ2hlY2tlZCgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgJHNjb3BlLiR3YXRjaCgnJGN0cmwubmdEaXNhYmxlZCcsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSAkZWxlbWVudFswXTtcbiAgICAgIGNvbnN0IGNoZWNrYm94ID0gdGhpcy5kb20uZ2V0Q2xvc2VzdFBhcmVudEJ5Q2xhc3NOYW1lKGVsZW1lbnQsICdjaGVja2JveCcpO1xuICAgICAgY29uc3QgbGFiZWwgPSB0aGlzLmRvbS5nZXRDbG9zZXN0UGFyZW50QnlUYWdOYW1lKGVsZW1lbnQsICdsYWJlbCcpO1xuXG4gICAgICBpZiAoIWNoZWNrYm94KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChuZXdWYWx1ZSAmJiAhb2xkVmFsdWUpIHtcbiAgICAgICAgY2hlY2tib3guY2xhc3NMaXN0LmFkZCgnZGlzYWJsZWQnKTtcbiAgICAgICAgLy8gY2hlY2tib3guc2V0QXR0cmlidXRlKCdkaXNhYmxlZCcsIHRydWUpO1xuICAgICAgICBsYWJlbC5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgJ3RydWUnKTtcbiAgICAgIH0gZWxzZSBpZiAoIW5ld1ZhbHVlICYmIG9sZFZhbHVlKSB7XG4gICAgICAgIGNoZWNrYm94LmNsYXNzTGlzdC5yZW1vdmUoJ2Rpc2FibGVkJyk7XG4gICAgICAgIC8vIGNoZWNrYm94LnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcbiAgICAgICAgbGFiZWwucmVtb3ZlQXR0cmlidXRlKCdkaXNhYmxlZCcpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgJHNjb3BlLiR3YXRjaCgnJGN0cmwubmdSZXF1aXJlZCcsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHtcbiAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgICAgdmFsaWRhdGVDaGVja2JveChcbiAgICAgICAgICB0aGlzLmNoZWNrZWQsXG4gICAgICAgICAgJGVsZW1lbnQsXG4gICAgICAgICAgJG5nTW9kZWwsXG4gICAgICAgICAgdGhpcy5uZ1JlcXVpcmVkLFxuICAgICAgICAgIHRoaXMuZG9tXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVDaGVja2JveChpc0NoZWNrZWQsICRlbGVtZW50LCAkbmdNb2RlbCwgaXNSZXF1aXJlZCwgZG9tKSB7XG4gIGlmICghJG5nTW9kZWwuJHRvdWNoZWQpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgZWxlbWVudCA9ICRlbGVtZW50WzBdO1xuICBjb25zdCBidXR0b24gPSBlbGVtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ3R3LWNoZWNrYm94LWJ1dHRvbicpWzBdO1xuICBjb25zdCBjaGVja2JveExhYmVsID0gZG9tLmdldENsb3Nlc3RQYXJlbnRCeUNsYXNzTmFtZShlbGVtZW50LCAnY2hlY2tib3gnKTtcbiAgY29uc3QgZm9ybUdyb3VwID0gZG9tLmdldENsb3Nlc3RQYXJlbnRCeUNsYXNzTmFtZShlbGVtZW50LCAnZm9ybS1ncm91cCcpO1xuXG4gIGlmICghaXNDaGVja2VkICYmIGlzUmVxdWlyZWQpIHtcbiAgICAkbmdNb2RlbC4kc2V0VmFsaWRpdHkoJ3JlcXVpcmVkJywgZmFsc2UpO1xuICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdoYXMtZXJyb3InKTtcbiAgICBpZiAoY2hlY2tib3hMYWJlbCkge1xuICAgICAgY2hlY2tib3hMYWJlbC5jbGFzc0xpc3QuYWRkKCdoYXMtZXJyb3InKTtcbiAgICB9XG4gICAgaWYgKGZvcm1Hcm91cCkge1xuICAgICAgZm9ybUdyb3VwLmNsYXNzTGlzdC5hZGQoJ2hhcy1lcnJvcicpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAkbmdNb2RlbC4kc2V0VmFsaWRpdHkoJ3JlcXVpcmVkJywgdHJ1ZSk7XG4gICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2hhcy1lcnJvcicpO1xuICAgIGlmIChjaGVja2JveExhYmVsKSB7XG4gICAgICBjaGVja2JveExhYmVsLmNsYXNzTGlzdC5yZW1vdmUoJ2hhcy1lcnJvcicpO1xuICAgIH1cbiAgICBpZiAoZm9ybUdyb3VwKSB7XG4gICAgICBmb3JtR3JvdXAuY2xhc3NMaXN0LnJlbW92ZSgnaGFzLWVycm9yJyk7XG4gICAgfVxuICB9XG59XG5cbkNoZWNrYm94Q29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJGVsZW1lbnQnLCAnVHdEb21TZXJ2aWNlJ107XG5cbmV4cG9ydCBkZWZhdWx0IENoZWNrYm94Q29udHJvbGxlcjtcbiIsIlxuaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9jaGVja2JveC5jb250cm9sbGVyLmpzJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL2NoZWNrYm94Lmh0bWwnO1xuXG5jb25zdCBDaGVja2JveCA9IHtcbiAgY29udHJvbGxlcixcbiAgdGVtcGxhdGUsXG4gIHJlcXVpcmU6IHtcbiAgICAkbmdNb2RlbDogJ25nTW9kZWwnXG4gIH0sXG4gIGJpbmRpbmdzOiB7XG4gICAgbmFtZTogJ0AnLFxuICAgIG5nTW9kZWw6ICc9JyxcbiAgICBuZ1RydWVWYWx1ZTogJzwnLFxuICAgIG5nRmFsc2VWYWx1ZTogJzwnLFxuICAgIG5nUmVxdWlyZWQ6ICc8JyxcbiAgICBuZ0Rpc2FibGVkOiAnPCdcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ2hlY2tib3g7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBDaGVja2JveCBmcm9tICcuL2NoZWNrYm94LmNvbXBvbmVudC5qcyc7XG5pbXBvcnQgRG9tU2VydmljZSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9kb20nO1xuaW1wb3J0IEZvY3VzYWJsZSBmcm9tICcuLi9mb2N1c2FibGUnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuZm9ybXMuY2hlY2tib3gnLCBbXG4gICAgRG9tU2VydmljZSxcbiAgICBGb2N1c2FibGVcbiAgXSlcbiAgLmNvbXBvbmVudCgndHdDaGVja2JveCcsIENoZWNrYm94KS5uYW1lO1xuIiwiXG5jbGFzcyBDaGVja2JveEdyb3VwQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKCRlbGVtZW50LCBUd0RvbVNlcnZpY2UpIHtcbiAgICB0aGlzLiRuZ01vZGVsQ29udHJvbGxlciA9ICRlbGVtZW50LmNvbnRyb2xsZXIoJ25nTW9kZWwnKTtcblxuICAgIHRoaXMuZG9tID0gVHdEb21TZXJ2aWNlO1xuICAgIHRoaXMuJGVsZW1lbnQgPSAkZWxlbWVudDtcblxuICAgIHRoaXMuaW50ZXJuYWxNb2RlbCA9IFtdO1xuICAgIHRoaXMuaW50ZXJuYWxPcHRpb25zID0gW107XG4gIH1cblxuICAkb25DaGFuZ2VzKGNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5vcHRpb25zKSB7XG4gICAgICB0aGlzLm9uRXh0ZXJuYWxPcHRpb25zQ2hhbmdlKGNoYW5nZXMub3B0aW9ucy5jdXJyZW50VmFsdWUpO1xuICAgIH1cblxuICAgIGlmIChjaGFuZ2VzLm5nTW9kZWwpIHtcbiAgICAgIHRoaXMub25FeHRlcm5hbE1vZGVsQ2hhbmdlKGNoYW5nZXMubmdNb2RlbC5jdXJyZW50VmFsdWUpO1xuICAgIH1cblxuICAgIGlmIChjaGFuZ2VzLm5nUmVxdWlyZWQpIHtcbiAgICAgIHRoaXMudmFsaWRhdGUoKTtcbiAgICB9XG4gIH1cblxuICBvbkV4dGVybmFsT3B0aW9uc0NoYW5nZShuZXdPcHRpb25zKSB7XG4gICAgdGhpcy5pbnRlcm5hbE9wdGlvbnMgPSBjb252ZXJ0TW9kZWxUb09wdGlvbnModGhpcy5uZ01vZGVsLCBuZXdPcHRpb25zKTtcbiAgICB0aGlzLmludGVybmFsTW9kZWwgPSBjb252ZXJ0T3B0aW9uc1RvTW9kZWwodGhpcy5pbnRlcm5hbE9wdGlvbnMpO1xuICB9XG5cbiAgb25FeHRlcm5hbE1vZGVsQ2hhbmdlKG5ld01vZGVsKSB7XG4gICAgdGhpcy5pbnRlcm5hbE9wdGlvbnMgPSBjb252ZXJ0TW9kZWxUb09wdGlvbnMoXG4gICAgICBuZXdNb2RlbCxcbiAgICAgIHRoaXMuaW50ZXJuYWxPcHRpb25zXG4gICAgKTtcbiAgICB0aGlzLmludGVybmFsTW9kZWwgPSBjb252ZXJ0T3B0aW9uc1RvTW9kZWwodGhpcy5pbnRlcm5hbE9wdGlvbnMpO1xuICAgIHRoaXMudmFsaWRhdGUoKTtcbiAgfVxuXG4gIG9uSW50ZXJuYWxNb2RlbENoYW5nZSgpIHtcbiAgICB0aGlzLmludGVybmFsTW9kZWwgPSBjb252ZXJ0T3B0aW9uc1RvTW9kZWwodGhpcy5pbnRlcm5hbE9wdGlvbnMpO1xuICAgIHRoaXMuJG5nTW9kZWxDb250cm9sbGVyLiRzZXRWaWV3VmFsdWUodGhpcy5pbnRlcm5hbE1vZGVsKTtcbiAgICB0aGlzLiRuZ01vZGVsQ29udHJvbGxlci4kc2V0VG91Y2hlZCgpO1xuICAgIHRoaXMuJG5nTW9kZWxDb250cm9sbGVyLiRzZXREaXJ0eSgpO1xuICB9XG5cbiAgaXNDaGVja2JveFJlcXVpcmVkKCkge1xuICAgIHJldHVybiB0aGlzLmludGVybmFsTW9kZWwubGVuZ3RoID09PSAwICYmIHRoaXMubmdSZXF1aXJlZDtcbiAgfVxuXG4gIHZhbGlkYXRlKCkge1xuICAgIGlmICghdGhpcy4kbmdNb2RlbENvbnRyb2xsZXIuJHRvdWNoZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBlbGVtZW50ID0gdGhpcy4kZWxlbWVudFswXTtcbiAgICBjb25zdCBmb3JtR3JvdXAgPSB0aGlzLmRvbS5nZXRDbG9zZXN0UGFyZW50QnlDbGFzc05hbWUoZWxlbWVudCwgJ2Zvcm0tZ3JvdXAnKTtcblxuICAgIGNvbnN0IGlzQ2hlY2tlZCA9IHRoaXMuaW50ZXJuYWxNb2RlbCAmJiB0aGlzLmludGVybmFsTW9kZWwubGVuZ3RoID4gMDtcbiAgICBjb25zdCBpc1JlcXVpcmVkID0gdGhpcy5uZ1JlcXVpcmVkO1xuXG4gICAgaWYgKCFpc0NoZWNrZWQgJiYgaXNSZXF1aXJlZCkge1xuICAgICAgdGhpcy4kbmdNb2RlbENvbnRyb2xsZXIuJHNldFZhbGlkaXR5KCdyZXF1aXJlZCcsIGZhbHNlKTtcbiAgICAgIGlmIChmb3JtR3JvdXApIHtcbiAgICAgICAgZm9ybUdyb3VwLmNsYXNzTGlzdC5hZGQoJ2hhcy1lcnJvcicpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLiRuZ01vZGVsQ29udHJvbGxlci4kc2V0VmFsaWRpdHkoJ3JlcXVpcmVkJywgdHJ1ZSk7XG4gICAgICBpZiAoZm9ybUdyb3VwKSB7XG4gICAgICAgIGZvcm1Hcm91cC5jbGFzc0xpc3QucmVtb3ZlKCdoYXMtZXJyb3InKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY29udmVydE1vZGVsVG9PcHRpb25zKG1vZGVsLCBvcHRpb25zKSB7XG4gIHJldHVybiBvcHRpb25zLm1hcChvcHRpb24gPT4gYWRkU2VsZWN0ZWRUb09wdGlvbihvcHRpb24sIG1vZGVsKSk7XG59XG5cbmZ1bmN0aW9uIGFkZFNlbGVjdGVkVG9PcHRpb24ob3B0aW9uLCBtb2RlbCkge1xuICBjb25zdCBzZWxlY3RlZCA9IGlzU2VsZWN0ZWQobW9kZWwsIG9wdGlvbik7XG4gIHJldHVybiB7IC4uLm9wdGlvbiwgc2VsZWN0ZWQgfTtcbn1cblxuZnVuY3Rpb24gY29udmVydE9wdGlvbnNUb01vZGVsKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnNcbiAgICAuZmlsdGVyKG9wdGlvbiA9PiBvcHRpb24uc2VsZWN0ZWQpXG4gICAgLm1hcChvcHRpb24gPT4gb3B0aW9uLnZhbHVlKTtcbn1cblxuZnVuY3Rpb24gaXNTZWxlY3RlZChtb2RlbCwgb3B0aW9uKSB7XG4gIHJldHVybiAhIShtb2RlbCAmJiBtb2RlbC5pbmRleE9mICYmIG1vZGVsLmluZGV4T2Yob3B0aW9uLnZhbHVlKSA+PSAwKTtcbn1cblxuQ2hlY2tib3hHcm91cENvbnRyb2xsZXIuJGluamVjdCA9IFsnJGVsZW1lbnQnLCAnVHdEb21TZXJ2aWNlJ107XG5cbmV4cG9ydCBkZWZhdWx0IENoZWNrYm94R3JvdXBDb250cm9sbGVyO1xuIiwiXG5pbXBvcnQgY29udHJvbGxlciBmcm9tICcuL2NoZWNrYm94LWdyb3VwLmNvbnRyb2xsZXIuanMnO1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vY2hlY2tib3gtZ3JvdXAuaHRtbCc7XG5cbmNvbnN0IENoZWNrYm94ID0ge1xuICBjb250cm9sbGVyLFxuICB0ZW1wbGF0ZSxcbiAgcmVxdWlyZToge1xuICAgICRuZ01vZGVsOiAnbmdNb2RlbCdcbiAgfSxcbiAgYmluZGluZ3M6IHtcbiAgICBuYW1lOiAnQCcsXG4gICAgbmdDaGFuZ2U6ICcmJyxcbiAgICBuZ01vZGVsOiAnPCcsXG4gICAgbmdSZXF1aXJlZDogJzwnLFxuICAgIG5nRGlzYWJsZWQ6ICc8JyxcbiAgICBvcHRpb25zOiAnPCcsXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENoZWNrYm94O1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgQ2hlY2tib3hHcm91cCBmcm9tICcuL2NoZWNrYm94LWdyb3VwLmNvbXBvbmVudC5qcyc7XG5pbXBvcnQgRG9tU2VydmljZSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9kb20nO1xuaW1wb3J0IEZvY3VzYWJsZSBmcm9tICcuLi9mb2N1c2FibGUnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuZm9ybXMuY2hlY2tib3gtZ3JvdXAnLCBbXG4gICAgRG9tU2VydmljZSxcbiAgICBGb2N1c2FibGVcbiAgXSlcbiAgLmNvbXBvbmVudCgndHdDaGVja2JveEdyb3VwJywgQ2hlY2tib3hHcm91cCkubmFtZTtcbiIsImNsYXNzIERhdGVDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoJGVsZW1lbnQsICRsb2csICRzY29wZSwgVHdEYXRlU2VydmljZSkge1xuICAgIGNvbnN0ICRuZ01vZGVsID0gJGVsZW1lbnQuY29udHJvbGxlcignbmdNb2RlbCcpO1xuXG4gICAgdGhpcy5EYXRlU2VydmljZSA9IFR3RGF0ZVNlcnZpY2U7XG4gICAgdGhpcy5pbml0aWFsaXNlZFdpdGhEYXRlID0gZmFsc2U7XG5cbiAgICBpZiAodGhpcy5uZ01vZGVsKSB7XG4gICAgICB0aGlzLmFwcGx5RGF0ZU1vZGVsSWZWYWxpZE9yVGhyb3dFcnJvcigpO1xuICAgICAgdGhpcy5pbml0aWFsaXNlZFdpdGhEYXRlID0gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHRoaXMubW9kZWxUeXBlKSB7XG4gICAgICAgIGlmICh0aGlzLm1vZGVsVHlwZSA9PT0gU1RSSU5HX1RZUEUgfHwgdGhpcy5tb2RlbFR5cGUgPT09IE9CSkVDVF9UWVBFKSB7XG4gICAgICAgICAgdGhpcy5kYXRlTW9kZWxUeXBlID0gdGhpcy5tb2RlbFR5cGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIG1vZGVsVHlwZSwgc2hvdWxkIGJlICR7U1RSSU5HX1RZUEV9IG9yICR7T0JKRUNUX1RZUEV9YCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZGF0ZU1vZGVsVHlwZSA9IE9CSkVDVF9UWVBFO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmRheSA9IG51bGw7XG4gICAgICB0aGlzLm1vbnRoID0gMDtcbiAgICAgIHRoaXMueWVhciA9IG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy5zZXREYXRlUmVxdWlyZWQoKTtcbiAgICB0aGlzLnNldERhdGVEaXNhYmxlZCgpO1xuICAgIHRoaXMuc2V0RGF0ZUxvY2FsZSgpO1xuXG4gICAgdGhpcy5zZXRNb250aHMoKTtcblxuICAgIHRoaXMuYWRkVmFsaWRhdG9ycygkbmdNb2RlbCk7XG4gICAgdGhpcy5hZGRXYXRjaGVycygkc2NvcGUsICRuZ01vZGVsKTtcbiAgICBhZGRGb2N1c0hhbmRsZXJzKCRlbGVtZW50KTtcbiAgICBhZGRCbHVySGFuZGxlcnMoJGVsZW1lbnQsICRuZ01vZGVsKTtcbiAgfVxuXG5cbiAgYXBwbHlEYXRlTW9kZWxJZlZhbGlkT3JUaHJvd0Vycm9yKCkge1xuICAgIGlmICh2YWxpZERhdGUodGhpcy5uZ01vZGVsKSkge1xuICAgICAgdGhpcy5kYXRlTW9kZWxUeXBlID0gdHlwZW9mIHRoaXMubmdNb2RlbCA9PT0gJ3N0cmluZycgPyBTVFJJTkdfVFlQRSA6IE9CSkVDVF9UWVBFO1xuXG4gICAgICB0aGlzLmV4cGxvZGVEYXRlTW9kZWwodGhpcy5uZ01vZGVsKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdkYXRlIG1vZGVsIHBhc3NlZCBzaG91bGQgZWl0aGVyIGJlIGluc3RhbmNlIG9mICdcbiAgICAgICAgKyAnRGF0ZSBvciB2YWxpZCBJU084NjAxIHN0cmluZycpO1xuICAgIH1cbiAgfVxuXG4gIHNldE1vbnRocygpIHtcbiAgICB0aGlzLmRhdGVNb250aHMgPSB0aGlzLmdldE1vbnRoc0Jhc2VkT25JbnRsU3VwcG9ydEZvckxvY2FsZSgpO1xuICB9XG5cbiAgc2V0RGF0ZVJlcXVpcmVkKCkge1xuICAgIHRoaXMuZGF0ZVJlcXVpcmVkID0gdGhpcy5uZ1JlcXVpcmVkICE9PSB1bmRlZmluZWRcbiAgICAgID8gdGhpcy5uZ1JlcXVpcmVkXG4gICAgICA6IHRoaXMucmVxdWlyZWQgIT09IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHNldERhdGVEaXNhYmxlZCgpIHtcbiAgICB0aGlzLmRhdGVEaXNhYmxlZCA9IHRoaXMubmdEaXNhYmxlZCAhPT0gdW5kZWZpbmVkXG4gICAgICA/IHRoaXMubmdEaXNhYmxlZFxuICAgICAgOiB0aGlzLmRpc2FibGVkICE9PSB1bmRlZmluZWQ7XG4gIH1cblxuICBzZXREYXRlTG9jYWxlKCkge1xuICAgIGlmICghdGhpcy5sb2NhbGUpIHtcbiAgICAgIHRoaXMubG9jYWxlID0gREVGQVVMVF9MT0NBTEVfRU47XG4gICAgfVxuICAgIHRoaXMubW9udGhCZWZvcmVEYXkgPSB0aGlzLkRhdGVTZXJ2aWNlLmlzTW9udGhCZWZvcmVEYXkodGhpcy5sb2NhbGUpO1xuICB9XG5cbiAgZXhwbG9kZURhdGVNb2RlbChkYXRlKSB7XG4gICAgY29uc3QgZGF0ZU9iaiA9IHR5cGVvZiBkYXRlID09PSAnc3RyaW5nJyA/IG5ldyBEYXRlKGRhdGUpIDogZGF0ZTtcblxuICAgIHRoaXMuZGF5ID0gZGF0ZU9iai5nZXRVVENEYXRlKCk7XG4gICAgdGhpcy5tb250aCA9IGRhdGVPYmouZ2V0VVRDTW9udGgoKTtcbiAgICB0aGlzLnllYXIgPSBkYXRlT2JqLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIH1cblxuICBhZGRWYWxpZGF0b3JzKCRuZ01vZGVsKSB7XG4gICAgJG5nTW9kZWwuJHZhbGlkYXRvcnMubWluID0gKHZhbHVlKSA9PiB7XG4gICAgICBjb25zdCBsaW1pdCA9IHByZXBEYXRlTGltaXRGb3JDb21wYXJpc29uKHRoaXMubmdNaW4sIHRoaXMubWluKTtcbiAgICAgIGNvbnN0IGRhdGVWYWx1ZSA9IHByZXBEYXRlVmFsdWVGb3JDb21wYXJpc29uKHZhbHVlKTtcblxuICAgICAgcmV0dXJuICFsaW1pdCB8fCAhZGF0ZVZhbHVlIHx8IGRhdGVWYWx1ZSA+PSBsaW1pdDtcbiAgICB9O1xuXG4gICAgJG5nTW9kZWwuJHZhbGlkYXRvcnMubWF4ID0gKHZhbHVlKSA9PiB7XG4gICAgICBjb25zdCBsaW1pdCA9IHByZXBEYXRlTGltaXRGb3JDb21wYXJpc29uKHRoaXMubmdNYXgsIHRoaXMubWF4KTtcbiAgICAgIGNvbnN0IGRhdGVWYWx1ZSA9IHByZXBEYXRlVmFsdWVGb3JDb21wYXJpc29uKHZhbHVlKTtcblxuICAgICAgcmV0dXJuICFsaW1pdCB8fCAhZGF0ZVZhbHVlIHx8IGRhdGVWYWx1ZSA8PSBsaW1pdDtcbiAgICB9O1xuICB9XG5cbiAgYWRkV2F0Y2hlcnMoJHNjb3BlLCAkbmdNb2RlbCkge1xuICAgICRzY29wZS4kd2F0Y2goJyRjdHJsLmRheScsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHtcbiAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUgJiYgdGhpcy5pbml0aWFsaXNlZFdpdGhEYXRlKSB7XG4gICAgICAgICRuZ01vZGVsLiRzZXREaXJ0eSgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgJHNjb3BlLiR3YXRjaCgnJGN0cmwubW9udGgnLCAobmV3VmFsdWUsIG9sZFZhbHVlKSA9PiB7XG4gICAgICBpZiAobmV3VmFsdWUgIT09IG9sZFZhbHVlKSB7XG4gICAgICAgIHRoaXMuYWRqdXN0TGFzdERheSgpO1xuICAgICAgICAkbmdNb2RlbC4kc2V0VG91Y2hlZCgpOyAvLyBJbnB1dCB3YXRjaGVyIGRvZXNuJ3Qgd29yayBmb3IgbW9udGhcbiAgICAgICAgaWYgKHRoaXMuaW5pdGlhbGlzZWRXaXRoRGF0ZSkge1xuICAgICAgICAgICRuZ01vZGVsLiRzZXREaXJ0eSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAkc2NvcGUuJHdhdGNoKCckY3RybC55ZWFyJywgKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgPT4ge1xuICAgICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSAmJiB0aGlzLmluaXRpYWxpc2VkV2l0aERhdGUpIHtcbiAgICAgICAgJG5nTW9kZWwuJHNldERpcnR5KCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAkc2NvcGUuJHdhdGNoKCckY3RybC5uZ01vZGVsJywgKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgPT4ge1xuICAgICAgaWYgKG5ld1ZhbHVlID09PSBvbGRWYWx1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmICh2YWxpZERhdGUodGhpcy5uZ01vZGVsKSkge1xuICAgICAgICAkbmdNb2RlbC4kc2V0RGlydHkoKTtcbiAgICAgICAgdGhpcy5leHBsb2RlRGF0ZU1vZGVsKHRoaXMubmdNb2RlbCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAkc2NvcGUuJHdhdGNoKCckY3RybC5uZ1JlcXVpcmVkJywgKG5ld1ZhbHVlLCBvbGRWYWx1ZSkgPT4ge1xuICAgICAgaWYgKG5ld1ZhbHVlICE9PSBvbGRWYWx1ZSkge1xuICAgICAgICB0aGlzLnNldERhdGVSZXF1aXJlZCgpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgJHNjb3BlLiR3YXRjaCgnJGN0cmwubmdEaXNhYmxlZCcsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHtcbiAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgICAgdGhpcy5zZXREYXRlRGlzYWJsZWQoKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgICRzY29wZS4kd2F0Y2goJyRjdHJsLmxvY2FsZScsIChuZXdWYWx1ZSwgb2xkVmFsdWUpID0+IHtcbiAgICAgIGlmIChuZXdWYWx1ZSAhPT0gb2xkVmFsdWUpIHtcbiAgICAgICAgdGhpcy5zZXREYXRlTG9jYWxlKCk7XG4gICAgICAgIHRoaXMuc2V0TW9udGhzKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBnZXRNb250aHNCYXNlZE9uSW50bFN1cHBvcnRGb3JMb2NhbGUoKSB7XG4gICAgY29uc3QgbW9udGhOYW1lcyA9IHRoaXMuRGF0ZVNlcnZpY2UuZ2V0TW9udGhOYW1lc0ZvckxvY2FsZSh0aGlzLmxvY2FsZSk7XG5cbiAgICByZXR1cm4gZXh0ZW5kTW9udGhzV2l0aElkcyhtb250aE5hbWVzKTtcbiAgfVxuXG4gIGNvbWJpbmVEYXRlKCkge1xuICAgIHJldHVybiB0aGlzLkRhdGVTZXJ2aWNlLmdldFVUQ0RhdGVGcm9tUGFydHMoXG4gICAgICBOdW1iZXIodGhpcy55ZWFyKSxcbiAgICAgIE51bWJlcih0aGlzLm1vbnRoKSxcbiAgICAgIE51bWJlcih0aGlzLmRheSlcbiAgICApO1xuICB9XG5cbiAgdXBkYXRlRGF0ZU1vZGVsQW5kVmFsaWRhdGlvbkNsYXNzZXMoKSB7XG4gICAgdGhpcy5hZGp1c3RMYXN0RGF5KCk7XG5cbiAgICBpZiAoIWlzRXhwbG9kZWREYXRlUGF0dGVybkNvcnJlY3QodGhpcy55ZWFyLCB0aGlzLm1vbnRoLCB0aGlzLmRheSkpIHtcbiAgICAgIHRoaXMuJG5nTW9kZWwuJHNldFZpZXdWYWx1ZShudWxsKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBkYXRlT2JqID0gdGhpcy5jb21iaW5lRGF0ZSgpO1xuXG4gICAgaWYgKHRoaXMuZGF0ZU1vZGVsVHlwZSA9PT0gU1RSSU5HX1RZUEUpIHtcbiAgICAgIGNvbnN0IGlzb1N0cmluZyA9IGRhdGVPYmoudG9JU09TdHJpbmcoKTtcbiAgICAgIGNvbnN0IGRhdGVTdHJpbmcgPSBpc29TdHJpbmcuc3Vic3RyaW5nKDAsIGlzb1N0cmluZy5pbmRleE9mKCdUJykpO1xuXG4gICAgICB0aGlzLiRuZ01vZGVsLiRzZXRWaWV3VmFsdWUoZGF0ZVN0cmluZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuJG5nTW9kZWwuJHNldFZpZXdWYWx1ZShkYXRlT2JqKTtcbiAgICB9XG4gIH1cblxuICBhZGp1c3RMYXN0RGF5KCkge1xuICAgIGNvbnN0IGRheSA9IE51bWJlcih0aGlzLmRheSk7XG4gICAgY29uc3QgbW9udGggPSBOdW1iZXIodGhpcy5tb250aCk7XG4gICAgY29uc3QgeWVhciA9IE51bWJlcih0aGlzLnllYXIpO1xuXG4gICAgY29uc3QgbGFzdFVUQ0RheUZvck1vbnRoQW5kWWVhciA9IHRoaXMuRGF0ZVNlcnZpY2UuZ2V0TGFzdERheU9mTW9udGgoeWVhciwgbW9udGgpO1xuXG4gICAgaWYgKGRheSA+IGxhc3RVVENEYXlGb3JNb250aEFuZFllYXIpIHtcbiAgICAgIC8vIFVzaW5nIHNldFZpZXdWYWx1ZSBkb2VzIG5vdCB1cGRhdGUgRE9NLCBvbmx5IG1vZGVsLlxuICAgICAgdGhpcy5kYXkgPSBwYXJzZUludChsYXN0VVRDRGF5Rm9yTW9udGhBbmRZZWFyLCAxMCk7XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IERFRkFVTFRfTE9DQUxFX0VOID0gJ2VuJztcbmNvbnN0IFNUUklOR19UWVBFID0gJ3N0cmluZyc7XG5jb25zdCBPQkpFQ1RfVFlQRSA9ICdvYmplY3QnO1xuXG5mdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJztcbn1cblxuZnVuY3Rpb24gaXNOdW1lcmljU3RyaW5nKHZhbHVlKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1yZXN0cmljdGVkLWdsb2JhbHNcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgIWlzTmFOKE51bWJlcih2YWx1ZSkpO1xufVxuXG5mdW5jdGlvbiBpc0V4cGxvZGVkRGF0ZVBhdHRlcm5Db3JyZWN0KHllYXIsIG1vbnRoLCBkYXkpIHtcbiAgcmV0dXJuIGlzTnVtYmVyKHllYXIpXG4gICAgJiYgaXNOdW1iZXIoZGF5KVxuICAgICYmIChpc051bWJlcihtb250aCkgfHwgaXNOdW1lcmljU3RyaW5nKG1vbnRoKSk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkRGF0ZShkYXRlKSB7XG4gIHJldHVybiB2YWxpZERhdGVPYmplY3QoZGF0ZSkgfHwgdmFsaWREYXRlU3RyaW5nKGRhdGUpO1xufVxuXG5mdW5jdGlvbiB2YWxpZERhdGVPYmplY3QoZGF0ZU9iaikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGRhdGVPYmopID09PSAnW29iamVjdCBEYXRlXSdcbiAgICAmJiAhaXNOYU4oZGF0ZU9iai5nZXRUaW1lKCkpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtZ2xvYmFsc1xufVxuXG5mdW5jdGlvbiB2YWxpZERhdGVTdHJpbmcoZGF0ZVN0cmluZykge1xuICByZXR1cm4gdHlwZW9mIGRhdGVTdHJpbmcgPT09ICdzdHJpbmcnICYmIHZhbGlkRGF0ZU9iamVjdChuZXcgRGF0ZShkYXRlU3RyaW5nKSk7XG59XG5cbmZ1bmN0aW9uIHByZXBEYXRlTGltaXRGb3JDb21wYXJpc29uKG5nTGltaXQsIGF0dHJMaW1pdCkge1xuICBsZXQgbGltaXQgPSBuZ0xpbWl0IHx8IGF0dHJMaW1pdDtcblxuICBpZiAoIWxpbWl0KSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIGxpbWl0ID0gdHlwZW9mIGxpbWl0ID09PSAnc3RyaW5nJyA/IG5ldyBEYXRlKGxpbWl0KSA6IGxpbWl0O1xuICBpZiAoIXZhbGlkRGF0ZU9iamVjdChsaW1pdCkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIGxpbWl0O1xufVxuXG5mdW5jdGlvbiBwcmVwRGF0ZVZhbHVlRm9yQ29tcGFyaXNvbihkYXRlVmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiBkYXRlVmFsdWUgPT09ICdzdHJpbmcnID8gbmV3IERhdGUoZGF0ZVZhbHVlKSA6IGRhdGVWYWx1ZTtcbn1cblxuZnVuY3Rpb24gZXh0ZW5kTW9udGhzV2l0aElkcyhtb250aE5hbWVzKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBhcnJvdy1ib2R5LXN0eWxlXG4gIHJldHVybiBtb250aE5hbWVzLm1hcCgobW9udGhOYW1lLCBpbmRleCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogaW5kZXgsXG4gICAgICBsYWJlbDogbW9udGhOYW1lXG4gICAgfTtcbiAgfSk7XG59XG5cbi8vIFRPRE8gYmVoYXZpb3VyIG9mIGZvY3VzL2JsdXIgY291bGQgYmUgaW1wcm92ZWQgdG8gcHJldmVudCBtdWx0aXBsZSBmaXJlc1xuZnVuY3Rpb24gYWRkRm9jdXNIYW5kbGVycygkZWxlbWVudCkge1xuICBjb25zdCBlbGVtZW50ID0gJGVsZW1lbnRbMF07XG4gIGNvbnN0IGRheUlucHV0ID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPWRheV0nKTtcbiAgY29uc3QgeWVhcklucHV0ID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPXllYXJdJyk7XG5cbiAgZGF5SW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCAoKSA9PiB7XG4gICAgZWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnZm9jdXMnKSk7XG4gIH0pO1xuXG4gIHllYXJJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsICgpID0+IHtcbiAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdmb2N1cycpKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZEJsdXJIYW5kbGVycygkZWxlbWVudCwgJG5nTW9kZWwpIHtcbiAgbGV0IGRheVRvdWNoZWQ7XG4gIGxldCB5ZWFyVG91Y2hlZDtcblxuICBjb25zdCBlbGVtZW50ID0gJGVsZW1lbnRbMF07XG4gIGNvbnN0IGRheUlucHV0ID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPWRheV0nKTtcbiAgY29uc3QgeWVhcklucHV0ID0gZWxlbWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dFtuYW1lPXllYXJdJyk7XG5cbiAgZGF5SW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsICgpID0+IHtcbiAgICBkYXlUb3VjaGVkID0gdHJ1ZTtcbiAgICBpZiAoZGF5VG91Y2hlZCAmJiB5ZWFyVG91Y2hlZCkge1xuICAgICAgJG5nTW9kZWwuJHNldFRvdWNoZWQoKTtcbiAgICAgIGVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2JsdXInKSk7XG4gICAgfVxuICB9KTtcblxuICB5ZWFySW5wdXQuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsICgpID0+IHtcbiAgICB5ZWFyVG91Y2hlZCA9IHRydWU7XG4gICAgJG5nTW9kZWwuJHNldFRvdWNoZWQoKTtcbiAgICBlbGVtZW50LmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdibHVyJykpO1xuICB9KTtcbn1cblxuRGF0ZUNvbnRyb2xsZXIuJGluamVjdCA9IFtcbiAgJyRlbGVtZW50JyxcbiAgJyRsb2cnLFxuICAnJHNjb3BlJyxcbiAgJ1R3RGF0ZVNlcnZpY2UnXG5dO1xuXG5leHBvcnQgZGVmYXVsdCBEYXRlQ29udHJvbGxlcjtcbiIsImltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vZGF0ZS5jb250cm9sbGVyLmpzJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL2RhdGUuaHRtbCc7XG5cbmNvbnN0IERhdGVDb250cm9sID0ge1xuICBjb250cm9sbGVyLFxuICB0ZW1wbGF0ZSxcbiAgcmVxdWlyZToge1xuICAgICRuZ01vZGVsOiAnbmdNb2RlbCdcbiAgfSxcbiAgYmluZGluZ3M6IHtcbiAgICBuZ01vZGVsOiAnPScsXG4gICAgcmVxdWlyZWQ6ICdAJyxcbiAgICBuZ1JlcXVpcmVkOiAnPCcsXG4gICAgZGlzYWJsZWQ6ICdAJyxcbiAgICBuZ0Rpc2FibGVkOiAnPCcsXG4gICAgbG9jYWxlOiAnQCcsXG4gICAgdHdMb2NhbGU6ICc8JyxcbiAgICBtaW46ICdAJyxcbiAgICBuZ01pbjogJzwnLFxuICAgIG1heDogJ0AnLFxuICAgIG5nTWF4OiAnPCcsXG4gICAgbW9kZWxUeXBlOiAnQCdcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgRGF0ZUNvbnRyb2w7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBEYXRlQ29udHJvbCBmcm9tICcuL2RhdGUuY29tcG9uZW50JztcbmltcG9ydCBEYXRlU2VydmljZSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9kYXRlJztcbmltcG9ydCBEYXRlRm9ybWF0IGZyb20gJy4uLy4uL2Zvcm1hdHRpbmcvZGF0ZS1mb3JtYXQnO1xuaW1wb3J0IFNlbGVjdCBmcm9tICcuLi9zZWxlY3QnO1xuaW1wb3J0IEZvY3VzYWJsZSBmcm9tICcuLi9mb2N1c2FibGUnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuZm9ybXMuZGF0ZScsIFtcbiAgICBEYXRlU2VydmljZSxcbiAgICBEYXRlRm9ybWF0LFxuICAgIFNlbGVjdCxcbiAgICBGb2N1c2FibGVcbiAgXSlcbiAgLmNvbXBvbmVudCgndHdEYXRlJywgRGF0ZUNvbnRyb2wpLm5hbWU7XG4iLCJpbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi9kYXRlLWZvcm1hdC5odG1sJztcblxuY29uc3QgRGF0ZURpc3BsYXkgPSB7XG4gIHRlbXBsYXRlLFxuICBiaW5kaW5nczoge1xuICAgIGRhdGU6ICc8JyxcbiAgICBsb2NhbGU6ICc8JyxcbiAgICBmb3JtYXQ6ICc8J1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBEYXRlRGlzcGxheTtcbiIsIlxuZnVuY3Rpb24gRGF0ZUZvcm1hdEZpbHRlcihUd0RhdGVTZXJ2aWNlKSB7XG4gIHJldHVybiAoZGF0ZVN1cHBsaWVkLCBsb2NhbGUsIGZvcm1hdCkgPT4ge1xuICAgIGlmICghZGF0ZVN1cHBsaWVkKSB7XG4gICAgICByZXR1cm4gZGF0ZVN1cHBsaWVkO1xuICAgIH1cbiAgICBsZXQgZGF0ZSA9IGRhdGVTdXBwbGllZDtcblxuICAgIGlmICh0eXBlb2YgZGF0ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGRhdGUgPSBUd0RhdGVTZXJ2aWNlLmdldFVUQ0RhdGVGcm9tSXNvKGRhdGUpO1xuXG4gICAgICBjb25zdCBkYXRlT25seSA9IG5ldyBSZWdFeHAoJ15bMC05XXs0fS1bMC05XXsyfS1bMC05XXsyfSQnKTsgLy8geXl5eS1tbS1kZFxuICAgICAgaWYgKGRhdGVPbmx5LnRlc3QoZGF0ZVN1cHBsaWVkKSkge1xuICAgICAgICByZXR1cm4gVHdEYXRlU2VydmljZS5nZXRVVENEYXRlU3RyaW5nKGRhdGUsIGxvY2FsZSwgZm9ybWF0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWRhdGUpIHsgcmV0dXJuIGRhdGVTdXBwbGllZDsgfVxuICAgIC8vIFVzZSBsb2NhbGUgdGltZXpvbmVcbiAgICByZXR1cm4gVHdEYXRlU2VydmljZS5nZXRMb2NhbGVEYXRlU3RyaW5nKGRhdGUsIGxvY2FsZSwgZm9ybWF0KTtcbiAgfTtcbn1cblxuRGF0ZUZvcm1hdEZpbHRlci4kaW5qZWN0ID0gWydUd0RhdGVTZXJ2aWNlJ107XG5cbmV4cG9ydCBkZWZhdWx0IERhdGVGb3JtYXRGaWx0ZXI7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBEYXRlRm9ybWF0IGZyb20gJy4vZGF0ZS1mb3JtYXQuY29tcG9uZW50JztcbmltcG9ydCBEYXRlRmlsdGVyIGZyb20gJy4vZGF0ZS1mb3JtYXQuZmlsdGVyJztcbmltcG9ydCBEYXRlU2VydmljZSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9kYXRlJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmZvcm1hdHRpbmcuZGF0ZScsIFtcbiAgICBEYXRlU2VydmljZVxuICBdKVxuICAuY29tcG9uZW50KCd0d0RhdGVGb3JtYXQnLCBEYXRlRm9ybWF0KVxuICAuZmlsdGVyKCd0d0RhdGVGb3JtYXQnLCBEYXRlRmlsdGVyKVxuICAubmFtZTtcbiIsImxldCAkY3RybDtcblxuY2xhc3MgRm9ybUNvbnRyb2xDb250cm9sbGVyIHtcbiAgY29uc3RydWN0b3IoJGVsZW1lbnQpIHtcbiAgICB0aGlzLiRlbGVtZW50ID0gJGVsZW1lbnQ7XG4gICAgdGhpcy5lbGVtZW50ID0gJGVsZW1lbnRbMF07XG5cbiAgICAvLyBUaGlzIGlzIGEgYml0IGxhbWUsIGJ1dCBuZWNlc3NhcnkgZHVlIHRvIHRoZSB3YXkgdHdVcGxvYWQncyBjYWxsYmFja3Mgd29ya1xuICAgIC8vIEJlY2F1c2UgdGhleSB1c2UgJz0nLCBub3QgJyYnLCB3ZSBsb3NlIHJlZmVyZW5jZSB0byB0aGlzIGNvbnRyb2xsZXIuXG4gICAgJGN0cmwgPSB0aGlzO1xuICB9XG5cbiAgJG9uSW5pdCgpIHtcbiAgICB0aGlzLiRuZ01vZGVsID0gdGhpcy4kZWxlbWVudC5jb250cm9sbGVyKCduZ01vZGVsJyk7XG4gICAgdGhpcy5hZGRWYWxpZGF0b3JzKCk7XG5cbiAgICBpZiAoIXRoaXMudXBsb2FkT3B0aW9ucykge1xuICAgICAgdGhpcy51cGxvYWRPcHRpb25zID0ge307XG4gICAgfVxuICB9XG5cbiAgY2hhbmdlKCkge1xuICAgIHRoaXMuJG5nTW9kZWwuJHNldERpcnR5KCk7XG5cbiAgICAvLyBQYXNzIGludGVybmFsIHZhbHVlIHRocm91Z2ggb3VyIHZhbGlkYXRvcnNcbiAgICB0aGlzLiRuZ01vZGVsLiRzZXRWaWV3VmFsdWUodGhpcy5pbnRlcm5hbE1vZGVsKTtcbiAgfVxuXG4gIGZvY3VzKCkge1xuICAgIHRoaXMuZWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgnZm9jdXMnKSk7XG4gIH1cblxuICBibHVyKCkge1xuICAgIHRoaXMuJG5nTW9kZWwuJHNldFRvdWNoZWQoKTtcbiAgICB0aGlzLmVsZW1lbnQuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoJ2JsdXInKSk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgb25Bc3luY1VwbG9hZFN1Y2Nlc3MoZmlsZSwgcmVzcG9uc2UpIHtcbiAgICBpZiAoJGN0cmwub25Bc3luY1N1Y2Nlc3MpIHtcbiAgICAgICRjdHJsLm9uQXN5bmNTdWNjZXNzKHsgcmVzcG9uc2UgfSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIG9uQXN5bmNVcGxvYWRGYWlsdXJlKHJlc3BvbnNlKSB7XG4gICAgaWYgKCRjdHJsLm9uQXN5bmNGYWlsdXJlKSB7XG4gICAgICAkY3RybC5vbkFzeW5jRmFpbHVyZSh7IHJlc3BvbnNlIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBhdXRvY29tcGxldGUgaGlkZXMgb3VyIGZvcm0gaGVscCBzbyB3ZSBuZWVkIHRvIGRpc2FibGUgaXQgd2hlbiBoZWxwIHRleHRcbiAgICogaXMgcHJlc2VudC4gQ2hyb21lIGlnbm9yZXMgYXV0b2NvbXBsZXRlPW9mZiwgdGhlIG9ubHkgd2F5IHRvIGRpc2FibGUgaXQgaXNcbiAgICogdG8gcHJvdmlkZSBhbiAnaW52YWxpZCcgdmFsdWUsIGZvciB3aGljaCAnZGlzYWJsZWQnIHNlcnZlcy5cbiAgICovXG4gIGdldEF1dG9jb21wbGV0ZVN0YXR1cygpIHtcbiAgICByZXR1cm4gdGhpcy5oZWxwICYmICh0aGlzLmhlbHAubWVzc2FnZSB8fCB0aGlzLmhlbHAubGlzdCB8fCB0aGlzLmhlbHAuaW1hZ2UpXG4gICAgICA/ICdkaXNhYmxlZCdcbiAgICAgIDogJ29uJztcbiAgfVxuXG4gIGFkZFZhbGlkYXRvcnMoKSB7XG4gICAgY29uc3QgJG5nTW9kZWwgPSB0aGlzLiRuZ01vZGVsO1xuXG4gICAgJG5nTW9kZWwuJGZvcm1hdHRlcnMucHVzaCgobW9kZWxWYWx1ZSkgPT4ge1xuICAgICAgdGhpcy5pbnRlcm5hbE1vZGVsID0gbW9kZWxWYWx1ZTtcbiAgICAgIHJldHVybiBtb2RlbFZhbHVlO1xuICAgIH0pO1xuICB9XG59XG5cbkZvcm1Db250cm9sQ29udHJvbGxlci4kaW5qZWN0ID0gWyckZWxlbWVudCddO1xuXG5leHBvcnQgZGVmYXVsdCBGb3JtQ29udHJvbENvbnRyb2xsZXI7XG4iLCJpbXBvcnQgY29udHJvbGxlciBmcm9tICcuL2Zvcm0tY29udHJvbC5jb250cm9sbGVyLmpzJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL2Zvcm0tY29udHJvbC5odG1sJztcblxuY29uc3QgRm9ybUNvbnRyb2wgPSB7XG4gIGNvbnRyb2xsZXIsXG4gIHRlbXBsYXRlLFxuICByZXF1aXJlOiB7XG4gICAgJG5nTW9kZWw6ICduZ01vZGVsJ1xuICB9LFxuICBiaW5kaW5nczoge1xuICAgIHR5cGU6ICdAJyxcbiAgICBuYW1lOiAnQCcsXG4gICAgaWQ6ICdAJyxcbiAgICBsYWJlbDogJ0AnLFxuICAgIGRlc2NyaXB0aW9uOiAnQCcsXG4gICAgcGxhY2Vob2xkZXI6ICdAJyxcbiAgICBzdGVwOiAnQCcsXG4gICAgbG9jYWxlOiAnQCcsXG4gICAgdXBsb2FkQWNjZXB0OiAnQCcsXG4gICAgdXBsb2FkSWNvbjogJ0AnLFxuICAgIHVwbG9hZFRvb0xhcmdlTWVzc2FnZTogJ0AnLFxuICAgIG9wdGlvbnM6ICc8JyxcblxuICAgIG5nTW9kZWw6ICc9JyxcbiAgICBuZ0NoYW5nZTogJyYnLFxuICAgIG5nRm9jdXM6ICcmJyxcbiAgICBuZ0JsdXI6ICcmJyxcbiAgICBuZ0Rpc2FibGVkOiAnPCcsXG5cbiAgICB1cGxvYWRPcHRpb25zOiAnPCcsXG4gICAgaGVscDogJzxoZWxwT3B0aW9ucycsXG4gICAgdGV4dEZvcm1hdDogJzwnLFxuICAgIHZhbGlkYXRpb25Bc3luYzogJzwnLFxuICAgIHBlcnNpc3RBc3luYzogJzwnLFxuICAgIG9uQXN5bmNGYWlsdXJlOiAnJicsXG4gICAgb25Bc3luY1N1Y2Nlc3M6ICcmJyxcbiAgICAvLyBMaXZlIGNhcHR1cmUgcGFyYW1ldGVycyBmb3IgdXBsb2FkIGNvbXBvbmVudFxuICAgIGZpbGVVcGxvYWRTb3VyY2U6ICc8JyxcbiAgICBjYW1lcmFPcHRpb25zOiAnPCdcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgRm9ybUNvbnRyb2w7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBTZWxlY3QgZnJvbSAnLi4vc2VsZWN0JztcbmltcG9ydCBSYWRpbyBmcm9tICcuLi9yYWRpbyc7XG5pbXBvcnQgQ2hlY2tib3ggZnJvbSAnLi4vY2hlY2tib3gnO1xuaW1wb3J0IENoZWNrYm94R3JvdXAgZnJvbSAnLi4vY2hlY2tib3gtZ3JvdXAnO1xuaW1wb3J0IERhdGVDb250cm9sIGZyb20gJy4uL2RhdGUnO1xuaW1wb3J0IFVwbG9hZCBmcm9tICcuLi91cGxvYWQnO1xuXG5pbXBvcnQgRm9ybUNvbnRyb2wgZnJvbSAnLi9mb3JtLWNvbnRyb2wuY29tcG9uZW50LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmZvcm1zLmZvcm0tY29udHJvbCcsIFtcbiAgICBTZWxlY3QsXG4gICAgUmFkaW8sXG4gICAgQ2hlY2tib3gsXG4gICAgQ2hlY2tib3hHcm91cCxcbiAgICBEYXRlQ29udHJvbCxcbiAgICBVcGxvYWRcbiAgXSlcbiAgLmNvbXBvbmVudCgndHdGb3JtQ29udHJvbCcsIEZvcm1Db250cm9sKVxuICAuY29tcG9uZW50KCd0d0R5bmFtaWNGb3JtQ29udHJvbCcsIEZvcm1Db250cm9sKSAvLyBEZXByZWNhdGVkXG4gIC5uYW1lO1xuIiwiaW1wb3J0IHsgZ2V0VmFsaWRhdGlvbkZhaWx1cmVzIH0gZnJvbSAnLi4vLi4vanNvbi1zY2hlbWEvdmFsaWRhdGlvbi92YWxpZGF0aW9uLWZhaWx1cmVzJztcbmltcG9ydCB7IGlzTnVsbCwgaXNVbmRlZmluZWQgfSBmcm9tICcuLi8uLi9qc29uLXNjaGVtYS92YWxpZGF0aW9uL3R5cGUtdmFsaWRhdG9ycyc7XG5cbmNsYXNzIEZpZWxkQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKFJlcXVpcmVtZW50c1NlcnZpY2UpIHtcbiAgICB0aGlzLlJlcXVpcmVtZW50c1NlcnZpY2UgPSBSZXF1aXJlbWVudHNTZXJ2aWNlO1xuICAgIHRoaXMuY2hhbmdlZCA9IGZhbHNlO1xuICAgIHRoaXMudG91Y2hlZCA9IGZhbHNlO1xuICB9XG5cbiAgJG9uQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuaW5pdGlhbEZpZWxkKSB7XG4gICAgICB0aGlzLmZpZWxkID0gdGhpcy5SZXF1aXJlbWVudHNTZXJ2aWNlLnByZXBGaWVsZCh0aGlzLmluaXRpYWxGaWVsZCk7XG5cbiAgICAgIHRoaXMuY29udHJvbCA9IHRoaXMuUmVxdWlyZW1lbnRzU2VydmljZS5nZXRDb250cm9sVHlwZShjaGFuZ2VzLmluaXRpYWxGaWVsZC5jdXJyZW50VmFsdWUpO1xuXG4gICAgICAvLyBUT0RPIHdlIHNob3VsZCBwcm9iYWJseSBkbyB0aGlzIGF0IGZpZWxkc2V0IGxldmVsLCBzbyB0aGUgbW9kZWwgaXMgYXZhaWxhYmxlXG4gICAgICBpZiAodGhpcy5maWVsZC52YWx1ZXNBc3luYykge1xuICAgICAgICB0aGlzLlJlcXVpcmVtZW50c1NlcnZpY2UucHJlcFZhbHVlc0FzeW5jKHRoaXMuZmllbGQsIHt9KTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhlIGZpZWxkIGlzIHJlcXVpcmVkLCBhbmQgb25seSBhbGxvd3Mgb25lIHZhbHVlLCBzZXQgaXQgdG8gdGhhdFxuICAgICAgaWYgKHRoaXMucmVxdWlyZWQgJiYgdGhpcy5maWVsZC5lbnVtICYmIHRoaXMuZmllbGQuZW51bS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgdGhpcy5tb2RlbCA9IHRoaXMuZmllbGQuZW51bVswXTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZmllbGQuZGVmYXVsdCAmJiAhdGhpcy5tb2RlbCkge1xuICAgICAgICB0aGlzLm1vZGVsID0gdGhpcy5maWVsZC5kZWZhdWx0O1xuICAgICAgfVxuXG4gICAgICBjb25zdCBnbG9iYWxWYWxpZGF0aW9uTWVzc2FnZXMgPSB0aGlzLnZhbGlkYXRpb25NZXNzYWdlcyB8fCB7fTtcbiAgICAgIGNvbnN0IGZpZWxkVmFsaWRhdGlvbk1lc3NhZ2VzID0gdGhpcy5maWVsZC52YWxpZGF0aW9uTWVzc2FnZXMgfHwge307XG5cbiAgICAgIHRoaXMudmFsaWRhdGlvblN0cmluZ3MgPSB7IC4uLmdsb2JhbFZhbGlkYXRpb25NZXNzYWdlcywgLi4uZmllbGRWYWxpZGF0aW9uTWVzc2FnZXMgfTtcblxuICAgICAgdGhpcy52YWxpZGF0ZSh0aGlzLm1vZGVsKTtcbiAgICB9XG4gIH1cblxuICBvbkZvY3VzKCkge1xuICAgIGlmICh0aGlzLmZvY3VzSGFuZGxlcikge1xuICAgICAgdGhpcy5mb2N1c0hhbmRsZXIoKTtcbiAgICB9XG4gIH1cblxuICBvbkJsdXIoKSB7XG4gICAgdGhpcy50b3VjaGVkID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLmJsdXJIYW5kbGVyKSB7XG4gICAgICB0aGlzLmJsdXJIYW5kbGVyKCk7XG4gICAgfVxuICB9XG5cbiAgb25DaGFuZ2UobmV3VmFsdWUpIHtcbiAgICB0aGlzLmNoYW5nZWQgPSB0cnVlO1xuICAgIHRoaXMudmFsaWRhdGUobmV3VmFsdWUpO1xuXG4gICAgaWYgKHRoaXMuY2hhbmdlSGFuZGxlcikge1xuICAgICAgdGhpcy5jaGFuZ2VIYW5kbGVyKHsgdmFsdWU6IG5ld1ZhbHVlIH0pO1xuICAgIH1cbiAgICBpZiAodGhpcy5lcnJvck1lc3NhZ2UpIHtcbiAgICAgIGRlbGV0ZSB0aGlzLmVycm9yTWVzc2FnZTtcbiAgICB9XG4gIH1cblxuICB2YWxpZGF0ZSh2YWx1ZSkge1xuICAgIC8vIE91ciBjb250cm9scyByZXR1cm4gbnVsbCBmb3IgaW52YWxpZCB2YWx1ZXNcbiAgICBpZiAoaXNOdWxsKHZhbHVlKSB8fCBpc1VuZGVmaW5lZCh2YWx1ZSkpIHtcbiAgICAgIGlmICh0aGlzLnJlcXVpcmVkKSB7XG4gICAgICAgIHRoaXMuZmFpbHVyZXMgPSBbJ3JlcXVpcmVkJ107XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuZmllbGQudHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFsdWUgPSAnJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmZhaWx1cmVzID0gZ2V0VmFsaWRhdGlvbkZhaWx1cmVzKHZhbHVlLCB0aGlzLmZpZWxkLCB0aGlzLnJlcXVpcmVkKTtcbiAgfVxuXG4gIG9uUGVyc2lzdEFzeW5jRmFpbHVyZShyZXNwb25zZSkge1xuICAgIC8vIEludGVycm9nYXRlIHJlc3BvbnNlIGFuZCBleHRyYWN0IGVycm9yIG1lc3NhZ2VcbiAgICBpZiAoIXRoaXMudXBsb2FkT3B0aW9ucykge1xuICAgICAgdGhpcy51cGxvYWRPcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgaWYgKHJlc3BvbnNlLm9yaWdpbmFsRGF0YSkge1xuICAgICAgLy8gZnJvbnRlbmQtY29tbW9uIGhhcyBhbiBpbnRlcmNlcHRvciB0aGF0IHNvbWV0aW1lcyBjaGFuZ2VzIHRoZSByZXNwb25zZVxuICAgICAgLy8gZm9ybWF0LCBtb3ZpbmcgdGhlIHJlc3BvbnNlIGRhdGEgdW5kZXIgYSBuZXcga2V5ICdvcmlnaW5hbERhdGEnXG4gICAgICB0aGlzLmV4dHJhY3RFcnJvcnMocmVzcG9uc2Uub3JpZ2luYWxEYXRhKTtcbiAgICB9IGVsc2UgaWYgKHJlc3BvbnNlLmRhdGEpIHtcbiAgICAgIC8vIFdoZW4gd2UgZG8gaWQgcHJlIGV2YWwsIHdlIGdldCBlcnJvciBtZXNzYWdlcyBhbmQgdmFsaWRhdGlvbnMgYmFjayBpblxuICAgICAgLy8gdGhlIHJlc3BvbnNlLCBleHRyYWN0IHRoZW0gYW5kIHBhc3MgYmFjayB0byBiZSBzaG93biBpbiB0aGUgdXBsb2FkLlxuICAgICAgdGhpcy5leHRyYWN0RXJyb3JzKHJlc3BvbnNlLmRhdGEpO1xuICAgIH1cbiAgfVxuXG4gIGV4dHJhY3RFcnJvcnMoZGF0YSkge1xuICAgIC8vIE5vdGU6IGVycm9yIGRhdGEgY2FuIG1hbmlwdWxhdGVkIGJ5IGludGVyY2VwdG9ycywgdGhpcyBlbnN1cmVzIHdlIHN0aWxsIGdldCBkYXRhIG5lZWRlZFxuICAgIGlmIChkYXRhLm1lc3NhZ2UpIHtcbiAgICAgIHRoaXMudXBsb2FkT3B0aW9ucy5mYWlsdXJlVGV4dCA9IGRhdGEubWVzc2FnZTtcbiAgICB9XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhLmVycm9ycykpIHtcbiAgICAgIC8vIE9ubHkgc2hvdyB0aGUgZmlyc3QgdHdvIHZhbGlkYXRpb24gbWVzc2FnZXNcbiAgICAgIHRoaXMudXBsb2FkT3B0aW9ucy52YWxpZGF0aW9uTWVzc2FnZXMgPSBkYXRhLmVycm9ycy5tYXAoZXJyb3IgPT4gZXJyb3IubWVzc2FnZSkuc2xpY2UoMCwgMik7XG4gICAgfVxuICB9XG5cbiAgb25QZXJzaXN0QXN5bmNTdWNjZXNzKHJlc3BvbnNlKSB7XG4gICAgaWYgKCF0aGlzLnVwbG9hZE9wdGlvbnMpIHtcbiAgICAgIHRoaXMudXBsb2FkT3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIC8vIFRoZXNlIGFyZSB0b28gc3BlY2lmaWMgdG8gb25lIHVzZSBjYXNlLlxuICAgIGlmIChyZXNwb25zZSkge1xuICAgICAgdGhpcy51cGxvYWRPcHRpb25zLnN1Y2Nlc3NUZXh0ID0gcmVzcG9uc2UuZGF0YS5tZXNzYWdlO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBpc0xhYmVsU2hvd24oY29udHJvbFR5cGUpIHtcbiAgICBpZiAoY29udHJvbFR5cGUgPT09ICdmaWxlJyB8fCBjb250cm9sVHlwZSA9PT0gJ2NoZWNrYm94Jykge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlzSGVscFNob3duKCkge1xuICAgIHJldHVybiAhIXRoaXMuZmllbGQuaGVscDtcbiAgfVxuXG4gIGlzRGVzcmlwdGlvblNob3duKCkge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmRlc2NyaXB0aW9uXG4gICAgICAmJiAhdGhpcy5pc0Vycm9yU2hvd24oKVxuICAgICAgJiYgIXRoaXMuaXNXYXJuaW5nU2hvd24oKVxuICAgICAgJiYgdGhpcy5maWVsZC50eXBlICE9PSAnYm9vbGVhbidcbiAgICApO1xuICB9XG5cbiAgaXNXYXJuaW5nU2hvd24oKSB7XG4gICAgcmV0dXJuICEhdGhpcy53YXJuaW5nTWVzc2FnZTtcbiAgfVxuXG4gIGlzRXJyb3JTaG93bigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgKCh0aGlzLnN1Ym1pdHRlZCB8fCAodGhpcy50b3VjaGVkICYmIHRoaXMuY2hhbmdlZCkpICYmIHRoaXMuZmFpbHVyZXMubGVuZ3RoID4gMClcbiAgICAgIHx8IHRoaXMuZXJyb3JNZXNzYWdlXG4gICAgKTtcbiAgfVxuXG4gIGlzQWxlcnRTaG93bigpIHtcbiAgICByZXR1cm4gdGhpcy5pc0Vycm9yU2hvd24oKTtcbiAgfVxuXG4gIGdldE9wdGlvbnMoKSB7XG4gICAgaWYgKHRoaXMuZmllbGQudHlwZSA9PT0gJ2FycmF5JyAmJiB0aGlzLmZpZWxkLml0ZW1zKSB7XG4gICAgICByZXR1cm4gdGhpcy5maWVsZC5pdGVtcy52YWx1ZXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZmllbGQudmFsdWVzO1xuICB9XG59XG5cbkZpZWxkQ29udHJvbGxlci4kaW5qZWN0ID0gWydUd1JlcXVpcmVtZW50c1NlcnZpY2UnXTtcblxuZXhwb3J0IGRlZmF1bHQgRmllbGRDb250cm9sbGVyO1xuIiwiaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9maWVsZC5jb250cm9sbGVyLmpzJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL2ZpZWxkLmh0bWwnO1xuXG5jb25zdCBGaWVsZCA9IHtcbiAgY29udHJvbGxlcixcbiAgdGVtcGxhdGUsXG4gIGJpbmRpbmdzOiB7XG4gICAgbmFtZTogJ0AnLFxuICAgIG1vZGVsOiAnPScsXG4gICAgaW5pdGlhbEZpZWxkOiAnPGZpZWxkJyxcbiAgICBsb2NhbGU6ICdAJyxcbiAgICByZXF1aXJlZDogJzwnLFxuICAgIHN1Ym1pdHRlZDogJzwnLFxuICAgIHVwbG9hZE9wdGlvbnM6ICc8JyxcbiAgICBjaGFuZ2VIYW5kbGVyOiAnJj9vbkNoYW5nZScsXG4gICAgZm9jdXNIYW5kbGVyOiAnJj9vbkZvY3VzJyxcbiAgICBibHVySGFuZGxlcjogJyY/b25CbHVyJyxcbiAgICBlcnJvck1lc3NhZ2U6ICc8JyxcbiAgICB3YXJuaW5nTWVzc2FnZTogJzwnLFxuICAgIHZhbGlkYXRpb25NZXNzYWdlczogJzwnXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IEZpZWxkO1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgRm9ybUNvbnRyb2wgZnJvbSAnLi4vZm9ybS1jb250cm9sJztcbmltcG9ydCBGaWVsZCBmcm9tICcuL2ZpZWxkLmNvbXBvbmVudCc7XG5pbXBvcnQgUmVxdWlyZW1lbnRzU2VydmljZSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9yZXF1aXJlbWVudHMnO1xuaW1wb3J0IENvbnRyb2xWYWxpZGF0aW9uIGZyb20gJy4uLy4uL3ZhbGlkYXRpb24vY29udHJvbC12YWxpZGF0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5zdHlsZWd1aWRlLmZvcm1zLmZpZWxkJywgW1xuICAgIEZvcm1Db250cm9sLFxuICAgIFJlcXVpcmVtZW50c1NlcnZpY2UsXG4gICAgQ29udHJvbFZhbGlkYXRpb25cbiAgXSlcbiAgLmNvbXBvbmVudCgndHdGaWVsZCcsIEZpZWxkKS5uYW1lO1xuIiwiY2xhc3MgVmFsaWRhdGlvbkNvbnRyb2xsZXIge1xuICBjb25zdHJ1Y3Rvcigkc2NvcGUsICRlbGVtZW50LCBUd0RvbVNlcnZpY2UpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gJGVsZW1lbnRbMF07XG4gICAgY29uc3QgZm9ybUdyb3VwID0gVHdEb21TZXJ2aWNlLmdldENsb3Nlc3RQYXJlbnRCeUNsYXNzTmFtZShlbGVtZW50LCAnZm9ybS1ncm91cCcpO1xuICAgIGNvbnN0ICRuZ01vZGVsID0gJGVsZW1lbnQuY29udHJvbGxlcignbmdNb2RlbCcpO1xuXG4gICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdpbnZhbGlkJywgKGV2ZW50KSA9PiB7XG4gICAgICAvLyBQcmV2ZW50IGRlZmF1bHQgdmFsaWRhdGlvbiB0b29sdGlwc1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9KTtcblxuICAgICRuZ01vZGVsLiR2YWxpZGF0b3JzLnZhbGlkYXRpb24gPSAoKSA9PiB7XG4gICAgICAvLyBFdmFsdWF0ZSBhZnRlciBuZ01vZGVsIHVwZGF0ZXMsIHdlIGFyZSBzdGlsbCBpbiB2YWxpZGF0aW9uIGNoYWluXG4gICAgICAkc2NvcGUuJGV2YWxBc3luYygoKSA9PiB7XG4gICAgICAgIGNoZWNrTW9kZWxBbmRVcGRhdGUoJG5nTW9kZWwsIGZvcm1Hcm91cCwgZWxlbWVudCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG5cbiAgICAvLyBUaGUgZmlyc3QgdGltZSB3ZSBibHVyLCBtb2RlbCBpcyBzdGlsbCBwcmlzdGluZSB3aGVuIHZhbGlkYXRpb24gb2NjdXJzLCBzbyBwZXJmb3JtIGFnYWluLlxuICAgIGNvbnN0IG9uQmx1ciA9ICgpID0+IHtcbiAgICAgIC8vIEN1c3RvbSBlbGVtZW50cyBtdXN0IHRyaWdnZXIgYmx1ciBtYW51YWxseSBmb3IgY29ycmVjdCBiZWhhdmlvdXJcbiAgICAgICRzY29wZS4kZXZhbEFzeW5jKCgpID0+IHtcbiAgICAgICAgY2hlY2tNb2RlbEFuZFVwZGF0ZSgkbmdNb2RlbCwgZm9ybUdyb3VwLCBlbGVtZW50KTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCBvbkJsdXIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrTW9kZWxBbmRVcGRhdGUobmdNb2RlbCwgZm9ybUdyb3VwLCBlbGVtZW50KSB7XG4gIGlmICghZm9ybUdyb3VwKSB7XG4gICAgLy8gSWYgdGhlcmUncyBubyBwYXJlbnQgZm9ybUdyb3VwLCBub3RoaW4gdG8gdXBkYXRlXG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gT3B0aW9uIHRvIHN3aXRjaCBvZmYgZGVmYXVsdCB2YWxpZGF0b3JzXG4gIGlmIChmb3JtR3JvdXAuY2xhc3NMaXN0LmNvbnRhaW5zKCdjdXN0b20tdmFsaWRhdGlvbicpKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKG5nTW9kZWwuJHZhbGlkKSB7XG4gICAgaWYgKGZvcm1Hcm91cCkge1xuICAgICAgZm9ybUdyb3VwLmNsYXNzTGlzdC5yZW1vdmUoJ2hhcy1lcnJvcicpO1xuICAgIH1cbiAgICBlbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSgnYXJpYS1pbnZhbGlkJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKG5nTW9kZWwuJHRvdWNoZWQgJiYgbmdNb2RlbC4kZGlydHkpIHtcbiAgICBpZiAoZm9ybUdyb3VwKSB7XG4gICAgICBmb3JtR3JvdXAuY2xhc3NMaXN0LmFkZCgnaGFzLWVycm9yJyk7XG4gICAgfVxuICAgIC8vIFNldCBhcmlhIGludmFsaWQgZm9yIHNjcmVlbiByZWFkZXJzXG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ2FyaWEtaW52YWxpZCcsICd0cnVlJyk7XG4gIH1cbn1cblxuVmFsaWRhdGlvbkNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRlbGVtZW50JywgJ1R3RG9tU2VydmljZSddO1xuXG5leHBvcnQgZGVmYXVsdCBWYWxpZGF0aW9uQ29udHJvbGxlcjtcbiIsImltcG9ydCBWYWxpZGF0aW9uQ29udHJvbGxlciBmcm9tICcuL2NvbnRyb2wtdmFsaWRhdGlvbi5jb250cm9sbGVyLmpzJztcblxuZnVuY3Rpb24gVHdWYWxpZGF0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIHJlc3RyaWN0OiAnQScsXG4gICAgcmVxdWlyZToge1xuICAgICAgJG5nTW9kZWw6ICduZ01vZGVsJyxcbiAgICB9LFxuICAgIGNvbnRyb2xsZXI6IFZhbGlkYXRpb25Db250cm9sbGVyXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFR3VmFsaWRhdGlvbjtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IENvbnRyb2xWYWxpZGF0aW9uIGZyb20gJy4vY29udHJvbC12YWxpZGF0aW9uLmRpcmVjdGl2ZS5qcyc7XG5pbXBvcnQgRG9tU2VydmljZSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9kb20nO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxndWlkZS52YWxpZGF0aW9uLmNvbnRyb2wnLCBbXG4gICAgRG9tU2VydmljZVxuICBdKVxuICAuZGlyZWN0aXZlKCd0d1ZhbGlkYXRpb24nLCBDb250cm9sVmFsaWRhdGlvbikubmFtZTtcbiIsImNsYXNzIEFzeW5jVGFza3NDb25maWcge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmJhc2VVcmwgPSAnJztcbiAgICB0aGlzLmhlYWRlcnMgPSB7fTtcbiAgfVxuXG4gIHNldEJhc2VVcmwoYmFzZVVybCkge1xuICAgIHRoaXMuYmFzZVVybCA9IGJhc2VVcmw7XG4gIH1cblxuICBzZXRIZWFkZXIoaGVhZGVyLCB2YWx1ZSkge1xuICAgIHRoaXMuaGVhZGVyc1toZWFkZXJdID0gdmFsdWU7XG4gIH1cblxuICBleHRlbmRIdHRwT3B0aW9ucyhpbnB1dE9wdGlvbnMpIHtcbiAgICBjb25zdCBodHRwT3B0aW9ucyA9IGFuZ3VsYXIuY29weShpbnB1dE9wdGlvbnMpO1xuICAgIGh0dHBPcHRpb25zLmhlYWRlcnMgPSBodHRwT3B0aW9ucy5oZWFkZXJzXG4gICAgICA/IHsgLi4uaHR0cE9wdGlvbnMuaGVhZGVycywgLi4udGhpcy5oZWFkZXJzIH1cbiAgICAgIDogdGhpcy5oZWFkZXJzO1xuICAgIGlmIChodHRwT3B0aW9ucy51cmwpIHtcbiAgICAgIGh0dHBPcHRpb25zLnVybCA9IGAke3RoaXMuYmFzZVVybH0ke2h0dHBPcHRpb25zLnVybH1gO1xuICAgIH1cbiAgICByZXR1cm4gaHR0cE9wdGlvbnM7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQXN5bmNUYXNrc0NvbmZpZztcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IEFzeW5jVGFza3NDb25maWcgZnJvbSAnLi9hc3luY1Rhc2tzQ29uZmlnLnNlcnZpY2UnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3LnN0eWxlZ3VpZGUuc2VydmljZXMuYXN5bmMtdGFza3MtY29uZmlnJywgW10pXG4gIC5zZXJ2aWNlKCdBc3luY1Rhc2tzQ29uZmlnJywgQXN5bmNUYXNrc0NvbmZpZykubmFtZTtcbiIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbih1c2VTb3VyY2VNYXApIHtcblx0dmFyIGxpc3QgPSBbXTtcblxuXHQvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cdGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcblx0XHRyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcblx0XHRcdHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApO1xuXHRcdFx0aWYoaXRlbVsyXSkge1xuXHRcdFx0XHRyZXR1cm4gXCJAbWVkaWEgXCIgKyBpdGVtWzJdICsgXCJ7XCIgKyBjb250ZW50ICsgXCJ9XCI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gY29udGVudDtcblx0XHRcdH1cblx0XHR9KS5qb2luKFwiXCIpO1xuXHR9O1xuXG5cdC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cdGxpc3QuaSA9IGZ1bmN0aW9uKG1vZHVsZXMsIG1lZGlhUXVlcnkpIHtcblx0XHRpZih0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIilcblx0XHRcdG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcblx0XHR2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXHRcdGZvcih2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXHRcdFx0aWYodHlwZW9mIGlkID09PSBcIm51bWJlclwiKVxuXHRcdFx0XHRhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG5cdFx0fVxuXHRcdGZvcihpID0gMDsgaSA8IG1vZHVsZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpdGVtID0gbW9kdWxlc1tpXTtcblx0XHRcdC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcblx0XHRcdC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG5cdFx0XHQvLyAgd2hlbiBhIG1vZHVsZSBpcyBpbXBvcnRlZCBtdWx0aXBsZSB0aW1lcyB3aXRoIGRpZmZlcmVudCBtZWRpYSBxdWVyaWVzLlxuXHRcdFx0Ly8gIEkgaG9wZSB0aGlzIHdpbGwgbmV2ZXIgb2NjdXIgKEhleSB0aGlzIHdheSB3ZSBoYXZlIHNtYWxsZXIgYnVuZGxlcylcblx0XHRcdGlmKHR5cGVvZiBpdGVtWzBdICE9PSBcIm51bWJlclwiIHx8ICFhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG5cdFx0XHRcdGlmKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gbWVkaWFRdWVyeTtcblx0XHRcdFx0fSBlbHNlIGlmKG1lZGlhUXVlcnkpIHtcblx0XHRcdFx0XHRpdGVtWzJdID0gXCIoXCIgKyBpdGVtWzJdICsgXCIpIGFuZCAoXCIgKyBtZWRpYVF1ZXJ5ICsgXCIpXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0bGlzdC5wdXNoKGl0ZW0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0cmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7XG5cdHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblx0aWYgKCFjc3NNYXBwaW5nKSB7XG5cdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdH1cblxuXHRpZiAodXNlU291cmNlTWFwICYmIHR5cGVvZiBidG9hID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0dmFyIHNvdXJjZU1hcHBpbmcgPSB0b0NvbW1lbnQoY3NzTWFwcGluZyk7XG5cdFx0dmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcblx0XHRcdHJldHVybiAnLyojIHNvdXJjZVVSTD0nICsgY3NzTWFwcGluZy5zb3VyY2VSb290ICsgc291cmNlICsgJyAqLydcblx0XHR9KTtcblxuXHRcdHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuXHR9XG5cblx0cmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn1cblxuLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuZnVuY3Rpb24gdG9Db21tZW50KHNvdXJjZU1hcCkge1xuXHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcblx0dmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSk7XG5cdHZhciBkYXRhID0gJ3NvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LCcgKyBiYXNlNjQ7XG5cblx0cmV0dXJuICcvKiMgJyArIGRhdGEgKyAnICovJztcbn1cbiIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cbnZhciBzdHlsZXNJbkRvbSA9IHt9O1xuXG52YXJcdG1lbW9pemUgPSBmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW87XG5cblx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdHJldHVybiBtZW1vO1xuXHR9O1xufTtcblxudmFyIGlzT2xkSUUgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcblx0Ly8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3Ncblx0Ly8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuXHQvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG5cdC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuXHQvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcblx0cmV0dXJuIHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iO1xufSk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0LCBwYXJlbnQpIHtcbiAgaWYgKHBhcmVudCl7XG4gICAgcmV0dXJuIHBhcmVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG4gIH1cbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbn07XG5cbnZhciBnZXRFbGVtZW50ID0gKGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbyA9IHt9O1xuXG5cdHJldHVybiBmdW5jdGlvbih0YXJnZXQsIHBhcmVudCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHBhc3NpbmcgZnVuY3Rpb24gaW4gb3B0aW9ucywgdGhlbiB1c2UgaXQgZm9yIHJlc29sdmUgXCJoZWFkXCIgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBVc2VmdWwgZm9yIFNoYWRvdyBSb290IHN0eWxlIGkuZVxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9vXCIpLnNoYWRvd1Jvb3QgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZ2V0VGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0LCBwYXJlbnQpO1xuXHRcdFx0Ly8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblx0XHRcdGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuXHRcdFx0XHRcdC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcblx0XHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcblx0XHR9XG5cdFx0cmV0dXJuIG1lbW9bdGFyZ2V0XVxuXHR9O1xufSkoKTtcblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXJcdHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xudmFyXHRzdHlsZXNJbnNlcnRlZEF0VG9wID0gW107XG5cbnZhclx0Zml4VXJscyA9IHJlcXVpcmUoXCIuL3VybHNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xuXHRpZiAodHlwZW9mIERFQlVHICE9PSBcInVuZGVmaW5lZFwiICYmIERFQlVHKSB7XG5cdFx0aWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xuXHR9XG5cblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0b3B0aW9ucy5hdHRycyA9IHR5cGVvZiBvcHRpb25zLmF0dHJzID09PSBcIm9iamVjdFwiID8gb3B0aW9ucy5hdHRycyA6IHt9O1xuXG5cdC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuXHQvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cdGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSBcImJvb2xlYW5cIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgPGhlYWQ+IGVsZW1lbnRcbiAgICAgICAgaWYgKCFvcHRpb25zLmluc2VydEludG8pIG9wdGlvbnMuaW5zZXJ0SW50byA9IFwiaGVhZFwiO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdGFyZ2V0XG5cdGlmICghb3B0aW9ucy5pbnNlcnRBdCkgb3B0aW9ucy5pbnNlcnRBdCA9IFwiYm90dG9tXCI7XG5cblx0dmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKTtcblxuXHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xuXHRcdFx0bWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuXHRcdH1cblxuXHRcdGlmKG5ld0xpc3QpIHtcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7XG5cdFx0XHRhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV07XG5cblx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykgZG9tU3R5bGUucGFydHNbal0oKTtcblxuXHRcdFx0XHRkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn07XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMsIG9wdGlvbnMpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdGlmKGRvbVN0eWxlKSB7XG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblxuXHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAobGlzdCwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGVzID0gW107XG5cdHZhciBuZXdTdHlsZXMgPSB7fTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XG5cdFx0dmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XG5cdFx0dmFyIG1lZGlhID0gaXRlbVsyXTtcblx0XHR2YXIgc291cmNlTWFwID0gaXRlbVszXTtcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XG5cblx0XHRpZighbmV3U3R5bGVzW2lkXSkgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcblx0XHRlbHNlIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcblx0fVxuXG5cdHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudCAob3B0aW9ucywgc3R5bGUpIHtcblx0dmFyIHRhcmdldCA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvKVxuXG5cdGlmICghdGFyZ2V0KSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG5cdH1cblxuXHR2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZXNJbnNlcnRlZEF0VG9wW3N0eWxlc0luc2VydGVkQXRUb3AubGVuZ3RoIC0gMV07XG5cblx0aWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwidG9wXCIpIHtcblx0XHRpZiAoIWxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCB0YXJnZXQuZmlyc3RDaGlsZCk7XG5cdFx0fSBlbHNlIGlmIChsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHRcdH1cblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGUpO1xuXHR9IGVsc2UgaWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwiYm90dG9tXCIpIHtcblx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKSB7XG5cdFx0dmFyIG5leHRTaWJsaW5nID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEF0LmJlZm9yZSwgdGFyZ2V0KTtcblx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0U2libGluZyk7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiW1N0eWxlIExvYWRlcl1cXG5cXG4gSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcgKCdvcHRpb25zLmluc2VydEF0JykgZm91bmQuXFxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXFxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcXG5cIik7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50IChzdHlsZSkge1xuXHRpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXHRzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcblxuXHR2YXIgaWR4ID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcC5pbmRleE9mKHN0eWxlKTtcblx0aWYoaWR4ID49IDApIHtcblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnNwbGljZShpZHgsIDEpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblxuXHRpZihvcHRpb25zLmF0dHJzLm5vbmNlID09PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgbm9uY2UgPSBnZXROb25jZSgpO1xuXHRcdGlmIChub25jZSkge1xuXHRcdFx0b3B0aW9ucy5hdHRycy5ub25jZSA9IG5vbmNlO1xuXHRcdH1cblx0fVxuXG5cdGFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKTtcblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGdldE5vbmNlKCkge1xuXHRpZiAodHlwZW9mIF9fd2VicGFja19ub25jZV9fID09PSAndW5kZWZpbmVkJykge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0cmV0dXJuIF9fd2VicGFja19ub25jZV9fO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZSAob2JqLCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZSwgdXBkYXRlLCByZW1vdmUsIHJlc3VsdDtcblxuXHQvLyBJZiBhIHRyYW5zZm9ybSBmdW5jdGlvbiB3YXMgZGVmaW5lZCwgcnVuIGl0IG9uIHRoZSBjc3Ncblx0aWYgKG9wdGlvbnMudHJhbnNmb3JtICYmIG9iai5jc3MpIHtcblx0ICAgIHJlc3VsdCA9IHR5cGVvZiBvcHRpb25zLnRyYW5zZm9ybSA9PT0gJ2Z1bmN0aW9uJ1xuXHRcdCA/IG9wdGlvbnMudHJhbnNmb3JtKG9iai5jc3MpIFxuXHRcdCA6IG9wdGlvbnMudHJhbnNmb3JtLmRlZmF1bHQob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGlucHV0IHR5cGU9aGlkZGVuIGNsYXNzPXNyLW9ubHkgbmFtZT17eyRjdHJsLm5hbWV9fSBuZy1tb2RlbD0kY3RybC5uZ01vZGVsIG5nLWNsaWNrPSRjdHJsLmhpZGRlbkNsaWNrKCRldmVudCkgbmctZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCAvPiA8YnV0dG9uIHR5cGU9YnV0dG9uIGNsYXNzPXR3LWNoZWNrYm94LWJ1dHRvbiB0dy1mb2N1c2FibGUgbmctY2xpY2s9JGN0cmwuYnV0dG9uQ2xpY2soJGV2ZW50KSBuZy1mb2N1cz0kY3RybC5idXR0b25Gb2N1cygpIG5nLWJsdXI9JGN0cmwuYnV0dG9uQmx1cigpIG5nLWRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgbmctY2xhc3M9XFxcInsnY2hlY2tlZCc6ICRjdHJsLmNoZWNrZWR9XFxcIiBhcmlhLXByZXNzZWQ9e3skY3RybC5jaGVja2VkfX0+IDxzcGFuIGNsYXNzPVxcXCJ0dy1jaGVja2JveC1jaGVjayBnbHlwaGljb24gZ2x5cGhpY29uLW9rXFxcIj48L3NwYW4+IDwvYnV0dG9uPiBcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBuZy1yZXBlYXQ9XFxcIm9wdGlvbiBpbiAkY3RybC5pbnRlcm5hbE9wdGlvbnNcXFwiIGNsYXNzPWNoZWNrYm94PiA8bGFiZWw+IDx0dy1jaGVja2JveCBuYW1lPXt7JGN0cmwubmFtZX19IG5nLW1vZGVsPW9wdGlvbi5zZWxlY3RlZCBuZy1kaXNhYmxlZD0kY3RybC5uZ0Rpc2FibGVkIG5nLXJlcXVpcmVkPSRjdHJsLmlzQ2hlY2tib3hSZXF1aXJlZCgpIG5nLWNoYW5nZT0kY3RybC5vbkludGVybmFsTW9kZWxDaGFuZ2Uob3B0aW9uKT48L3R3LWNoZWNrYm94PiB7e29wdGlvbi5sYWJlbH19IDwvbGFiZWw+IDwvZGl2PiBcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGlucHV0IHR5cGU9cmFkaW8gY2xhc3M9c3Itb25seSBuYW1lPXt7JGN0cmwubmFtZX19IG5nLXZhbHVlPVxcXCIkY3RybC5uZ1ZhbHVlIHx8ICRjdHJsLnZhbHVlXFxcIiBuZy1tb2RlbD0kY3RybC5uZ01vZGVsIG5nLWRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgbmctY2hhbmdlPSRjdHJsLmhpZGRlbklucHV0Q2hhbmdlKCkgdGFiaW5kZXg9LTEgLz4gPGJ1dHRvbiB0eXBlPWJ1dHRvbiBjbGFzcz10dy1yYWRpby1idXR0b24gdHctZm9jdXNhYmxlIG5nLWNsaWNrPSRjdHJsLmJ1dHRvbkNsaWNrKCRldmVudCkgbmctZm9jdXM9JGN0cmwuYnV0dG9uRm9jdXMoKSBuZy1ibHVyPSRjdHJsLmJ1dHRvbkJsdXIoKSBuZy1kaXNhYmxlZD0kY3RybC5uZ0Rpc2FibGVkIG5nLWNsYXNzPVxcXCJ7Y2hlY2tlZDogJGN0cmwuY2hlY2tlZH1cXFwiIGFyaWEtcHJlc3NlZD17eyRjdHJsLmNoZWNrZWR9fT4gPHNwYW4gY2xhc3M9dHctcmFkaW8tY2hlY2s+PC9zcGFuPiA8L2J1dHRvbj4gXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcImJ0bi1ncm91cCBidG4tYmxvY2sgdHctc2VsZWN0XFxcIiBuZy1jbGFzcz1cXFwie1xcbiAgICBkcm9wZG93bjogISRjdHJsLmRyb3Bkb3duVXAsXFxuICAgIGRyb3B1cDogJGN0cmwuZHJvcGRvd25VcFxcbiAgfVxcXCIgYXJpYS1oaWRkZW49ZmFsc2U+IDxidXR0b24gdHlwZT1idXR0b24gY2xhc3M9XFxcImJ0biBidG4taW5wdXQgZHJvcGRvd24tdG9nZ2xlXFxcIiBuZy1jbGFzcz1cXFwie1xcbiAgICAgICdidG4taW5wdXQtaW52ZXJzZSc6ICRjdHJsLmludmVyc2UsXFxuICAgICAgJ2J0bi1hZGRvbic6ICRjdHJsLmludmVyc2UsXFxuICAgICAgJ2J0bi1zbSc6ICRjdHJsLnNpemUgPT09ICdzbScsXFxuICAgICAgJ2J0bi1sZyc6ICRjdHJsLnNpemUgPT09ICdsZydcXG4gICAgfVxcXCIgZGF0YS10b2dnbGU9ZHJvcGRvd24gYXJpYS1leHBhbmRlZD1mYWxzZSBuZy1kaXNhYmxlZD0kY3RybC5uZ0Rpc2FibGVkIG5nLWZvY3VzPSRjdHJsLmJ1dHRvbkZvY3VzKCkgdHctZm9jdXNhYmxlPiA8c3BhbiBjbGFzcz10dy1zZWxlY3Qtc2VsZWN0ZWQgbmctaWY9JGN0cmwuc2VsZWN0ZWQ+IDxzcGFuIGNsYXNzPVxcXCJjaXJjbGUgY2lyY2xlLWludmVyc2UgcHVsbC14cy1sZWZ0IGNpcmNsZS1zbVxcXCIgbmctaWY9XFxcIiRjdHJsLnNlbGVjdGVkICYmICRjdHJsLnNlbGVjdGVkLmljb24gJiYgJGN0cmwuc2VsZWN0ZWQuc2Vjb25kYXJ5XFxcIj4gPHNwYW4gY2xhc3M9XFxcImljb24ge3skY3RybC5zZWxlY3RlZC5pY29ufX1cXFwiPjwvc3Bhbj4gPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwiY2lyY2xlIGNpcmNsZS1pbnZlcnNlIHB1bGwteHMtbGVmdFxcXCIgbmctY2xhc3M9JGN0cmwuY2lyY2xlQ2xhc3NlcygkY3RybC5oaWRlQ2lyY2xlKSBuZy1pZj1cXFwiKCRjdHJsLnNlbGVjdGVkLmNpcmNsZVRleHQgfHwgJGN0cmwuc2VsZWN0ZWQuY2lyY2xlSW1hZ2UgfHwgJGN0cmwuc2VsZWN0ZWQuY2lyY2xlSWNvbilcXFwiPiA8c3BhbiBuZy1pZj0kY3RybC5zZWxlY3RlZC5jaXJjbGVUZXh0Pnt7JGN0cmwuc2VsZWN0ZWQuY2lyY2xlVGV4dH19PC9zcGFuPiA8aW1nIGFsdD17eyRjdHJsLnNlbGVjdGVkLmxhYmVsfX0gbmctaWY9JGN0cmwuc2VsZWN0ZWQuY2lyY2xlSW1hZ2Ugc3JjPVxcXCJkYXRhOmltYWdlL3BuZztiYXNlNjQsXFxuICAgICAgICAgICAgaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFFQUFBQUJDQVFBQUFDMUhBd0NBQUFBQzBsRVFWUjQybU5rWUFBQUFBWUFBakNCMEM4QUFBQUFTVVZPUks1Q1lJST1cXFwiIG5nLXNyYz17eyRjdHJsLnNlbGVjdGVkLmNpcmNsZUltYWdlfX0gLz4gPHNwYW4gbmctaWY9JGN0cmwuc2VsZWN0ZWQuY2lyY2xlSWNvbiBjbGFzcz1cXFwiaWNvbiB7eyRjdHJsLnNlbGVjdGVkLmNpcmNsZUljb259fVxcXCI+PC9zcGFuPiA8L3NwYW4+IDxzcGFuIGNsYXNzPXRleHQtZWxsaXBzaXM+IDxzcGFuIGNsYXNzPVxcXCJjdXJyZW5jeS1mbGFnIGN1cnJlbmN5LWZsYWcte3skY3RybC5zZWxlY3RlZC5jdXJyZW5jeSB8IGxvd2VyY2FzZX19XFxcIiBuZy1pZj1cXFwiJGN0cmwuc2VsZWN0ZWQgJiYgJGN0cmwuc2VsZWN0ZWQuY3VycmVuY3lcXFwiIG5nLWNsYXNzPSRjdHJsLnJlc3BvbnNpdmVDbGFzc2VzKCRjdHJsLmhpZGVDdXJyZW5jeSk+PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwiaWNvbiB7eyRjdHJsLnNlbGVjdGVkLmljb259fVxcXCIgbmctaWY9XFxcIiRjdHJsLnNlbGVjdGVkICYmICRjdHJsLnNlbGVjdGVkLmljb24gJiYgISRjdHJsLnNlbGVjdGVkLnNlY29uZGFyeVxcXCIgbmctY2xhc3M9JGN0cmwucmVzcG9uc2l2ZUNsYXNzZXMoJGN0cmwuaGlkZUljb24pPjwvc3Bhbj4gPHNwYW4gY2xhc3M9dHctc2VsZWN0LWxhYmVsIG5nLWNsYXNzPSRjdHJsLnJlc3BvbnNpdmVDbGFzc2VzKCRjdHJsLmhpZGVMYWJlbCk+IHt7JGN0cmwuc2VsZWN0ZWQubGFiZWx9fSA8L3NwYW4+IDxzcGFuIG5nLWlmPSRjdHJsLnNlbGVjdGVkLm5vdGUgbmctY2xhc3M9JGN0cmwucmVzcG9uc2l2ZUNsYXNzZXMoJGN0cmwuaGlkZU5vdGUpIGNsYXNzPVxcXCJ0dy1zZWxlY3Qtbm90ZSBzbWFsbCBtLWwtMVxcXCI+IHt7JGN0cmwuc2VsZWN0ZWQubm90ZX19IDwvc3Bhbj4gPHNwYW4gbmctaWY9JGN0cmwuc2VsZWN0ZWQuc2Vjb25kYXJ5IG5nLWNsYXNzPSRjdHJsLnJlc3BvbnNpdmVDbGFzc2VzKCRjdHJsLmhpZGVTZWNvbmRhcnkpIGNsYXNzPVxcXCJ0dy1zZWxlY3Qtc2Vjb25kYXJ5IHNtYWxsIHNlY29uZGFyeSB0ZXh0LWVsbGlwc2lzXFxcIj4ge3skY3RybC5zZWxlY3RlZC5zZWNvbmRhcnl9fSA8L3NwYW4+IDwvc3Bhbj4gPC9zcGFuPiA8c3BhbiBjbGFzcz1mb3JtLWNvbnRyb2wtcGxhY2Vob2xkZXIgbmctaWY9ISRjdHJsLnNlbGVjdGVkPnt7JGN0cmwucGxhY2Vob2xkZXJ9fTwvc3Bhbj4gPHNwYW4gY2xhc3M9Y2FyZXQ+PC9zcGFuPiA8L2J1dHRvbj4gPHVsIGNsYXNzPWRyb3Bkb3duLW1lbnUgcm9sZT1tZW51IG5nLWNsYXNzPVxcXCJ7XFxuICAgICAgJ2Ryb3Bkb3duLW1lbnUteHMtcmlnaHQnOiAkY3RybC5kcm9wZG93blJpZ2h0ID09PSAneHMnLFxcbiAgICAgICdkcm9wZG93bi1tZW51LXNtLXJpZ2h0JzogJGN0cmwuZHJvcGRvd25SaWdodCA9PT0gJ3NtJyxcXG4gICAgICAnZHJvcGRvd24tbWVudS1tZC1yaWdodCc6ICRjdHJsLmRyb3Bkb3duUmlnaHQgPT09ICdtZCcsXFxuICAgICAgJ2Ryb3Bkb3duLW1lbnUtbGctcmlnaHQnOiAkY3RybC5kcm9wZG93blJpZ2h0ID09PSAnbGcnLFxcbiAgICAgICdkcm9wZG93bi1tZW51LXhsLXJpZ2h0JzogJGN0cmwuZHJvcGRvd25SaWdodCA9PT0gJ3hsJyxcXG4gICAgICAnZHJvcGRvd24tbWVudS1zbSc6ICRjdHJsLmRyb3Bkb3duV2lkdGggPT09ICdzbScsXFxuICAgICAgJ2Ryb3Bkb3duLW1lbnUtbWQnOiAkY3RybC5kcm9wZG93bldpZHRoID09PSAnbWQnLFxcbiAgICAgICdkcm9wZG93bi1tZW51LWxnJzogJGN0cmwuZHJvcGRvd25XaWR0aCA9PT0gJ2xnJ1xcbiAgICB9XFxcIj4gPGxpIG5nLWlmPSRjdHJsLnNob3VsZFNob3dTZWFyY2goKT4gPGEgaHJlZj1cXFwiXFxcIiBjbGFzcz1cXFwidHctc2VsZWN0LWZpbHRlci1saW5rIHAtYS0wXFxcIiB0YWJpbmRleD0tMSBuZy1mb2N1cz0kY3RybC5mb2N1c09uRmlsdGVySW5wdXQoKT4gPGRpdiBjbGFzcz1pbnB1dC1ncm91cD4gPHNwYW4gY2xhc3M9aW5wdXQtZ3JvdXAtYWRkb24+PHNwYW4gY2xhc3M9XFxcImljb24gaWNvbi1zZWFyY2hcXFwiPjwvc3Bhbj4gPC9zcGFuPiA8aW5wdXQgdHlwZT10ZXh0IGNsYXNzPVxcXCJmb3JtLWNvbnRyb2wgdHctc2VsZWN0LWZpbHRlclxcXCIgcGxhY2Vob2xkZXI9e3skY3RybC5maWx0ZXJ9fSBuZy1tb2RlbD0kY3RybC5maWx0ZXJTdHJpbmcgbmctY2hhbmdlPSRjdHJsLmZpbHRlckNoYW5nZSgpIG5nLWtleWRvd249JGN0cmwuZmlsdGVyS2V5ZG93bigkZXZlbnQpIC8+IDwvZGl2PiA8L2E+IDwvbGk+IDxsaSBuZy1pZj1cXFwiJGN0cmwucGxhY2Vob2xkZXIgJiYgISRjdHJsLmZpbHRlclxcXCIgbmctY2xhc3M9XFxcIntcXG4gICAgICAgIGFjdGl2ZTogISRjdHJsLnNlbGVjdGVkICYmICEkY3RybC5uZ1JlcXVpcmVkLFxcbiAgICAgICAgJ2Ryb3Bkb3duLWhlYWRlcic6ICRjdHJsLm5nUmVxdWlyZWRcXG4gICAgICB9XFxcIj4gPHNwYW4gbmctaWY9JGN0cmwubmdSZXF1aXJlZCBjbGFzcz10ZXh0LWVsbGlwc2lzIG5nLWNsaWNrPSRldmVudC5zdG9wUHJvcGFnYXRpb24oKT4ge3skY3RybC5wbGFjZWhvbGRlcn19IDwvc3Bhbj4gPGEgaHJlZj1cXFwiXFxcIiB0YWJpbmRleD0tMSBuZy1pZj0hJGN0cmwubmdSZXF1aXJlZCBuZy1jbGljaz0kY3RybC5wbGFjZWhvbGRlckNsaWNrKCkgbmctZm9jdXM9JGN0cmwucGxhY2Vob2xkZXJGb2N1cygpIGNsYXNzPXR3LXNlbGVjdC1wbGFjZWhvbGRlciB0dy1mb2N1c2FibGU+IHt7JGN0cmwucGxhY2Vob2xkZXJ9fSA8L2E+IDwvbGk+IDxsaSBuZy1pZj1cXFwiKCRjdHJsLnBsYWNlaG9sZGVyICYmICEkY3RybC5uZ1JlcXVpcmVkKSB8fCAkY3RybC5maWx0ZXJcXFwiIGNsYXNzPWRpdmlkZXI+PC9saT4gPGxpIG5nLXJlcGVhdD1cXFwib3B0aW9uIGluICRjdHJsLmZpbHRlcmVkT3B0aW9uc1xcXCIgbmctY2xhc3M9XFxcIntcXG4gICAgICAgICdhY3RpdmUnOiAkY3RybC5uZ01vZGVsID09PSBvcHRpb24udmFsdWUsXFxuICAgICAgICAnZGlzYWJsZWQnOiBvcHRpb24uZGlzYWJsZWQsXFxuICAgICAgICAnZHJvcGRvd24taGVhZGVyJzogb3B0aW9uLmhlYWRlcixcXG4gICAgICAgICd0dy1zZWxlY3Qtb3B0aW9uJzogIW9wdGlvbi5oZWFkZXIgJiYgIW9wdGlvbi5kaXNhYmxlZFxcbiAgICAgIH1cXFwiPiA8c3BhbiBuZy1pZj1vcHRpb24uaGVhZGVyIGNsYXNzPXRleHQtZWxsaXBzaXMgbmctY2xpY2s9JGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpPiB7e29wdGlvbi5oZWFkZXJ9fSA8L3NwYW4+IDxhIGhyZWY9XFxcIlxcXCIgbmctaWY9IW9wdGlvbi5oZWFkZXIgbmctY2xpY2s9XFxcIiRjdHJsLm9wdGlvbkNsaWNrKG9wdGlvbiwgJGV2ZW50KVxcXCIgbmctZm9jdXM9JGN0cmwub3B0aW9uRm9jdXMob3B0aW9uKSBuZy1jbGFzcz1cXFwieyd0dy1zZWxlY3Qtb3B0aW9uLWxpbmsnOiAhb3B0aW9uLmRpc2FibGVkfVxcXCIgaW5kZXg9e3skaW5kZXh9fSB0YWJpbmRleD0tMSB0dy1mb2N1c2FibGU+IDxkaXYgbmctaWY9XFxcIm9wdGlvbi5pY29uICYmIG9wdGlvbi5zZWNvbmRhcnlcXFwiIGNsYXNzPVxcXCJjaXJjbGUgY2lyY2xlLWludmVyc2UgcHVsbC14cy1sZWZ0IGNpcmNsZS1zbVxcXCI+IDxzcGFuIGNsYXNzPVxcXCJpY29uIHt7b3B0aW9uLmljb259fVxcXCI+PC9zcGFuPiA8L2Rpdj4gPHNwYW4gbmctaWY9XFxcIm9wdGlvbi5pY29uICYmICFvcHRpb24uc2Vjb25kYXJ5XFxcIiBjbGFzcz1cXFwiaWNvbiB7e29wdGlvbi5pY29ufX0gcHVsbC14cy1sZWZ0XFxcIj4gPC9zcGFuPiA8c3BhbiBuZy1pZj1vcHRpb24uY3VycmVuY3kgY2xhc3M9XFxcImN1cnJlbmN5LWZsYWcgY3VycmVuY3ktZmxhZy17e29wdGlvbi5jdXJyZW5jeSB8IGxvd2VyY2FzZX19IHB1bGwteHMtbGVmdFxcXCI+IDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImNpcmNsZSBjaXJjbGUtaW52ZXJzZSBwdWxsLXhzLWxlZnRcXFwiIG5nLWNsYXNzPVxcXCJ7XFxuICAgICAgICAgICAgJ2NpcmNsZS1zbSc6IG9wdGlvbi5zZWNvbmRhcnksXFxuICAgICAgICAgICAgJ2NpcmNsZS14cyc6ICFvcHRpb24uc2Vjb25kYXJ5XFxuICAgICAgICAgIH1cXFwiIG5nLWlmPVxcXCJvcHRpb24uY2lyY2xlVGV4dCB8fCBvcHRpb24uY2lyY2xlSW1hZ2UgfHwgb3B0aW9uLmNpcmNsZUljb25cXFwiPiA8c3BhbiBjbGFzcz10dy1zZWxlY3QtY2lyY2xlLXRleHQgbmctaWY9b3B0aW9uLmNpcmNsZVRleHQ+e3tvcHRpb24uY2lyY2xlVGV4dH19PC9zcGFuPiA8aW1nIGFsdD17e29wdGlvbi5sYWJlbH19IG5nLWlmPW9wdGlvbi5jaXJjbGVJbWFnZSBzcmM9XFxcImRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxcXG4gICAgICAgICAgICAgIGlWQk9SdzBLR2dvQUFBQU5TVWhFVWdBQUFBRUFBQUFCQ0FRQUFBQzFIQXdDQUFBQUMwbEVRVlI0Mm1Oa1lBQUFBQVlBQWpDQjBDOEFBQUFBU1VWT1JLNUNZSUk9XFxcIiBuZy1zcmM9e3tvcHRpb24uY2lyY2xlSW1hZ2V9fSAvPiA8c3BhbiBuZy1pZj1vcHRpb24uY2lyY2xlSWNvbiBjbGFzcz1cXFwiaWNvbiB7e29wdGlvbi5jaXJjbGVJY29ufX1cXFwiPjwvc3Bhbj4gPC9zcGFuPnt7b3B0aW9uLmxhYmVsfX08c3BhbiBuZy1pZj1vcHRpb24ubm90ZSBjbGFzcz1cXFwidHctc2VsZWN0LW5vdGUgc21hbGwgbS1sLTFcXFwiPnt7b3B0aW9uLm5vdGV9fTwvc3Bhbj48c3BhbiBuZy1pZj1vcHRpb24uc2Vjb25kYXJ5IGNsYXNzPVxcXCJ0dy1zZWxlY3Qtc2Vjb25kYXJ5IHNtYWxsIHRleHQtZWxsaXBzaXNcXFwiPnt7b3B0aW9uLnNlY29uZGFyeX19PC9zcGFuPiA8L2E+IDwvbGk+IDxsaSBuZy1pZj0kY3RybC5oYXNNb3JlT3B0aW9uc1RvUmV2ZWFsPiA8YSBocmVmPVxcXCJcXFwiIG5nLWNsaWNrPSRjdHJsLnJldmVhbE1vcmVPcHRpb25zKCRldmVudCkgY2xhc3M9dHctc2VsZWN0LWxvYWQtbW9yZSB0YWJpbmRleD0tMSB0dy1mb2N1c2FibGU+IC4uLiA8L2E+IDwvbGk+IDxsaSBuZy1pZj0kY3RybC5oYXNUcmFuc2NsdWRlZCBjbGFzcz1kaXZpZGVyPjwvbGk+IDxsaSBuZy10cmFuc2NsdWRlIG5nLWlmPSRjdHJsLmhhc1RyYW5zY2x1ZGVkIGNsYXNzPXR3LXNlbGVjdC10cmFuc2NsdWRlZD48L2xpPiA8L3VsPiA8L2Rpdj4gPGlucHV0IHR5cGU9aGlkZGVuIGNsYXNzPXR3LXNlbGVjdC1oaWRkZW4gbmFtZT17eyRjdHJsLm5hbWV9fSB2YWx1ZT17eyRjdHJsLm5nTW9kZWx9fSBuZy1kaXNhYmxlZD0kY3RybC5uZ0Rpc2FibGVkIC8+IFwiOyIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPWRyb3BwYWJsZSB0dy1kcmFnLWVudGVyPSRjdHJsLm9uRHJhZ0VudGVyKCkgdHctZHJhZy1sZWF2ZT0kY3RybC5vbkRyYWdMZWF2ZSgpIHR3LWRyb3A9JGN0cmwub25Ecm9wKGZpbGVzKSBuZy1jbGFzcz1cXFwie1xcbiAgICAnZHJvcHBhYmxlLXNtJzogJGN0cmwuc2l6ZSA9PT0nc20nLFxcbiAgICAnZHJvcHBhYmxlLW1kJzogJGN0cmwuc2l6ZSA9PT0nbWQnIHx8ICEkY3RybC5zaXplLFxcbiAgICAnZHJvcHBhYmxlLWxnJzogJGN0cmwuc2l6ZSA9PT0nbGcnLFxcbiAgICAnZHJvcHBhYmxlLWRyb3BwaW5nJzogJGN0cmwuaXNEcm9wcGFibGUgJiYgISRjdHJsLm5nRGlzYWJsZWQsXFxuICAgICdkcm9wcGFibGUtcHJvY2Vzc2luZyc6ICEkY3RybC5pc0RvbmUgJiYgKCRjdHJsLmlzUHJvY2Vzc2luZyB8fCAkY3RybC5pc1N1Y2Nlc3MpLFxcbiAgICAnZHJvcHBhYmxlLWNvbXBsZXRlJzogJGN0cmwuaXNEb25lXFxuICB9XFxcIj4gPGRpdiBjbGFzcz1kcm9wcGFibGUtZGVmYXVsdC1jYXJkIGFyaWEtaGlkZGVuPVxcXCJ7eyRjdHJsLmlzRG9uZSB8fCAkY3RybC5pc1Byb2Nlc3Npbmd9fVxcXCI+IDx0dy11cGxvYWQtY2FwdHVyZSBsYWJlbD0kY3RybC5sYWJlbCBpY29uPSRjdHJsLmljb24gYWNjZXB0PSRjdHJsLmFjY2VwdCBpbnB1dC1maWxlPSRjdHJsLmlucHV0RmlsZSBoZWxwLWltYWdlPSRjdHJsLmhlbHBJbWFnZSBidXR0b24tdGV4dD0kY3RybC5idXR0b25UZXh0IG5vLWNhbWVyYS10ZXh0PSRjdHJsLm5vQ2FtZXJhVGV4dCBuby1jYW1lcmEtbWVzc2FnZT0kY3RybC5ub0NhbWVyYU1lc3NhZ2UgbmctZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCBwbGFjZWhvbGRlcj1cXFwiJGN0cmwucGxhY2Vob2xkZXIgfHwgJGN0cmwuZGVzY3JpcHRpb25cXFwiIGlzLWxpdmUtY2FtZXJhLXVwbG9hZD0kY3RybC5pc0xpdmVDYW1lcmFVcGxvYWQgY2FtZXJhLWd1aWRlbGluZXM9JGN0cmwuY2FtZXJhR3VpZGVsaW5lcyBvbi1maWxlLWNhcHR1cmU9JGN0cmwub25GaWxlQ2FwdHVyZShmaWxlKT48L3R3LXVwbG9hZC1jYXB0dXJlPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiZHJvcHBhYmxlLXByb2Nlc3NpbmctY2FyZCBkcm9wcGFibGUtY2FyZCBkcm9wcGFibGUtY2FyZC0td2lkZXJcXFwiIGFyaWEtaGlkZGVuPXt7ISRjdHJsLmlzUHJvY2Vzc2luZ319PiA8dHctdXBsb2FkLXByb2Nlc3NpbmcgbmFtZT0kY3RybC5uYW1lIGZpbGU9JGN0cmwuZmlsZSBvbi1zdGFydD0kY3RybC5vblByb2Nlc3NTdGFydChmaWxlKSBvbi1zdWNjZXNzPVxcXCIkY3RybC5vblByb2Nlc3NTdWNjZXNzKGZpbGUsIGRhdGFVcmwsIGlkLCByZXNwb25zZSlcXFwiIG9uLWZhaWx1cmU9JGN0cmwub25Qcm9jZXNzRmFpbHVyZShlcnJvcikgbWF4LXNpemU9JGN0cmwubWF4U2l6ZSBhY2NlcHQ9JGN0cmwuYWNjZXB0IGh0dHAtb3B0aW9ucz0kY3RybC5odHRwT3B0aW9ucyBwcm9jZXNzaW5nLW1lc3NhZ2U9JGN0cmwucHJvY2Vzc2luZ1RleHQgc3VjY2Vzcy1tZXNzYWdlPSRjdHJsLnN1Y2Nlc3NUZXh0IGVycm9yLW1lc3NhZ2U9JGN0cmwuZmFpbHVyZVRleHQgdmFsaWRhdGlvbi1tZXNzYWdlcz0kY3RybC52YWxpZGF0aW9uTWVzc2FnZXMgdG9vLWxhcmdlLW1lc3NhZ2U9JGN0cmwudG9vTGFyZ2VNZXNzYWdlIGNhbmNlbC10ZXh0PSRjdHJsLmNhbmNlbFRleHQgb24tY2FuY2VsPSRjdHJsLnJlc2V0KCk+PC90dy11cGxvYWQtcHJvY2Vzc2luZz4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImRyb3BwYWJsZS1jb21wbGV0ZS1jYXJkIGRyb3BwYWJsZS1jYXJkXFxcIiBhcmlhLWhpZGRlbj17eyEkY3RybC5pc0RvbmV9fT4gPHR3LXVwbG9hZC1zdWNjZXNzIGxhYmVsPSRjdHJsLmxhYmVsIGlzLWltYWdlPSRjdHJsLmlzSW1hZ2UgZmlsZT0kY3RybC5maWxlIGRhdGE9JGN0cmwuZGF0YVVybCBzdWNjZXNzLW1lc3NhZ2U9JGN0cmwuc3VjY2Vzc1RleHQgY2FuY2VsLXRleHQ9JGN0cmwuY2FuY2VsVGV4dCBvbi1jYW5jZWw9JGN0cmwucmVzZXQoKT48L3R3LXVwbG9hZC1zdWNjZXNzPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiZHJvcHBhYmxlLWRyb3BwaW5nLWNhcmQgZHJvcHBhYmxlLWNhcmRcXFwiPiA8dHctdXBsb2FkLWRyb3BwaW5nIGRyb3BwaW5nLXRleHQ9JGN0cmwuZHJvcHBpbmdUZXh0PjwvdHctdXBsb2FkLWRyb3BwaW5nPiA8L2Rpdj4gPC9kaXY+IFwiOyIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPWRyb3BwYWJsZS1jYXJkLWNvbnRlbnQ+IDxkaXYgbmctaWY9ISRjdHJsLmNhbWVyYUZhaWxlZD4gPGRpdiBjbGFzcz1tLWItMj4gPGltZyBuZy1zaG93PSRjdHJsLmhlbHBJbWFnZSBuZy1zcmM9e3skY3RybC5oZWxwSW1hZ2V9fSBhbHQ9e3skY3RybC5sYWJlbH19IGNsYXNzPVxcXCJ0aHVtYm5haWwgdGV4dC14cy1jZW50ZXJcXFwiLz4gPHNwYW4gbmctc2hvdz0hJGN0cmwuaGVscEltYWdlIGNsYXNzPVxcXCJpY29uIGljb24te3skY3RybC52aWV3SWNvbn19IGljb24teHhsXFxcIj48L3NwYW4+IDwvZGl2PiA8aDQgY2xhc3M9bS1iLTEgbmctaWY9XFxcIiRjdHJsLmxhYmVsIHx8ICRjdHJsLmRlc2NyaXB0aW9uXFxcIj4ge3skY3RybC5sYWJlbCB8fCAkY3RybC5kZXNjcmlwdGlvbn19IDwvaDQ+IDxwIGNsYXNzPW0tYi0yIG5nLWlmPVxcXCIkY3RybC5wbGFjZWhvbGRlciB8fCAkY3RybC5pbnN0cnVjdGlvbnNcXFwiPiB7eyRjdHJsLnBsYWNlaG9sZGVyIHx8ICRjdHJsLmluc3RydWN0aW9uc319IDwvcD4gPC9kaXY+IDxkaXYgbmctaWY9JGN0cmwuY2FtZXJhRmFpbGVkPiA8ZGl2IGNsYXNzPW0tYi0yPiA8dHctcHJvY2VzcyBzdGF0ZT0tMSBzaXplPXNtPjwvdHctcHJvY2Vzcz4gPC9kaXY+IDxoNCBjbGFzcz1tLWItMSBuZy1pZj0kY3RybC5ub0NhbWVyYVRleHQ+e3skY3RybC5ub0NhbWVyYVRleHR9fTwvaDQ+IDxwIGNsYXNzPW0tYi0yIG5nLWlmPSRjdHJsLm5vQ2FtZXJhTWVzc2FnZT57eyRjdHJsLm5vQ2FtZXJhTWVzc2FnZX19PC9wPiA8L2Rpdj4gPHR3LXVwbG9hZC1idXR0b24gbmctaWY9ISRjdHJsLmlzTGl2ZUNhbWVyYVVwbG9hZCBuYW1lPSRjdHJsLm5hbWUgbGFiZWw9JGN0cmwuYnV0dG9uVGV4dCBhY2NlcHQ9JGN0cmwuYWNjZXB0IG1vZGVsPSRjdHJsLmlucHV0RmlsZSBkaXNhYmxlZD0kY3RybC5uZ0Rpc2FibGVkIG9uLWNhcHR1cmU9JGN0cmwub25CdXR0b25DYXB0dXJlKGZpbGVzKT4gPC90dy11cGxvYWQtYnV0dG9uPiA8dHctY2FtZXJhLWJ1dHRvbiBuZy1pZj0kY3RybC5pc0xpdmVDYW1lcmFVcGxvYWQgbGFiZWw9JGN0cmwuYnV0dG9uVGV4dCBkaXNhYmxlZD0kY3RybC5uZ0Rpc2FibGVkIG9uLWNsaWNrPSRjdHJsLm9uQ2FtZXJhQnV0dG9uQ2xpY2soKT4gPC90dy1jYW1lcmEtYnV0dG9uPiA8dHctY2FtZXJhLWNhcHR1cmUgbmctaWY9XFxcIiRjdHJsLmlzTGl2ZUNhbWVyYVVwbG9hZCAmJiAkY3RybC5zaG93TGl2ZUNhcHR1cmVTY3JlZW5cXFwiIGd1aWRlbGluZXM9JGN0cmwuY2FtZXJhR3VpZGVsaW5lcyBvbi1jYW5jZWw9JGN0cmwub25DYW1lcmFDYW5jZWwoKSBvbi1jYXB0dXJlPSRjdHJsLm9uQ2FtZXJhQ2FwdHVyZShmaWxlKSBvbi1lcnJvcj0kY3RybC5vbkNhbWVyYUVycm9yKCk+IDwvdHctY2FtZXJhLWNhcHR1cmU+IDwvZGl2PiBcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1kcm9wcGFibGUtY2FyZC1jb250ZW50PiA8ZGl2IGNsYXNzPVxcXCJjaXJjbGUgY2lyY2xlLXNtIG0tYi0zXFxcIj4gPHNwYW4gY2xhc3M9XFxcImljb24gaWNvbi1hZGRcXFwiPjwvc3Bhbj4gPC9kaXY+IDxoND4ge3sgJGN0cmwuZHJvcHBpbmdUZXh0IHx8ICdEcm9wIGZpbGUgdG8gc3RhcnQgdXBsb2FkJyB9fSA8L2g0PiA8cCBjbGFzcz1cXFwibS10LTIgbS1iLTBcXFwiPjwvcD4gPC9kaXY+IFwiOyIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPWRyb3BwYWJsZS1jYXJkLWNvbnRlbnQ+IDxkaXYgY2xhc3M9bS1iLTI+IDx0dy1wcm9jZXNzIHNpemU9c20gc3RhdGU9JGN0cmwucHJvY2Vzc2luZ1N0YXRlPjwvdHctcHJvY2Vzcz4gPC9kaXY+IDxoNCBjbGFzcz1tLWItMj4gPHNwYW4gbmctaWY9XFxcIiRjdHJsLmlzUHJvY2Vzc2luZyAmJiAkY3RybC5wcm9jZXNzaW5nTWVzc2FnZVxcXCIgY2xhc3M9dXBsb2FkLXByb2Nlc3NpbmctbWVzc2FnZT4ge3skY3RybC5wcm9jZXNzaW5nTWVzc2FnZX19IDwvc3Bhbj4gPHNwYW4gbmctaWY9XFxcIiRjdHJsLmlzRXJyb3IgJiYgJGN0cmwuZXJyb3JNZXNzYWdlXFxcIiBjbGFzcz11cGxvYWQtZmFpbHVyZS1tZXNzYWdlPiB7eyRjdHJsLmVycm9yTWVzc2FnZX19IDwvc3Bhbj4gPC9oND4gPHVsIG5nLWlmPVxcXCIkY3RybC5pc0Vycm9yICYmICRjdHJsLnZhbGlkYXRpb25NZXNzYWdlc1xcXCIgY2xhc3M9XFxcInRleHQteHMtbGVmdCBtLWItMlxcXCI+IDxsaSBuZy1pZj0kY3RybC52YWxpZGF0aW9uTWVzc2FnZXNbMF0+e3sgJGN0cmwudmFsaWRhdGlvbk1lc3NhZ2VzWzBdIH19PC9saT4gPGxpIG5nLWlmPSRjdHJsLnZhbGlkYXRpb25NZXNzYWdlc1sxXT57eyAkY3RybC52YWxpZGF0aW9uTWVzc2FnZXNbMV0gfX08L2xpPiA8bGkgbmctaWY9JGN0cmwudmFsaWRhdGlvbk1lc3NhZ2VzWzJdPnt7ICRjdHJsLnZhbGlkYXRpb25NZXNzYWdlc1syXSB9fTwvbGk+IDwvdWw+IDxhIGhyZWY9XFxcIlxcXCIgbmctaWY9JGN0cmwuaXNFcnJvciBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIiBuZy1jbGljaz0kY3RybC5vblJlbW92ZSgpIHJvbGU9YnV0dG9uPiA8c3BhbiBuZy1pZj0kY3RybC5jYW5jZWxUZXh0IG5nLWJpbmQ9JGN0cmwuY2FuY2VsVGV4dD48L3NwYW4+IDxzcGFuIG5nLWlmPSEkY3RybC5jYW5jZWxUZXh0IGNsYXNzPVxcXCJpY29uIGljb24tdXBsb2FkIG0tci0wXFxcIj48L3NwYW4+IDwvYT4gPC9kaXY+IFwiOyIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPXByb2Nlc3NpbmctaXRlbT4gPGRpdiBjbGFzcz1tZWRpYT4gPGRpdiBjbGFzcz1cXFwibWVkaWEtbGVmdCB2ZXJ0aWNhbC1jZW50ZXIgcC1yLTIgcC15LTFcXFwiPiA8dHctcHJvY2VzcyBzaXplPXhzIHN0YXRlPSRjdHJsLnByb2Nlc3NpbmdTdGF0ZT48L3R3LXByb2Nlc3M+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJtZWRpYS1ib2R5IHRleHQteHMtbGVmdCBwLXktMVxcXCIgc3R5bGU9b3ZlcmZsb3c6YXV0bz4gPGRpdj4gPHNtYWxsIGNsYXNzPVxcXCJtLWItMCB0ZXh0LWVsbGlwc2lzIGZpbGUtbmFtZVxcXCI+PHN0cm9uZz57eyAkY3RybC5maWxlLm5hbWUgfX08L3N0cm9uZz48L3NtYWxsPiA8c21hbGwgY2xhc3M9XFxcIm0tYi0wIHRleHQtZWxsaXBzaXMgdGlueVxcXCI+IDxzcGFuIG5nLWlmPSRjdHJsLmlzUHJvY2Vzc2luZz57eyAkY3RybC5wcm9jZXNzaW5nTWVzc2FnZSB9fTwvc3Bhbj4gPHNwYW4gbmctaWY9JGN0cmwuaXNFcnJvcj57eyAkY3RybC5lcnJvck1lc3NhZ2UgfX08L3NwYW4+IDxzcGFuIG5nLWlmPSRjdHJsLmlzU3VjY2Vzcz57eyAkY3RybC5zdWNjZXNzTWVzc2FnZSB9fTwvc3Bhbj4gPC9zbWFsbD4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJtZWRpYS1yaWdodCBwLWwtMiBwLXktMlxcXCI+IDxhIGhyZWY9XFxcIlxcXCIgbmctaWY9ISRjdHJsLmlzUHJvY2Vzc2luZyBjbGFzcz1jbG9zZSBuZy1jbGljaz0kY3RybC5vblJlbW92ZSgpIHJvbGU9YnV0dG9uPiZ0aW1lczs8L2E+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IFwiOyIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3BhbiBjbGFzcz1wcm9jZXNzIG5nLWNsYXNzPVxcXCJ7XFxuICAgICdwcm9jZXNzLXN1Y2Nlc3MnOiAkY3RybC5wcm9jZXNzaW5nID09PSAxLFxcbiAgICAncHJvY2Vzcy1kYW5nZXInOiAkY3RybC5wcm9jZXNzaW5nID09PSAtMSxcXG4gICAgJ3Byb2Nlc3Mtc3RvcHBlZCc6ICRjdHJsLnByb2Nlc3NpbmcgPT09IDAsXFxuICAgICdwcm9jZXNzLXhzJzogJGN0cmwuc2l6ZSA9PT0gJ3hzJyxcXG4gICAgJ3Byb2Nlc3Mtc20nOiAkY3RybC5zaXplID09PSAnc20nLFxcbiAgICAncHJvY2Vzcy1tZCc6ICRjdHJsLnNpemUgPT09ICdtZCcsXFxuICAgICdwcm9jZXNzLWxnJzogJGN0cmwuc2l6ZSA9PT0gJ2xnJyxcXG4gICAgJ3Byb2Nlc3MteGwnOiAkY3RybC5zaXplID09PSAneGwnXFxuICB9XFxcIj4gPHNwYW4gY2xhc3M9cHJvY2Vzcy1pY29uLWNvbnRhaW5lcj4gPHNwYW4gY2xhc3M9cHJvY2Vzcy1pY29uLWhvcml6b250YWw+PC9zcGFuPiA8c3BhbiBjbGFzcz1wcm9jZXNzLWljb24tdmVydGljYWw+PC9zcGFuPiA8L3NwYW4+IDxzdmcgdmVyc2lvbj0xLjEgeG1sbnM9aHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcgeG1sOnNwYWNlPXByZXNlcnZlPiA8Y2lyY2xlIGNsYXNzPXByb2Nlc3MtY2lyY2xlIGN4PTUwJSBjeT01MCUgbmctYXR0ci1yPXt7JGN0cmwucmFkaXVzfX0gZmlsbC1vcGFjaXR5PTAuMCAvPiA8L3N2Zz4gPC9zcGFuPiBcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1kcm9wcGFibGUtY2FyZC1jb250ZW50PiA8aDQgbmctaWY9XFxcIiRjdHJsLnN1Y2Nlc3NNZXNzYWdlIHx8ICRjdHJsLmxhYmVsXFxcIiBjbGFzcz1cXFwibS1iLTIgdXBsb2FkLXN1Y2Nlc3MtbWVzc2FnZVxcXCI+IHt7ICRjdHJsLnN1Y2Nlc3NNZXNzYWdlIHx8ICRjdHJsLmxhYmVsIH19IDwvaDQ+IDxpbWcgbmctaWY9XFxcIiRjdHJsLmlzSW1hZ2UgJiYgJGN0cmwuZGF0YVxcXCIgc3JjPVxcXCJkYXRhOmltYWdlL3BuZztiYXNlNjQsXFxuICAgICAgaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFFQUFBQUJDQVFBQUFDMUhBd0NBQUFBQzBsRVFWUjQybU5rWUFBQUFBWUFBakNCMEM4QUFBQUFTVVZPUks1Q1lJST1cXFwiIG5nLXNyYz1cXFwie3sgJGN0cmwuZGF0YSB9fVxcXCIgYWx0PU9LIGNsYXNzPVxcXCJ0aHVtYm5haWwgbS1iLTNcXFwiLz4gPHNwYW4gY2xhc3M9XFxcImljb24gaWNvbi1wZGYgaWNvbi14eGxcXFwiIG5nLWlmPVxcXCIhJGN0cmwuaXNJbWFnZSB8fCAhJGN0cmwuZGF0YVxcXCI+PC9zcGFuPiA8cCBjbGFzcz1cXFwibS1iLTIgdGV4dC1lbGxpcHNpc1xcXCI+e3sgJGN0cmwuZmlsZU5hbWUgfX08L3A+IDxwIGNsYXNzPVxcXCJtLXQtMiBtLWItMFxcXCI+IDxhIGhyZWY9XFxcIlxcXCIgbmctY2xpY2s9JGN0cmwub25DYW5jZWwoKT4gPHNwYW4gbmctaWY9JGN0cmwuY2FuY2VsVGV4dCBuZy1iaW5kPSRjdHJsLmNhbmNlbFRleHQ+PC9zcGFuPiA8c3BhbiBuZy1pZj0hJGN0cmwuY2FuY2VsVGV4dCBjbGFzcz1cXFwiaWNvbiBpY29uLXVwbG9hZCBtLXItMFxcXCI+PC9zcGFuPiA8L2E+IDwvcD4gPC9kaXY+IFwiOyIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGlkPWNhbWVyYSBuZy1jbGFzcz1cXFwie3RyYW5zbHVjZW50OiAkY3RybC5tb2RlID09PSAnbG9hZGluZyd9XFxcIj4gPHZpZGVvIGlkPWNhbWVyYVZpZXdmaW5kZXIgY2xhc3M9XFxcImZpeGVkIHctMTAwIGgtMTAwXFxcIiBuZy1zaG93PVxcXCIkY3RybC5tb2RlID09PSAnY2FwdHVyZSdcXFwiIG5nLWNsYXNzPVxcXCJ7bWlycm9yZWQ6ICgkY3RybC5ndWlkZWxpbmVzLmRpcmVjdGlvbiB8fCAnJykudG9Mb3dlckNhc2UoKSA9PT0gJ3VzZXInfVxcXCIgcGxheXNpbmxpbmU+PC92aWRlbz4gPGRpdiBpZD1jYW1lcmFWaWV3ZmluZGVyT3ZlcmxheSBuZy1pZj1cXFwiJGN0cmwuZ3VpZGVsaW5lcy5vdXRsaW5lICYmICRjdHJsLm1vZGUgPT09ICdjYXB0dXJlJ1xcXCIgbmctY2xhc3M9XFxcInttaXJyb3JlZDogKCRjdHJsLmd1aWRlbGluZXMuZGlyZWN0aW9uIHx8ICcnKS50b0xvd2VyQ2FzZSgpID09PSAndXNlcid9XFxcIiBuZy1zdHlsZT1cXFwieydiYWNrZ3JvdW5kLWltYWdlJzogJ3VybCgnICsgJGN0cmwuZ3VpZGVsaW5lcy5vdXRsaW5lICsgJyknLCB3aWR0aDogJGN0cmwub3ZlcmxheVNxdWFyZUxlbmd0aCArICdweCcsIGhlaWdodDogJGN0cmwub3ZlcmxheVNxdWFyZUxlbmd0aCArICdweCd9XFxcIj48L2Rpdj4gPGNhbnZhcyBpZD1jYW1lcmFTZW5zb3Igbmctc2hvdz1cXFwiJGN0cmwubW9kZSA9PT0gJ2NvbmZpcm0nXFxcIiBuZy1zdHlsZT1cXFwie3dpZHRoOiAkY3RybC5zZW5zb3JXaWR0aCArICdweCd9XFxcIj48L2NhbnZhcz4gPGxhYmVsIGNsYXNzPVxcXCJmaXhlZC1ib3R0b20gY2FtZXJhLWN0cmwtYmFyXFxcIj4gPHNwYW4gY2xhc3M9Y2FtZXJhLWN0cmwtYm94LXNtYWxsPiA8c3BhbiBpZD12aWRlby1jYW5jZWwgY2xhc3M9XFxcImNhbWVyYS1jdHJsLWJ0bi1zbWFsbCBjYW1lcmEtY3RybC1idG4tY2FuY2VsIGljb24gaWNvbi1jbG9zZVxcXCIgbmctaWY9XFxcIiRjdHJsLm1vZGUgPT09ICdjYXB0dXJlJ1xcXCIgbmctY2xpY2s9JGN0cmwub25DYW5jZWxCdG5DbGljaygpPjwvc3Bhbj4gPHNwYW4gaWQ9Y2FwdHVyZS1jYW5jZWwgY2xhc3M9XFxcImNhbWVyYS1jdHJsLWJ0bi1zbWFsbCBjYW1lcmEtY3RybC1idG4tY2FuY2VsIGljb24gaWNvbi1jbG9zZVxcXCIgbmctaWY9XFxcIiRjdHJsLm1vZGUgPT09ICdjb25maXJtJ1xcXCIgbmctY2xpY2s9JGN0cmwub25SZWNhcHR1cmVCdG5DbGljaygpPjwvc3Bhbj4gPC9zcGFuPiA8c3BhbiBjbGFzcz1jYW1lcmEtY3RybC1ib3gtYmlnPiA8c3BhbiBpZD12aWRlby1jb25maXJtIGNsYXNzPWNhbWVyYS1jdHJsLWJ0bi1iaWcgbmctaWY9XFxcIiRjdHJsLm1vZGUgPT09ICdjYXB0dXJlJ1xcXCIgbmctY2xpY2s9JGN0cmwub25DYXB0dXJlQnRuQ2xpY2soKT4gPHNwYW4gY2xhc3M9Y2FtZXJhLWN0cmwtYnRuLWJpZy1pbm5lcj48L3NwYW4+IDwvc3Bhbj4gPC9zcGFuPiA8c3BhbiBjbGFzcz1jYW1lcmEtY3RybC1ib3gtc21hbGw+IDxzcGFuIGlkPWNhcHR1cmUtY29uZmlybSBjbGFzcz1cXFwiY2FtZXJhLWN0cmwtYnRuLXNtYWxsIGNhbWVyYS1jdHJsLWJ0bi1jb25maXJtIGljb24gaWNvbi1jaGVja1xcXCIgbmctaWY9XFxcIiRjdHJsLm1vZGUgPT09ICdjb25maXJtJ1xcXCIgbmctY2xpY2s9JGN0cmwub25VcGxvYWRCdG5DbGljaygpPjwvc3Bhbj4gPC9zcGFuPiA8L2xhYmVsPiA8L2Rpdj4gXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxsYWJlbCBjbGFzcz1idG4gbmctY2xpY2s9JGN0cmwub25CdXR0b25DbGljaygpIG5nLWNsYXNzPVxcXCJ7ICdkaXNhYmxlZCc6ICRjdHJsLmRpc2FibGVkLFxcbiAgICAgICAgICAgICAgJ2J0bi1wcmltYXJ5JzogISRjdHJsLmlzU2Vjb25kYXJ5LFxcbiAgICAgICAgICAgICAgJ2J0bi1kZWZhdWx0JzogJGN0cmwuaXNTZWNvbmRhcnksXFxuICAgICAgICAgICAgICAnYnRuLWJsb2NrJzogJGN0cmwuYmxvY2ssXFxuICAgICAgICAgICAgICAnYnRuLXNtJzogJGN0cmwuc21hbGxcXG4gICAgICAgICAgICB9XFxcIj4gPHNwYW4gbmctaWY9JGN0cmwubGFiZWwgbmctYmluZD0kY3RybC5sYWJlbD48L3NwYW4+IDxzcGFuIG5nLWlmPSEkY3RybC5sYWJlbCBjbGFzcz1cXFwiaWNvbiBpY29uLXVwbG9hZCBtLXItMFxcXCI+PC9zcGFuPiA8c3BhbiBuZy1pZj0hJGN0cmwuaXNMaXZlQ2FtZXJhVXBsb2FkPiA8aW5wdXQgbmctaWY9ISRjdHJsLm11bHRpcGxlIHR3LWZpbGUtaW5wdXQgdHlwZT1maWxlIGFjY2VwdD1cXFwie3sgJGN0cmwuYWNjZXB0IH19XFxcIiBjbGFzcz1cXFwidHctZHJvcHBhYmxlLWlucHV0IGhpZGRlblxcXCIgbmctZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCBuYW1lPVxcXCJ7eyAkY3RybC5uYW1lIH19XFxcIiBvbi11c2VyLWlucHV0PSRjdHJsLm9uQnV0dG9uQ2FwdHVyZSgpIG5nLW1vZGVsPSRjdHJsLm1vZGVsIC8+IDxpbnB1dCBuZy1pZj0kY3RybC5tdWx0aXBsZSB0dy1maWxlLWlucHV0IHR5cGU9ZmlsZSBhY2NlcHQ9XFxcInt7ICRjdHJsLmFjY2VwdCB9fVxcXCIgY2xhc3M9XFxcInR3LWRyb3BwYWJsZS1pbnB1dCBoaWRkZW5cXFwiIG5nLWRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgbmFtZT1cXFwie3sgJGN0cmwubmFtZSB9fVxcXCIgb24tdXNlci1pbnB1dD0kY3RybC5vbkJ1dHRvbkNhcHR1cmUoKSBuZy1tb2RlbD0kY3RybC5tb2RlbCBtdWx0aXBsZT1tdWx0aXBsZSAvPiA8L3NwYW4+IDwvbGFiZWw+XCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxsYWJlbCBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIiBuZy1jbGljaz0kY3RybC5vbkJ1dHRvbkNsaWNrKCkgbmctY2xhc3M9XFxcInsgJ2Rpc2FibGVkJzogJGN0cmwuZGlzYWJsZWQgfVxcXCI+IDxzcGFuIG5nLWlmPSRjdHJsLmxhYmVsIG5nLWJpbmQ9JGN0cmwubGFiZWw+PC9zcGFuPiA8c3BhbiBuZy1pZj0hJGN0cmwubGFiZWwgY2xhc3M9XFxcImljb24gaWNvbi1jYW1lcmEgbS1yLTBcXFwiPjwvc3Bhbj4gPC9sYWJlbD4gXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcIndlbGwgZHJvcHBhYmxlIHAtci0wIHAtbC0wIHAtdC0xIHAtYi0wIG11bHRpLXVwbG9hZFxcXCIgdHctZHJvcD0kY3RybC5vbkRyb3AoZmlsZXMpIHR3LWRyYWctZW50ZXI9JGN0cmwub25EcmFnRW50ZXIoKSB0dy1kcmFnLWxlYXZlPSRjdHJsLm9uRHJhZ0xlYXZlKCkgbmctY2xhc3M9XFxcInsnZHJvcHBhYmxlLWRyb3BwaW5nJzogJGN0cmwuaXNEcm9wcGFibGV9XFxcIj4gPGRpdiBjbGFzcz1cXFwiZHJvcHBhYmxlLWRyb3BwaW5nLWNhcmQgZHJvcHBhYmxlLWNhcmRcXFwiPiA8dHctdXBsb2FkLWRyb3BwaW5nIGRyb3BwaW5nLXRleHQ9JGN0cmwuZHJvcHBpbmdUZXh0PjwvdHctdXBsb2FkLWRyb3BwaW5nPiA8L2Rpdj4gPGRpdiBuZy1pZj1cXFwiJGN0cmwuZmlsZXMubGVuZ3RoID09PSAwXFxcIiBjbGFzcz1cXFwiZW1wdHktcHJvY2Vzc2luZy1saXN0IGRyb3BwYWJsZS1kZWZhdWx0LWNhcmQgdGV4dC14cy1jZW50ZXIgcC10LTNcXFwiPiA8ZGl2IGNsYXNzPWVtcHR5LXNjcmVlbj4gPGRpdiBjbGFzcz1cXFwiY2lyY2xlIGNpcmNsZS1zbSBtLWItMyBtLXQtM1xcXCI+IDxpbWcgbmctaWY9JGN0cmwuaGVscEltYWdlIG5nLXNyYz17eyRjdHJsLmhlbHBJbWFnZX19IGFsdD17eyRjdHJsLmxhYmVsfX0gY2xhc3M9XFxcInRodW1ibmFpbCB0ZXh0LXhzLWNlbnRlclxcXCIvPiA8c3BhbiBuZy1pZj0hJGN0cmwuaGVscEltYWdlIGNsYXNzPVxcXCJpY29uIGljb24te3skY3RybC52aWV3SWNvbn19IGljb24teHhsXFxcIj48L3NwYW4+IDwvZGl2PiA8aDQgbmctaWY9JGN0cmwubGFiZWwgY2xhc3M9bS1iLTE+e3skY3RybC5sYWJlbH19PC9oND4gPHAgbmctaWY9JGN0cmwucGxhY2Vob2xkZXIgY2xhc3M9XFxcInAtbC0zIHAtci0zXFxcIj4ge3skY3RybC5wbGFjZWhvbGRlcn19IDwvcD4gPC9kaXY+IDwvZGl2PiA8ZGl2IG5nLWlmPVxcXCIkY3RybC5maWxlcy5sZW5ndGggPiAwXFxcIiBjbGFzcz1cXFwiZHJvcHBhYmxlLWRlZmF1bHQtY2FyZCBwLWwtMyBwcm9jZXNzaW5nLWxpc3RcXFwiPiA8ZGl2IG5nLXJlcGVhdD1cXFwiKGluZGV4LCBmaWxlKSBpbiAkY3RybC5maWxlc1xcXCIgY2xhc3M9cC1yLTMgbmctY2xhc3M9XFxcInsnbGFzdC1pdGVtJzogJGxhc3R9XFxcIj4gPHR3LXVwbG9hZC1wcm9jZXNzaW5nLW1pbmkgbmFtZT0kY3RybC5uYW1lIGZpbGU9ZmlsZSBvbi1zdWNjZXNzPVxcXCIkY3RybC5vblByb2Nlc3NTdWNjZXNzKGluZGV4LCBmaWxlLCBkYXRhVXJsLCBpZCwgcmVzcG9uc2UpXFxcIiBvbi1mYWlsdXJlPVxcXCIkY3RybC5vblByb2Nlc3NGYWlsdXJlKGluZGV4LCBmaWxlLCBlcnJvcilcXFwiIG9uLWNhbmNlbD0kY3RybC5vblByb2Nlc3NDYW5jZWwoaW5kZXgpIG1heC1zaXplPSRjdHJsLm1heFNpemUgYWNjZXB0PSRjdHJsLmFjY2VwdCBodHRwLW9wdGlvbnM9JGN0cmwuaHR0cE9wdGlvbnMgcHJvY2Vzc2luZy1tZXNzYWdlPSRjdHJsLnByb2Nlc3NpbmdUZXh0IHN1Y2Nlc3MtbWVzc2FnZT0kY3RybC5zdWNjZXNzVGV4dCBlcnJvci1tZXNzYWdlPSRjdHJsLmZhaWx1cmVUZXh0IHZhbGlkYXRpb24tbWVzc2FnZXM9JGN0cmwudmFsaWRhdGlvbk1lc3NhZ2VzIHRvby1sYXJnZS1tZXNzYWdlPSRjdHJsLnRvb0xhcmdlTWVzc2FnZSBjYW5jZWwtdGV4dD0kY3RybC5jYW5jZWxUZXh0IHJlc3BvbnNlLWVycm9yLWV4dHJhY3Rvcj0kY3RybC5yZXNwb25zZUVycm9yRXh0cmFjdG9yKHtlcnJvcn0pPjwvdHctdXBsb2FkLXByb2Nlc3NpbmctbWluaT4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPW0tYS0zPiA8dHctdXBsb2FkLWJ1dHRvbiBuZy1pZj0hJGN0cmwuaXNMaXZlQ2FtZXJhVXBsb2FkIG5hbWU9JGN0cmwubmFtZSBsYWJlbD1cXFwiJGN0cmwuZmlsZXMubGVuZ3RoID09PSAwID8gJGN0cmwuYnV0dG9uVGV4dCA6ICRjdHJsLmFkZE1vcmVCdXR0b25UZXh0XFxcIiBpcy1zZWNvbmRhcnk9XFxcIiRjdHJsLmZpbGVzLmxlbmd0aCA+IDBcXFwiIGFjY2VwdD0kY3RybC5hY2NlcHQgbW9kZWw9JGN0cmwuaW5wdXRGaWxlIGRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgb24tY2FwdHVyZT0kY3RybC5vbkZpbGVDYXB0dXJlKGZpbGVzKSBibG9jaz10cnVlIHNtYWxsPXRydWUgbXVsdGlwbGU9dHJ1ZT48L3R3LXVwbG9hZC1idXR0b24+IDwvZGl2PiA8L2Rpdj4gXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9cm93PiA8ZGl2IGNsYXNzPVxcXCJjb2wtc20tNSB0dy1kYXRlLW1vbnRoLWNvbHVtblxcXCIgbmctaWY9JGN0cmwubW9udGhCZWZvcmVEYXk+IDxsYWJlbCBjbGFzcz1zci1vbmx5Pk1vbnRoPC9sYWJlbD4gPHR3LXNlbGVjdCBuYW1lPW1vbnRoIGNsYXNzPXR3LWRhdGUtbW9udGggbmctbW9kZWw9JGN0cmwubW9udGggbmctY2hhbmdlPSRjdHJsLnVwZGF0ZURhdGVNb2RlbEFuZFZhbGlkYXRpb25DbGFzc2VzKCkgbmctcmVxdWlyZWQ9JGN0cmwuZGF0ZVJlcXVpcmVkIG5nLWRpc2FibGVkPSRjdHJsLmRhdGVEaXNhYmxlZCBvcHRpb25zPSRjdHJsLmRhdGVNb250aHM+IDwvdHctc2VsZWN0PiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiY29sLXNtLTMgdHctZGF0ZS1kYXktY29sdW1uXFxcIj4gPGxhYmVsIGNsYXNzPXNyLW9ubHk+RGF5PC9sYWJlbD4gPGlucHV0IHR5cGU9bnVtYmVyIG5hbWU9ZGF5IGNsYXNzPVxcXCJmb3JtLWNvbnRyb2wgdHctZGF0ZS1kYXlcXFwiIG5nLW1vZGVsPSRjdHJsLmRheSBuZy1jaGFuZ2U9JGN0cmwudXBkYXRlRGF0ZU1vZGVsQW5kVmFsaWRhdGlvbkNsYXNzZXMoKSBwbGFjZWhvbGRlcj1ERCBtaW49MSBuZy1taW49MSBuZy1kaXNhYmxlZD0kY3RybC5kYXRlRGlzYWJsZWQgbmctcmVxdWlyZWQ9JGN0cmwuZGF0ZVJlcXVpcmVkIHR3LWZvY3VzYWJsZS8+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJjb2wtc20tNSB0dy1kYXRlLW1vbnRoLWNvbHVtblxcXCIgbmctaWY9ISRjdHJsLm1vbnRoQmVmb3JlRGF5PiA8bGFiZWwgY2xhc3M9c3Itb25seT5Nb250aDwvbGFiZWw+IDx0dy1zZWxlY3QgbmFtZT1tb250aCBjbGFzcz10dy1kYXRlLW1vbnRoIG5nLW1vZGVsPSRjdHJsLm1vbnRoIG5nLWNoYW5nZT0kY3RybC51cGRhdGVEYXRlTW9kZWxBbmRWYWxpZGF0aW9uQ2xhc3NlcygpIG5nLXJlcXVpcmVkPSRjdHJsLmRhdGVSZXF1aXJlZCBuZy1kaXNhYmxlZD0kY3RybC5kYXRlRGlzYWJsZWQgb3B0aW9ucz0kY3RybC5kYXRlTW9udGhzPiA8L3R3LXNlbGVjdD4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImNvbC1zbS00IHR3LWRhdGUteWVhci1jb2x1bW5cXFwiPiA8bGFiZWwgY2xhc3M9c3Itb25seT5ZZWFyPC9sYWJlbD4gPGlucHV0IHR5cGU9bnVtYmVyIG5hbWU9eWVhciBjbGFzcz1cXFwiZm9ybS1jb250cm9sIHR3LWRhdGUteWVhclxcXCIgcGxhY2Vob2xkZXI9WVlZWSBuZy1tb2RlbD0kY3RybC55ZWFyIG5nLWNoYW5nZT0kY3RybC51cGRhdGVEYXRlTW9kZWxBbmRWYWxpZGF0aW9uQ2xhc3NlcygpIG5nLW1pbj0kY3RybC5taW4uZ2V0RnVsbFllYXIoKSBuZy1tYXg9JGN0cmwubWF4LmdldEZ1bGxZZWFyKCkgbWF4bGVuZ3RoPTQgbmctbWF4bGVuZ3RoPTQgbmctZGlzYWJsZWQ9JGN0cmwuZGF0ZURpc2FibGVkIG5nLXJlcXVpcmVkPSRjdHJsLmRhdGVSZXF1aXJlZCB0dy1mb2N1c2FibGUvPiA8L2Rpdj4gPC9kaXY+IFwiOyIsIm1vZHVsZS5leHBvcnRzID0gXCI8c3BhbiB0dy10b29sLXRpcCBkYXRhLW9yaWdpbmFsLXRpdGxlPVxcXCJ7eyAkY3RybC5kYXRlIHwgdHdEYXRlRm9ybWF0IDogJGN0cmwubG9jYWxlIDogJ2xvbmcnIH19XFxcIj4gPHNwYW4gY2xhc3M9XFxcImhpZGRlbi14cyBoaWRkZW4tc21cXFwiPiB7eyAkY3RybC5kYXRlIHwgdHdEYXRlRm9ybWF0IDogJGN0cmwubG9jYWxlIDogJGN0cmwuZm9ybWF0IH19IDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcImhpZGRlbi1tZCBoaWRkZW4tbGcgaGlkZGVuLXhsXFxcIj4ge3sgJGN0cmwuZGF0ZSB8IHR3RGF0ZUZvcm1hdCA6ICRjdHJsLmxvY2FsZSA6ICdzaG9ydCcgfX0gPC9zcGFuPiA8L3NwYW4+IFwiOyIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IG5nLXN3aXRjaD0kY3RybC50eXBlPiA8ZGl2IG5nLXN3aXRjaC13aGVuPXJhZGlvIGNsYXNzPXJhZGlvIG5nLWNsYXNzPVxcXCJ7ZGlzYWJsZWQ6ICRjdHJsLm5nRGlzYWJsZWQsICdyYWRpby1sZyc6IG9wdGlvbi5zZWNvbmRhcnl9XFxcIiBuZy1yZXBlYXQ9XFxcIm9wdGlvbiBpbiAkY3RybC5vcHRpb25zXFxcIj4gPGxhYmVsPiA8dHctcmFkaW8gbmFtZT17eyRjdHJsLm5hbWV9fSBuZy12YWx1ZT1vcHRpb24udmFsdWUgbmctbW9kZWw9JGN0cmwuaW50ZXJuYWxNb2RlbCBuZy1yZXF1aXJlZD0kY3RybC5uZ1JlcXVpcmVkIG5nLWRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgbmctY2hhbmdlPSRjdHJsLmNoYW5nZShvcHRpb24udmFsdWUpIG5nLWNsaWNrPSRjdHJsLmNoYW5nZShvcHRpb24udmFsdWUpIG5nLWZvY3VzPSRjdHJsLmZvY3VzKCkgbmctYmx1cj0kY3RybC5ibHVyKCk+PC90dy1yYWRpbz4ge3tvcHRpb24ubGFiZWx9fSA8c21hbGwgbmctaWY9b3B0aW9uLnNlY29uZGFyeT57e29wdGlvbi5zZWNvbmRhcnl9fTwvc21hbGw+IDwvbGFiZWw+IDwvZGl2PiA8ZGl2IG5nLXN3aXRjaC13aGVuPWNoZWNrYm94IGNsYXNzPWNoZWNrYm94IG5nLWNsYXNzPVxcXCJ7IGRpc2FibGVkOiAkY3RybC5uZ0Rpc2FibGVkLCAnY2hlY2tib3gtbGcnOiAkY3RybC5kZXNjcmlwdGlvbiB9XFxcIj4gPGxhYmVsPiA8dHctY2hlY2tib3ggbmFtZT17eyRjdHJsLm5hbWV9fSBuZy1tb2RlbD0kY3RybC5pbnRlcm5hbE1vZGVsIG5nLXJlcXVpcmVkPSRjdHJsLm5nUmVxdWlyZWQgbmctZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCBuZy1jaGFuZ2U9JGN0cmwuY2hhbmdlKCRjdHJsLmludGVybmFsTW9kZWwpIG5nLWNsaWNrPSRjdHJsLmNoYW5nZSgpIG5nLWZvY3VzPSRjdHJsLmZvY3VzKCkgbmctYmx1cj0kY3RybC5ibHVyKCk+PC90dy1jaGVja2JveD4ge3sgJGN0cmwubGFiZWwgfX0gPHNtYWxsIG5nLWlmPSRjdHJsLmRlc2NyaXB0aW9uPnt7ICRjdHJsLmRlc2NyaXB0aW9uIH19PC9zbWFsbD4gPC9sYWJlbD4gPC9kaXY+IDxkaXYgbmctc3dpdGNoLXdoZW49Y2hlY2tib3gtZ3JvdXA+IDx0dy1jaGVja2JveC1ncm91cCBuYW1lPXt7JGN0cmwubmFtZX19IG5nLW1vZGVsPSRjdHJsLmludGVybmFsTW9kZWwgb3B0aW9ucz0kY3RybC5vcHRpb25zIG5nLXJlcXVpcmVkPSRjdHJsLm5nUmVxdWlyZWQgbmctZGlzYWJsZWQ9JGN0cmwubmdEaXNhYmxlZCBuZy1jaGFuZ2U9JGN0cmwuY2hhbmdlKCRjdHJsLmludGVybmFsTW9kZWwpPjwvdHctY2hlY2tib3gtZ3JvdXA+IDwvZGl2PiA8ZGl2IG5nLXN3aXRjaC13aGVuPXNlbGVjdD4gPHR3LXNlbGVjdCBuYW1lPXt7JGN0cmwubmFtZX19IG9wdGlvbnM9JGN0cmwub3B0aW9ucyBmaWx0ZXI9XFxcInt7ICRjdHJsLm9wdGlvbnMubGVuZ3RoID4gOSA/ICcgJyA6ICcnIH19XFxcIiBwbGFjZWhvbGRlcj17eyRjdHJsLnBsYWNlaG9sZGVyfX0gbmctbW9kZWw9JGN0cmwuaW50ZXJuYWxNb2RlbCBuZy1yZXF1aXJlZD0kY3RybC5uZ1JlcXVpcmVkIG5nLWRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgbmctY2hhbmdlPSRjdHJsLmNoYW5nZSgkY3RybC5pbnRlcm5hbE1vZGVsKSBuZy1mb2N1cz0kY3RybC5mb2N1cygpIG5nLWJsdXI9JGN0cmwuYmx1cigpPjwvdHctc2VsZWN0PiA8L2Rpdj4gPGRpdiBuZy1zd2l0Y2gtd2hlbj1maWxlPiA8dHctdXBsb2FkIG5hbWU9e3skY3RybC5uYW1lfX0gbGFiZWw9e3skY3RybC5sYWJlbH19IGljb249e3skY3RybC51cGxvYWRJY29ufX0gaGVscC1pbWFnZT17eyRjdHJsLmhlbHBPcHRpb25zLmltYWdlfX0gcGxhY2Vob2xkZXI9e3skY3RybC5wbGFjZWhvbGRlcn19IGFjY2VwdD17eyRjdHJsLnVwbG9hZEFjY2VwdH19IGNvbXBsZXRlLXRleHQ9e3skY3RybC5sYWJlbH19IGJ1dHRvbi10ZXh0PXt7JGN0cmwudXBsb2FkT3B0aW9ucy5idXR0b25UZXh0fX0gY2FuY2VsLXRleHQ9e3skY3RybC51cGxvYWRPcHRpb25zLmNhbmNlbFRleHR9fSBwcm9jZXNzaW5nLXRleHQ9XFxcInt7ICRjdHJsLnVwbG9hZE9wdGlvbnMucHJvY2Vzc2luZ1RleHQgfX1cXFwiIHN1Y2Nlc3MtdGV4dD1cXFwie3sgJGN0cmwudXBsb2FkT3B0aW9ucy5zdWNjZXNzVGV4dCB9fVxcXCIgZmFpbHVyZS10ZXh0PVxcXCJ7eyAkY3RybC51cGxvYWRPcHRpb25zLmZhaWx1cmVUZXh0IH19XFxcIiBuby1jYW1lcmEtdGV4dD1cXFwie3sgJGN0cmwudXBsb2FkT3B0aW9ucy5ub0NhbWVyYVRleHQgfX1cXFwiIG5vLWNhbWVyYS1tZXNzYWdlPVxcXCJ7eyAkY3RybC51cGxvYWRPcHRpb25zLm5vQ2FtZXJhTWVzc2FnZSB9fVxcXCIgdmFsaWRhdGlvbi1tZXNzYWdlcz0kY3RybC51cGxvYWRPcHRpb25zLnZhbGlkYXRpb25NZXNzYWdlcyB2aWV3LWltYWdlLXRleHQ9e3skY3RybC51cGxvYWRPcHRpb25zLnZpZXdJbWFnZVRleHR9fSB0b28tbGFyZ2UtbWVzc2FnZT17eyRjdHJsLnVwbG9hZFRvb0xhcmdlTWVzc2FnZX19IG1heC1zaXplPSRjdHJsLm5nTWF4IG5nLW1vZGVsPSRjdHJsLmludGVybmFsTW9kZWwgbmctcmVxdWlyZWQ9JGN0cmwubmdSZXF1aXJlZCBuZy1kaXNhYmxlZD0kY3RybC5uZ0Rpc2FibGVkIG5nLWNoYW5nZT0kY3RybC5jaGFuZ2UoJGN0cmwuaW50ZXJuYWxNb2RlbCkgbmctZm9jdXM9JGN0cmwuZm9jdXMoKSBuZy1ibHVyPSRjdHJsLmJsdXIoKSBodHRwLW9wdGlvbnM9JGN0cmwucGVyc2lzdEFzeW5jIHNvdXJjZT0kY3RybC5maWxlVXBsb2FkU291cmNlIGNhbWVyYS1ndWlkZWxpbmVzPSRjdHJsLmNhbWVyYU9wdGlvbnMgb24tc3VjY2Vzcz0kY3RybC5vbkFzeW5jVXBsb2FkU3VjY2VzcyBvbi1mYWlsdXJlPSRjdHJsLm9uQXN5bmNVcGxvYWRGYWlsdXJlPjwvdHctdXBsb2FkPiA8L2Rpdj4gPGRpdiBuZy1zd2l0Y2gtd2hlbj1kYXRlfGRhdGUtdGltZSBuZy1zd2l0Y2gtd2hlbi1zZXBhcmF0b3I9fD4gPHR3LWRhdGUgbmFtZT17eyRjdHJsLm5hbWV9fSBsb2NhbGU9e3skY3RybC5sb2NhbGV9fSBuZy1taW49JGN0cmwubmdNaW4gbmctbWF4PSRjdHJsLm5nTWF4IG5nLW1vZGVsPSRjdHJsLmludGVybmFsTW9kZWwgbmctbW9kZWwtb3B0aW9ucz1cXFwieyBhbGxvd0ludmFsaWQ6IHRydWUgfVxcXCIgbmctcmVxdWlyZWQ9JGN0cmwubmdSZXF1aXJlZCBuZy1kaXNhYmxlZD0kY3RybC5uZ0Rpc2FibGVkIG5nLWNoYW5nZT0kY3RybC5jaGFuZ2UoJGN0cmwuaW50ZXJuYWxNb2RlbCkgbmctZm9jdXM9JGN0cmwuZm9jdXMoKSBuZy1ibHVyPSRjdHJsLmJsdXIoKSBtb2RlbC10eXBlPXN0cmluZz48L3R3LWRhdGU+IDwvZGl2PiA8ZGl2IG5nLXN3aXRjaC13aGVuPXRlbD4gPHR3LXRlbGVwaG9uZSBuYW1lPVxcXCJ7eyAkY3RybC5uYW1lIH19XFxcIiBwbGFjZWhvbGRlcj1cXFwie3sgJGN0cmwucGxhY2Vob2xkZXIgfX1cXFwiIG5nLW1vZGVsPSRjdHJsLmludGVybmFsTW9kZWwgbmctbW9kZWwtb3B0aW9ucz1cXFwieyBhbGxvd0ludmFsaWQ6IHRydWUsIGRlYm91bmNlOiAzMDAgfVxcXCIgbmctcmVxdWlyZWQ9JGN0cmwubmdSZXF1aXJlZCBuZy1kaXNhYmxlZD0kY3RybC5uZ0Rpc2FibGVkIG5nLWNoYW5nZT0kY3RybC5jaGFuZ2UoJGN0cmwuaW50ZXJuYWxNb2RlbCkgbmctZm9jdXM9JGN0cmwuZm9jdXMoKSBuZy1ibHVyPSRjdHJsLmJsdXIoKSBsb2NhbGU9XFxcInt7ICRjdHJsLmxvY2FsZSB9fVxcXCIgc2VhcmNoLXBsYWNlaG9sZGVyPVxcXCIgXFxcIj48L3R3LXRlbGVwaG9uZT4gPC9kaXY+IDxpbnB1dCBuZy1zd2l0Y2gtd2hlbj1udW1iZXIgbmFtZT17eyRjdHJsLm5hbWV9fSB0eXBlPW51bWJlciBzdGVwPXt7JGN0cmwuc3RlcH19IGNsYXNzPWZvcm0tY29udHJvbCBwbGFjZWhvbGRlcj17eyRjdHJsLnBsYWNlaG9sZGVyfX0gbmctbW9kZWw9JGN0cmwuaW50ZXJuYWxNb2RlbCBuZy1tb2RlbC1vcHRpb25zPVxcXCJ7IGFsbG93SW52YWxpZDogdHJ1ZSwgZGVib3VuY2U6IDMwMCB9XFxcIiBuZy1kaXNhYmxlZD0kY3RybC5uZ0Rpc2FibGVkIG5nLWNoYW5nZT0kY3RybC5jaGFuZ2UoJGN0cmwuaW50ZXJuYWxNb2RlbCkgbmctZm9jdXM9JGN0cmwuZm9jdXMoKSBuZy1ibHVyPSRjdHJsLmJsdXIoKSBhdXRvY29tcGxldGU9XFxcInt7ICRjdHJsLmdldEF1dG9jb21wbGV0ZVN0YXR1cygpIH19XFxcIi8+IDxpbnB1dCBuZy1zd2l0Y2gtd2hlbj1oaWRkZW4gbmFtZT17eyRjdHJsLm5hbWV9fSB0eXBlPWhpZGRlbiBuZy1tb2RlbD0kY3RybC5uZ01vZGVsIC8+IDxpbnB1dCBuZy1zd2l0Y2gtd2hlbj1wYXNzd29yZCBuYW1lPXt7JGN0cmwubmFtZX19IHR5cGU9cGFzc3dvcmQgY2xhc3M9Zm9ybS1jb250cm9sIHBsYWNlaG9sZGVyPXt7JGN0cmwucGxhY2Vob2xkZXJ9fSBuZy1tb2RlbD0kY3RybC5pbnRlcm5hbE1vZGVsIG5nLW1vZGVsLW9wdGlvbnM9XFxcInsgYWxsb3dJbnZhbGlkOiB0cnVlLCBkZWJvdW5jZTogMzAwIH1cXFwiIG5nLWRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgbmctY2hhbmdlPSRjdHJsLmNoYW5nZSgkY3RybC5pbnRlcm5hbE1vZGVsKSBuZy1mb2N1cz0kY3RybC5mb2N1cygpIG5nLWJsdXI9JGN0cmwuYmx1cigpIGF1dG9jb21wbGV0ZT1cXFwie3sgJGN0cmwuZ2V0QXV0b2NvbXBsZXRlU3RhdHVzKCkgfX1cXFwiLz4gPHRleHRhcmVhIG5nLXN3aXRjaC13aGVuPXRleHRhcmVhIG5hbWU9e3skY3RybC5uYW1lfX0gY2xhc3M9Zm9ybS1jb250cm9sIHBsYWNlaG9sZGVyPXt7JGN0cmwucGxhY2Vob2xkZXJ9fSBuZy1tb2RlbD0kY3RybC5pbnRlcm5hbE1vZGVsIG5nLW1vZGVsLW9wdGlvbnM9XFxcInsgYWxsb3dJbnZhbGlkOiB0cnVlLCBkZWJvdW5jZTogMzAwIH1cXFwiIG5nLWNoYW5nZT0kY3RybC5jaGFuZ2UoJGN0cmwuaW50ZXJuYWxNb2RlbCkgbmctZm9jdXM9JGN0cmwuZm9jdXMoKSBuZy1ibHVyPSRjdHJsLmJsdXIoKSBuZy1kaXNhYmxlZD0kY3RybC5uZ0Rpc2FibGVkIGF1dG9jb21wbGV0ZT1cXFwie3sgJGN0cmwuZ2V0QXV0b2NvbXBsZXRlU3RhdHVzKCkgfX1cXFwiPjwvdGV4dGFyZWE+IDxpbnB1dCBuZy1zd2l0Y2gtZGVmYXVsdCBuYW1lPXt7JGN0cmwubmFtZX19IHR5cGU9dGV4dCBjbGFzcz1mb3JtLWNvbnRyb2wgcGxhY2Vob2xkZXI9e3skY3RybC5wbGFjZWhvbGRlcn19IG5nLW1vZGVsPSRjdHJsLmludGVybmFsTW9kZWwgbmctbW9kZWwtb3B0aW9ucz1cXFwieyBhbGxvd0ludmFsaWQ6IHRydWUsIGRlYm91bmNlOiAzMDAgfVxcXCIgbmctY2hhbmdlPSRjdHJsLmNoYW5nZSgkY3RybC5pbnRlcm5hbE1vZGVsKSBuZy1mb2N1cz0kY3RybC5mb2N1cygpIG5nLWJsdXI9JGN0cmwuYmx1cigpIG5nLWRpc2FibGVkPSRjdHJsLm5nRGlzYWJsZWQgdHctdGV4dC1mb3JtYXQ9XFxcInt7ICRjdHJsLnRleHRGb3JtYXQgfX1cXFwiIGF1dG9jb21wbGV0ZT1cXFwie3sgJGN0cmwuZ2V0QXV0b2NvbXBsZXRlU3RhdHVzKCkgfX1cXFwiLz4gPC9kaXY+IFwiOyIsIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwIHR3LWZpZWxkLXt7ICRjdHJsLm5hbWUgfX0gY3VzdG9tLXZhbGlkYXRpb25cXFwiIG5nLWNsYXNzPVxcXCJ7XFxuICAgICdoYXMtZXJyb3InOiAkY3RybC5pc0Vycm9yU2hvd24oKSxcXG4gICAgJ2hhcy13YXJuaW5nJzogJGN0cmwuaXNXYXJuaW5nU2hvd24oKSxcXG4gICAgJ2hpZGRlbic6ICRjdHJsLmZpZWxkLmhpZGRlblxcbiAgfVxcXCI+IDxsYWJlbCBjbGFzcz1jb250cm9sLWxhYmVsIG5nLWlmPSRjdHJsLmlzTGFiZWxTaG93bigkY3RybC5jb250cm9sKT4ge3skY3RybC5maWVsZC50aXRsZX19IDwvbGFiZWw+IDx0dy1mb3JtLWNvbnRyb2wgbmFtZT1cXFwie3sgJGN0cmwubmFtZSB9fVxcXCIgbGFiZWw9XFxcInt7ICRjdHJsLmZpZWxkLnRpdGxlIH19XFxcIiBkZXNjcmlwdGlvbj1cXFwie3sgJGN0cmwuZmllbGQuZGVzY3JpcHRpb24gfX1cXFwiIHR5cGU9XFxcInt7ICRjdHJsLmNvbnRyb2wgfCBsb3dlcmNhc2UgfX1cXFwiIHBsYWNlaG9sZGVyPVxcXCJ7eyAkY3RybC5maWVsZC5wbGFjZWhvbGRlciB9fVxcXCIgaGVscC1vcHRpb25zPSRjdHJsLmZpZWxkLmhlbHAgbG9jYWxlPVxcXCJ7eyAkY3RybC5sb2NhbGUgfX1cXFwiIHVwbG9hZC1hY2NlcHQ9XFxcInt7ICRjdHJsLmZpZWxkLmFjY2VwdCB9fVxcXCIgdXBsb2FkLWljb249XFxcInt7ICRjdHJsLmZpZWxkLmljb24gfX1cXFwiIHVwbG9hZC10b28tbGFyZ2UtbWVzc2FnZT1cXFwie3sgJGN0cmwuZmllbGQudG9vTGFyZ2VNZXNzYWdlIH19XFxcIiBvcHRpb25zPSRjdHJsLmdldE9wdGlvbnMoKSB1cGxvYWQtb3B0aW9ucz0kY3RybC51cGxvYWRPcHRpb25zIG5nLW1vZGVsPSRjdHJsLm1vZGVsIG5nLWZvY3VzPSRjdHJsLm9uRm9jdXMoKSBuZy1ibHVyPSRjdHJsLm9uQmx1cigpIG5nLWNoYW5nZT0kY3RybC5vbkNoYW5nZSgkY3RybC5tb2RlbCkgbmctcmVxdWlyZWQ9JGN0cmwucmVxdWlyZWQgbmctZGlzYWJsZWQ9JGN0cmwuZmllbGQuZGlzYWJsZWQgdGV4dC1mb3JtYXQ9JGN0cmwuZmllbGQuZGlzcGxheUZvcm1hdCB2YWxpZGF0aW9uLWFzeW5jPSRjdHJsLmZpZWxkLnZhbGlkYXRpb25Bc3luYyBwZXJzaXN0LWFzeW5jPSRjdHJsLmZpZWxkLnBlcnNpc3RBc3luYyBmaWxlLXVwbG9hZC1zb3VyY2U9JGN0cmwuZmllbGQuc291cmNlVHlwZSBjYW1lcmEtb3B0aW9ucz0kY3RybC5maWVsZC5jYW1lcmEgb24tYXN5bmMtc3VjY2Vzcz0kY3RybC5vblBlcnNpc3RBc3luY1N1Y2Nlc3MocmVzcG9uc2UpIG9uLWFzeW5jLWZhaWx1cmU9JGN0cmwub25QZXJzaXN0QXN5bmNGYWlsdXJlKHJlc3BvbnNlKT48L3R3LWZvcm0tY29udHJvbD4gPGRpdiBjbGFzcz1cXFwiYWxlcnQgYWxlcnQtZGFuZ2VyIGFsZXJ0LWRldGFjaFxcXCIgbmctaWY9JGN0cmwuaXNBbGVydFNob3duKCk+IDxkaXYgbmctcmVwZWF0PVxcXCJmYWlsdXJlVHlwZSBpbiAkY3RybC5mYWlsdXJlc1xcXCIgbmctaWY9JGN0cmwudmFsaWRhdGlvblN0cmluZ3NbZmFpbHVyZVR5cGVdPiB7eyAkY3RybC52YWxpZGF0aW9uU3RyaW5nc1tmYWlsdXJlVHlwZV0gfX0gPC9kaXY+IDxkaXYgY2xhc3M9ZXJyb3ItcHJvdmlkZWQgbmctaWY9JGN0cmwuZXJyb3JNZXNzYWdlPiB7eyAkY3RybC5lcnJvck1lc3NhZ2UgfX0gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJhbGVydCBhbGVydC13YXJuaW5nIGFsZXJ0LWRldGFjaFxcXCIgbmctaWY9JGN0cmwuaXNXYXJuaW5nU2hvd24oKT4ge3sgJGN0cmwud2FybmluZ01lc3NhZ2UgfX0gPC9kaXY+IDxkaXYgbmctaWY9JGN0cmwuaXNIZWxwU2hvd24oKSBjbGFzcz1cXFwiYWxlcnQgYWxlcnQtZm9jdXMgYWxlcnQtZGV0YWNoXFxcIj4gPHNwYW4gbmctaWY9JGN0cmwuZmllbGQuaGVscC5tZXNzYWdlPiB7eyAkY3RybC5maWVsZC5oZWxwLm1lc3NhZ2UgfX0gPC9zcGFuPiA8dWwgbmctaWY9JGN0cmwuZmllbGQuaGVscC5saXN0IGNsYXNzPWxpc3QtdW5zdHlsZWQ+IDxsaSBuZy1yZXBlYXQ9XFxcImhlbHBNZXNzYWdlIGluICRjdHJsLmZpZWxkLmhlbHAubGlzdFxcXCI+e3sgaGVscE1lc3NhZ2UgfX08L2xpPiA8L3VsPiA8aW1nIG5nLWlmPVxcXCIkY3RybC5maWVsZC5oZWxwLmltYWdlICYmICRjdHJsLmNvbnRyb2wgIT09ICdmaWxlJ1xcXCIgbmctc3JjPXt7JGN0cmwuZmllbGQuaGVscC5pbWFnZX19IGFsdD1cXFwie3sgJGN0cmwuZmllbGQudGl0bGUgfX1cXFwiIGNsYXNzPVxcXCJ0aHVtYm5haWwgbS15LTJcXFwiLz4gPC9kaXY+IDwvZGl2PiBcIjsiLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdXBsb2FkLmxlc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3VwbG9hZC5sZXNzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdXBsb2FkLmxlc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcImRpdi50cmFuc3BhcmVudC1hcmVhe2JhY2tncm91bmQtY29sb3I6aHNsYSgwLDAlLDk4JSwuOSl9Lmljb24tY2lyY2xlLXNoYWRvd3tiYWNrZ3JvdW5kOiNmZmY7Ym94LXNoYWRvdzowIDRweCAxNnB4IHJnYmEoMCwwLDAsLjA4KTtwYWRkaW5nOjEycHg7Ym94LXNpemluZzpib3JkZXItYm94O2JvcmRlci1yYWRpdXM6OTlweH0uaWNvbi1jaXJjbGUtc2hhZG93IHN2Z3t0b3A6NHB4O3Bvc2l0aW9uOnJlbGF0aXZlfS5pbmxpbmUtc3Zne3RvcDouMzVlbTtwb3NpdGlvbjpyZWxhdGl2ZX0uZHJvcHBhYmxlPi5kcm9wcGFibGUtY2FyZC0td2lkZXJ7cGFkZGluZy1sZWZ0OjEwcHg7cGFkZGluZy1yaWdodDoxMHB4fUBtZWRpYSAobWluLXdpZHRoOjU3NnB4KXtwLmZpcnN0LWVycm9ye21pbi1oZWlnaHQ6NzJweH19QG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjU3NXB4KXsuZW1wdHktcHJvY2Vzc2luZy1saXN0e2hlaWdodDoxMzBweH0ucHJvY2Vzc2luZy1saXN0e21pbi1oZWlnaHQ6MTMwcHh9fUBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDo1NzVweCl7Lm11bHRpLXVwbG9hZHtoZWlnaHQ6Mzc1cHh9Lm11bHRpLXVwbG9hZCAuZW1wdHktc2NyZWVue3BhZGRpbmctdG9wOjQwcHh9LmVtcHR5LXByb2Nlc3NpbmctbGlzdCwucHJvY2Vzc2luZy1saXN0e2hlaWdodDoyOTBweH19LnByb2Nlc3NpbmctbGlzdHtvdmVyZmxvdzphdXRvfS5wcm9jZXNzaW5nLWxpc3QsLnByb2Nlc3NpbmctbGlzdCAucHJvY2Vzc2luZy1pdGVtIC5tZWRpYS1ib2R5LC5wcm9jZXNzaW5nLWxpc3QgLnByb2Nlc3NpbmctaXRlbSAubWVkaWEtcmlnaHR7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgI2UyZTZlOH0ucHJvY2Vzc2luZy1saXN0IC5sYXN0LWl0ZW0gLnByb2Nlc3NpbmctaXRlbSAubWVkaWEtYm9keSwucHJvY2Vzc2luZy1saXN0IC5sYXN0LWl0ZW0gLnByb2Nlc3NpbmctaXRlbSAubWVkaWEtcmlnaHR7Ym9yZGVyLWJvdHRvbTowfS5wcm9jZXNzaW5nLWxpc3QgLnByb2Nlc3NpbmctaXRlbXtwb3NpdGlvbjpyZWxhdGl2ZTt3aWR0aDoxMDAlfS5wcm9jZXNzaW5nLWxpc3QgLnByb2Nlc3NpbmctaXRlbSAudmVydGljYWwtY2VudGVye2FsaWduLXNlbGY6Y2VudGVyfS5lbXB0eS1wcm9jZXNzaW5nLWxpc3R7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXJ9LmVtcHR5LXByb2Nlc3NpbmctbGlzdCAuY2lyY2xle2JhY2tncm91bmQtY29sb3I6I2Q4ZjFmYX0uZW1wdHktcHJvY2Vzc2luZy1saXN0IC5lbXB0eS1zY3JlZW57YWxpZ24tc2VsZjpjZW50ZXJ9XCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIiwiXG4vKipcbiAqIFdoZW4gc291cmNlIG1hcHMgYXJlIGVuYWJsZWQsIGBzdHlsZS1sb2FkZXJgIHVzZXMgYSBsaW5rIGVsZW1lbnQgd2l0aCBhIGRhdGEtdXJpIHRvXG4gKiBlbWJlZCB0aGUgY3NzIG9uIHRoZSBwYWdlLiBUaGlzIGJyZWFrcyBhbGwgcmVsYXRpdmUgdXJscyBiZWNhdXNlIG5vdyB0aGV5IGFyZSByZWxhdGl2ZSB0byBhXG4gKiBidW5kbGUgaW5zdGVhZCBvZiB0aGUgY3VycmVudCBwYWdlLlxuICpcbiAqIE9uZSBzb2x1dGlvbiBpcyB0byBvbmx5IHVzZSBmdWxsIHVybHMsIGJ1dCB0aGF0IG1heSBiZSBpbXBvc3NpYmxlLlxuICpcbiAqIEluc3RlYWQsIHRoaXMgZnVuY3Rpb24gXCJmaXhlc1wiIHRoZSByZWxhdGl2ZSB1cmxzIHRvIGJlIGFic29sdXRlIGFjY29yZGluZyB0byB0aGUgY3VycmVudCBwYWdlIGxvY2F0aW9uLlxuICpcbiAqIEEgcnVkaW1lbnRhcnkgdGVzdCBzdWl0ZSBpcyBsb2NhdGVkIGF0IGB0ZXN0L2ZpeFVybHMuanNgIGFuZCBjYW4gYmUgcnVuIHZpYSB0aGUgYG5wbSB0ZXN0YCBjb21tYW5kLlxuICpcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3MpIHtcbiAgLy8gZ2V0IGN1cnJlbnQgbG9jYXRpb25cbiAgdmFyIGxvY2F0aW9uID0gdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJiB3aW5kb3cubG9jYXRpb247XG5cbiAgaWYgKCFsb2NhdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcImZpeFVybHMgcmVxdWlyZXMgd2luZG93LmxvY2F0aW9uXCIpO1xuICB9XG5cblx0Ly8gYmxhbmsgb3IgbnVsbD9cblx0aWYgKCFjc3MgfHwgdHlwZW9mIGNzcyAhPT0gXCJzdHJpbmdcIikge1xuXHQgIHJldHVybiBjc3M7XG4gIH1cblxuICB2YXIgYmFzZVVybCA9IGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgbG9jYXRpb24uaG9zdDtcbiAgdmFyIGN1cnJlbnREaXIgPSBiYXNlVXJsICsgbG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXFwvW15cXC9dKiQvLCBcIi9cIik7XG5cblx0Ly8gY29udmVydCBlYWNoIHVybCguLi4pXG5cdC8qXG5cdFRoaXMgcmVndWxhciBleHByZXNzaW9uIGlzIGp1c3QgYSB3YXkgdG8gcmVjdXJzaXZlbHkgbWF0Y2ggYnJhY2tldHMgd2l0aGluXG5cdGEgc3RyaW5nLlxuXG5cdCAvdXJsXFxzKlxcKCAgPSBNYXRjaCBvbiB0aGUgd29yZCBcInVybFwiIHdpdGggYW55IHdoaXRlc3BhY2UgYWZ0ZXIgaXQgYW5kIHRoZW4gYSBwYXJlbnNcblx0ICAgKCAgPSBTdGFydCBhIGNhcHR1cmluZyBncm91cFxuXHQgICAgICg/OiAgPSBTdGFydCBhIG5vbi1jYXB0dXJpbmcgZ3JvdXBcblx0ICAgICAgICAgW14pKF0gID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgXFwoICA9IE1hdGNoIGEgc3RhcnQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICg/OiAgPSBTdGFydCBhbm90aGVyIG5vbi1jYXB0dXJpbmcgZ3JvdXBzXG5cdCAgICAgICAgICAgICAgICAgW14pKF0rICA9IE1hdGNoIGFueXRoaW5nIHRoYXQgaXNuJ3QgYSBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgIHwgID0gT1Jcblx0ICAgICAgICAgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgICAgICAgICBbXikoXSogID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgXFwpICA9IE1hdGNoIGEgZW5kIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICApICA9IEVuZCBHcm91cFxuICAgICAgICAgICAgICAqXFwpID0gTWF0Y2ggYW55dGhpbmcgYW5kIHRoZW4gYSBjbG9zZSBwYXJlbnNcbiAgICAgICAgICApICA9IENsb3NlIG5vbi1jYXB0dXJpbmcgZ3JvdXBcbiAgICAgICAgICAqICA9IE1hdGNoIGFueXRoaW5nXG4gICAgICAgKSAgPSBDbG9zZSBjYXB0dXJpbmcgZ3JvdXBcblx0IFxcKSAgPSBNYXRjaCBhIGNsb3NlIHBhcmVuc1xuXG5cdCAvZ2kgID0gR2V0IGFsbCBtYXRjaGVzLCBub3QgdGhlIGZpcnN0LiAgQmUgY2FzZSBpbnNlbnNpdGl2ZS5cblx0ICovXG5cdHZhciBmaXhlZENzcyA9IGNzcy5yZXBsYWNlKC91cmxcXHMqXFwoKCg/OlteKShdfFxcKCg/OlteKShdK3xcXChbXikoXSpcXCkpKlxcKSkqKVxcKS9naSwgZnVuY3Rpb24oZnVsbE1hdGNoLCBvcmlnVXJsKSB7XG5cdFx0Ly8gc3RyaXAgcXVvdGVzIChpZiB0aGV5IGV4aXN0KVxuXHRcdHZhciB1bnF1b3RlZE9yaWdVcmwgPSBvcmlnVXJsXG5cdFx0XHQudHJpbSgpXG5cdFx0XHQucmVwbGFjZSgvXlwiKC4qKVwiJC8sIGZ1bmN0aW9uKG8sICQxKXsgcmV0dXJuICQxOyB9KVxuXHRcdFx0LnJlcGxhY2UoL14nKC4qKSckLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pO1xuXG5cdFx0Ly8gYWxyZWFkeSBhIGZ1bGwgdXJsPyBubyBjaGFuZ2Vcblx0XHRpZiAoL14oI3xkYXRhOnxodHRwOlxcL1xcL3xodHRwczpcXC9cXC98ZmlsZTpcXC9cXC9cXC98XFxzKiQpL2kudGVzdCh1bnF1b3RlZE9yaWdVcmwpKSB7XG5cdFx0ICByZXR1cm4gZnVsbE1hdGNoO1xuXHRcdH1cblxuXHRcdC8vIGNvbnZlcnQgdGhlIHVybCB0byBhIGZ1bGwgdXJsXG5cdFx0dmFyIG5ld1VybDtcblxuXHRcdGlmICh1bnF1b3RlZE9yaWdVcmwuaW5kZXhPZihcIi8vXCIpID09PSAwKSB7XG5cdFx0ICBcdC8vVE9ETzogc2hvdWxkIHdlIGFkZCBwcm90b2NvbD9cblx0XHRcdG5ld1VybCA9IHVucXVvdGVkT3JpZ1VybDtcblx0XHR9IGVsc2UgaWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiL1wiKSA9PT0gMCkge1xuXHRcdFx0Ly8gcGF0aCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlIGJhc2UgdXJsXG5cdFx0XHRuZXdVcmwgPSBiYXNlVXJsICsgdW5xdW90ZWRPcmlnVXJsOyAvLyBhbHJlYWR5IHN0YXJ0cyB3aXRoICcvJ1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byBjdXJyZW50IGRpcmVjdG9yeVxuXHRcdFx0bmV3VXJsID0gY3VycmVudERpciArIHVucXVvdGVkT3JpZ1VybC5yZXBsYWNlKC9eXFwuXFwvLywgXCJcIik7IC8vIFN0cmlwIGxlYWRpbmcgJy4vJ1xuXHRcdH1cblxuXHRcdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgdXJsKC4uLilcblx0XHRyZXR1cm4gXCJ1cmwoXCIgKyBKU09OLnN0cmluZ2lmeShuZXdVcmwpICsgXCIpXCI7XG5cdH0pO1xuXG5cdC8vIHNlbmQgYmFjayB0aGUgZml4ZWQgY3NzXG5cdHJldHVybiBmaXhlZENzcztcbn07XG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vY2FtZXJhLWNhcHR1cmUubGVzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2xlc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vY2FtZXJhLWNhcHR1cmUubGVzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9sZXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2NhbWVyYS1jYXB0dXJlLmxlc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIiNjYW1lcmF7cG9zaXRpb246Zml4ZWQ7dG9wOjA7bGVmdDowO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7ei1pbmRleDoxMDMwO2JhY2tncm91bmQ6IzAwMH0jY2FtZXJhLnRyYW5zbHVjZW50e2JhY2tncm91bmQ6cmdiYSgwLDAsMCwuOCl9I2NhbWVyYVZpZXdmaW5kZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7ei1pbmRleDoxMDMxO29iamVjdC1maXQ6Y29udGFpbn0jY2FtZXJhVmlld2ZpbmRlci5taXJyb3JlZHstd2Via2l0LXRyYW5zZm9ybTpzY2FsZVgoLTEpO3RyYW5zZm9ybTpzY2FsZVgoLTEpfSNjYW1lcmFWaWV3ZmluZGVyT3ZlcmxheXtwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjEwMzI7dG9wOjUwJTtsZWZ0OjUwJTstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwtNTAlKTt0cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsLTUwJSk7YmFja2dyb3VuZC1wb3NpdGlvbjo1MCU7YmFja2dyb3VuZC1zaXplOmNvbnRhaW47YmFja2dyb3VuZC1yZXBlYXQ6bm8tcmVwZWF0fSNjYW1lcmFWaWV3ZmluZGVyT3ZlcmxheS5taXJyb3JlZHstd2Via2l0LXRyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwtNTAlKSBzY2FsZVgoLTEpO3RyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwtNTAlKSBzY2FsZVgoLTEpfSNjYW1lcmFTZW5zb3J7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDoxMDMzO3RvcDo1MCU7bGVmdDo1MCU7dHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLC01MCUpfS5jYW1lcmEtY3RybC1ib3gtc21hbGx7ZGlzcGxheTppbmxpbmUtYmxvY2s7aGVpZ2h0OjYwcHg7d2lkdGg6NjBweDttYXJnaW4tbGVmdDoxMHB4O21hcmdpbi1yaWdodDoxMHB4O3ZlcnRpY2FsLWFsaWduOmJvdHRvbX0uY2FtZXJhLWN0cmwtYm94LWJpZ3tkaXNwbGF5OmlubGluZS1ibG9jaztoZWlnaHQ6ODRweDt3aWR0aDo4NHB4O21hcmdpbi1sZWZ0OjM2cHg7bWFyZ2luLXJpZ2h0OjM2cHg7dmVydGljYWwtYWxpZ246Ym90dG9tfS5jYW1lcmEtY3RybC1idG4tY2FuY2Vse2NvbG9yOnJlZDtiYWNrZ3JvdW5kLWNvbG9yOiNmOGY5ZmF9LmNhbWVyYS1jdHJsLWJ0bi1jb25maXJte2NvbG9yOmdyZWVuO2JhY2tncm91bmQtY29sb3I6I2Y4ZjlmYX0uY2FtZXJhLWN0cmwtYnRuLXNtYWxse2Rpc3BsYXk6aW5saW5lLWJsb2NrO2hlaWdodDo2MHB4O3dpZHRoOjYwcHg7cGFkZGluZzo0cHg7bWFyZ2luLWJvdHRvbTowO2ZvbnQtc2l6ZTo1MnB4O2xpbmUtaGVpZ2h0OjE7dGV4dC1hbGlnbjpjZW50ZXI7d2hpdGUtc3BhY2U6bm93cmFwO3ZlcnRpY2FsLWFsaWduOm1pZGRsZTstbXMtdG91Y2gtYWN0aW9uOm1hbmlwdWxhdGlvbjt0b3VjaC1hY3Rpb246bWFuaXB1bGF0aW9uO2N1cnNvcjpwb2ludGVyOy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZTtiYWNrZ3JvdW5kLWltYWdlOm5vbmU7Ym9yZGVyLXJhZGl1czo1MCV9LmNhbWVyYS1jdHJsLWJ0bi1iaWctaW5uZXJ7aGVpZ2h0OjY0cHg7d2lkdGg6NjRweDtwYWRkaW5nOjA7YmFja2dyb3VuZC1jb2xvcjojZjhmOWZhO2JvcmRlcjoxcHggc29saWQ7Ym9yZGVyLXJhZGl1czo1MCU7Ym9yZGVyLWNvbG9yOiNmOGY5ZmF9LmNhbWVyYS1jdHJsLWJ0bi1iaWcsLmNhbWVyYS1jdHJsLWJ0bi1iaWctaW5uZXJ7ZGlzcGxheTppbmxpbmUtYmxvY2s7bWFyZ2luLWJvdHRvbTowO3ZlcnRpY2FsLWFsaWduOm1pZGRsZX0uY2FtZXJhLWN0cmwtYnRuLWJpZ3toZWlnaHQ6ODRweDt3aWR0aDo4NHB4O3BhZGRpbmc6MnB4Oy1tcy10b3VjaC1hY3Rpb246bWFuaXB1bGF0aW9uO3RvdWNoLWFjdGlvbjptYW5pcHVsYXRpb247Y3Vyc29yOnBvaW50ZXI7LXdlYmtpdC11c2VyLXNlbGVjdDpub25lOy1tb3otdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lO2JhY2tncm91bmQtY29sb3I6IzM0M2E0MDtiYWNrZ3JvdW5kLWltYWdlOm5vbmU7Ym9yZGVyOjhweCBzb2xpZDtib3JkZXItcmFkaXVzOjUwJTtib3JkZXItY29sb3I6I2Y4ZjlmYX0uY2FtZXJhLWN0cmwtYmFye3BhZGRpbmctdG9wOjEwcHg7cGFkZGluZy1ib3R0b206MTBweDt6LWluZGV4OjEwMzQhaW1wb3J0YW50fS5maXhlZC1ib3R0b217cG9zaXRpb246Zml4ZWQ7cmlnaHQ6MDtib3R0b206MDtsZWZ0OjA7ei1pbmRleDoxMDMwfVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiIsIm1vZHVsZS5leHBvcnRzID0gXCI8Z2VuZXJpYy1zY2hlbWEgc2NoZW1hPSRjdHJsLnNjaGVtYSBtb2RlbD0kY3RybC5tb2RlbCBlcnJvcnM9JGN0cmwuZXJyb3JzIGxvY2FsZT0kY3RybC5sb2NhbGUgdHJhbnNsYXRpb25zPSRjdHJsLnRyYW5zbGF0aW9ucyBzdWJtaXR0ZWQ9JGN0cmwuc3VibWl0dGVkIG9uLWNoYW5nZT1cXFwiJGN0cmwub25Nb2RlbENoYW5nZShtb2RlbCwgc2NoZW1hKVxcXCI+IDwvZ2VuZXJpYy1zY2hlbWE+IFwiOyIsIm1vZHVsZS5leHBvcnRzID0gXCI8aDMgbmctaWY9JGN0cmwuc2NoZW1hLnRpdGxlIGNsYXNzPXBhZ2UtaGVhZGVyPiB7eyAkY3RybC5zY2hlbWEudGl0bGUgfX0gPC9oMz4gPHAgbmctaWY9JGN0cmwuc2NoZW1hLmRlc2NyaXB0aW9uPiB7eyAkY3RybC5zY2hlbWEuZGVzY3JpcHRpb24gfX0gPC9wPiA8ZGl2IG5nLWlmPSRjdHJsLnNjaGVtYS5oZWxwLndhcm5pbmcgY2xhc3M9XFxcImFsZXJ0IGFsZXJ0LXdhcm5pbmdcXFwiPiB7eyAkY3RybC5zY2hlbWEuaGVscC53YXJuaW5nIH19IDwvZGl2PiA8ZGl2IGNsYXNzPXJvdz4gPGRpdiBuZy1yZXBlYXQ9XFxcIihpbmRleCwgbmVzdGVkU2NoZW1hKSBpbiAkY3RybC5zY2hlbWEuYWxsT2ZcXFwiIGNsYXNzPWNvbC14cy0xMiBuZy1jbGFzcz1cXFwie1xcbiAgICAgICdjb2wtc20tNCc6ICEkY3RybC5uYXJyb3cgICYmIG5lc3RlZFNjaGVtYS53aWR0aCA9PT0gJ3NtJyxcXG4gICAgICAnY29sLXNtLTYnOiAhJGN0cmwubmFycm93ICAmJiBuZXN0ZWRTY2hlbWEud2lkdGggPT09ICdtZCcsXFxuICAgICAgJ2NvbC1zbS0xMic6ICRjdHJsLm5hcnJvdyB8fCBuZXN0ZWRTY2hlbWEud2lkdGggPT09ICdsZydcXG4gICAgfVxcXCI+IDxnZW5lcmljLXNjaGVtYSBzY2hlbWE9bmVzdGVkU2NoZW1hIG1vZGVsPSRjdHJsLm1vZGVsc1tpbmRleF0gZXJyb3JzPSRjdHJsLmVycm9ycyBsb2NhbGU9JGN0cmwubG9jYWxlIHRyYW5zbGF0aW9ucz0kY3RybC50cmFuc2xhdGlvbnMgc3VibWl0dGVkPSRjdHJsLnN1Ym1pdHRlZCBvbi1jaGFuZ2U9XFxcIiRjdHJsLm9uTW9kZWxDaGFuZ2UoaW5kZXgsIG1vZGVsLCBzY2hlbWEpXFxcIj4gPC9nZW5lcmljLXNjaGVtYT4gPC9kaXY+IDwvZGl2PiBcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBuZy1pZj0kY3RybC5pc1NpbXBsZVR5cGUoJGN0cmwuc2NoZW1hLml0ZW1zLnR5cGUpPiBVbnN1cHBvcnRlZCA8L2Rpdj4gPGRpdiBuZy1pZj0hJGN0cmwuaXNTaW1wbGVUeXBlKCRjdHJsLnNjaGVtYS5pdGVtcy50eXBlKT4gPGg0IGNsYXNzPXBhZ2UtaGVhZGVyIG5nLWlmPSRjdHJsLnNjaGVtYS50aXRsZT4ge3sgJGN0cmwuc2NoZW1hLnRpdGxlIH19IDwvaDQ+IDxwIG5nLWlmPSRjdHJsLnNjaGVtYS5kZXNjcmlwdGlvbj4ge3sgJGN0cmwuc2NoZW1hLmRlc2NyaXB0aW9uIH19IDwvcD4gPGRpdiBuZy1yZXBlYXQ9XFxcIihpbmRleCwgY2hpbGRNb2RlbCkgaW4gJGN0cmwubW9kZWxcXFwiPiA8aHIgbmctaWY9XFxcImluZGV4ID4gMFxcXCIgY2xhc3M9XFxcIm0tdC0xIG0tYi0yXFxcIi8+IDxkaXYgY2xhc3M9cm93PiA8ZGl2IGNsYXNzPWNvbC1zbS05PiA8Z2VuZXJpYy1zY2hlbWEgc2NoZW1hPSRjdHJsLnNjaGVtYS5pdGVtcyBtb2RlbD1jaGlsZE1vZGVsIGVycm9ycz0kY3RybC5lcnJvcnNbaW5kZXhdIGxvY2FsZT0kY3RybC5sb2NhbGUgdHJhbnNsYXRpb25zPSRjdHJsLnRyYW5zbGF0aW9ucyBzdWJtaXR0ZWQ9JGN0cmwuc3VibWl0dGVkIG9uLWNoYW5nZT1cXFwiJGN0cmwub25Nb2RlbENoYW5nZShpbmRleCwgbW9kZWwsIHNjaGVtYSlcXFwiPiA8L2dlbmVyaWMtc2NoZW1hPiA8L2Rpdj4gPGRpdiBjbGFzcz1jb2wtc20tMz4gPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1kYW5nZXIgYnRuLWJsb2NrIG0tdC0zXFxcIiBuZy1jbGljaz0kY3RybC5yZW1vdmUoaW5kZXgpIG5nLWRpc2FibGVkPVxcXCJpbmRleCA8ICRjdHJsLnNjaGVtYS5taW5JdGVtc1xcXCI+IHt7ICRjdHJsLnRyYW5zbGF0aW9ucy5hcnJheS5yZW1vdmUgfX0gPC9idXR0b24+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tZGVmYXVsdFxcXCIgbmctZGlzYWJsZWQ9XFxcIiRjdHJsLnNjaGVtYS5tYXhJdGVtcyAmJiAkY3RybC5tb2RlbC5sZW5ndGggPj0gJGN0cmwuc2NoZW1hLm1heEl0ZW1zXFxcIiBuZy1jbGljaz0kY3RybC5hZGQoKT4ge3sgJGN0cmwudHJhbnNsYXRpb25zLmFycmF5LmFkZCB9fSA8L2J1dHRvbj4gPC9kaXY+IFwiOyIsIm1vZHVsZS5leHBvcnRzID0gXCI8dHctZmllbGQgbmFtZT1cXFwie3sgJGN0cmwua2V5IH19XFxcIiBtb2RlbD0kY3RybC5pbnRlcm5hbE1vZGVsIGZpZWxkPSRjdHJsLnNjaGVtYSByZXF1aXJlZD0kY3RybC5yZXF1aXJlZCBzdWJtaXR0ZWQ9JGN0cmwuc3VibWl0dGVkIGxvY2FsZT1cXFwie3sgJGN0cmwubG9jYWxlIH19XFxcIiBvbi1jaGFuZ2U9JGN0cmwub25Nb2RlbENoYW5nZSh2YWx1ZSkgZXJyb3ItbWVzc2FnZT0kY3RybC5lcnJvcnMgd2FybmluZy1tZXNzYWdlPSRjdHJsLnNjaGVtYS5oZWxwLndhcm5pbmcgdmFsaWRhdGlvbi1tZXNzYWdlcz0kY3RybC5nZXRWYWxpZGF0aW9uTWVzc2FnZXMoKSB1cGxvYWQtb3B0aW9ucz0kY3RybC50cmFuc2xhdGlvbnMudXBsb2FkPiA8L3R3LWZpZWxkPiBcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPG9uZS1vZi1zY2hlbWEgbmctaWY9JGN0cmwuc2NoZW1hLm9uZU9mIG1vZGVsPSRjdHJsLm1vZGVsIHNjaGVtYT0kY3RybC5zY2hlbWEgZXJyb3JzPSRjdHJsLmVycm9ycyBsb2NhbGU9JGN0cmwubG9jYWxlIHRyYW5zbGF0aW9ucz0kY3RybC50cmFuc2xhdGlvbnMgc3VibWl0dGVkPSRjdHJsLnN1Ym1pdHRlZCBvbi1jaGFuZ2U9XFxcIiRjdHJsLm9uTW9kZWxDaGFuZ2UobW9kZWwsIHNjaGVtYSlcXFwiPiA8L29uZS1vZi1zY2hlbWE+IDxhbGwtb2Ytc2NoZW1hIG5nLWlmPSRjdHJsLnNjaGVtYS5hbGxPZiBtb2RlbD0kY3RybC5tb2RlbCBzY2hlbWE9JGN0cmwuc2NoZW1hIGVycm9ycz0kY3RybC5lcnJvcnMgbG9jYWxlPSRjdHJsLmxvY2FsZSB0cmFuc2xhdGlvbnM9JGN0cmwudHJhbnNsYXRpb25zIHN1Ym1pdHRlZD0kY3RybC5zdWJtaXR0ZWQgb24tY2hhbmdlPVxcXCIkY3RybC5vbk1vZGVsQ2hhbmdlKG1vZGVsLCBzY2hlbWEpXFxcIj4gPC9hbGwtb2Ytc2NoZW1hPiA8YmFzaWMtdHlwZS1zY2hlbWEgbmctaWY9XFxcIiRjdHJsLnNjaGVtYS50eXBlICYmICgkY3RybC5zY2hlbWEudHlwZSAhPT0gJ29iamVjdCcgJiYgJGN0cmwuc2NoZW1hLnR5cGUgIT09ICdhcnJheScpXFxcIiBtb2RlbD0kY3RybC5tb2RlbCBzY2hlbWE9JGN0cmwuc2NoZW1hIGVycm9ycz0kY3RybC5lcnJvcnMgbG9jYWxlPSRjdHJsLmxvY2FsZSB0cmFuc2xhdGlvbnM9JGN0cmwudHJhbnNsYXRpb25zIHJlcXVpcmVkPSRjdHJsLnJlcXVpcmVkIHN1Ym1pdHRlZD0kY3RybC5zdWJtaXR0ZWQgb24tY2hhbmdlPVxcXCIkY3RybC5vbk1vZGVsQ2hhbmdlKG1vZGVsLCBzY2hlbWEpXFxcIj4gPC9iYXNpYy10eXBlLXNjaGVtYT4gPG9iamVjdC1zY2hlbWEgbmctaWY9XFxcIiRjdHJsLnNjaGVtYS50eXBlID09PSAnb2JqZWN0J1xcXCIgbW9kZWw9JGN0cmwubW9kZWwgc2NoZW1hPSRjdHJsLnNjaGVtYSBlcnJvcnM9JGN0cmwuZXJyb3JzIGxvY2FsZT0kY3RybC5sb2NhbGUgdHJhbnNsYXRpb25zPSRjdHJsLnRyYW5zbGF0aW9ucyBzdWJtaXR0ZWQ9JGN0cmwuc3VibWl0dGVkIG9uLWNoYW5nZT1cXFwiJGN0cmwub25Nb2RlbENoYW5nZShtb2RlbCwgc2NoZW1hKVxcXCIgaGlkZS10aXRsZT0kY3RybC5oaWRlVGl0bGU+IDwvb2JqZWN0LXNjaGVtYT4gPGFycmF5LXNjaGVtYSBuZy1pZj1cXFwiJGN0cmwuc2NoZW1hLnR5cGUgPT09ICdhcnJheSdcXFwiIG1vZGVsPSRjdHJsLm1vZGVsIHNjaGVtYT0kY3RybC5zY2hlbWEgZXJyb3JzPSRjdHJsLmVycm9ycyBsb2NhbGU9JGN0cmwubG9jYWxlIHRyYW5zbGF0aW9ucz0kY3RybC50cmFuc2xhdGlvbnMgc3VibWl0dGVkPSRjdHJsLnN1Ym1pdHRlZCBvbi1jaGFuZ2U9XFxcIiRjdHJsLm9uTW9kZWxDaGFuZ2UobW9kZWwsIHNjaGVtYSlcXFwiPiA8L2FycmF5LXNjaGVtYT4gXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBcIjxmaWVsZHNldD4gPGxlZ2VuZCBuZy1pZj1cXFwiJGN0cmwuc2NoZW1hLnRpdGxlICYmICEkY3RybC5oaWRlVGl0bGVcXFwiPiB7eyAkY3RybC5zY2hlbWEudGl0bGUgfX0gPC9sZWdlbmQ+IDxwIG5nLWlmPSRjdHJsLnNjaGVtYS5kZXNjcmlwdGlvbj4ge3sgJGN0cmwuc2NoZW1hLmRlc2NyaXB0aW9uIH19IDwvcD4gPGRpdiBuZy1pZj0kY3RybC5zY2hlbWEuaGVscC53YXJuaW5nIGNsYXNzPVxcXCJhbGVydCBhbGVydC13YXJuaW5nXFxcIj4ge3sgJGN0cmwuc2NoZW1hLmhlbHAud2FybmluZyB9fSA8L2Rpdj4gPGRpdiBjbGFzcz1yb3c+IDxkaXYgbmctcmVwZWF0PVxcXCIocHJvcGVydHksIG5lc3RlZFNjaGVtYSkgaW4gJGN0cmwuc2NoZW1hLnByb3BlcnRpZXNcXFwiIGNsYXNzPWNvbC14cy0xMiBuZy1oaWRlPW5lc3RlZFNjaGVtYS5oaWRkZW4gbmctY2xhc3M9XFxcIntcXG4gICAgICAgICdjb2wtc20tNCc6ICEkY3RybC5uYXJyb3cgICYmIG5lc3RlZFNjaGVtYS53aWR0aCA9PT0gJ3NtJyxcXG4gICAgICAgICdjb2wtc20tNic6ICEkY3RybC5uYXJyb3cgICYmIG5lc3RlZFNjaGVtYS53aWR0aCA9PT0gJ21kJyxcXG4gICAgICAgICdjb2wtc20tMTInOiAkY3RybC5uYXJyb3cgfHwgbmVzdGVkU2NoZW1hLndpZHRoID09PSAnbGcnXFxuICAgICAgfVxcXCI+IDxnZW5lcmljLXNjaGVtYSBzY2hlbWE9bmVzdGVkU2NoZW1hIG1vZGVsPSRjdHJsLm1vZGVsW3Byb3BlcnR5XSBlcnJvcnM9JGN0cmwuZXJyb3JzW3Byb3BlcnR5XSBsb2NhbGU9JGN0cmwubG9jYWxlIHRyYW5zbGF0aW9ucz0kY3RybC50cmFuc2xhdGlvbnMgcmVxdWlyZWQ9JGN0cmwuaXNSZXF1aXJlZChwcm9wZXJ0eSkgc3VibWl0dGVkPSRjdHJsLnN1Ym1pdHRlZCBvbi1jaGFuZ2U9XFxcIiRjdHJsLm9uTW9kZWxDaGFuZ2UocHJvcGVydHksIG1vZGVsLCBzY2hlbWEpXFxcIj4gPC9nZW5lcmljLXNjaGVtYT4gPC9kaXY+IDwvZGl2PiA8L2ZpZWxkc2V0PiBcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IFwiPGxhYmVsIGNsYXNzPWNvbnRyb2wtbGFiZWwgbmctaWY9JGN0cmwuc2NoZW1hLnRpdGxlPiB7eyAkY3RybC5zY2hlbWEudGl0bGUgfX0gPC9sYWJlbD4gPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cCBtLWItNVxcXCI+IDxkaXYgY2xhc3M9cmFkaW8gbmctcmVwZWF0PVxcXCIoaW5kZXgsIHNjaGVtYSkgaW4gJGN0cmwuc2NoZW1hLm9uZU9mXFxcIiBuZy1jbGFzcz1cXFwieydyYWRpby1sZyc6IHNjaGVtYS5kZXNjcmlwdGlvbn1cXFwiPiA8bGFiZWw+IDx0dy1yYWRpbyBuZy1tb2RlbD0kY3RybC5hY3RpdmVJbmRleCBuZy12YWx1ZT1cXFwiKGluZGV4ICsgMSlcXFwiIG5nLWNoYW5nZT1cXFwiJGN0cmwub25TY2hlbWFDaGFuZ2Uoc2NoZW1hLCBpbmRleClcXFwiPjwvdHctcmFkaW8+IHt7IHNjaGVtYS50aXRsZSB9fSA8cCBuZy1pZj1zY2hlbWEuZGVzY3JpcHRpb24gY2xhc3M9XFxcInNlY29uZGFyeSBtLWItMFxcXCI+IHt7IHNjaGVtYS5kZXNjcmlwdGlvbiB9fSA8L3A+IDwvbGFiZWw+IDwvZGl2PiA8L2Rpdj4gPGRpdiBuZy1yZXBlYXQ9XFxcIihpbmRleCwgc2NoZW1hKSBpbiAkY3RybC5zY2hlbWEub25lT2ZcXFwiPiA8Z2VuZXJpYy1zY2hlbWEgbmctaWY9XFxcIiRjdHJsLmFjdGl2ZUluZGV4ID09PSAoaW5kZXggKyAxKVxcXCIgc2NoZW1hPXNjaGVtYSBtb2RlbD0kY3RybC5tb2RlbHNbaW5kZXhdIGVycm9ycz0kY3RybC5lcnJvcnMgbG9jYWxlPSRjdHJsLmxvY2FsZSB0cmFuc2xhdGlvbnM9JGN0cmwudHJhbnNsYXRpb25zIHN1Ym1pdHRlZD0kY3RybC5zdWJtaXR0ZWQgb24tY2hhbmdlPVxcXCIkY3RybC5vbk1vZGVsQ2hhbmdlKG1vZGVsLCBzY2hlbWEsIGluZGV4KVxcXCIgaGlkZS10aXRsZT10cnVlPiA8L2dlbmVyaWMtc2NoZW1hPiA8L2Rpdj4gXCI7IiwiaW1wb3J0IHsgaXNPYmplY3QsIGlzQXJyYXkgfSBmcm9tICcuLi90eXBlLXZhbGlkYXRvcnMnO1xuXG5pbXBvcnQge1xuICBnZXRTdHJpbmdWYWxpZGF0aW9uRmFpbHVyZXMsXG4gIGdldE51bWJlclZhbGlkYXRpb25GYWlsdXJlcyxcbiAgZ2V0SW50ZWdlclZhbGlkYXRpb25GYWlsdXJlcyxcbiAgZ2V0Qm9vbGVhblZhbGlkYXRpb25GYWlsdXJlcyxcbiAgZ2V0RW51bVZhbGlkYXRpb25GYWlsdXJlcyxcbiAgZ2V0Q29uc3RWYWxpZGF0aW9uRmFpbHVyZXMsXG4gIGdldEFycmF5VmFsaWRhdGlvbkZhaWx1cmVzXG59IGZyb20gJy4uL3ZhbGlkYXRpb24tZmFpbHVyZXMnO1xuXG5mdW5jdGlvbiBpc1ZhbGlkU3RyaW5nU2NoZW1hKHZhbHVlLCBzY2hlbWEpIHtcbiAgcmV0dXJuICFnZXRTdHJpbmdWYWxpZGF0aW9uRmFpbHVyZXModmFsdWUsIHNjaGVtYSkubGVuZ3RoO1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkTnVtYmVyU2NoZW1hKHZhbHVlLCBzY2hlbWEpIHtcbiAgcmV0dXJuICFnZXROdW1iZXJWYWxpZGF0aW9uRmFpbHVyZXModmFsdWUsIHNjaGVtYSkubGVuZ3RoO1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkSW50ZWdlclNjaGVtYSh2YWx1ZSwgc2NoZW1hKSB7XG4gIHJldHVybiAhZ2V0SW50ZWdlclZhbGlkYXRpb25GYWlsdXJlcyh2YWx1ZSwgc2NoZW1hKS5sZW5ndGg7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRCb29sZWFuU2NoZW1hKHZhbHVlLCBzY2hlbWEpIHtcbiAgcmV0dXJuICFnZXRCb29sZWFuVmFsaWRhdGlvbkZhaWx1cmVzKHZhbHVlLCBzY2hlbWEpLmxlbmd0aDtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZEVudW1TY2hlbWEodmFsdWUsIHNjaGVtYSkge1xuICByZXR1cm4gIWdldEVudW1WYWxpZGF0aW9uRmFpbHVyZXModmFsdWUsIHNjaGVtYSkubGVuZ3RoO1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkQ29uc3RTY2hlbWEodmFsdWUsIHNjaGVtYSkge1xuICByZXR1cm4gIWdldENvbnN0VmFsaWRhdGlvbkZhaWx1cmVzKHZhbHVlLCBzY2hlbWEpLmxlbmd0aDtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZE9iamVjdFNjaGVtYSh2YWx1ZSwgc2NoZW1hKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IHNjaGVtYS50eXBlICE9PSAnb2JqZWN0JyB8fCAhaXNPYmplY3Qoc2NoZW1hLnByb3BlcnRpZXMpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIE9iamVjdC5rZXlzKHNjaGVtYS5wcm9wZXJ0aWVzKVxuICAgIC5tYXAocHJvcGVydHlOYW1lID0+IGlzT2JqZWN0UHJvcGVydHlWYWxpZChcbiAgICAgIHZhbHVlW3Byb3BlcnR5TmFtZV0sXG4gICAgICBzY2hlbWEucHJvcGVydGllc1twcm9wZXJ0eU5hbWVdLFxuICAgICAgc2NoZW1hLnJlcXVpcmVkICYmIHNjaGVtYS5yZXF1aXJlZC5pbmRleE9mKHByb3BlcnR5TmFtZSkgPj0gMFxuICAgICkpXG4gICAgLmV2ZXJ5KHByb3BlcnR5ID0+IHByb3BlcnR5KTtcbn1cblxuZnVuY3Rpb24gaXNPYmplY3RQcm9wZXJ0eVZhbGlkKHByb3BlcnR5VmFsdWUsIHByb3BlcnR5U2NoZW1hLCBpc1JlcXVpcmVkKSB7XG4gIGlmICh0eXBlb2YgcHJvcGVydHlWYWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gIWlzUmVxdWlyZWQ7XG4gIH1cbiAgcmV0dXJuIGlzVmFsaWRTY2hlbWEocHJvcGVydHlWYWx1ZSwgcHJvcGVydHlTY2hlbWEpO1xufVxuXG5mdW5jdGlvbiBpc1ZhbGlkQXJyYXlTY2hlbWEodmFsdWUsIHNjaGVtYSkge1xuICBpZiAoc2NoZW1hLnR5cGUgIT09ICdhcnJheScgfHwgIWlzT2JqZWN0KHNjaGVtYS5pdGVtcykpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAoZ2V0QXJyYXlWYWxpZGF0aW9uRmFpbHVyZXModmFsdWUsIHNjaGVtYSkubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB2YWx1ZS5tYXAoaXRlbSA9PiBpc1ZhbGlkU2NoZW1hKGl0ZW0sIHNjaGVtYS5pdGVtcykpLmV2ZXJ5KHZhbGlkID0+IHZhbGlkKTtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZE9uZU9mU2NoZW1hKHZhbHVlLCBzY2hlbWEpIHtcbiAgaWYgKCFpc0FycmF5KHNjaGVtYS5vbmVPZikpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgcmV0dXJuIHNjaGVtYS5vbmVPZi5zb21lKGNoaWxkU2NoZW1hID0+IGlzVmFsaWRTY2hlbWEodmFsdWUsIGNoaWxkU2NoZW1hKSk7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRBbGxPZlNjaGVtYSh2YWx1ZSwgc2NoZW1hKSB7XG4gIGlmICghaXNBcnJheShzY2hlbWEuYWxsT2YpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiBzY2hlbWEuYWxsT2YubWFwKGNoaWxkU2NoZW1hID0+IGlzVmFsaWRTY2hlbWEodmFsdWUsIGNoaWxkU2NoZW1hKSkuZXZlcnkodmFsaWQgPT4gdmFsaWQpO1xufVxuXG4vKipcbiAqIFZhbGlkYXRlIGFueSB2YWx1ZSBhZ2FpbnN0IGEgZ2l2ZW4gc2NoZW1hXG4gKi9cbmZ1bmN0aW9uIGlzVmFsaWRTY2hlbWEodmFsdWUsIHNjaGVtYSkge1xuICBpZiAoc2NoZW1hLm9uZU9mKSB7XG4gICAgcmV0dXJuIGlzVmFsaWRPbmVPZlNjaGVtYSh2YWx1ZSwgc2NoZW1hKTtcbiAgfVxuXG4gIGlmIChzY2hlbWEuYWxsT2YpIHtcbiAgICByZXR1cm4gaXNWYWxpZEFsbE9mU2NoZW1hKHZhbHVlLCBzY2hlbWEpO1xuICB9XG5cbiAgaWYgKHNjaGVtYS5lbnVtKSB7XG4gICAgcmV0dXJuIGlzVmFsaWRFbnVtU2NoZW1hKHZhbHVlLCBzY2hlbWEpO1xuICB9XG5cbiAgaWYgKHNjaGVtYS5jb25zdCkge1xuICAgIHJldHVybiBpc1ZhbGlkQ29uc3RTY2hlbWEodmFsdWUsIHNjaGVtYSk7XG4gIH1cblxuICBzd2l0Y2ggKHNjaGVtYS50eXBlKSB7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHJldHVybiBpc1ZhbGlkU3RyaW5nU2NoZW1hKHZhbHVlLCBzY2hlbWEpO1xuICAgIGNhc2UgJ251bWJlcic6XG4gICAgICByZXR1cm4gaXNWYWxpZE51bWJlclNjaGVtYSh2YWx1ZSwgc2NoZW1hKTtcbiAgICBjYXNlICdpbnRlZ2VyJzpcbiAgICAgIHJldHVybiBpc1ZhbGlkSW50ZWdlclNjaGVtYSh2YWx1ZSwgc2NoZW1hKTtcbiAgICBjYXNlICdib29sZWFuJzpcbiAgICAgIHJldHVybiBpc1ZhbGlkQm9vbGVhblNjaGVtYSh2YWx1ZSwgc2NoZW1hKTtcbiAgICBjYXNlICdhcnJheSc6XG4gICAgICByZXR1cm4gaXNWYWxpZEFycmF5U2NoZW1hKHZhbHVlLCBzY2hlbWEpO1xuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICByZXR1cm4gaXNWYWxpZE9iamVjdFNjaGVtYSh2YWx1ZSwgc2NoZW1hKTtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cbmV4cG9ydCB7IGlzVmFsaWRTY2hlbWEgfTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuIiwiaW1wb3J0IHsgaXNWYWxpZFNjaGVtYSB9IGZyb20gJy4uL3ZhbGlkYXRpb24vc2NoZW1hLXZhbGlkYXRvcnMnO1xuXG5jbGFzcyBDb250cm9sbGVyIHtcbiAgb25Nb2RlbENoYW5nZShtb2RlbCwgc2NoZW1hKSB7XG4gICAgaWYgKHRoaXMub25DaGFuZ2UpIHtcbiAgICAgIGNvbnN0IGlzVmFsaWQgPSBpc1ZhbGlkU2NoZW1hKG1vZGVsLCB0aGlzLnNjaGVtYSk7XG4gICAgICB0aGlzLm9uQ2hhbmdlKHsgbW9kZWwsIGlzVmFsaWQsIHNjaGVtYSB9KTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udHJvbGxlcjtcbiIsImltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vY29udHJvbGxlcic7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi90ZW1wbGF0ZS5odG1sJztcblxuY29uc3QgQ29tcG9uZW50ID0ge1xuICBjb250cm9sbGVyLFxuICB0ZW1wbGF0ZSxcbiAgYmluZGluZ3M6IHtcbiAgICBzY2hlbWE6ICc8JyxcbiAgICBtb2RlbDogJzwnLFxuICAgIGVycm9yczogJzwnLFxuICAgIGxvY2FsZTogJzwnLFxuICAgIHRyYW5zbGF0aW9uczogJzwnLFxuICAgIHN1Ym1pdHRlZDogJzwnLFxuICAgIG9uQ2hhbmdlOiAnJidcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ29tcG9uZW50O1xuIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgQ29tcG9uZW50IGZyb20gJy4vY29tcG9uZW50JztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5qc29uLXNjaGVtYS5mb3JtJywgW10pXG4gIC5jb21wb25lbnQoJ2pzb25TY2hlbWFGb3JtJywgQ29tcG9uZW50KS5uYW1lO1xuIiwiaW1wb3J0IHsgZ2V0VmFsaWRNb2RlbFBhcnRzIH0gZnJvbSAnLi4vdmFsaWRhdGlvbi92YWxpZC1tb2RlbCc7XG5cbmNsYXNzIENvbnRyb2xsZXIge1xuICAkb25DaGFuZ2VzKGNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5zY2hlbWEgfHwgY2hhbmdlcy5tb2RlbCkge1xuICAgICAgLy8gV2Uga2VlcCBlYWNoIG1vZGVsIHNlcGFyYXRlbHksIGFuZCBjb21iaW5lIHRoZW0gZm9yIGJyb2FkY2FzdCwgdGhpcyBnaXZlc1xuICAgICAgLy8gYmV0dGVyIGNvbnRyb2wgb3ZlciBjbGVhbmluZyB1cCB0aGUgbW9kZWwgYXMgd2UgZGVhbCB3aXRoIHZhbHVlcyB0aGF0IGFyZVxuICAgICAgLy8gcmVtb3ZlZC5cbiAgICAgIHRoaXMubW9kZWxzID0gc3BsaXRNb2RlbCh0aGlzLm1vZGVsLCB0aGlzLnNjaGVtYSA/IHRoaXMuc2NoZW1hLmFsbE9mIDogW10pO1xuICAgIH1cbiAgfVxuXG4gIG9uTW9kZWxDaGFuZ2UoaW5kZXgsIG1vZGVsLCBzY2hlbWEpIHtcbiAgICBjb25zdCBzY2hlbWFGb3JJbmRleCA9IHRoaXMuc2NoZW1hLmFsbE9mW2luZGV4XTtcblxuICAgIHRoaXMubW9kZWxzW2luZGV4XSA9IGdldFZhbGlkTW9kZWxQYXJ0cyhtb2RlbCwgc2NoZW1hRm9ySW5kZXgpO1xuXG4gICAgaWYgKHRoaXMub25DaGFuZ2UpIHtcbiAgICAgIHRoaXMub25DaGFuZ2UoeyBtb2RlbDogY29tYmluZU1vZGVscyh0aGlzLm1vZGVscyksIHNjaGVtYSB9KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc3BsaXRNb2RlbChtb2RlbCwgc2NoZW1hcykge1xuICAvLyBJZiB3ZSByZWNlaXZlIGEgbW9kZWwsIGJyZWFrIGl0IGRvd24gdG8gcGFydHMgdmFsaWQgZm9yIGVhY2ggc2NoZW1hXG4gIGNvbnN0IG1vZGVscyA9IFtdO1xuICBpZiAobW9kZWwgJiYgc2NoZW1hcykge1xuICAgIHNjaGVtYXMuZm9yRWFjaCgoc2NoZW1hKSA9PiB7XG4gICAgICBtb2RlbHMucHVzaChnZXRWYWxpZE1vZGVsUGFydHMobW9kZWwsIHNjaGVtYSkgfHwge30pO1xuICAgIH0pO1xuICB9XG4gIHJldHVybiBtb2RlbHM7XG59XG5cbmZ1bmN0aW9uIGNvbWJpbmVNb2RlbHMobW9kZWxzKSB7XG4gIHJldHVybiBtb2RlbHMucmVkdWNlKChjdXJyZW50LCBjb21iaW5lZCkgPT4gYW5ndWxhci5leHRlbmQoY29tYmluZWQsIGN1cnJlbnQpLCB7fSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xsZXI7XG4iLCJpbXBvcnQgY29udHJvbGxlciBmcm9tICcuL2NvbnRyb2xsZXInO1xuaW1wb3J0IHRlbXBsYXRlIGZyb20gJy4vdGVtcGxhdGUuaHRtbCc7XG5cbmNvbnN0IENvbXBvbmVudCA9IHtcbiAgY29udHJvbGxlcixcbiAgdGVtcGxhdGUsXG4gIGJpbmRpbmdzOiB7XG4gICAgc2NoZW1hOiAnPCcsXG4gICAgbW9kZWw6ICc8JyxcbiAgICBlcnJvcnM6ICc8JyxcbiAgICBsb2NhbGU6ICc8JyxcbiAgICB0cmFuc2xhdGlvbnM6ICc8JyxcbiAgICBzdWJtaXR0ZWQ6ICc8JyxcbiAgICBvbkNoYW5nZTogJyYnXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudDtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuaW1wb3J0IENvbXBvbmVudCBmcm9tICcuL2NvbXBvbmVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuanNvbi1zY2hlbWEuYWxsLW9mJywgW10pXG4gIC5jb21wb25lbnQoJ2FsbE9mU2NoZW1hJywgQ29tcG9uZW50KS5uYW1lO1xuIiwiY29uc3Qgc2ltcGxlVHlwZXMgPSBbJ3N0cmluZycsICdudW1iZXInLCAnaW50ZWdlcicsICdib29sZWFuJ107XG5cbmNsYXNzIENvbnRyb2xsZXIge1xuICAkb25Jbml0KCkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheSh0aGlzLm1vZGVsKSkge1xuICAgICAgY29uc3QgYXJyYXlUeXBlID0gZ2V0QXJyYXlUeXBlKHRoaXMuc2NoZW1hKTtcbiAgICAgIGNvbnN0IG5ld0l0ZW0gPSBnZXROZXdJdGVtKGFycmF5VHlwZSk7XG5cbiAgICAgIHRoaXMubW9kZWwgPSBbXTtcbiAgICAgIGlmIChuZXdJdGVtKSB7XG4gICAgICAgIC8vIFNlZWQgdGhlIGFycmF5IHdpdGggYSBuZXdJdGVtIHRvIHNob3cgb25lIGVtcHR5IGZvcm1cbiAgICAgICAgdGhpcy5tb2RlbC5wdXNoKG5ld0l0ZW0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG9uTW9kZWxDaGFuZ2UoaW5kZXgsIG1vZGVsLCBzY2hlbWEpIHtcbiAgICB0aGlzLm1vZGVsW2luZGV4XSA9IG1vZGVsO1xuICAgIGlmICh0aGlzLm9uQ2hhbmdlKSB7XG4gICAgICB0aGlzLm9uQ2hhbmdlKHsgbW9kZWw6IHRoaXMubW9kZWwsIHNjaGVtYSB9KTtcbiAgICB9XG4gIH1cblxuICByZW1vdmUoaW5kZXgpIHtcbiAgICBpZiAodGhpcy5tb2RlbFtpbmRleF0pIHtcbiAgICAgIHRoaXMubW9kZWwuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB9XG4gIH1cblxuICBhZGQoKSB7XG4gICAgY29uc3QgYXJyYXlUeXBlID0gZ2V0QXJyYXlUeXBlKHRoaXMuc2NoZW1hKTtcbiAgICBjb25zdCBuZXdJdGVtID0gZ2V0TmV3SXRlbShhcnJheVR5cGUpO1xuICAgIGlmIChuZXdJdGVtKSB7XG4gICAgICB0aGlzLm1vZGVsLnB1c2gobmV3SXRlbSk7XG4gICAgfVxuICB9XG5cbiAgaXNTaW1wbGVUeXBlKHR5cGUpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIHJldHVybiBzaW1wbGVUeXBlcy5pbmRleE9mKHR5cGUpID49IDA7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QXJyYXlUeXBlKHNjaGVtYSkge1xuICByZXR1cm4gc2NoZW1hICYmIHNjaGVtYS5pdGVtcyAmJiBzY2hlbWEuaXRlbXMudHlwZTtcbn1cblxuZnVuY3Rpb24gZ2V0TmV3SXRlbShhcnJheVR5cGUpIHtcbiAgaWYgKGFycmF5VHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4ge307XG4gIH1cbiAgaWYgKGFycmF5VHlwZSA9PT0gJ2FycmF5Jykge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZGVmYXVsdCBDb250cm9sbGVyO1xuIiwiaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9jb250cm9sbGVyJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL3RlbXBsYXRlLmh0bWwnO1xuXG5jb25zdCBDb21wb25lbnQgPSB7XG4gIGNvbnRyb2xsZXIsXG4gIHRlbXBsYXRlLFxuICBiaW5kaW5nczoge1xuICAgIHNjaGVtYTogJzwnLFxuICAgIG1vZGVsOiAnPCcsXG4gICAgZXJyb3JzOiAnPCcsXG4gICAgbG9jYWxlOiAnPCcsXG4gICAgdHJhbnNsYXRpb25zOiAnPCcsXG4gICAgc3VibWl0dGVkOiAnPCcsXG4gICAgb25DaGFuZ2U6ICcmJ1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQ7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi9jb21wb25lbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3Lmpzb24tc2NoZW1hLmFycmF5JywgW10pXG4gIC5jb21wb25lbnQoJ2FycmF5U2NoZW1hJywgQ29tcG9uZW50KS5uYW1lO1xuIiwiaW1wb3J0IHsgaXNVbmRlZmluZWQsIGlzTnVsbCB9IGZyb20gJy4uL3ZhbGlkYXRpb24vdHlwZS12YWxpZGF0b3JzJztcbmltcG9ydCB7IGdldFZhbGlkYXRpb25GYWlsdXJlcyB9IGZyb20gJy4uL3ZhbGlkYXRpb24vdmFsaWRhdGlvbi1mYWlsdXJlcyc7XG5pbXBvcnQgeyBnZXRWYWxpZE1vZGVsUGFydHMgfSBmcm9tICcuLi92YWxpZGF0aW9uL3ZhbGlkLW1vZGVsJztcblxuY2xhc3MgQ29udHJvbGxlciB7XG4gICRvbkluaXQoKSB7XG4gICAgdGhpcy5rZXkgPSBNYXRoLmZsb29yKDEwMDAwMDAwMCAqIE1hdGgucmFuZG9tKCkpO1xuICB9XG5cbiAgJG9uQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMubW9kZWwpIHtcbiAgICAgIHRoaXMuaGFuZGxlTmV3TW9kZWxGcm9tUGFyZW50KGNoYW5nZXMubW9kZWwuY3VycmVudFZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBoYW5kbGVOZXdNb2RlbEZyb21QYXJlbnQobW9kZWwpIHtcbiAgICBpZiAoaXNVbmRlZmluZWQobW9kZWwpIHx8IGlzTnVsbChtb2RlbCkpIHtcbiAgICAgIC8vIERvbid0IG92ZXJ3cml0ZSBpbnRlcm5hbCBtb2RlbCB3aGVuIHJlY2VpdmluZyBpbnZhbGlkXG4gICAgICBpZiAoIWlzVW5kZWZpbmVkKHRoaXMuaW50ZXJuYWxNb2RlbCkgJiYgIWlzTnVsbCh0aGlzLmludGVybmFsTW9kZWwpKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuc2NoZW1hLmRlZmF1bHQpIHtcbiAgICAgICAgdGhpcy5vbk1vZGVsQ2hhbmdlKHRoaXMuc2NoZW1hLmRlZmF1bHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5sYXN0TW9kZWwgPSBudWxsO1xuICAgICAgICB0aGlzLmludGVybmFsTW9kZWwgPSBudWxsO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmxhc3RNb2RlbCA9IG1vZGVsO1xuICAgICAgdGhpcy5pbnRlcm5hbE1vZGVsID0gbW9kZWw7XG4gICAgfVxuICB9XG5cbiAgb25Nb2RlbENoYW5nZShtb2RlbCkge1xuICAgIGNvbnN0IHZhbGlkTW9kZWwgPSBnZXRWYWxpZE1vZGVsUGFydHMobW9kZWwsIHRoaXMuc2NoZW1hKTtcblxuICAgIHRoaXMudmFsaWRhdGlvbktleXMgPSBnZXRWYWxpZGF0aW9uRmFpbHVyZXModmFsaWRNb2RlbCwgdGhpcy5zY2hlbWEsIHRoaXMucmVxdWlyZWQpO1xuXG4gICAgY29uc3QgYnJvYWRjYXN0TW9kZWwgPSB0aGlzLnZhbGlkYXRpb25LZXlzLmxlbmd0aCA/IG51bGwgOiB2YWxpZE1vZGVsO1xuXG4gICAgaWYgKCFpc051bGwoYnJvYWRjYXN0TW9kZWwpKSB7XG4gICAgICB0aGlzLmludGVybmFsTW9kZWwgPSBtb2RlbDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vbkNoYW5nZSAmJiBicm9hZGNhc3RNb2RlbCAhPT0gdGhpcy5sYXN0TW9kZWwpIHtcbiAgICAgIHRoaXMub25DaGFuZ2UoeyBtb2RlbDogYnJvYWRjYXN0TW9kZWwsIHNjaGVtYTogdGhpcy5zY2hlbWEgfSk7XG4gICAgfVxuXG4gICAgdGhpcy5sYXN0TW9kZWwgPSBicm9hZGNhc3RNb2RlbDtcbiAgfVxuXG4gIGdldFZhbGlkYXRpb25NZXNzYWdlcygpIHtcbiAgICByZXR1cm4gKFxuICAgICAgKHRoaXMuc2NoZW1hICYmIHRoaXMuc2NoZW1hLnZhbGlkYXRpb25NZXNzYWdlcylcbiAgICAgIHx8ICh0aGlzLnRyYW5zbGF0aW9ucyAmJiB0aGlzLnRyYW5zbGF0aW9ucy52YWxpZGF0aW9uKVxuICAgICAgfHwgbnVsbFxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29udHJvbGxlcjtcbiIsImltcG9ydCBjb250cm9sbGVyIGZyb20gJy4vY29udHJvbGxlcic7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnLi90ZW1wbGF0ZS5odG1sJztcblxuY29uc3QgQ29tcG9uZW50ID0ge1xuICBjb250cm9sbGVyLFxuICB0ZW1wbGF0ZSxcbiAgYmluZGluZ3M6IHtcbiAgICBzY2hlbWE6ICc8JyxcbiAgICBtb2RlbDogJzwnLFxuICAgIGVycm9yczogJzwnLFxuICAgIGxvY2FsZTogJzwnLFxuICAgIHRyYW5zbGF0aW9uczogJzwnLFxuICAgIHJlcXVpcmVkOiAnPCcsXG4gICAgc3VibWl0dGVkOiAnPCcsXG4gICAgb25DaGFuZ2U6ICcmJ1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQ7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi9jb21wb25lbnQnO1xuaW1wb3J0IEZpZWxkIGZyb20gJy4uLy4uL2Zvcm1zL2ZpZWxkJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5qc29uLXNjaGVtYS5iYXNpYy10eXBlJywgW1xuICAgIEZpZWxkXG4gIF0pXG4gIC5jb21wb25lbnQoJ2Jhc2ljVHlwZVNjaGVtYScsIENvbXBvbmVudCkubmFtZTtcbiIsImNsYXNzIENvbnRyb2xsZXIge1xuICAkb25DaGFuZ2VzKGNoYW5nZXMpIHtcbiAgICBpZiAoY2hhbmdlcy5zY2hlbWEpIHtcbiAgICAgIGNvbnN0IG5ld1NjaGVtYSA9IGNoYW5nZXMuc2NoZW1hLmN1cnJlbnRWYWx1ZTtcblxuICAgICAgLy8gSWYgdGhpcyBzY2hlbWEgaXMganVzdCBhIHNpbmdsZSBlbnVtLCBzZXQgdGhlIHZhbHVlXG4gICAgICBpZiAobmV3U2NoZW1hICYmIG5ld1NjaGVtYS5lbnVtICYmIG5ld1NjaGVtYS5lbnVtLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICB0aGlzLm9uTW9kZWxDaGFuZ2UobmV3U2NoZW1hLmVudW1bMF0sIG5ld1NjaGVtYSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgb25Nb2RlbENoYW5nZShtb2RlbCwgc2NoZW1hKSB7XG4gICAgaWYgKHRoaXMub25DaGFuZ2UpIHtcbiAgICAgIHRoaXMub25DaGFuZ2UoeyBtb2RlbCwgc2NoZW1hIH0pO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb250cm9sbGVyO1xuIiwiaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9jb250cm9sbGVyJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL3RlbXBsYXRlLmh0bWwnO1xuXG5jb25zdCBDb21wb25lbnQgPSB7XG4gIGNvbnRyb2xsZXIsXG4gIHRlbXBsYXRlLFxuICBiaW5kaW5nczoge1xuICAgIHNjaGVtYTogJzwnLFxuICAgIG1vZGVsOiAnPCcsXG4gICAgZXJyb3JzOiAnPCcsXG4gICAgbG9jYWxlOiAnPCcsXG4gICAgdHJhbnNsYXRpb25zOiAnPCcsXG4gICAgcmVxdWlyZWQ6ICc8JyxcbiAgICBzdWJtaXR0ZWQ6ICc8JyxcbiAgICBoaWRlVGl0bGU6ICc8JyxcbiAgICBvbkNoYW5nZTogJyYnXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbXBvbmVudDtcbiIsImNsYXNzIENvbnRyb2xsZXIge1xuICAkb25Jbml0KCkge1xuICAgIHRoaXMub3V0cHV0TW9kZWwgPSBhbmd1bGFyLmV4dGVuZCh7fSwgdGhpcy5tb2RlbCB8fCB7fSk7XG4gIH1cblxuICBvbk1vZGVsQ2hhbmdlKHByb3BlcnR5LCBtb2RlbCwgc2NoZW1hKSB7XG4gICAgdGhpcy5vdXRwdXRNb2RlbFtwcm9wZXJ0eV0gPSBtb2RlbDtcblxuICAgIGlmICh0aGlzLm9uQ2hhbmdlKSB7XG4gICAgICB0aGlzLm9uQ2hhbmdlKHsgbW9kZWw6IHRoaXMub3V0cHV0TW9kZWwsIHNjaGVtYSB9KTtcbiAgICB9XG4gIH1cblxuICBpc1JlcXVpcmVkKHByb3BlcnR5KSB7XG4gICAgcmV0dXJuIHRoaXMuc2NoZW1hLnJlcXVpcmVkICYmIHRoaXMuc2NoZW1hLnJlcXVpcmVkLmluY2x1ZGVzKHByb3BlcnR5KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb250cm9sbGVyO1xuIiwiaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9jb250cm9sbGVyJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL3RlbXBsYXRlLmh0bWwnO1xuXG5jb25zdCBDb21wb25lbnQgPSB7XG4gIGNvbnRyb2xsZXIsXG4gIHRlbXBsYXRlLFxuICBiaW5kaW5nczoge1xuICAgIHNjaGVtYTogJzwnLFxuICAgIG1vZGVsOiAnPCcsXG4gICAgZXJyb3JzOiAnPCcsXG4gICAgbG9jYWxlOiAnPCcsXG4gICAgdHJhbnNsYXRpb25zOiAnPCcsXG4gICAgaGlkZVRpdGxlOiAnPCcsXG4gICAgc3VibWl0dGVkOiAnPCcsXG4gICAgb25DaGFuZ2U6ICcmJ1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQ7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi9jb21wb25lbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBhbmd1bGFyXG4gIC5tb2R1bGUoJ3R3Lmpzb24tc2NoZW1hLm9iamVjdCcsIFtdKVxuICAuY29tcG9uZW50KCdvYmplY3RTY2hlbWEnLCBDb21wb25lbnQpLm5hbWU7XG4iLCJpbXBvcnQgeyBnZXRWYWxpZE1vZGVsUGFydHMgfSBmcm9tICcuLi92YWxpZGF0aW9uL3ZhbGlkLW1vZGVsJztcbmltcG9ydCB7IGlzVmFsaWRTY2hlbWEgfSBmcm9tICcuLi92YWxpZGF0aW9uL3NjaGVtYS12YWxpZGF0b3JzJztcblxuY2xhc3MgQ29udHJvbGxlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMub3B0aW9ucyA9IFtdO1xuICAgIHRoaXMuYWN0aXZlSW5kZXggPSAxO1xuICB9XG5cbiAgJG9uQ2hhbmdlcyhjaGFuZ2VzKSB7XG4gICAgaWYgKGNoYW5nZXMuc2NoZW1hKSB7XG4gICAgICB0aGlzLmFjdGl2ZUluZGV4ID0gZ2V0QWN0aXZlU2NoZW1hSW5kZXgodGhpcy5zY2hlbWEsIHRoaXMubW9kZWwpO1xuICAgICAgdGhpcy5wcmVmaWxsTW9kZWxzKCk7XG4gICAgfVxuICB9XG5cbiAgcHJlZmlsbE1vZGVscygpIHtcbiAgICBpZiAoIXRoaXMuc2NoZW1hIHx8ICF0aGlzLnNjaGVtYS5vbmVPZikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLm1vZGVscyA9IGdldE1vZGVsUGFydHNGb3JTY2hlbWFzKHRoaXMubW9kZWwsIHRoaXMuc2NoZW1hLm9uZU9mKTtcbiAgfVxuXG4gIG9uU2NoZW1hQ2hhbmdlKG5ld1NjaGVtYSwgaW5kZXgpIHtcbiAgICB0aGlzLm1vZGVsc1tpbmRleF0gPSBnZXRWYWxpZE1vZGVsUGFydHModGhpcy5tb2RlbHNbaW5kZXhdLCBuZXdTY2hlbWEpO1xuICAgIHRoaXMub25Nb2RlbENoYW5nZSh0aGlzLm1vZGVsc1tpbmRleF0sIG5ld1NjaGVtYSwgaW5kZXgpO1xuICB9XG5cbiAgb25Nb2RlbENoYW5nZShtb2RlbCwgc2NoZW1hLCBpbmRleCkge1xuICAgIHRoaXMubW9kZWxzW2luZGV4XSA9IG1vZGVsO1xuICAgIGlmICh0aGlzLm9uQ2hhbmdlKSB7XG4gICAgICB0aGlzLm9uQ2hhbmdlKHsgbW9kZWwsIHNjaGVtYSB9KTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgd2hpY2ggc2NoZW1hIHRvIHNob3cgaW50aXRpYWxseSBiYXNlZCBvbiB2YWxpZGl0eSBvZiBtb2RlbFxuICogRGVmYXVsdCB0byAxIChhY3RpdmUgaXMgMS1pbmRleGVkKVxuICovXG5mdW5jdGlvbiBnZXRBY3RpdmVTY2hlbWFJbmRleChzY2hlbWEsIG1vZGVsKSB7XG4gIGlmICghc2NoZW1hIHx8ICFzY2hlbWEub25lT2YpIHtcbiAgICByZXR1cm4gMTtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc2NoZW1hLm9uZU9mLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGlzVmFsaWRTY2hlbWEobW9kZWwsIHNjaGVtYS5vbmVPZltpXSkpIHtcbiAgICAgIHJldHVybiBpICsgMTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gMTtcbn1cblxuZnVuY3Rpb24gZ2V0TW9kZWxQYXJ0c0ZvclNjaGVtYXMobW9kZWwsIHNjaGVtYXMpIHtcbiAgcmV0dXJuIHNjaGVtYXMubWFwKHNjaGVtYSA9PiBnZXRWYWxpZE1vZGVsUGFydHMobW9kZWwsIHNjaGVtYSkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBDb250cm9sbGVyO1xuIiwiaW1wb3J0IGNvbnRyb2xsZXIgZnJvbSAnLi9jb250cm9sbGVyJztcbmltcG9ydCB0ZW1wbGF0ZSBmcm9tICcuL3RlbXBsYXRlLmh0bWwnO1xuXG5jb25zdCBDb21wb25lbnQgPSB7XG4gIGNvbnRyb2xsZXIsXG4gIHRlbXBsYXRlLFxuICBiaW5kaW5nczoge1xuICAgIHNjaGVtYTogJzwnLFxuICAgIG1vZGVsOiAnPCcsXG4gICAgZXJyb3JzOiAnPCcsXG4gICAgbG9jYWxlOiAnPCcsXG4gICAgdHJhbnNsYXRpb25zOiAnPCcsXG4gICAgc3VibWl0dGVkOiAnPCcsXG4gICAgb25DaGFuZ2U6ICcmJ1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDb21wb25lbnQ7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi9jb21wb25lbnQnO1xuaW1wb3J0IFJhZGlvIGZyb20gJy4uLy4uL2Zvcm1zL3JhZGlvJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5qc29uLXNjaGVtYS5vbmUtb2YnLCBbXG4gICAgUmFkaW9cbiAgXSlcbiAgLmNvbXBvbmVudCgnb25lT2ZTY2hlbWEnLCBDb21wb25lbnQpLm5hbWU7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcbmltcG9ydCBDb21wb25lbnQgZnJvbSAnLi9jb21wb25lbnQnO1xuXG5pbXBvcnQgQmFzaWNUeXBlU2NoZW1hIGZyb20gJy4uL2Jhc2ljLXR5cGUtc2NoZW1hJztcbmltcG9ydCBPYmplY3RTY2hlbWEgZnJvbSAnLi4vb2JqZWN0LXNjaGVtYSc7XG5pbXBvcnQgQXJyYXlTY2hlbWEgZnJvbSAnLi4vYXJyYXktc2NoZW1hJztcbmltcG9ydCBBbGxPZlNjaGVtYSBmcm9tICcuLi9hbGwtb2Ytc2NoZW1hJztcbmltcG9ydCBPbmVPZlNjaGVtYSBmcm9tICcuLi9vbmUtb2Ytc2NoZW1hJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhclxuICAubW9kdWxlKCd0dy5qc29uLXNjaGVtYS5nZW5lcmljJywgW1xuICAgIEJhc2ljVHlwZVNjaGVtYSxcbiAgICBPYmplY3RTY2hlbWEsXG4gICAgQXJyYXlTY2hlbWEsXG4gICAgQWxsT2ZTY2hlbWEsXG4gICAgT25lT2ZTY2hlbWFcbiAgXSlcbiAgLmNvbXBvbmVudCgnZ2VuZXJpY1NjaGVtYScsIENvbXBvbmVudCkubmFtZTtcbiIsImltcG9ydCBhbmd1bGFyIGZyb20gJ2FuZ3VsYXInO1xuXG5pbXBvcnQgeyBnZXRWYWxpZE1vZGVsUGFydHMgfSBmcm9tICcuL3ZhbGlkLW1vZGVsJztcbmltcG9ydCB7IGdldFZhbGlkYXRpb25GYWlsdXJlcyB9IGZyb20gJy4vdmFsaWRhdGlvbi1mYWlsdXJlcyc7XG5pbXBvcnQgeyBpc1ZhbGlkU2NoZW1hIH0gZnJvbSAnLi9zY2hlbWEtdmFsaWRhdG9ycyc7XG5pbXBvcnQgKiBhcyBydWxlVmFsaWRhdG9ycyBmcm9tICcuL3J1bGUtdmFsaWRhdG9ycyc7XG5pbXBvcnQgKiBhcyB0eXBlVmFsaWRhdG9ycyBmcm9tICcuL3R5cGUtdmFsaWRhdG9ycyc7XG5cbmZ1bmN0aW9uIFZhbGlkYXRpb24oKSB7XG4gIHRoaXMuZ2V0VmFsaWRNb2RlbFBhcnRzID0gZ2V0VmFsaWRNb2RlbFBhcnRzO1xuICB0aGlzLmdldFZhbGlkYXRpb25GYWlsdXJlcyA9IGdldFZhbGlkYXRpb25GYWlsdXJlcztcbiAgdGhpcy5pc1ZhbGlkU2NoZW1hID0gaXNWYWxpZFNjaGVtYTtcbiAgdGhpcy5ydWxlVmFsaWRhdG9ycyA9IHJ1bGVWYWxpZGF0b3JzO1xuICB0aGlzLnR5cGVWYWxpZGF0b3JzID0gdHlwZVZhbGlkYXRvcnM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFuZ3VsYXJcbiAgLm1vZHVsZSgndHcuanNvbi1zY2hlbWEudmFsaWRhdGlvbicsIFtdKVxuICAuc2VydmljZSgnU2NoZW1hVmFsaWRhdGlvbicsIFZhbGlkYXRpb24pLm5hbWU7XG4iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcblxuaW1wb3J0IEZvcm0gZnJvbSAnLi9mb3JtJztcbmltcG9ydCBBbGxPZlNjaGVtYSBmcm9tICcuL2FsbC1vZi1zY2hlbWEnO1xuaW1wb3J0IEFycmF5U2NoZW1hIGZyb20gJy4vYXJyYXktc2NoZW1hJztcbmltcG9ydCBCYXNpY1R5cGVTY2hlbWEgZnJvbSAnLi9iYXNpYy10eXBlLXNjaGVtYSc7XG5pbXBvcnQgR2VuZXJpY1NjaGVtYSBmcm9tICcuL2dlbmVyaWMtc2NoZW1hJztcbmltcG9ydCBPYmplY3RTY2hlbWEgZnJvbSAnLi9vYmplY3Qtc2NoZW1hJztcbmltcG9ydCBPbmVPZlNjaGVtYSBmcm9tICcuL29uZS1vZi1zY2hlbWEnO1xuaW1wb3J0IFZhbGlkYXRpb24gZnJvbSAnLi92YWxpZGF0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgYW5ndWxhci5tb2R1bGUoJ3R3Lmpzb24tc2NoZW1hJywgW1xuICBGb3JtLFxuICBBbGxPZlNjaGVtYSxcbiAgQXJyYXlTY2hlbWEsXG4gIEJhc2ljVHlwZVNjaGVtYSxcbiAgR2VuZXJpY1NjaGVtYSxcbiAgT2JqZWN0U2NoZW1hLFxuICBPbmVPZlNjaGVtYSxcbiAgVmFsaWRhdGlvblxuXSkubmFtZTtcbiJdLCJzb3VyY2VSb290IjoiIn0=