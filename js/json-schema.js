!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=99)}([function(e,t){e.exports=angular},function(e,t,n){"use strict";function r(e){return"string"==typeof e}function i(e){return"number"==typeof e&&!Number.isNaN(e)}function a(e){return i(e)&&Math.floor(e)===e}function l(e){return"boolean"==typeof e}function o(e){return!c(e)&&!u(e)&&e.constructor===Object}function s(e){return Array.isArray(e)}function c(e){return null===e}function u(e){return void 0===e}n.r(t),n.d(t,"isString",function(){return r}),n.d(t,"isNumber",function(){return i}),n.d(t,"isInteger",function(){return a}),n.d(t,"isBoolean",function(){return l}),n.d(t,"isObject",function(){return o}),n.d(t,"isArray",function(){return s}),n.d(t,"isNull",function(){return c}),n.d(t,"isUndefined",function(){return u})},function(e,t,n){"use strict";var r=n(0),i=n.n(r);var a=function(){this.getClosestParentByTagName=function(e,t){for(var n=t.toUpperCase(),r=e;r;)if((r=r.parentNode)&&r.tagName&&r.tagName.toUpperCase()===n)return r;return null},this.getClosestParentByClassName=function(e,t){for(var n=e;n;)if((n=n.parentNode)&&n.classList&&n.classList.contains(t))return n;return null},this.getPreviousSiblingWithClassName=function(e,t){for(var n=e.previousElementSibling;n;){if(n.classList.contains(t))return n;n=n.previousElementSibling}return null},this.getNextSiblingWithClassName=function(e,t){for(var n=e.nextElementSibling;n;){if(n.classList.contains(t))return n;n=n.nextElementSibling}return null}};t.a=i.a.module("tw.styleguide.services.dom",[]).service("TwDomService",a).name},function(e,t,n){"use strict";n.r(t),n.d(t,"isValidRequired",function(){return i}),n.d(t,"isValidMinLength",function(){return a}),n.d(t,"isValidMaxLength",function(){return l}),n.d(t,"isValidPattern",function(){return o}),n.d(t,"isValidMaximum",function(){return s}),n.d(t,"isValidMinimum",function(){return c}),n.d(t,"isValidMinItems",function(){return u}),n.d(t,"isValidMaxItems",function(){return d});var r=n(1);function i(e,t){return!t||!Object(r.isUndefined)(e)}function a(e,t){return!Object(r.isNumber)(t)||Object(r.isString)(e)&&e.length>=t}function l(e,t){return!Object(r.isNumber)(t)||Object(r.isString)(e)&&e.length<=t}function o(e,t){try{var n=new RegExp(t);return void 0!==e&&!!n.test(e)}catch(e){return!0}}function s(e,t){return!Object(r.isNumber)(t)&&!Object(r.isString)(t)||(Object(r.isNumber)(e)||Object(r.isString)(e))&&e<=t}function c(e,t){return!Object(r.isNumber)(t)&&!Object(r.isString)(t)||(Object(r.isNumber)(e)||Object(r.isString)(e))&&e>=t}function u(e,t){return!Object(r.isNumber)(t)||Object(r.isArray)(e)&&e.length>=t}function d(e,t){return!Object(r.isNumber)(t)||Object(r.isArray)(e)&&e.length<=t}},function(e,t,n){"use strict";var r=n(0),i=n.n(r);var a=function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var r=t[0],i=n.getClosestParentByClassName(r,"form-group");i&&r&&(r.addEventListener("focus",function(){i.classList.add("focus")}),r.addEventListener("blur",function(){i.classList.remove("focus")}))};a.$inject=["$element","TwDomService"];var l=a;var o=function(){return{restrict:"A",controller:l}};var s=function(){return{restrict:"C",controller:l}},c=n(2);t.a=i.a.module("tw.styleguide.forms.focusable",[c.a]).directive("twFocusable",o).directive("formControl",s).name},function(e,t,n){
/*!
* screenfull
* v5.0.2 - 2020-02-13
* (c) Sindre Sorhus; MIT License
*/
!function(){"use strict";var t="undefined"!=typeof window&&void 0!==window.document?window.document:{},n=e.exports,r=function(){for(var e,n=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],r=0,i=n.length,a={};r<i;r++)if((e=n[r])&&e[1]in t){for(r=0;r<e.length;r++)a[n[0][r]]=e[r];return a}return!1}(),i={change:r.fullscreenchange,error:r.fullscreenerror},a={request:function(e){return new Promise(function(n,i){var a=function(){this.off("change",a),n()}.bind(this);this.on("change",a);var l=(e=e||t.documentElement)[r.requestFullscreen]();l instanceof Promise&&l.then(a).catch(i)}.bind(this))},exit:function(){return new Promise(function(e,n){if(this.isFullscreen){var i=function(){this.off("change",i),e()}.bind(this);this.on("change",i);var a=t[r.exitFullscreen]();a instanceof Promise&&a.then(i).catch(n)}else e()}.bind(this))},toggle:function(e){return this.isFullscreen?this.exit():this.request(e)},onchange:function(e){this.on("change",e)},onerror:function(e){this.on("error",e)},on:function(e,n){var r=i[e];r&&t.addEventListener(r,n,!1)},off:function(e,n){var r=i[e];r&&t.removeEventListener(r,n,!1)},raw:r};r?(Object.defineProperties(a,{isFullscreen:{get:function(){return Boolean(t[r.fullscreenElement])}},element:{enumerable:!0,get:function(){return t[r.fullscreenElement]}},isEnabled:{enumerable:!0,get:function(){return Boolean(t[r.fullscreenEnabled])}}}),n?e.exports=a:window.screenfull=a):n?e.exports={isEnabled:!1}:window.screenfull={isEnabled:!1}}()},function(e,t,n){"use strict";var r=n(0),i=n.n(r);function a(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],r=!0,i=!1,a=void 0;try{for(var l,o=e[Symbol.iterator]();!(r=(l=o.next()).done)&&(n.push(l.value),!t||n.length!==t);r=!0);}catch(e){i=!0,a=e}finally{try{r||null==o.return||o.return()}finally{if(i)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return l(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(n);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return l(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var o=function(){var e=this;function t(e,t,n){var r,i=c(t);return p[i]&&(r=p[i][e]),r?"short"===n?r.substr(0,3):"narrow"===n?r.substr(0,1):r:null}function n(e,t,n){var r=c(t);return r&&h[r]&&("short"!==n||"ja"===r)?h[r][e]:null}function r(e,t){var n=c(t),r=d(f,e,n)||"";return"".concat(e).concat(r)}function i(e,t){var n=c(t),r=d(g,e,n);return"".concat(e).concat(r)}function l(e,t,n){if(!e.toLocaleDateString)return null;var r=e.toLocaleDateString(t,n);return function(e){if(!e)return!0;if("ja"===c(e))return!1;return!0}(t)&&(r=r.replace(/[0-9]|\s|,|\./g,"")),r[0].toUpperCase()+r.substring(1)}function o(e){return!e||["narrow","short","long"].indexOf(e)<0?"long":e}function s(e){return function(e){try{return window.Intl.DateTimeFormat.supportedLocalesOf([e]).length>0}catch(e){return!1}}(e)?e:"en-GB"}function c(e){return e?e.substring(0,2):"en"}function u(e){return void 0!==m[e]?m[e]:" "}function d(e,t,n){return e[n]?e[n].exactMatch&&e[n].exactMatch[t]?e[n].exactMatch[t]:e[n].endsWith&&e[n].endsWith[t%10]?e[n].endsWith[t%10]:e[n].default:""}this.getLocaleDate=function(e){return e||(e=new Date),e.getDate()},this.getLocaleMonth=function(e){return e||(e=new Date),e.getMonth()},this.getLocaleFullYear=function(e){return e||(e=new Date),e.getFullYear()},this.getLocaleToday=function(){var t=new Date;return e.getUTCDateFromParts(e.getLocaleFullYear(t),e.getLocaleMonth(t),e.getLocaleDate(t))},this.getUTCDate=function(e){return e||(e=new Date),e.getUTCDate()},this.getUTCMonth=function(e){return e||(e=new Date),e.getUTCMonth()},this.getUTCFullYear=function(e){return e||(e=new Date),e.getUTCFullYear()},this.getUTCToday=function(){var t=new Date;return e.getUTCDateFromParts(e.getUTCFullYear(t),e.getUTCMonth(t),e.getUTCDate(t))},this.getLastDayOfMonth=function(t,n){return e.getUTCDateFromParts(t,n+1,0).getUTCDate()},this.getUTCDateFromParts=function(e,t,n,r,i,a){var l=new Date;return l.setUTCFullYear(e,t,n),l.setUTCHours(r||0),l.setUTCMinutes(i||0),l.setUTCSeconds(a||0),l.setUTCMilliseconds(0),l},this.getLocaleDateFromParts=function(e,t,n,r,i,a){var l=new Date;return l.setFullYear(e,t,n),l.setHours(r||0),l.setMinutes(i||0),l.setSeconds(a||0),l.setMilliseconds(0),l},this.getDatePartsFromIso=function(e){var t=0,n=0,r=parseInt(e.substr(0,4),10),i=parseInt(e.substr(5,2),10)-1,a=parseInt(e.substr(8,2),10),l=parseInt(e.substr(11,2),10)||0,o=parseInt(e.substr(14,2),10)||0,s=parseInt(e.substr(17,2),10)||0,c=e.substring(10).match("[+-]{1}[0-9]{2}(:[0-9]{2})?$");return c&&(t=parseInt(c[0].substr(1,2),10)||0,n=parseInt(c[0].substr(4,2),10)||0,"-"===c[0].substr(0,1)&&(t*=-1,n*=-1)),[r,i,a,l,o,s,t,n]},this.isIsoStringValid=function(e){return new RegExp("^".concat("[0-9]{4}-[0-9]{2}-[0-9]{2}","(").concat("T[0-9]{2}:[0-9]{2}:[0-9]{2}").concat("(.[0-9]{3})?").concat("(Z|[+,-][0-9]{2}(:[0-9]{2})?)",")?$")).test(e)},this.getUTCDateFromIso=function(t){if(!e.isIsoStringValid(t))return null;var n=a(e.getDatePartsFromIso(t),8),r=n[0],i=n[1],l=n[2],o=n[3],s=n[4],c=n[5],u=n[6],d=n[7];return e.getUTCDateFromParts(r,i,l,o+u,s+d,c)},this.getDayNamesForLocale=function(t,n){for(var r=[],i=o(n),a=0;a<7;a++)r.push(e.getDayNameForLocale(a,t,i));return r},this.getDayNameForLocale=function(n,r,i){var a=t(n,r,i);if(a)return a;var c=s(r),u=o(i);return l(e.getUTCDateFromParts(2006,0,n+1),c,{weekday:"long"})||t(n,"en-GB",u)},this.getMonthNamesForLocale=function(t,n){for(var r=[],i=o(n),a=0;a<12;a++)r.push(e.getMonthNameForLocale(a,t,i));return r},this.getMonthNameForLocale=function(t,r,i){var a=n(t,r,i);if(a)return a;var c=s(r),u=o(i),d=e.getUTCDateFromParts(2e3,t,15);return"short"===i?(t=l(d,c,{month:"long"})).length>4?t.slice(0,3):t:l(d,c,{month:"long"})||n(t,"en-GB",u)},this.getWeekday=function(t,n,r){return e.getUTCDateFromParts(t,n,r).getUTCDay()},this.isMonthBeforeDay=function(e){return"ja"===c(e)||e&&-1!==e.indexOf("US",e.length-2)},this.isYearBeforeMonth=function(e){return"ja"===c(e)},this.addYears=function(t,n){return e.addToDate(t,n,0,0)},this.addMonths=function(t,n){return e.addToDate(t,0,n,0)},this.addDays=function(t,n){return e.addToDate(t,0,0,n)},this.addToDate=function(t,n,r,i){return e.getUTCDateFromParts(t.getUTCFullYear()+n,t.getUTCMonth()+r,t.getUTCDate()+i)},this.getLocaleTimeString=function(t,n){return e.getTimeString(t.getHours(),t.getMinutes(),t.getSeconds(),n)},this.getTimeString=function(e,t,n,r){var i=c(r);if(e<10&&(e="0".concat(e)),t<10&&(t="0".concat(t)),"en"===i){var a=e>=12?"pm":"am";return 0===(e%=12)&&(e=12),"00"===t?"".concat(e).concat(a):"".concat(e,":").concat(t).concat(a)}return"".concat(e,":").concat(t)},this.getYearAndMonthPresentation=function(t,n,r,a){var l=i(t,r),o=e.getMonthNameForLocale(n,r,a||"long"),s=u(c(r));return e.isYearBeforeMonth(r)?[l,o].join(s):[o,l].join(s)},this.getYearMonthDatePresentation=function(t,n,a,l,o){var s=i(t,l),d=e.getMonthNameForLocale(n,l,o||"long"),h=r(a,l),p=u(c(l));if(e.isYearBeforeMonth(l))return[s,d,h].join(p);if(e.isMonthBeforeDay(l)){var f=[d,h].join(p);return"".concat(f,", ").concat(s)}return[h,d,s].join(p)},this.getLocaleNow=function(){return new Date},this.getUTCNow=function(){var t=new Date;return e.getUTCDateFromParts(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate(),t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds())},this.getLocaleDateString=function(t,n,r){if(!t.getFullYear)return t;var i=e.getLocaleNow();return e.getDateString(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getDay(),n,t-i,i.getFullYear(),r)},this.getUTCDateString=function(t,n,r){if(!t)return t;var i=e.getUTCNow();return e.getDateString(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate(),t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds(),t.getUTCDay(),n,t-i,i.getUTCFullYear(),r)},this.getDateString=function(t,n,a,l,o,s,c,u,d,h,p){var f=Math.abs(d)<5184e5&&"long"!==p,g=!f,m=Math.abs(d)<6912e5||"long"===p,v=!m||"long"===p,b=!m&&h!==t||"long"===p?i(t,u):"",$=v?e.getMonthNameForLocale(n,u,"short"===p?"short":"long"):"",y=g?r(a,u):"",w=m?e.getDayNameForLocale(c,u,"short"===p?"short":"long"):"",C=f?e.getTimeString(l,o,s,u):"";return e.combineDateParts(b,$,y,C,w,u)},this.combineDateParts=function(t,n,r,i,a,l){var o,s=c(l),d=u(s);if(e.isYearBeforeMonth(l)?o=[t,n,r].join(d).trim():e.isMonthBeforeDay(l)?(o=[n,r].join(d).trim(),t&&(o+=", ".concat(t))):o=[r,n,t].join(d).trim(),a){if("ja"===s)return"".concat(o," ").concat(i," (").concat(a,")").trim();o=n||t?"".concat(a,", ").concat(o).trim():"".concat(a," ").concat(o).trim()}return(o="".concat(o," ").concat(i)).trim()};var h={en:["January","February","March","April","May","June","July","August","September","October","November","December"],ja:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"]},p={en:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],ja:["日","月","火","水","木","金","土"]},f={en:{exactMatch:{11:"th",12:"th",13:"th"},endsWith:{1:"st",2:"nd",3:"rd"},default:"th"},de:{default:"."},fi:{default:"."},ja:{default:"日"}},g={ja:{default:"年"}},m={ja:""}};t.a=i.a.module("tw.styleguide.services.date",[]).service("TwDateService",o).name},function(e,t,n){"use strict";n.d(t,"h",function(){return a}),n.d(t,"g",function(){return l}),n.d(t,"f",function(){return o}),n.d(t,"e",function(){return s}),n.d(t,"b",function(){return c}),n.d(t,"d",function(){return u}),n.d(t,"c",function(){return d}),n.d(t,"a",function(){return h});var r=n(1),i=n(3);function a(e,t,n){if(Object(r.isNull)(e))return n?["required"]:[];if(t.enum)return u(e,t,n);if(t.const)return d(e,t,n);switch(t.type){case"string":return l(e,t,n);case"number":return o(e,t,n);case"integer":return s(e,t,n);case"boolean":return c(e,t,n);case"array":return h(e,t);case"object":return function(e,t){if(!Object(r.isObject)(e)&&!Object(r.isNull)(e))return["type"];if(!Object(r.isArray)(t.required))return[];return t.required.map(function(t){return void 0!==e[t]}).reduce(function(e,t){return e&&t},!0)?[]:["required"]}(e,t);default:return[]}}function l(e,t,n){if(!Object(r.isString)(e)&&!Object(r.isNull)(e))return["type"];if(""===e&&n)return["required"];var a=[];return Object(i.isValidRequired)(e,n)||a.push("required"),Object(i.isValidMinLength)(e,t.minLength)||a.push("minLength"),Object(i.isValidMaxLength)(e,t.maxLength)||a.push("maxLength"),Object(i.isValidPattern)(e,t.pattern)||a.push("pattern"),Object(i.isValidMinimum)(e,t.minimum)||a.push("minimum"),Object(i.isValidMaximum)(e,t.maximum)||a.push("maximum"),a}function o(e,t,n){if(!Object(r.isNumber)(e)&&!Object(r.isNull)(e))return["type"];var a=[];return Object(i.isValidRequired)(e,n)||a.push("required"),Object(i.isValidMinimum)(e,t.minimum)||a.push("minimum"),Object(i.isValidMaximum)(e,t.maximum)||a.push("maximum"),a}function s(e,t,n){return Object(r.isInteger)(e)?o(e,t,n):["type"]}function c(e,t,n){if(!Object(r.isBoolean)(e)&&!Object(r.isNull)(e))return["type"];var a=[];return Object(i.isValidRequired)(e,n)||a.push("required"),a}function u(e,t,n){return Object(i.isValidRequired)(e,n)?Object(r.isNull)(e)||-1!==t.enum.indexOf(e)?[]:["enum"]:["required"]}function d(e,t,n){return Object(i.isValidRequired)(e,n)?Object(r.isNull)(e)||e===t.const?[]:["const"]:["required"]}function h(e,t){if(!Object(r.isArray)(e)&&!Object(r.isNull)(e))return["type"];var n=[];return Object(i.isValidMinItems)(e,t.minItems)||n.push("minItems"),Object(i.isValidMaxItems)(e,t.maxItems)||n.push("maxItems"),n}},function(e,t,n){"use strict";var r=n(0),i=n.n(r);function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(){function e(t,n,r,i,a,l){var o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$ngModel=t.controller("ngModel"),this.$element=t,this.$attrs=i,this.$timeout=r,this.$transclude=n,this.dom=a,this.element=t[0],l.$watch("$ctrl.ngModel",function(e,t){return o.onModelChange(e,t)})}var t,n,r;return t=e,(n=[{key:"$onInit",value:function(){var e,t,n,r,i,a,l,o,s;this.button=this.element.getElementsByClassName("btn")[0],this.search="",p(this.$ngModel,this),g(this.$ngModel,this,this.$attrs,this.$timeout),e=this,t=this.$element,n=this.$ngModel,this.options,r=this.$timeout,i=t[0],a=i.getElementsByClassName("btn")[0],l=i.getElementsByClassName("btn-group")[0],o=i.getElementsByClassName("dropdown-menu")[0],s=function(){r(function(){a===document.activeElement||l.classList.contains("open")||i.dispatchEvent(new CustomEvent("blur"))},150)},i.addEventListener("blur",function(){n.$setTouched()}),a.addEventListener("keypress",function(t){e.optionKeypress(t)}),a.addEventListener("click",function(){r(function(){e.shouldShowSearch()?i.getElementsByClassName("tw-select-filter")[0].focus():d(i)})}),a.addEventListener("focusout",s),o.addEventListener("focusout",s),o.addEventListener("keypress",function(t){"a"===t.target.tagName.toLowerCase()&&e.optionKeypress(t)}),function(e,t){e(function(e){(e.length>1||""!==e.text().trim())&&(t.hasTranscluded=!0)})}(this.$transclude,this),this.responsiveClasses=w,this.optionsPageSize=300,this.numberOfOptionsRevealed=this.optionsPageSize,this.hasMoreOptionsToReveal=!1,this.filterString="",this.filteredOptions=this.getFilteredOptions()}},{key:"$onChanges",value:function(e){e.options&&this.onOptionsChange(e.options.currentValue,e.options.previousValue)}},{key:"onModelChange",value:function(e,t){if(e!==t){(e||t)&&this.$ngModel.$setDirty();var n=f(this.options,e);this.selected=n||null}}},{key:"onOptionsChange",value:function(e,t){e!==t&&(p(this.$ngModel,this),g(this.$ngModel,this,this.$attrs,this.$timeout),this.filteredOptions=this.getFilteredOptions())}},{key:"circleClasses",value:function(e){var t=w(e),n=w(this.hideSecondary);return this.selected.secondary&&0===n.length?t+=" circle-sm":t+=" circle-xs",t}},{key:"buttonFocus",value:function(){this.element.dispatchEvent(new CustomEvent("focus"))}},{key:"optionClick",value:function(e,t){e.disabled?t.stopPropagation():(m(this.$ngModel,this,e),this.button.focus())}},{key:"optionFocus",value:function(e){m(this.$ngModel,this,e)}},{key:"optionKeypress",value:function(e){if(!e.target.classList.contains("tw-select-filter"))if(8!==h(e)){var t=function(e){return String.fromCharCode(h(e))}(e);!function(e,t,n,r){var i=b(e,t,n,t.search+r);i?t.search+=r:(t.search=r,i=b(e,t,n,t.search))}(this.$ngModel,this,this.options,t),d(this.element)}else e.preventDefault()}},{key:"placeholderClick",value:function(){v(this.$ngModel,this),this.button.focus()}},{key:"placeholderFocus",value:function(){v(this.$ngModel,this)}},{key:"getFilteredOptions",value:function(){if(this.hasMoreOptionsToReveal=!1,!this.options||!this.options.filter)return[];for(var e=this.filterString&&this.filterString.toLowerCase().replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&"),t=Object.create(null),n=[],r=0;r<this.options.length;++r){var a=this.options[r];if(!a.header||a.value||a.label){var l=!1,d=t[a.label],h=i.a.isArray(d);if(h)for(var p=0;p<d.length;p++)if(i.a.equals(d[p],a.value)){l=!0;break}if(!l&&(!e||o(a,e)||s(a,e)||c(a,e)||u(a,e))){if(n.length>=this.numberOfOptionsRevealed){this.hasMoreOptionsToReveal=!0;break}h?d.push(a.value):t[a.label]=[a.value],n.push(a)}}else n.push(a)}return n}},{key:"focusOnFilterInput",value:function(){var e=this.element.getElementsByClassName("tw-select-filter")[0];e&&e.focus()}},{key:"filterChange",value:function(){this.numberOfOptionsRevealed=this.optionsPageSize,this.filteredOptions=this.getFilteredOptions(),!function(e,t){if(!i.a.isArray(e))return;var n;return e.forEach(function(e){t&&i.a.equals(t.value,e.value)&&(n=t)}),n}(this.filteredOptions,this.selected)&&this.filteredOptions.length&&m(this.$ngModel,this,this.filteredOptions[0])}},{key:"filterKeydown",value:function(e){var t=e.which||e.charCode||e.keyCode,n=this.element.querySelector(".active"),r=!!n&&n.querySelector("a"),i=this.element.getElementsByClassName("tw-select-option-link");return t===C.down?(this.moveDownOneOption(n,r,i),e.preventDefault()):t===C.up?(this.moveUpOneOption(n,r,i),e.preventDefault()):t===C.return&&(n&&(n.click(),this.button.focus()),e.preventDefault()),!0}},{key:"selectOptionUsingLink",value:function(e){var t=this.filteredOptions[e.getAttribute("index")];m(this.$ngModel,this,t)}},{key:"moveUpOneOption",value:function(e,t,n){if(e||!n.length){if(t!==n[0]){var r=this.dom.getPreviousSiblingWithClassName(e,"tw-select-option");if(r){var i=r.getElementsByTagName("a")[0];this.selectOptionUsingLink(i)}}}else this.selectOptionUsingLink(n[n.length-1])}},{key:"moveDownOneOption",value:function(e,t,n){if(e||!n.length){if(t!==n[n.length-1]){var r=this.dom.getNextSiblingWithClassName(e,"tw-select-option");if(r){var i=r.getElementsByTagName("a")[0];return void this.selectOptionUsingLink(i)}}var a=this.element.getElementsByClassName("tw-select-transcluded");a.length&&a[0].getElementsByTagName("a")[0].focus()}else this.selectOptionUsingLink(n[0])}},{key:"shouldShowSearch",value:function(){return this.filter||this.options&&this.options.length>12}},{key:"revealMoreOptions",value:function(e){e.stopPropagation(),this.numberOfOptionsRevealed+=this.optionsPageSize,this.filteredOptions=this.getFilteredOptions()}}])&&a(t.prototype,n),r&&a(t,r),e}();function o(e,t){return e.label&&e.label.toLowerCase().search(t)>=0}function s(e,t){return e.note&&e.note.toLowerCase().search(t)>=0}function c(e,t){return e.secondary&&e.secondary.toLowerCase().search(t)>=0}function u(e,t){return e.searchable&&e.searchable.toLowerCase().search(t)>=0}function d(e){var t=e.getElementsByClassName("active")[0];t&&t.getElementsByTagName("a")[0].focus()}function h(e){return e.which||e.charCode||e.keyCode}function p(e,t){if(y(t.ngModel)){var n=f(t.options,t.ngModel);n&&m(e,t,n)}}function f(e,t){var n=!1;return e.forEach(function(e){i.a.equals(e.value,t)&&(n=e)}),n}function g(e,t,n,r){if((t.ngRequired||n.required)&&!y(t.ngModel)&&!t.placeholder)for(var i=0;i<t.options.length;i++)if(y(t.options[i].value)){m(e,t,t.options[i]),r(t.ngChange);break}}function m(e,t,n){n.disabled||(e.$setViewValue(n.value),e.$commitViewValue(),t.selected=n)}function v(e,t){e.$setViewValue(null),e.$commitViewValue(),t.selected=!1}function b(e,t,n,r){var i=!1,a=r.toLowerCase();return n.forEach(function(n){i||($(n.label,a)||$(n.note,a)||$(n.secondary,a)||$(n.searchable,a))&&(m(e,t,n),i=!0)}),i}function $(e,t){return e&&0===e.toLowerCase().indexOf(t)}function y(e){return e||0===e||!1===e}function w(e){var t="",n=[],r={xs:!0,sm:!0,md:!0,lg:!0,xl:!0};return"boolean"==typeof e&&e?"hidden":e&&e.toLowerCase&&"true"===e.toLowerCase()?"hidden":(e&&(n=e.split(",")),n.forEach(function(e){r[e]&&(t+="hidden-".concat(e," "))}),t)}var C={up:38,down:40,return:13};l.$inject=["$element","$transclude","$timeout","$attrs","TwDomService","$scope"];var x=l,k=n(28),M={controller:x,template:n.n(k).a,require:"ngModel",transclude:!0,bindings:{ngModel:"=",ngChange:"&",ngRequired:"<",ngDisabled:"<",options:"<",name:"@",placeholder:"@",filter:"@",size:"@",dropdownRight:"@",dropdownUp:"@",dropdownWidth:"@",inverse:"<",hideNote:"@",hideSecondary:"@",hideIcon:"@",hideCurrency:"@",hideCircle:"@",hideLabel:"@"}},O=n(2),S=n(4);t.a=i.a.module("tw.styleguide.forms.select",[O.a,S.a]).component("twSelect",M).name},function(e,t,n){"use strict";var r=n(0),i=n.n(r);function a(e){var t=this;function n(e){if(e instanceof Array){var t=[];return e.forEach(function(e){e.fields?t=t.concat(r(e,e.fields)):e.group?t=t.concat(r(e,e.group)):t.push(e)}),t}return e}function r(e,t){return e.name&&t.length&&!t[0].name&&(t[0].name=e.name),e.width&&t.length&&!t[0].width&&(t[0].width=e.width),e.tooltip&&t.length&&!t[0].helpText&&(t[0].helpText=e.tooltip),e.info&&t.length&&!t[0].helpText&&(t[0].helpText=e.info),2===t.length&&t.forEach(function(e){e.width="md"}),3===t.length&&(t[0].width="md",t[1].width="md"),t}function i(e){return!e.label&&e.title&&(e.label=e.title,delete e.title),!e.label&&e.name&&(e.label=e.name,delete e.name),!e.value&&e.code&&(e.value=e.code,delete e.code),!e.value&&e.key&&(e.value=e.key,delete e.key),e}this.prepRequirements=function(e){if(!e||!e.length)return[];var n=s(e);return n.forEach(function(e){e.prepared||(t.prepLegacyAlternatives(e),e.properties=t.prepFields(e.properties||e.fields),e.type&&"object"!==e.type&&!e.types&&(e.properties.type={type:"string",enum:[e.type],required:!0,hidden:!0},e.type="object"),e.prepared=!0)}),n},this.prepFields=function(e,r,i){if(!e)return{};var a=s(e);return a=function(e){if(e instanceof Array)throw new Error("Expecting a map of fields, not an array");var t={};return Object.keys(e).forEach(function(n){if(n.indexOf(".")>0){var r=n.split("."),i=r[0];t[i]||(t[i]={type:"object",properties:{}}),t[i].properties[r[1]]=e[n]}else t[n]=e[n]}),t}(a=function(e){if(e instanceof Array){var t={};return e.forEach(function(e){var n=e.key||e.name;delete e.key,t[n]=s(e)}),t}return e}(a=n(a))),Object.keys(a).forEach(function(e){a[e]=t.prepField(a[e],r,i)}),a},this.prepField=function(e,n,r){var i=s(e);return t.prepLegacyProps(i),t.prepType(i),t.prepPattern(i),t.prepValuesAsync(i,n),t.prepValidationMessages(i,r),t.prepHelp(i),t.prepCameraGuidelines(i),i},this.prepType=function(e){switch(e.type&&e.type.toLowerCase&&e.type.toLowerCase()){case"text":e.type="string";break;case"date":e.type="string",e.format="date";break;case"password":e.type="string",e.control="password";break;case"checkbox":e.type="boolean";break;case"select":"CHECKBOX"===e.selectType?e.type="array":(e.control||(e.control="select"),delete e.type);break;case"radio":e.control="radio",delete e.type;break;case"upload":e.type="string",e.format="base64url";break;case"tel":e.type="string",e.format="phone";break;case"textarea":e.type="string",e.control="textarea";break;case"array":e.control=t.getControlForArray(e);break;case"hidden":e.type="string",e.hidden=!0}e.control||"object"===e.type||(e.control=t.getControlType(e))},this.getControlForArray=function(e){return e.items.enum?"checkbox-group":"base64url"===e.items.format?"multi-upload":null},this.prepLegacyAlternatives=function(e){!e.title&&e.label&&(e.title=e.label),e.title||(e.title=function(e){if(e&&e.length>0){var t=e.toLowerCase().split("_").join(" ");return t.charAt(0).toUpperCase()+t.slice(1)}return""}(e.type)),!e.type&&e.name&&(e.type=e.name),!e.description&&e.tooltip&&(e.description=e.tooltip),e.fieldGroups&&!e.fields&&(e.fields=n(e.fieldGroups),delete e.fieldGroups)},this.prepLegacyProps=function(e){if(e.name&&!e.title&&(e.title=e.name,delete e.name),e.validationRegexp&&(e.pattern=e.validationRegexp,delete e.validationRegexp),e.min&&!e.minimum&&(e.minimum=e.min,delete e.min),e.max&&!e.maximum&&(e.maximum=e.max,delete e.max),e.example&&!e.placeholder&&(e.placeholder=e.example,delete e.example),e.tooltip&&!e.helpText&&(e.helpText=e.tooltip,delete e.tooltip),e.valuesAllowed&&!e.values&&"CHECKBOX"!==e.selectType&&(e.values=e.valuesAllowed,delete e.valuesAllowed),e.valuesAllowed&&!e.items&&"CHECKBOX"===e.selectType&&(e.items={values:e.valuesAllowed},delete e.valuesAllowed),e.values&&e.values.map){e.values=t.prepLegacyValues(e.values);e.oneOf=e.values.map(function(e){return{const:e.value,title:e.label}})}e.value&&!e.default&&(e.default=e.value,delete e.value),e.values&&e.values&&e.values.length&&e.values[0]&&!e.values[0].value&&e.values[0].label&&!e.placeholder&&(e.placeholder=e.values[0].label,e.values=e.values.slice(1)),e.helpOptions&&!e.help&&(e.help=e.helpOptions,delete e.helpOptions)},this.prepLegacyValues=function(e){return e.map(i)},this.prepPattern=function(e){if(e.pattern)try{RegExp(e.pattern)}catch(t){console.warn("API regexp is invalid"),delete e.pattern}else delete e.pattern},this.prepValuesAsync=function(e,n){if(e.valuesAsync){var r={};e.valuesAsync.params&&e.valuesAsync.params.length&&(r=t.getParamValuesFromModel(n,e.valuesAsync.params)),t.fetchValuesAsync(e,r).catch(function(){return t.fetchValuesAsync(e,r)})}},this.fetchValuesAsync=function(n,r){return e({method:n.valuesAsync.method||"GET",url:n.valuesAsync.url,data:r||{}}).then(function(e){n.values=t.prepLegacyValues(e.data)})},this.getParamValuesFromModel=function(e,t){var n={};return t.forEach(function(t){e[t.key]?n[t.parameterName]=e[t.key]:t.required}),n},this.prepValidationMessages=function(e){e.validationMessages&&e.validationMessages.min&&(e.validationMessages.minimum=e.validationMessages.min,delete e.validationMessages.min),e.validationMessages&&e.validationMessages.max&&(e.validationMessages.maximum=e.validationMessages.max,delete e.validationMessages.max),e.validationMessages&&e.validationMessages.minlength&&(e.validationMessages.minLength=e.validationMessages.minlength,delete e.validationMessages.minlength),e.validationMessages&&e.validationMessages.maxlength&&(e.validationMessages.maxLength=e.validationMessages.maxlength,delete e.validationMessages.maxlength)},this.prepHelp=function(e){!e.help&&(e.helpText||e.helpImage||e.helpList||e.uploadPlaceholderImage)&&(e.help={}),e.helpText&&(e.help.message=e.helpText,delete e.helpText),e.helpImage&&(e.help.image=e.helpImage,delete e.helpImage),e.uploadPlaceholderImage&&(e.help.image=e.uploadPlaceholderImage,delete e.uploadPlaceholderImage),e.list&&(e.help.list=e.helpList,delete e.helpList)},this.prepCameraGuidelines=function(e){e.camera&&e.camera.overlay&&!e.camera.outline&&(e.camera.outline=e.camera.overlay,delete e.camera.overlay)},this.getRequiredFields=l,this.getControlType=o}function l(e){if(Array.isArray(e))throw new Error("Expected field map");return Object.keys(e).filter(function(t){return e[t].required})}function o(e){if(e.control)return"select"===e.control&&"CHECKBOX"===e.selectType?"checkbox-group":e.control.toLowerCase();if(e.hidden)return"hidden";if(e.valuesAsync)return"select";if(e.values&&e.values.length)return function(e){if(e.control)return e.control;if("select"===e.type)return"select";if("radio"===e.type)return"radio";var t=e.enum||e.values;if(t)return t.length>3?"select":"radio";return"select"}(e);switch(e.type){case"string":return function(e){switch(e){case"date":return"date";case"base64url":return"file";case"password":return"password";case"uri":case"email":return"text";case"phone":return"tel";default:return"text"}}(e.format);case"number":case"integer":return"number";case"boolean":return"checkbox";default:return"text"}}function s(e){return JSON.parse(JSON.stringify(e))}a.$inject=["$http"];var c=a;t.a=i.a.module("tw.styleguide.services.requirements",[]).service("TwRequirementsService",c).name},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var r=n(1);function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach(function(t){l(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){if(t.allOf)return function(e,t){var n,r={};return t.allOf.forEach(function(t){"object"===o(n=s(e,t))&&(r=a({},r,{},n))}),r}(e,t);if(t.oneOf)return function(e,t){return t.oneOf.map(function(t){return s(e,t)}).reduce(function(e,t){return Object(r.isNull)(e)?t:Object(r.isObject)(e)&&Object(r.isObject)(t)?function e(t,n){var i=a({},t);Object.keys(n).forEach(function(a){Object(r.isObject)(t[a])&&Object(r.isObject)(n[a])?i[a]=e(t[a],n[a]):i[a]=n[a]});return i}(e,t):Object(r.isNull)(t)?e:t},null)}(e,t);if(t.enum&&t.enum.indexOf(e)>=0)return e;if(!Object(r.isUndefined)(t.const)&&e===t.const)return e;if(t.type)switch(t.type){case"object":return function(e,t){var n={};return Object.keys(t.properties).forEach(function(i){if(e&&!Object(r.isUndefined)(e[i])){var a=s(e[i],t.properties[i]);Object(r.isNull)(a)||(n[i]=a)}}),n}(e,t);case"array":return function(e,t){if(Object(r.isArray)(e))return e.map(function(e){return s(e,t)});return null}(e,t);case"string":return function(e){if(Object(r.isString)(e))return e;return null}(e);case"number":return function(e){if(Object(r.isNumber)(e))return e;return null}(e);case"integer":return function(e){if(Object(r.isInteger)(e))return e;return null}(e);case"boolean":return function(e){if(Object(r.isBoolean)(e))return e;return null}(e);default:return null}return null}},function(e,t,n){"use strict";var r=n(0),i=n.n(r);function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$interval=n,this.$timeout=r,this.interval=null,this.processing=this.state,this.onStateChange()}var t,n,r;return t=e,(n=[{key:"$onChanges",value:function(e){e.state&&this.onStateChange(),e.state&&this.onSizeChange()}},{key:"onStateChange",value:function(){o(this.processing)&&(this.processing=null,this.startProcess())}},{key:"onSizeChange",value:function(){switch(this.stopProcess(),this.startProcess(),this.size||(this.size="sm"),this.size){case"xs":this.radius="11";break;case"sm":this.radius="22";break;case"xl":this.radius="61";break;default:this.radius="46%"}}},{key:"startProcess",value:function(){var e=this;this.interval||(this.interval=this.$interval(function(){e.processing=e.state,o(e.state)&&(e.stopProcess(),e.notifyConsumers())},1500))}},{key:"stopProcess",value:function(){this.interval&&(this.$interval.cancel(this.interval),this.interval=null)}},{key:"notifyConsumers",value:function(){this.onStop&&(0===this.state?this.onStop():this.$timeout(this.onStop,1800))}}])&&a(t.prototype,n),r&&a(t,r),e}();function o(e){return-1===e||0===e||1===e}l.$inject=["$scope","$interval","$timeout"];var s=l,c=n(34),u={controller:s,template:n.n(c).a,bindings:{state:"<",size:"@",onStop:"&",promise:"<"}};t.a=i.a.module("tw.styleguide.loading.process",[]).component("twProcess",u).name},function(e,t,n){"use strict";var r=n(0),i=n.n(r);function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var i=n.controller("ngModel");this.dom=r,this.$element=n,this.element=n[0],this.checked=this.isChecked(),this.label=this.dom.getClosestParentByTagName(this.element,"label"),n[0].addEventListener("blur",function(){i.$setTouched()}),this.addWatchers(t,this.element)}var t,n,r;return t=e,(n=[{key:"isChecked",value:function(){return this.ngValue&&this.ngModel===this.ngValue||this.value===this.ngModel}},{key:"buttonClick",value:function(){this.ngDisabled||(this.checked=!0,this.$ngModel.$setViewValue(this.ngValue||this.value))}},{key:"buttonFocus",value:function(){this.label&&this.label.classList.add("focus"),this.element.dispatchEvent(new CustomEvent("focus"))}},{key:"buttonBlur",value:function(){this.label&&this.label.classList.remove("focus"),this.element.dispatchEvent(new CustomEvent("blur"))}},{key:"hiddenInputChange",value:function(){this.$ngModel.$setViewValue(this.ngValue||this.value)}},{key:"addWatchers",value:function(e,t){var n=this;e.$watch("$ctrl.ngModel",function(e,t){e!==t&&n.$ngModel.$setDirty(),n.checked=n.isChecked()}),e.$watch("$ctrl.ngDisabled",function(e,r){var i=n.dom.getClosestParentByClassName(t,"radio");i&&(e&&!r?(i.classList.add("disabled"),i.setAttribute("disabled","true")):!e&&r&&(i.classList.remove("disabled"),i.removeAttribute("disabled")))})}}])&&a(t.prototype,n),r&&a(t,r),e}();l.$inject=["$scope","$element","TwDomService"];var o=l,s=n(27),c={controller:o,template:n.n(s).a,require:{$ngModel:"ngModel"},bindings:{name:"@",value:"@",ngModel:"=",ngValue:"<",ngRequired:"<",ngDisabled:"<",ngChange:"&"}},u=n(2),d=n(4);t.a=i.a.module("tw.styleguide.forms.radio",[u.a,d.a]).component("twRadio",c).name},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",r=e[3];if(!r)return n;if(t&&"function"==typeof btoa){var i=(l=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(l))))+" */"),a=r.sources.map(function(e){return"/*# sourceURL="+r.sourceRoot+e+" */"});return[n].concat(a).concat([i]).join("\n")}var l;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},i=0;i<this.length;i++){var a=this[i][0];"number"==typeof a&&(r[a]=!0)}for(i=0;i<e.length;i++){var l=e[i];"number"==typeof l[0]&&r[l[0]]||(n&&!l[2]?l[2]=n:n&&(l[2]="("+l[2]+") and ("+n+")"),t.push(l))}},t}},function(e,t,n){var r,i,a={},l=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===i&&(i=r.apply(this,arguments)),i}),o=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),s=null,c=0,u=[],d=n(51);function h(e,t){for(var n=0;n<e.length;n++){var r=e[n],i=a[r.id];if(i){i.refs++;for(var l=0;l<i.parts.length;l++)i.parts[l](r.parts[l]);for(;l<r.parts.length;l++)i.parts.push(b(r.parts[l],t))}else{var o=[];for(l=0;l<r.parts.length;l++)o.push(b(r.parts[l],t));a[r.id]={id:r.id,refs:1,parts:o}}}}function p(e,t){for(var n=[],r={},i=0;i<e.length;i++){var a=e[i],l=t.base?a[0]+t.base:a[0],o={css:a[1],media:a[2],sourceMap:a[3]};r[l]?r[l].parts.push(o):n.push(r[l]={id:l,parts:[o]})}return n}function f(e,t){var n=o(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=u[u.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),u.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var i=o(e.insertAt.before,n);n.insertBefore(t,i)}}function g(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=u.indexOf(e);t>=0&&u.splice(t,1)}function m(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=function(){0;return n.nc}();r&&(e.attrs.nonce=r)}return v(t,e.attrs),f(e,t),t}function v(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function b(e,t){var n,r,i,a;if(t.transform&&e.css){if(!(a="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=a}if(t.singleton){var l=c++;n=s||(s=m(t)),r=w.bind(null,n,l,!1),i=w.bind(null,n,l,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",v(t,e.attrs),f(e,t),t}(t),r=function(e,t,n){var r=n.css,i=n.sourceMap,a=void 0===t.convertToAbsoluteUrls&&i;(t.convertToAbsoluteUrls||a)&&(r=d(r));i&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(i))))+" */");var l=new Blob([r],{type:"text/css"}),o=e.href;e.href=URL.createObjectURL(l),o&&URL.revokeObjectURL(o)}.bind(null,n,t),i=function(){g(n),n.href&&URL.revokeObjectURL(n.href)}):(n=m(t),r=function(e,t){var n=t.css,r=t.media;r&&e.setAttribute("media",r);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),i=function(){g(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else i()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=l()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=p(e,t);return h(n,t),function(e){for(var r=[],i=0;i<n.length;i++){var l=n[i];(o=a[l.id]).refs--,r.push(o)}e&&h(p(e,t),t);for(i=0;i<r.length;i++){var o;if(0===(o=r[i]).refs){for(var s=0;s<o.parts.length;s++)o.parts[s]();delete a[o.id]}}}};var $,y=($=[],function(e,t){return $[e]=t,$.filter(Boolean).join("\n")});function w(e,t,n,r){var i=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=y(t,i);else{var a=document.createTextNode(i),l=e.childNodes;l[t]&&e.removeChild(l[t]),l.length?e.insertBefore(a,l[t]):e.appendChild(a)}}},,function(e,t,n){"use strict";var r=n(0),i=n.n(r);function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(){function e(t,n,r,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.$attrs=r,this.FileValidationService=i,this.isProcessing=!1}var t,n,r;return t=e,(n=[{key:"$onChanges",value:function(e){e.source&&(this.isLiveCameraUpload="CAMERA_ONLY"===e.source.currentValue)}},{key:"onFileCapture",value:function(e){if(!this.ngDisabled){if(!e)throw new Error("Could not retrieve file");this.file=e}}},{key:"reset",value:function(){this.isProcessing=!1,this.isDone=!1,this.clearHtmlInput(),this.setNgModel(null),this.onCancel&&this.onCancel()}},{key:"clearHtmlInput",value:function(){this.$element[0].querySelectorAll("input")&&this.$element[0].querySelectorAll("input").forEach(function(e){e.value=null})}},{key:"setNgModel",value:function(e){if(void 0!==this.$attrs.ngModel){var t=this.$element.controller("ngModel");if(!t.$setViewValue)return;t.$setViewValue(e)}}},{key:"isDropEligible",value:function(){return"CAMERA_ONLY"!==this.source}},{key:"onDragEnter",value:function(){this.isDroppable=this.isDropEligible()}},{key:"onDragLeave",value:function(){this.isDroppable=!1}},{key:"onDrop",value:function(e){this.isDroppable=!1,this.onFileCapture(e[0])}},{key:"onProcessStart",value:function(e){this.isDone=!1,this.isProcessing=!0,this.onStart&&this.onStart({file:e})}},{key:"onProcessSuccess",value:function(e,t,n,r){this.isDone=!0,this.isProcessing=!1,this.dataUrl=t,this.isImage=this.FileValidationService.isImage(e),this.httpOptions&&n?this.setNgModel(n):this.setNgModel(t),this.onSuccess(e,r)}},{key:"onProcessFailure",value:function(e){this.onFailure&&this.onFailure(e)}}])&&a(t.prototype,n),r&&a(t,r),e}();l.$inject=["$element","$scope","$attrs","FileValidationService"];var o=l,s=n(29),c=n.n(s),u=(n(49),{controller:o,template:c.a,bindings:{ngDisabled:"<",ngModel:"=",ngChange:"&",name:"@",icon:"@",helpImage:"@",label:"@",placeholder:"@",buttonText:"@",cancelText:"@",droppingText:"@",processingText:"@",successText:"@",failureText:"@",noCameraText:"@",noCameraMessage:"@",tooLargeMessage:"@",validationMessages:"<",size:"@",accept:"@",httpOptions:"<",onStart:"=",onSuccess:"=",onFailure:"=",onCancel:"=",maxSize:"<",source:"<",cameraGuidelines:"<",description:"@",instructions:"@"}}),d=n(30),h=n.n(d);function p(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var f=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.showLiveCaptureScreen=!1,this.cameraFailed=!1}var t,n,r;return t=e,(n=[{key:"$onChanges",value:function(e){(e.icon||e.isLiveCameraUpload)&&((e.icon||{}).currentValue?this.viewIcon=e.icon.currentValue:this.viewIcon=(e.isLiveCameraUpload||{}).currentValue?"camera":"upload")}},{key:"onCameraCancel",value:function(){this.showLiveCaptureScreen=!1}},{key:"onCameraError",value:function(){this.showLiveCaptureScreen=!1,this.cameraFailed=!0}},{key:"onCameraCapture",value:function(e){this.showLiveCaptureScreen=!1,this.onFileCapture({file:e})}},{key:"onCameraButtonClick",value:function(){this.showLiveCaptureScreen=!0,this.cameraFailed=!1}},{key:"onButtonCapture",value:function(e){var t=e[0];this.onFileCapture({file:t})}}])&&p(t.prototype,n),r&&p(t,r),e}();f.$inject=["$element"];var g=f,m=(n(52),{template:h.a,controller:g,bindings:{label:"<",icon:"<",accept:"<",buttonText:"<",ngDisabled:"<",placeholder:"<",inputFile:"<",helpImage:"<",noCameraText:"<",noCameraMessage:"<",isLiveCameraUpload:"<",cameraGuidelines:"<",onFileCapture:"&"}}),v=i.a.module("tw.styleguide.forms.upload.capture",[]).component("twUploadCapture",m).name,b=n(31),$={template:n.n(b).a,bindings:{droppingText:"<"}},y=i.a.module("tw.styleguide.forms.upload.dropping",[]).component("twUploadDropping",$).name;function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var C=function(){function e(t,n,r,i,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$timeout=t,this.AsyncFileReader=n,this.AsyncFileSaver=r,this.AsyncTasksConfig=i,this.FileValidation=a,this.processingState=null}var t,n,r;return t=e,r=[{key:"parseFileName",value:function(e){var t=e.match(/^data:[^/]+\/([^;]+);base64,/);return t?"file.".concat(t[1]):void 0}}],(n=[{key:"$onChanges",value:function(e){e.file&&e.file.currentValue&&this.onFileCapture(e.file.currentValue)}},{key:"onFileCapture",value:function(t){var n=this;if(!this.ngDisabled){if(!t)throw new Error("Could not retrieve file");if(this.reset(),this.file=t,this.isProcessing=!0,this.processingState=null,this.onStart({file:t}),!this.FileValidation.isSmallerThanMaxSize(t,this.maxSize))return this.validationMessages=[this.tooLargeMessage],void k({status:413,data:{message:this.tooLargeMessage}},null,this);this.httpOptions?this.asyncFileRead(t).then(function(r){return n.asyncFileSave(t,e.parseFileName(r)).then(function(e){return x(e,r,n)})}).catch(function(e){return k(e,null,n)}):this.asyncFileRead(t).then(function(e){return x(null,e,n)}).catch(function(e){return k(e,null,n)})}}},{key:"asyncFileSave",value:function(e,t){var n=this.AsyncTasksConfig.extendHttpOptions(this.httpOptions);return this.AsyncFileSaver.save(n.param||this.name,e,n,t)}},{key:"asyncFileRead",value:function(e){return this.AsyncFileReader.read(e)}},{key:"reset",value:function(){this.processingState=0,this.isProcessing=!1,this.isSuccess=!1,this.isError=!1}},{key:"onRemove",value:function(){this.onCancel()}}])&&w(t.prototype,n),r&&w(t,r),e}();function x(e,t,n){n.processingState=1;var r=null,i=n.file,a=n.httpOptions;return a&&a.idProperty&&e&&e.data&&e.data[a.idProperty]&&(r=e.data[a.idProperty]),n.$timeout(function(){n.isProcessing=!1,n.isSuccess=!0,n.onSuccess({file:i,dataUrl:t,id:r,response:e})},3600),t}function k(e,t,n){return n.processingState=-1,n.responseErrorExtractor&&(n.errorMessage=n.responseErrorExtractor({error:e})||n.errorMessage),n.$timeout(function(){n.isProcessing=!1,n.isError=!0},3600),n.$timeout(function(){n.onFailure({error:e})},3600),e}C.$inject=["$timeout","AsyncFileReader","AsyncFileSaver","AsyncTasksConfig","FileValidationService"];var M=C,O=n(32),S={name:"<",file:"<",onStart:"&",onSuccess:"&",onFailure:"&",onCancel:"&",responseErrorExtractor:"&",maxSize:"<",accept:"<",httpOptions:"<",processingMessage:"<",successMessage:"<",errorMessage:"<",tooLargeMessage:"<",validationMessages:"<",cancelText:"<"},j={controller:M,template:n.n(O).a,bindings:S},D=n(33),T={controller:M,template:n.n(D).a,bindings:S};function A(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var E=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$q=t}var t,n,r;return t=e,(n=[{key:"read",value:function(e){var t=new FileReader,n=this.$q.defer();return t.onload=function(e){n.resolve(e.target.result)},t.onerror=function(e){n.reject(e)},t.readAsDataURL(e),n.promise}}])&&A(t.prototype,n),r&&A(t,r),e}();E.$inject=["$q"];var F=angular.module("tw.styleguide.forms.upload.file-reader",[]).service("AsyncFileReader",E).name;function L(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var P=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$http=t}var t,n,r;return t=e,(n=[{key:"save",value:function(e,t,n,r){if(!n)throw new Error("You must supply httpOptions");var i=new FormData,a=n.param||e;i.append(a,t,r);var l=function(e){var t=angular.copy(e);if(!t.url)throw new Error("You must supply a URL to post image data asynchronously");t.headers||(t.headers={});return t.headers["Content-Type"]=void 0,t.transformRequest=angular.identity,t}(n);return delete l.method,this.$http.post(l.url,i,l)}}])&&L(t.prototype,n),r&&L(t,r),e}();P.$inject=["$http"];var V=angular.module("tw.styleguide.forms.upload.file-saver",[]).service("AsyncFileSaver",P).name;function q(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var U=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,(n=[{key:"isImage",value:function(e){return e.type&&e.type.indexOf("image")>-1}},{key:"isSmallerThanMaxSize",value:function(e,t){return!i.a.isNumber(t)||e.size<=t}}])&&q(t.prototype,n),r&&q(t,r),e}(),I=i.a.module("tw.styleguide.forms.upload.validation-service",[]).service("FileValidationService",U).name,N=n(24),R=n(11),B=i.a.module("tw.styleguide.forms.upload.processing",[N.a,F,V,I,R.a]).component("twUploadProcessing",j).component("twUploadProcessingMini",T).name,z=n(35),Y=n.n(z);function W(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var H=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.FileValidationService=n}var t,n,r;return t=e,(n=[{key:"$onChanges",value:function(e){e.file&&e.file.currentValue&&(this.fileName=e.file.currentValue.name)}},{key:"onManualReupload",value:function(){var e=this.$element[0].querySelector(".tw-droppable-input-reupload").files[0];this.onFileCapture(e)}}])&&W(t.prototype,n),r&&W(t,r),e}();H.$inject=["$element","FileValidationService"];var G=H,K={template:Y.a,controller:G,bindings:{label:"<",file:"<",data:"<",isImage:"<",successMessage:"<",cancelText:"<",onCancel:"&"}},_=i.a.module("tw.styleguide.forms.upload.success",[]).component("twUploadSuccess",K).name,J=n(5),X=n.n(J);function Q(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var Z=function(){function e(t,n,r,i,a,l,o,s){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.$attrs=l,this.$scope=n,this.$log=o,this.$timeout=s,this.$q=a,this.$window=r,this.$document=i}var t,n,r;return t=e,(n=[{key:"$onInit",value:function(){return this.guidelines=this.guidelines||{},this.mode="loading",this.mediaStream=null,this.overlaySquareLength=0,this.sensorWidth=0,void 0===this.$window.navigator.mediaDevices?(this.$log.error("navigator.mediaDevices not accessible on this browser"),void this.onError()):void 0===this.$window.navigator.mediaDevices.getUserMedia?(this.$log.error("mediaDevices.getUserMedia is not implemented on this browser"),void this.onError()):(this.previousBodyOverflowStyle=this.$document[0].body.style.overflow,this.$document[0].body.style.overflow="hidden",this.calculateWidthsResizeListener=this.calculateWidths.bind(this),this.$window.addEventListener("resize",this.calculateWidthsResizeListener),void this.startLiveCamFlow())}},{key:"$onDestroy",value:function(){this.$window.removeEventListener("resize",this.calculateWidthsResizeListener),this.$document[0].body.style.overflow=this.previousBodyOverflowStyle}},{key:"calculateWidths",value:function(){var e=this;this.$timeout(function(){var t=e.findContainer(),n=t.clientWidth,r=t.clientHeight,i=e.findViewfinder(),a=i.videoWidth,l=i.videoHeight;if(a&&l){var o=Math.min(n/a,r/l),s=o*a,c=o*l;e.sensorWidth=s,e.overlaySquareLength=.9*Math.min(s,c)}else e.$timeout(e.calculateWidths.bind(e),100)})}},{key:"startLiveCamFlow",value:function(){var e=this;this.$log.debug("----- Live cam flow start -----"),this.tryAcquireMediaStream().then(function(t){return e.mediaStream=t,e.tryAcquireFullScreen().catch(function(t){e.$log.warn(t)}).finally(function(){e.assignStreamToVideo()})}).catch(function(t){e.$log.error(t),e.closeVideoStream(),e.onError()})}},{key:"tryAcquireFullScreen",value:function(){if(X.a.isEnabled){if(!X.a.isFullscreen){var e=this.$q.defer();return this.$timeout(e.reject.bind(null,"Fullscreen request timed out."),1500),X.a.on("error",e.reject),X.a.request(this.container).then(e.resolve,e.reject),e.promise}return this.$q.resolve()}return this.$q.reject("Switching to full screen is not enabled.")}},{key:"assignStreamToVideo",value:function(){var e=this.findViewfinder();e.srcObject!==this.mediaStream&&(e.srcObject=this.mediaStream),e.play().then(this.calculateWidths.bind(this)),this.mode="capture"}},{key:"tryAcquireMediaStream",value:function(){return this.mediaStream?this.$q.resolve(this.mediaStream):(this.guidelines.direction&&-1!==["environment","user"].indexOf(this.guidelines.direction.toLowerCase())||(this.guidelines.direction="environment"),this.cameraConstraints={video:{width:{ideal:1536},height:{ideal:2048},facingMode:{ideal:this.guidelines.direction.toLowerCase()}},audio:!1},this.$window.navigator.mediaDevices.getUserMedia(this.cameraConstraints))}},{key:"closeVideoStream",value:function(){X.a.isEnabled&&X.a.exit(),this.findViewfinder().srcObject=null,this.mediaStream&&(this.mediaStream.getTracks().forEach(function(e){return e.stop()}),this.mediaStream=null)}},{key:"onCancelBtnClick",value:function(){this.closeVideoStream(),this.onCancel()}},{key:"onCaptureBtnClick",value:function(){var e=this.findViewfinder(),t=this.findSensor();e.pause(),t.width=e.videoWidth,t.height=e.videoHeight,t.getContext("2d").drawImage(e,0,0),this.mode="confirm"}},{key:"onRecaptureBtnClick",value:function(){this.findViewfinder().play(),this.mode="capture"}},{key:"onUploadBtnClick",value:function(){var e;this.findSensor().toBlob((e=this,function(t){X.a.isEnabled&&X.a.exit(),e.showVideoPreview=!1,e.closeVideoStream(),e.$scope.$applyAsync(function(){e.onCapture({file:t})})}),"image/jpeg",.92)}},{key:"setNgModel",value:function(e){if(void 0!==this.$attrs.ngModel){var t=this.$element.controller("ngModel");if(!t.$setViewValue)return;t.$setViewValue(e)}}},{key:"findContainer",value:function(){return this.$element[0].querySelector("#camera")}},{key:"findViewfinder",value:function(){return this.$element[0].querySelector("#cameraViewfinder")}},{key:"findSensor",value:function(){return this.$element[0].querySelector("#cameraSensor")}}])&&Q(t.prototype,n),r&&Q(t,r),e}();Z.$inject=["$element","$scope","$window","$document","$q","$attrs","$log","$timeout"];var ee=Z,te=n(36),ne=n.n(te),re=(n(54),{controller:ee,template:ne.a,bindings:{guidelines:"<",onCancel:"&",onCapture:"&",onError:"&",testMode:"@"}}),ie=i.a.module("tw.styleguide.forms.upload.camera-capture",[]).component("twCameraCapture",re).name,ae=n(37),le=n.n(ae);function oe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var se=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t}var t,n,r;return t=e,(n=[{key:"onButtonClick",value:function(){this.onClick&&this.onClick()}},{key:"onButtonCapture",value:function(){var e=this.$element[0].querySelector(".tw-droppable-input").files;this.onCapture({files:e})}}])&&oe(t.prototype,n),r&&oe(t,r),e}();se.$inject=["$element"];var ce=se,ue={template:le.a,controller:ce,bindings:{name:"<",label:"<",isSecondary:"<",small:"<",block:"<",accept:"<",model:"<",multiple:"<",disabled:"<",onClick:"&",onCapture:"&"}},de=i.a.module("tw.styleguide.forms.upload.button",[]).component("twUploadButton",ue).name,he=n(38),pe=n.n(he);function fe(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var ge=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,(n=[{key:"onButtonClick",value:function(){this.onClick&&this.onClick()}}])&&fe(t.prototype,n),r&&fe(t,r),e}(),me={template:pe.a,controller:ge,bindings:{label:"<",disabled:"<",onClick:"&",onCapture:"&"}},ve=i.a.module("tw.styleguide.forms.upload.camera-button",[]).component("twCameraButton",me).name;var be=function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),t[0].addEventListener("change",function(){n.onUserInput&&"function"==typeof n.onUserInput&&n.onUserInput()})};be.$inject=["$element"];var $e=function(){return{restrict:"A",controller:be,controllerAs:"$ctrl",bindToController:!0,scope:{onUserInput:"&"}}};function ye(e){return function(e){if(Array.isArray(e))return we(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return we(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(n);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return we(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function we(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Ce(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var xe=function(){function e(t,n,r,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.$attrs=r,this.files=[],this.model=[],this.$timeout=i}var t,n,r;return t=e,(n=[{key:"$onChanges",value:function(e){e.icon&&(this.viewIcon=e.icon.currentValue?e.icon.currentValue:"upload")}},{key:"onFileCapture",value:function(e){var t=this;if(!this.ngDisabled){if(!e)throw new Error("Could not retrieve file");0!==e.length&&(this.onStart&&this.areAllFilesProcessed()&&this.onStart(),this.files=[].concat(ye(this.files),ye(e)),this.$timeout(function(){var e=t.$element[0].querySelector(".processing-list");e&&(e.scrollTop=e.scrollHeight)},600))}}},{key:"onProcessSuccess",value:function(e,t,n,r){var i=this.httpOptions?"id":"dataUrl";this.files[e][i]=this.httpOptions?r:n;var a=this.files.map(function(e){return e[i]}).filter(function(e){return!!e});this.setNgModel(a),this.onFinish&&this.areAllFilesProcessed()&&this.onFinish()}},{key:"areAllFilesProcessed",value:function(){var e=this.httpOptions?"id":"dataUrl";return!this.files.some(function(t){return null==t[e]&&null==t.error})}},{key:"onProcessFailure",value:function(e,t,n){this.files[e].error=n,this.onFailure&&this.onFailure({error:n}),this.onFinish&&this.areAllFilesProcessed()&&this.onFinish()}},{key:"onProcessCancel",value:function(e){var t=this.httpOptions?"id":"dataUrl";this.files.splice(e,1);var n=this.files.map(function(e){return e[t]}).filter(function(e){return!!e});this.setNgModel(n)}},{key:"onDragEnter",value:function(){this.isDroppable=!0}},{key:"onDragLeave",value:function(){this.isDroppable=!1}},{key:"onDrop",value:function(e){this.isDroppable=!1,this.onFileCapture(e)}},{key:"reset",value:function(){this.setNgModel(null)}},{key:"setNgModel",value:function(e){if(void 0!==this.$attrs.ngModel){var t=this.$element.controller("ngModel");if(!t.$setViewValue)return;t.$setViewValue(e)}}}])&&Ce(t.prototype,n),r&&Ce(t,r),e}();xe.$inject=["$element","$scope","$attrs","$timeout"];var ke=xe,Me=n(39),Oe={controller:ke,template:n.n(Me).a,bindings:{ngDisabled:"<",ngModel:"=",ngChange:"&",name:"@",label:"@",placeholder:"@",icon:"@",buttonText:"@",addMoreButtonText:"@",droppingText:"@",processingText:"@",successText:"@",failureText:"@",tooLargeMessage:"@",validationMessages:"<",onStart:"&",onFinish:"&",onFailure:"&",responseErrorExtractor:"&",accept:"@",httpOptions:"<",maxSize:"<"}};function Se(e,t,n){return{restrict:"A",controller:function(){},link:function(r,i,a){r.counter=0,i[0].addEventListener("drop",function(i){var l=e(a.twDrop),o=function(){l(r,{files:i.dataTransfer.files})};if(t.$$phase)try{o()}catch(e){n(e)}else r.$apply(o);i.preventDefault(),r.counter=0},!1),i[0].addEventListener("dragover",function(e){e.preventDefault()},!1)}}}Se.$inject=["$parse","$rootScope","$exceptionHandler"];var je=Se;function De(e,t){return{restrict:"A",require:"twDrop",link:function(n,r,i){r[0].addEventListener("dragenter",function(r){var a=e(i.twDragEnter);if(n.counter++,n.counter>=1){var l=function(){a(n,{$event:r})};t.$$phase?n.$evalAsync(l):n.$apply(l)}r.preventDefault()},!1)}}}De.$inject=["$parse","$rootScope"];var Te=De;function Ae(e,t){return{restrict:"A",require:"twDrop",link:function(n,r,i){r[0].addEventListener("dragleave",function(r){var a=e(i.twDragLeave);if(n.counter--,n.counter<=0){var l=function(){a(n,{$event:r})};t.$$phase?n.$evalAsync(l):n.$apply(l)}r.preventDefault()},!1)}}}Ae.$inject=["$parse","$rootScope"];var Ee=Ae,Fe=i.a.module("tw.styleguide.forms.drag-and-drop",[]).directive("twDrop",je).directive("twDragEnter",Te).directive("twDragLeave",Ee).name,Le=i.a.module("tw.styleguide.forms.upload.multi",[B,Fe]).component("twMultiUpload",Oe).name;t.a=i.a.module("tw.styleguide.forms.upload",[v,y,B,_,ie,de,ve,Le,Fe]).directive("twFileInput",$e).component("twUpload",u).name},function(e,t,n){"use strict";var r=n(0),i=n.n(r);function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var i=n.controller("ngModel");this.dom=r,this.$element=n,this.element=n[0],this.addLabelHandler(),this.addWatchers(t,n,i),this.checkboxContainer=this.dom.getClosestParentByClassName(this.element,"checkbox"),this.label=!!this.checkboxContainer&&this.checkboxContainer.getElementsByTagName("label")[0]}var t,n,r;return t=e,r=[{key:"hiddenClick",value:function(e){e.stopPropagation()}}],(n=[{key:"$onInit",value:function(){this.checked=this.isChecked()}},{key:"isChecked",value:function(){return this.ngTrueValue&&this.ngTrueValue===this.ngModel||!this.ngTrueValue&&this.ngModel||!1}},{key:"buttonClick",value:function(e){this.checked?(this.checked=!1,this.$ngModel.$setViewValue(this.ngFalseValue||!1)):(this.checked=!0,this.$ngModel.$setViewValue(this.ngTrueValue||!0)),this.$ngModel.$setTouched(),e&&e.stopPropagation(),o(this.checked,this.$element,this.$ngModel,this.ngRequired,this.dom)}},{key:"buttonFocus",value:function(){this.label&&this.label.classList.add("focus"),this.element.dispatchEvent(new CustomEvent("focus"))}},{key:"buttonBlur",value:function(){this.label&&this.label.classList.remove("focus"),this.element.dispatchEvent(new CustomEvent("blur")),this.$ngModel.$setTouched(),o(this.checked,this.$element,this.$ngModel,this.ngRequired,this.dom)}},{key:"addLabelHandler",value:function(){var e=this,t=this.dom.getClosestParentByTagName(this.element,"label");t&&t.addEventListener("click",function(n){t.getAttribute("disabled")||e.element.getElementsByTagName("button")[0].dispatchEvent(new CustomEvent("click"));n.preventDefault(),n.stopPropagation()})}},{key:"addWatchers",value:function(e,t,n){var r=this;e.$watch("$ctrl.ngModel",function(e,i){e!==i&&(n.$setDirty(),o(r.checked,t,n,r.ngRequired,r.dom),r.checked=r.isChecked())}),e.$watch("$ctrl.ngDisabled",function(e,n){var i=t[0],a=r.dom.getClosestParentByClassName(i,"checkbox"),l=r.dom.getClosestParentByTagName(i,"label");a&&(e&&!n?(a.classList.add("disabled"),l.setAttribute("disabled","true")):!e&&n&&(a.classList.remove("disabled"),l.removeAttribute("disabled")))}),e.$watch("$ctrl.ngRequired",function(e,i){e!==i&&o(r.checked,t,n,r.ngRequired,r.dom)})}}])&&a(t.prototype,n),r&&a(t,r),e}();function o(e,t,n,r,i){if(n.$touched){var a=t[0],l=a.getElementsByClassName("tw-checkbox-button")[0],o=i.getClosestParentByClassName(a,"checkbox"),s=i.getClosestParentByClassName(a,"form-group");!e&&r?(n.$setValidity("required",!1),l.classList.add("has-error"),o&&o.classList.add("has-error"),s&&s.classList.add("has-error")):(n.$setValidity("required",!0),l.classList.remove("has-error"),o&&o.classList.remove("has-error"),s&&s.classList.remove("has-error"))}}l.$inject=["$scope","$element","TwDomService"];var s=l,c=n(25),u={controller:s,template:n.n(c).a,require:{$ngModel:"ngModel"},bindings:{name:"@",ngModel:"=",ngTrueValue:"<",ngFalseValue:"<",ngRequired:"<",ngDisabled:"<"}},d=n(2),h=n(4);t.a=i.a.module("tw.styleguide.forms.checkbox",[d.a,h.a]).component("twCheckbox",u).name},function(e,t,n){"use strict";var r=n(0),i=n.n(r);function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var s=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$ngModelController=t.controller("ngModel"),this.dom=n,this.$element=t,this.internalModel=[],this.internalOptions=[]}var t,n,r;return t=e,(n=[{key:"$onChanges",value:function(e){e.options&&this.onExternalOptionsChange(e.options.currentValue),e.ngModel&&this.onExternalModelChange(e.ngModel.currentValue),e.ngRequired&&this.validate()}},{key:"onExternalOptionsChange",value:function(e){this.internalOptions=c(this.ngModel,e),this.internalModel=u(this.internalOptions)}},{key:"onExternalModelChange",value:function(e){this.internalOptions=c(e,this.internalOptions),this.internalModel=u(this.internalOptions),this.validate()}},{key:"onInternalModelChange",value:function(){this.internalModel=u(this.internalOptions),this.$ngModelController.$setViewValue(this.internalModel),this.$ngModelController.$setTouched(),this.$ngModelController.$setDirty()}},{key:"isCheckboxRequired",value:function(){return 0===this.internalModel.length&&this.ngRequired}},{key:"validate",value:function(){if(this.$ngModelController.$touched){var e=this.$element[0],t=this.dom.getClosestParentByClassName(e,"form-group"),n=this.internalModel&&this.internalModel.length>0,r=this.ngRequired;!n&&r?(this.$ngModelController.$setValidity("required",!1),t&&t.classList.add("has-error")):(this.$ngModelController.$setValidity("required",!0),t&&t.classList.remove("has-error"))}}}])&&o(t.prototype,n),r&&o(t,r),e}();function c(e,t){return t.map(function(t){return function(e,t){var n=function(e,t){return!!(e&&e.indexOf&&e.indexOf(t.value)>=0)}(t,e);return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach(function(t){l(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}({},e,{selected:n})}(t,e)})}function u(e){return e.filter(function(e){return e.selected}).map(function(e){return e.value})}s.$inject=["$element","TwDomService"];var d=s,h=n(26),p={controller:d,template:n.n(h).a,require:{$ngModel:"ngModel"},bindings:{name:"@",ngChange:"&",ngModel:"<",ngRequired:"<",ngDisabled:"<",options:"<"}},f=n(2),g=n(4);t.a=i.a.module("tw.styleguide.forms.checkbox-group",[f.a,g.a]).component("twCheckboxGroup",p).name},function(e,t,n){"use strict";var r=n(0),i=n.n(r);function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var l=function(){function e(t,n,r,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var a=t.controller("ngModel");if(this.DateService=i,this.initialisedWithDate=!1,this.ngModel)this.applyDateModelIfValidOrThrowError(),this.initialisedWithDate=!0;else{if(this.modelType){if(this.modelType!==s&&this.modelType!==c)throw new Error("Invalid modelType, should be ".concat(s," or ").concat(c));this.dateModelType=this.modelType}else this.dateModelType=c;this.day=null,this.month=0,this.year=null}this.setDateRequired(),this.setDateDisabled(),this.setDateLocale(),this.setMonths(),this.addValidators(a),this.addWatchers(r,a),function(e){var t=e[0],n=t.querySelector("input[name=day]"),r=t.querySelector("input[name=year]");n.addEventListener("focus",function(){t.dispatchEvent(new CustomEvent("focus"))}),r.addEventListener("focus",function(){t.dispatchEvent(new CustomEvent("focus"))})}(t),function(e,t){var n,r=e[0],i=r.querySelector("input[name=day]"),a=r.querySelector("input[name=year]");i.addEventListener("blur",function(){!0,n&&(t.$setTouched(),r.dispatchEvent(new CustomEvent("blur")))}),a.addEventListener("blur",function(){n=!0,t.$setTouched(),r.dispatchEvent(new CustomEvent("blur"))})}(t,a)}var t,n,r;return t=e,(n=[{key:"applyDateModelIfValidOrThrowError",value:function(){if(!d(this.ngModel))throw new Error("date model passed should either be instance of Date or valid ISO8601 string");this.dateModelType="string"==typeof this.ngModel?s:c,this.explodeDateModel(this.ngModel)}},{key:"setMonths",value:function(){this.dateMonths=this.getMonthsBasedOnIntlSupportForLocale()}},{key:"setDateRequired",value:function(){this.dateRequired=void 0!==this.ngRequired?this.ngRequired:void 0!==this.required}},{key:"setDateDisabled",value:function(){this.dateDisabled=void 0!==this.ngDisabled?this.ngDisabled:void 0!==this.disabled}},{key:"setDateLocale",value:function(){this.locale||(this.locale=o),this.monthBeforeDay=this.DateService.isMonthBeforeDay(this.locale)}},{key:"explodeDateModel",value:function(e){var t="string"==typeof e?new Date(e):e;this.day=t.getUTCDate(),this.month=t.getUTCMonth(),this.year=t.getUTCFullYear()}},{key:"addValidators",value:function(e){var t=this;e.$validators.min=function(e){var n=p(t.ngMin,t.min),r=f(e);return!n||!r||r>=n},e.$validators.max=function(e){var n=p(t.ngMax,t.max),r=f(e);return!n||!r||r<=n}}},{key:"addWatchers",value:function(e,t){var n=this;e.$watch("$ctrl.day",function(e,r){e!==r&&n.initialisedWithDate&&t.$setDirty()}),e.$watch("$ctrl.month",function(e,r){e!==r&&(n.adjustLastDay(),t.$setTouched(),n.initialisedWithDate&&t.$setDirty())}),e.$watch("$ctrl.year",function(e,r){e!==r&&n.initialisedWithDate&&t.$setDirty()}),e.$watch("$ctrl.ngModel",function(e,r){e!==r&&d(n.ngModel)&&(t.$setDirty(),n.explodeDateModel(n.ngModel))}),e.$watch("$ctrl.ngRequired",function(e,t){e!==t&&n.setDateRequired()}),e.$watch("$ctrl.ngDisabled",function(e,t){e!==t&&n.setDateDisabled()}),e.$watch("$ctrl.locale",function(e,t){e!==t&&(n.setDateLocale(),n.setMonths())})}},{key:"getMonthsBasedOnIntlSupportForLocale",value:function(){return function(e){return e.map(function(e,t){return{value:t,label:e}})}(this.DateService.getMonthNamesForLocale(this.locale))}},{key:"combineDate",value:function(){return this.DateService.getUTCDateFromParts(Number(this.year),Number(this.month),Number(this.day))}},{key:"updateDateModelAndValidationClasses",value:function(){if(this.adjustLastDay(),e=this.year,t=this.month,n=this.day,u(e)&&u(n)&&(u(t)||"string"==typeof(r=t)&&!isNaN(Number(r)))){var e,t,n,r,i=this.combineDate();if(this.dateModelType===s){var a=i.toISOString(),l=a.substring(0,a.indexOf("T"));this.$ngModel.$setViewValue(l)}else this.$ngModel.$setViewValue(i)}else this.$ngModel.$setViewValue(null)}},{key:"adjustLastDay",value:function(){var e=Number(this.day),t=Number(this.month),n=Number(this.year),r=this.DateService.getLastDayOfMonth(n,t);e>r&&(this.day=parseInt(r,10))}}])&&a(t.prototype,n),r&&a(t,r),e}(),o="en",s="string",c="object";function u(e){return"number"==typeof e}function d(e){return h(e)||"string"==typeof(t=e)&&h(new Date(t));var t}function h(e){return"[object Date]"===Object.prototype.toString.call(e)&&!isNaN(e.getTime())}function p(e,t){var n=e||t;return!!n&&(!!h(n="string"==typeof n?new Date(n):n)&&n)}function f(e){return"string"==typeof e?new Date(e):e}l.$inject=["$element","$log","$scope","TwDateService"];var g=l,m=n(40),v={controller:g,template:n.n(m).a,require:{$ngModel:"ngModel"},bindings:{ngModel:"=",required:"@",ngRequired:"<",disabled:"@",ngDisabled:"<",locale:"@",twLocale:"<",min:"@",ngMin:"<",max:"@",ngMax:"<",modelType:"@"}},b=n(6),$=n(20),y=n(8),w=n(4);t.a=i.a.module("tw.styleguide.forms.date",[b.a,$.a,y.a,w.a]).component("twDate",v).name},function(e,t,n){"use strict";var r=n(0),i=n.n(r),a=n(41),l={template:n.n(a).a,bindings:{date:"<",locale:"<",format:"<"}};function o(e){return function(t,n,r){if(!t)return t;var i=t;if("string"==typeof i&&(i=e.getUTCDateFromIso(i),new RegExp("^[0-9]{4}-[0-9]{2}-[0-9]{2}$").test(t)))return e.getUTCDateString(i,n,r);return i?e.getLocaleDateString(i,n,r):t}}o.$inject=["TwDateService"];var s=o,c=n(6);t.a=i.a.module("tw.styleguide.formatting.date",[c.a]).component("twDateFormat",l).filter("twDateFormat",s).name},function(e,t,n){"use strict";var r,i=n(0),a=n.n(i),l=n(8),o=n(12),s=n(17),c=n(18),u=n(19),d=n(16);function h(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var p=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.element=t[0],r=this}var t,n,i;return t=e,(n=[{key:"$onInit",value:function(){this.$ngModel=this.$element.controller("ngModel"),this.addValidators(),this.uploadOptions||(this.uploadOptions={})}},{key:"change",value:function(){this.$ngModel.$setDirty(),this.$ngModel.$setViewValue(this.internalModel)}},{key:"focus",value:function(){this.element.dispatchEvent(new CustomEvent("focus"))}},{key:"blur",value:function(){this.$ngModel.$setTouched(),this.element.dispatchEvent(new CustomEvent("blur"))}},{key:"onAsyncUploadSuccess",value:function(e,t){r.onAsyncSuccess&&r.onAsyncSuccess({response:t})}},{key:"onAsyncUploadFailure",value:function(e){r.onAsyncFailure&&r.onAsyncFailure({response:e})}},{key:"getAutocompleteStatus",value:function(){return this.help&&(this.help.message||this.help.list||this.help.image)?"disabled":"on"}},{key:"addValidators",value:function(){var e=this;this.$ngModel.$formatters.push(function(t){return e.internalModel=t,t})}}])&&h(t.prototype,n),i&&h(t,i),e}();p.$inject=["$element"];var f=p,g=n(42),m={controller:f,template:n.n(g).a,require:{$ngModel:"ngModel"},bindings:{type:"@",name:"@",id:"@",label:"@",description:"@",placeholder:"@",step:"@",locale:"@",uploadAccept:"@",uploadIcon:"@",uploadTooLargeMessage:"@",options:"<",ngModel:"=",ngChange:"&",ngFocus:"&",ngBlur:"&",ngDisabled:"<",uploadOptions:"<",help:"<helpOptions",textFormat:"<",validationAsync:"<",persistAsync:"<",onAsyncFailure:"&",onAsyncSuccess:"&",fileUploadSource:"<",cameraOptions:"<"}};t.a=a.a.module("tw.styleguide.forms.form-control",[l.a,o.a,s.a,c.a,u.a,d.a]).component("twFormControl",m).component("twDynamicFormControl",m).name},function(e,t,n){"use strict";var r=n(0),i=n.n(r),a=n(21),l=n(7),o=n(1);function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var d=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.RequirementsService=t,this.changed=!1,this.touched=!1}var t,n,r;return t=e,(n=[{key:"$onChanges",value:function(e){if(e.initialField){this.field=this.RequirementsService.prepField(this.initialField),this.control=this.RequirementsService.getControlType(e.initialField.currentValue),this.field.valuesAsync&&this.RequirementsService.prepValuesAsync(this.field,{}),this.required&&this.field.enum&&1===this.field.enum.length&&(this.model=this.field.enum[0]),this.field.default&&!this.model&&(this.model=this.field.default);var t=this.validationMessages||{},n=this.field.validationMessages||{};this.validationStrings=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach(function(t){c(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}({},t,{},n),this.validate(this.model)}}},{key:"onFocus",value:function(){this.focusHandler&&this.focusHandler()}},{key:"onBlur",value:function(){this.touched=!0,this.blurHandler&&this.blurHandler()}},{key:"onChange",value:function(e){this.changed=!0,this.validate(e),this.changeHandler&&this.changeHandler({value:e}),this.errorMessage&&delete this.errorMessage}},{key:"validate",value:function(e){if(Object(o.isNull)(e)||Object(o.isUndefined)(e)){if(this.required)return void(this.failures=["required"]);"string"===this.field.type&&(e="")}this.failures=Object(l.h)(e,this.field,this.required)}},{key:"onPersistAsyncFailure",value:function(e){this.uploadOptions||(this.uploadOptions={}),e.originalData?this.extractErrors(e.originalData):e.data&&this.extractErrors(e.data)}},{key:"extractErrors",value:function(e){e.message&&(this.uploadOptions.failureText=e.message),Array.isArray(e.errors)&&(this.uploadOptions.validationMessages=e.errors.map(function(e){return e.message}).slice(0,2))}},{key:"onPersistAsyncSuccess",value:function(e){this.uploadOptions||(this.uploadOptions={}),e&&(this.uploadOptions.successText=e.data.message)}},{key:"isLabelShown",value:function(e){return"file"!==e&&"checkbox"!==e}},{key:"isHelpShown",value:function(){return!!this.field.help}},{key:"isDesriptionShown",value:function(){return this.description&&!this.isErrorShown()&&!this.isWarningShown()&&"boolean"!==this.field.type}},{key:"isWarningShown",value:function(){return!!this.warningMessage}},{key:"isErrorShown",value:function(){return(this.submitted||this.touched&&this.changed)&&this.failures.length>0||this.errorMessage}},{key:"isAlertShown",value:function(){return this.isErrorShown()}},{key:"getOptions",value:function(){return"array"===this.field.type&&this.field.items?this.field.items.values:this.field.values}}])&&u(t.prototype,n),r&&u(t,r),e}();d.$inject=["TwRequirementsService"];var h=d,p=n(43),f={controller:h,template:n.n(p).a,bindings:{name:"@",model:"=",initialField:"<field",locale:"@",required:"<",submitted:"<",uploadOptions:"<",changeHandler:"&?onChange",focusHandler:"&?onFocus",blurHandler:"&?onBlur",errorMessage:"<",warningMessage:"<",validationMessages:"<"}},g=n(9),m=n(23);t.a=i.a.module("tw.styleguide.forms.field",[a.a,g.a,m.a]).component("twField",f).name},function(e,t,n){"use strict";var r=n(0),i=n.n(r);var a=function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var i=n[0],a=r.getClosestParentByClassName(i,"form-group"),o=n.controller("ngModel");i.addEventListener("invalid",function(e){e.preventDefault()}),o.$validators.validation=function(){return t.$evalAsync(function(){l(o,a,i)}),!0};i.addEventListener("blur",function(){t.$evalAsync(function(){l(o,a,i)})})};function l(e,t,n){if(t&&!t.classList.contains("custom-validation"))return e.$valid?(t&&t.classList.remove("has-error"),void n.removeAttribute("aria-invalid")):void(e.$touched&&e.$dirty&&(t&&t.classList.add("has-error"),n.setAttribute("aria-invalid","true")))}a.$inject=["$scope","$element","TwDomService"];var o=a;var s=function(){return{restrict:"A",require:{$ngModel:"ngModel"},controller:o}},c=n(2);t.a=i.a.module("tw.stylguide.validation.control",[c.a]).directive("twValidation",s).name},function(e,t,n){"use strict";var r=n(0),i=n.n(r);function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,r)}return n}function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var s=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.baseUrl="",this.headers={}}var t,n,r;return t=e,(n=[{key:"setBaseUrl",value:function(e){this.baseUrl=e}},{key:"setHeader",value:function(e,t){this.headers[e]=t}},{key:"extendHttpOptions",value:function(e){var t=angular.copy(e);return t.headers=t.headers?function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach(function(t){l(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}({},t.headers,{},this.headers):this.headers,t.url&&(t.url="".concat(this.baseUrl).concat(t.url)),t}}])&&o(t.prototype,n),r&&o(t,r),e}();t.a=i.a.module("tw.styleguide.services.async-tasks-config",[]).service("AsyncTasksConfig",s).name},function(e,t){e.exports="<input type=hidden class=sr-only name={{$ctrl.name}} ng-model=$ctrl.ngModel ng-click=$ctrl.hiddenClick($event) ng-disabled=$ctrl.ngDisabled /> <button type=button class=tw-checkbox-button tw-focusable ng-click=$ctrl.buttonClick($event) ng-focus=$ctrl.buttonFocus() ng-blur=$ctrl.buttonBlur() ng-disabled=$ctrl.ngDisabled ng-class=\"{'checked': $ctrl.checked}\" aria-pressed={{$ctrl.checked}}> <span class=tw-checkbox-check></span> </button> "},function(e,t){e.exports='<div ng-repeat="option in $ctrl.internalOptions" class=checkbox> <label> <tw-checkbox name={{$ctrl.name}} ng-model=option.selected ng-disabled=$ctrl.ngDisabled ng-required=$ctrl.isCheckboxRequired() ng-change=$ctrl.onInternalModelChange(option)></tw-checkbox> {{option.label}} </label> </div> '},function(e,t){e.exports='<input type=radio class=sr-only name={{$ctrl.name}} ng-value="$ctrl.ngValue || $ctrl.value" ng-model=$ctrl.ngModel ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.hiddenInputChange() tabindex=-1 /> <button type=button class=tw-radio-button tw-focusable ng-click=$ctrl.buttonClick($event) ng-focus=$ctrl.buttonFocus() ng-blur=$ctrl.buttonBlur() ng-disabled=$ctrl.ngDisabled ng-class="{checked: $ctrl.checked}" aria-pressed={{$ctrl.checked}}> <span class=tw-radio-check></span> </button> '},function(e,t){e.exports='<div class="btn-group btn-block tw-select" ng-class="{\n    dropdown: !$ctrl.dropdownUp,\n    dropup: $ctrl.dropdownUp\n  }" aria-hidden=false> <button type=button class="btn btn-input dropdown-toggle" ng-class="{\n      \'btn-input-inverse\': $ctrl.inverse,\n      \'btn-addon\': $ctrl.inverse,\n      \'btn-sm\': $ctrl.size === \'sm\',\n      \'btn-lg\': $ctrl.size === \'lg\'\n    }" data-toggle=dropdown aria-expanded=false ng-disabled=$ctrl.ngDisabled ng-focus=$ctrl.buttonFocus() tw-focusable> <span class=tw-select-selected ng-if=$ctrl.selected> <span class="circle circle-inverse pull-xs-left circle-sm" ng-if="$ctrl.selected && $ctrl.selected.icon && $ctrl.selected.secondary"> <tw-icon name=$ctrl.selected.icon></tw-icon> </span> <span class="circle circle-inverse pull-xs-left" ng-class=$ctrl.circleClasses($ctrl.hideCircle) ng-if="($ctrl.selected.circleText || $ctrl.selected.circleImage || $ctrl.selected.circleIcon)"> <span ng-if=$ctrl.selected.circleText>{{$ctrl.selected.circleText}}</span> <img alt={{$ctrl.selected.label}} ng-if=$ctrl.selected.circleImage src="data:image/png;base64,\n            iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" ng-src={{$ctrl.selected.circleImage}} /> <tw-icon name=$ctrl.selected.circleIcon ng-if=$ctrl.selected.circleIcon></tw-icon> </span> <span class=text-ellipsis> <span class="currency-flag currency-flag-{{$ctrl.selected.currency | lowercase}}" ng-if="$ctrl.selected && $ctrl.selected.currency" ng-class=$ctrl.responsiveClasses($ctrl.hideCurrency)></span> <tw-icon name=$ctrl.selected.icon size=24 ng-if="$ctrl.selected && $ctrl.selected.icon && !$ctrl.selected.secondary" ng-class=$ctrl.responsiveClasses($ctrl.hideIcon)></tw-icon> <span class=tw-select-label ng-class=$ctrl.responsiveClasses($ctrl.hideLabel)> {{$ctrl.selected.label}} </span> <span ng-if=$ctrl.selected.note ng-class=$ctrl.responsiveClasses($ctrl.hideNote) class="tw-select-note small m-l-1"> {{$ctrl.selected.note}} </span> <span ng-if=$ctrl.selected.secondary ng-class=$ctrl.responsiveClasses($ctrl.hideSecondary) class="tw-select-secondary small secondary text-ellipsis"> {{$ctrl.selected.secondary}} </span> </span> </span> <span class=form-control-placeholder ng-if=!$ctrl.selected>{{$ctrl.placeholder}}</span> <tw-chevron-down-icon class=chevron-color></tw-chevron-down-icon> </button> <ul class=dropdown-menu role=menu ng-class="{\n      \'dropdown-menu-xs-right\': $ctrl.dropdownRight === \'xs\',\n      \'dropdown-menu-sm-right\': $ctrl.dropdownRight === \'sm\',\n      \'dropdown-menu-md-right\': $ctrl.dropdownRight === \'md\',\n      \'dropdown-menu-lg-right\': $ctrl.dropdownRight === \'lg\',\n      \'dropdown-menu-xl-right\': $ctrl.dropdownRight === \'xl\',\n      \'dropdown-menu-sm\': $ctrl.dropdownWidth === \'sm\',\n      \'dropdown-menu-md\': $ctrl.dropdownWidth === \'md\',\n      \'dropdown-menu-lg\': $ctrl.dropdownWidth === \'lg\'\n    }"> <li ng-if=$ctrl.shouldShowSearch()> <a href="" class="tw-select-filter-link p-a-0" tabindex=-1 ng-focus=$ctrl.focusOnFilterInput()> <div class=input-group> <span class=input-group-addon><tw-search-icon></tw-search-icon></span> <input type=text class="form-control tw-select-filter" placeholder={{$ctrl.filter}} ng-model=$ctrl.filterString ng-change=$ctrl.filterChange() ng-keydown=$ctrl.filterKeydown($event) /> </div> </a> </li> <li ng-if="$ctrl.placeholder && !$ctrl.filter" ng-class="{\n        active: !$ctrl.selected && !$ctrl.ngRequired,\n        \'dropdown-header\': $ctrl.ngRequired\n      }"> <span ng-if=$ctrl.ngRequired class=text-ellipsis ng-click=$event.stopPropagation()> {{$ctrl.placeholder}} </span> <a href="" tabindex=-1 ng-if=!$ctrl.ngRequired ng-click=$ctrl.placeholderClick() ng-focus=$ctrl.placeholderFocus() class=tw-select-placeholder tw-focusable> {{$ctrl.placeholder}} </a> </li> <li ng-if="($ctrl.placeholder && !$ctrl.ngRequired) || $ctrl.filter" class=divider></li> <li ng-repeat="option in $ctrl.filteredOptions" ng-class="{\n        \'active\': $ctrl.ngModel === option.value,\n        \'disabled\': option.disabled,\n        \'dropdown-header\': option.header,\n        \'tw-select-option\': !option.header && !option.disabled\n      }"> <span ng-if=option.header class=text-ellipsis ng-click=$event.stopPropagation()> {{option.header}} </span> <a href="" ng-if=!option.header ng-click="$ctrl.optionClick(option, $event)" ng-focus=$ctrl.optionFocus(option) ng-class="{\'tw-select-option-link\': !option.disabled}" index={{$index}} tabindex=-1 tw-focusable> <div ng-if="option.icon && option.secondary" class="circle circle-inverse pull-xs-left circle-sm"> <tw-icon name=option.icon></tw-icon> </div> <tw-icon name=option.icon size=24 class=pull-xs-left ng-if="option.icon && !option.secondary"></tw-icon>  <span ng-if=option.currency class="currency-flag currency-flag-{{option.currency | lowercase}} pull-xs-left"> </span> <span class="circle circle-inverse pull-xs-left" ng-class="{\n            \'circle-sm\': option.secondary,\n            \'circle-xs\': !option.secondary\n          }" ng-if="option.circleText || option.circleImage || option.circleIcon"> <span class=tw-select-circle-text ng-if=option.circleText>{{option.circleText}}</span> <img alt={{option.label}} ng-if=option.circleImage src="data:image/png;base64,\n              iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" ng-src={{option.circleImage}} /> <tw-icon name=option.circleIcon ng-if=option.circleIcon></tw-icon> </span>{{option.label}}<span ng-if=option.note class="tw-select-note small m-l-1">{{option.note}}</span><span ng-if=option.secondary class="tw-select-secondary small text-ellipsis">{{option.secondary}}</span> </a> </li> <li ng-if=$ctrl.hasMoreOptionsToReveal> <a href="" ng-click=$ctrl.revealMoreOptions($event) class=tw-select-load-more tabindex=-1 tw-focusable> ... </a> </li> <li ng-if=$ctrl.hasTranscluded class=divider></li> <li ng-transclude ng-if=$ctrl.hasTranscluded class=tw-select-transcluded></li> </ul> </div> <input type=hidden class=tw-select-hidden name={{$ctrl.name}} value={{$ctrl.ngModel}} ng-disabled=$ctrl.ngDisabled /> '},function(e,t){e.exports="<div class=droppable tw-drag-enter=$ctrl.onDragEnter() tw-drag-leave=$ctrl.onDragLeave() tw-drop=$ctrl.onDrop(files) ng-class=\"{\n    'droppable-sm': $ctrl.size ==='sm',\n    'droppable-md': $ctrl.size ==='md' || !$ctrl.size,\n    'droppable-lg': $ctrl.size ==='lg',\n    'droppable-dropping': $ctrl.isDroppable && !$ctrl.ngDisabled,\n    'droppable-processing': !$ctrl.isDone && ($ctrl.isProcessing || $ctrl.isSuccess),\n    'droppable-complete': $ctrl.isDone\n  }\"> <div class=droppable-default-card aria-hidden=\"{{$ctrl.isDone || $ctrl.isProcessing}}\"> <tw-upload-capture label=$ctrl.label icon=$ctrl.icon accept=$ctrl.accept input-file=$ctrl.inputFile help-image=$ctrl.helpImage button-text=$ctrl.buttonText no-camera-text=$ctrl.noCameraText no-camera-message=$ctrl.noCameraMessage ng-disabled=$ctrl.ngDisabled placeholder=\"$ctrl.placeholder || $ctrl.description\" is-live-camera-upload=$ctrl.isLiveCameraUpload camera-guidelines=$ctrl.cameraGuidelines on-file-capture=$ctrl.onFileCapture(file)></tw-upload-capture> </div> <div class=\"droppable-processing-card droppable-card droppable-card--wider\" aria-hidden={{!$ctrl.isProcessing}}> <tw-upload-processing name=$ctrl.name file=$ctrl.file on-start=$ctrl.onProcessStart(file) on-success=\"$ctrl.onProcessSuccess(file, dataUrl, id, response)\" on-failure=$ctrl.onProcessFailure(error) max-size=$ctrl.maxSize accept=$ctrl.accept http-options=$ctrl.httpOptions processing-message=$ctrl.processingText success-message=$ctrl.successText error-message=$ctrl.failureText validation-messages=$ctrl.validationMessages too-large-message=$ctrl.tooLargeMessage cancel-text=$ctrl.cancelText on-cancel=$ctrl.reset()></tw-upload-processing> </div> <div class=\"droppable-complete-card droppable-card\" aria-hidden={{!$ctrl.isDone}}> <tw-upload-success label=$ctrl.label is-image=$ctrl.isImage file=$ctrl.file data=$ctrl.dataUrl success-message=$ctrl.successText cancel-text=$ctrl.cancelText on-cancel=$ctrl.reset()></tw-upload-success> </div> <div class=\"droppable-dropping-card droppable-card\"> <tw-upload-dropping dropping-text=$ctrl.droppingText></tw-upload-dropping> </div> </div> "},function(e,t){e.exports='<div class=droppable-card-content> <div ng-if=!$ctrl.cameraFailed> <div class=m-b-2> <img ng-show=$ctrl.helpImage ng-src={{$ctrl.helpImage}} alt={{$ctrl.label}} class="thumbnail text-xs-center"/> <tw-icon ng-show=!$ctrl.helpImage name=$ctrl.viewIcon size=24></tw-icon> </div> <h4 class=m-b-1 ng-if="$ctrl.label || $ctrl.description"> {{$ctrl.label || $ctrl.description}} </h4> <p class=m-b-2 ng-if="$ctrl.placeholder || $ctrl.instructions"> {{$ctrl.placeholder || $ctrl.instructions}} </p> </div> <div ng-if=$ctrl.cameraFailed> <div class=m-b-2> <tw-process state=-1 size=sm></tw-process> </div> <h4 class=m-b-1 ng-if=$ctrl.noCameraText>{{$ctrl.noCameraText}}</h4> <p class=m-b-2 ng-if=$ctrl.noCameraMessage>{{$ctrl.noCameraMessage}}</p> </div> <tw-upload-button ng-if=!$ctrl.isLiveCameraUpload name=$ctrl.name label=$ctrl.buttonText accept=$ctrl.accept model=$ctrl.inputFile disabled=$ctrl.ngDisabled on-capture=$ctrl.onButtonCapture(files)> </tw-upload-button> <tw-camera-button ng-if=$ctrl.isLiveCameraUpload label=$ctrl.buttonText disabled=$ctrl.ngDisabled on-click=$ctrl.onCameraButtonClick()> </tw-camera-button> <tw-camera-capture ng-if="$ctrl.isLiveCameraUpload && $ctrl.showLiveCaptureScreen" guidelines=$ctrl.cameraGuidelines on-cancel=$ctrl.onCameraCancel() on-capture=$ctrl.onCameraCapture(file) on-error=$ctrl.onCameraError()> </tw-camera-capture> </div> '},function(e,t){e.exports='<div class=droppable-card-content> <div class="circle circle-sm m-b-3"> <tw-plus-icon></tw-plus-icon> </div> <h4> {{ $ctrl.droppingText || \'Drop file to start upload\' }} </h4> <p class="m-t-2 m-b-0"></p> </div> '},function(e,t){e.exports='<div class=droppable-card-content> <div class=m-b-2> <tw-process size=sm state=$ctrl.processingState></tw-process> </div> <h4 class=m-b-2> <span ng-if="$ctrl.isProcessing && $ctrl.processingMessage" class=upload-processing-message> {{$ctrl.processingMessage}} </span> <span ng-if="$ctrl.isError && $ctrl.errorMessage" class=upload-failure-message> {{$ctrl.errorMessage}} </span> </h4> <ul ng-if="$ctrl.isError && $ctrl.validationMessages" class="text-xs-left m-b-2"> <li ng-if=$ctrl.validationMessages[0]>{{ $ctrl.validationMessages[0] }}</li> <li ng-if=$ctrl.validationMessages[1]>{{ $ctrl.validationMessages[1] }}</li> <li ng-if=$ctrl.validationMessages[2]>{{ $ctrl.validationMessages[2] }}</li> </ul> <a href="" ng-if=$ctrl.isError class="btn btn-primary" ng-click=$ctrl.onRemove() role=button> <span ng-if=$ctrl.cancelText ng-bind=$ctrl.cancelText></span> <tw-upload-icon ng-if=!$ctrl.cancelText class=m-r-0></tw-upload-icon> </a> </div> '},function(e,t){e.exports='<div class=processing-item> <div class=media> <div class="media-left vertical-center p-r-2 p-y-1"> <tw-process size=xs state=$ctrl.processingState></tw-process> </div> <div class="media-body text-xs-left p-y-1" style=overflow:auto> <div> <small class="m-b-0 text-ellipsis file-name"><strong>{{ $ctrl.file.name }}</strong></small> <small class="m-b-0 text-ellipsis tiny"> <span ng-if=$ctrl.isProcessing>{{ $ctrl.processingMessage }}</span> <span ng-if=$ctrl.isError>{{ $ctrl.errorMessage }}</span> <span ng-if=$ctrl.isSuccess>{{ $ctrl.successMessage }}</span> </small> </div> </div> <div class="media-right p-l-2 p-y-2"> <a href="" ng-if=!$ctrl.isProcessing class=close ng-click=$ctrl.onRemove() role=button>&times;</a> </div> </div> </div> '},function(e,t){e.exports="<span class=process ng-class=\"{\n    'process-success': $ctrl.processing === 1,\n    'process-danger': $ctrl.processing === -1,\n    'process-stopped': $ctrl.processing === 0,\n    'process-xs': $ctrl.size === 'xs',\n    'process-sm': $ctrl.size === 'sm',\n    'process-md': $ctrl.size === 'md',\n    'process-lg': $ctrl.size === 'lg',\n    'process-xl': $ctrl.size === 'xl'\n  }\"> <span class=process-icon-container> <span class=process-icon-horizontal></span> <span class=process-icon-vertical></span> </span> <svg version=1.1 xmlns=http://www.w3.org/2000/svg xml:space=preserve> <circle class=process-circle cx=50% cy=50% ng-attr-r={{$ctrl.radius}} fill-opacity=0.0 /> </svg> </span> "},function(e,t){e.exports='<div class=droppable-card-content> <h4 ng-if="$ctrl.successMessage || $ctrl.label" class="m-b-2 upload-success-message"> {{ $ctrl.successMessage || $ctrl.label }} </h4> <img ng-if="$ctrl.isImage && $ctrl.data" src="data:image/png;base64,\n      iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" ng-src="{{ $ctrl.data }}" alt=OK class="thumbnail m-b-3"/> <tw-document-icon ng-if="!$ctrl.isImage || !$ctrl.data" size=24></tw-document-icon> <p class="m-b-2 text-ellipsis">{{ $ctrl.fileName }}</p> <p class="m-t-2 m-b-0"> <a href="" ng-click=$ctrl.onCancel()> <span ng-if=$ctrl.cancelText ng-bind=$ctrl.cancelText></span> <tw-upload-icon ng-if=!$ctrl.cancelText class=m-r-0></tw-upload-icon> </a> </p> </div> '},function(e,t){e.exports="<div id=camera ng-class=\"{translucent: $ctrl.mode === 'loading'}\"> <video id=cameraViewfinder class=\"fixed w-100 h-100\" ng-show=\"$ctrl.mode === 'capture'\" ng-class=\"{mirrored: ($ctrl.guidelines.direction || '').toLowerCase() === 'user'}\" playsinline></video> <div id=cameraViewfinderOverlay ng-if=\"$ctrl.guidelines.outline && $ctrl.mode === 'capture'\" ng-class=\"{mirrored: ($ctrl.guidelines.direction || '').toLowerCase() === 'user'}\" ng-style=\"{'background-image': 'url(' + $ctrl.guidelines.outline + ')', width: $ctrl.overlaySquareLength + 'px', height: $ctrl.overlaySquareLength + 'px'}\"></div> <canvas id=cameraSensor ng-show=\"$ctrl.mode === 'confirm'\" ng-style=\"{width: $ctrl.sensorWidth + 'px'}\"></canvas> <label class=\"fixed-bottom camera-ctrl-bar\"> <span class=camera-ctrl-box-small> <tw-cross-icon id=video-cancel class=\"camera-ctrl-btn-small camera-ctrl-btn-cancel\" ng-if=\"$ctrl.mode === 'capture'\" ng-click=$ctrl.onCancelBtnClick()></tw-cross-icon> <tw-cross-icon id=capture-cancel class=\"camera-ctrl-btn-small camera-ctrl-btn-cancel\" ng-if=\"$ctrl.mode === 'confirm'\" ng-click=$ctrl.onRecaptureBtnClick()></tw-cross-icon> </span> <span class=camera-ctrl-box-big> <span id=video-confirm class=camera-ctrl-btn-big ng-if=\"$ctrl.mode === 'capture'\" ng-click=$ctrl.onCaptureBtnClick()> <span class=camera-ctrl-btn-big-inner></span> </span> </span> <span class=camera-ctrl-box-small> <tw-tick-icon id=capture-confirm class=\"camera-ctrl-btn-small camera-ctrl-btn-confirm\" ng-if=\"$ctrl.mode === 'confirm'\" ng-click=$ctrl.onUploadBtnClick()></tw-tick-icon> </span> </label> </div> "},function(e,t){e.exports='<label class=btn ng-click=$ctrl.onButtonClick() ng-class="{ \'disabled\': $ctrl.disabled,\n              \'btn-primary\': !$ctrl.isSecondary,\n              \'btn-default\': $ctrl.isSecondary,\n              \'btn-block\': $ctrl.block,\n              \'btn-sm\': $ctrl.small\n            }"> <span ng-if=$ctrl.label ng-bind=$ctrl.label></span> <tw-upload-icon ng-if=!$ctrl.label class=m-r-0></tw-upload-icon> <span ng-if=!$ctrl.isLiveCameraUpload> <input ng-if=!$ctrl.multiple tw-file-input type=file accept="{{ $ctrl.accept }}" class="tw-droppable-input hidden" ng-disabled=$ctrl.ngDisabled name="{{ $ctrl.name }}" on-user-input=$ctrl.onButtonCapture() ng-model=$ctrl.model /> <input ng-if=$ctrl.multiple tw-file-input type=file accept="{{ $ctrl.accept }}" class="tw-droppable-input hidden" ng-disabled=$ctrl.ngDisabled name="{{ $ctrl.name }}" on-user-input=$ctrl.onButtonCapture() ng-model=$ctrl.model multiple=multiple /> </span> </label> '},function(e,t){e.exports='<label class="btn btn-primary" ng-click=$ctrl.onButtonClick() ng-class="{ \'disabled\': $ctrl.disabled }"> <span ng-if=$ctrl.label ng-bind=$ctrl.label></span> <tw-camera-icon ng-if=!$ctrl.label class=m-r-0></tw-camera-icon> </label> '},function(e,t){e.exports='<div class="well droppable p-r-0 p-l-0 p-t-1 p-b-0 multi-upload" tw-drop=$ctrl.onDrop(files) tw-drag-enter=$ctrl.onDragEnter() tw-drag-leave=$ctrl.onDragLeave() ng-class="{\'droppable-dropping\': $ctrl.isDroppable}"> <div class="droppable-dropping-card droppable-card"> <tw-upload-dropping dropping-text=$ctrl.droppingText></tw-upload-dropping> </div> <div ng-if="$ctrl.files.length === 0" class="empty-processing-list droppable-default-card text-xs-center p-t-3"> <div class=empty-screen> <div class="circle circle-sm m-b-3 m-t-3"> <img ng-if=$ctrl.helpImage ng-src={{$ctrl.helpImage}} alt={{$ctrl.label}} class="thumbnail text-xs-center"/> <tw-icon ng-if=!$ctrl.helpImage name=$ctrl.viewIcon size=24></tw-icon> </div> <h4 ng-if=$ctrl.label class=m-b-1>{{$ctrl.label}}</h4> <p ng-if=$ctrl.placeholder class="p-l-3 p-r-3"> {{$ctrl.placeholder}} </p> </div> </div> <div ng-if="$ctrl.files.length > 0" class="droppable-default-card p-l-3 processing-list"> <div ng-repeat="(index, file) in $ctrl.files" class=p-r-3 ng-class="{\'last-item\': $last}"> <tw-upload-processing-mini name=$ctrl.name file=file on-success="$ctrl.onProcessSuccess(index, file, dataUrl, id, response)" on-failure="$ctrl.onProcessFailure(index, file, error)" on-cancel=$ctrl.onProcessCancel(index) max-size=$ctrl.maxSize accept=$ctrl.accept http-options=$ctrl.httpOptions processing-message=$ctrl.processingText success-message=$ctrl.successText error-message=$ctrl.failureText validation-messages=$ctrl.validationMessages too-large-message=$ctrl.tooLargeMessage cancel-text=$ctrl.cancelText response-error-extractor=$ctrl.responseErrorExtractor({error})></tw-upload-processing-mini> </div> </div> <div class=m-a-3> <tw-upload-button ng-if=!$ctrl.isLiveCameraUpload name=$ctrl.name label="$ctrl.files.length === 0 ? $ctrl.buttonText : $ctrl.addMoreButtonText" is-secondary="$ctrl.files.length > 0" accept=$ctrl.accept model=$ctrl.inputFile disabled=$ctrl.ngDisabled on-capture=$ctrl.onFileCapture(files) block=true small=true multiple=true></tw-upload-button> </div> </div> '},function(e,t){e.exports='<div class=row> <div class="col-sm-5 tw-date-month-column" ng-if=$ctrl.monthBeforeDay> <label class=sr-only>Month</label> <tw-select name=month class=tw-date-month ng-model=$ctrl.month ng-change=$ctrl.updateDateModelAndValidationClasses() ng-required=$ctrl.dateRequired ng-disabled=$ctrl.dateDisabled options=$ctrl.dateMonths> </tw-select> </div> <div class="col-sm-3 tw-date-day-column"> <label class=sr-only>Day</label> <input type=number name=day class="form-control tw-date-day" ng-model=$ctrl.day ng-change=$ctrl.updateDateModelAndValidationClasses() placeholder=DD min=1 ng-min=1 ng-disabled=$ctrl.dateDisabled ng-required=$ctrl.dateRequired tw-focusable/> </div> <div class="col-sm-5 tw-date-month-column" ng-if=!$ctrl.monthBeforeDay> <label class=sr-only>Month</label> <tw-select name=month class=tw-date-month ng-model=$ctrl.month ng-change=$ctrl.updateDateModelAndValidationClasses() ng-required=$ctrl.dateRequired ng-disabled=$ctrl.dateDisabled options=$ctrl.dateMonths> </tw-select> </div> <div class="col-sm-4 tw-date-year-column"> <label class=sr-only>Year</label> <input type=number name=year class="form-control tw-date-year" placeholder=YYYY ng-model=$ctrl.year ng-change=$ctrl.updateDateModelAndValidationClasses() ng-min=$ctrl.min.getFullYear() ng-max=$ctrl.max.getFullYear() maxlength=4 ng-maxlength=4 ng-disabled=$ctrl.dateDisabled ng-required=$ctrl.dateRequired tw-focusable/> </div> </div> '},function(e,t){e.exports='<span tw-tool-tip data-original-title="{{ $ctrl.date | twDateFormat : $ctrl.locale : \'long\' }}"> <span class="hidden-xs hidden-sm"> {{ $ctrl.date | twDateFormat : $ctrl.locale : $ctrl.format }} </span> <span class="hidden-md hidden-lg hidden-xl"> {{ $ctrl.date | twDateFormat : $ctrl.locale : \'short\' }} </span> </span> '},function(e,t){e.exports='<div ng-switch=$ctrl.type> <div ng-switch-when=radio class=radio ng-class="{disabled: $ctrl.ngDisabled, \'radio-lg\': option.secondary}" ng-repeat="option in $ctrl.options"> <label> <tw-radio name={{$ctrl.name}} ng-value=option.value ng-model=$ctrl.internalModel ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change(option.value) ng-click=$ctrl.change(option.value) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur()></tw-radio> {{option.label}} <small ng-if=option.secondary>{{option.secondary}}</small> </label> </div> <div ng-switch-when=checkbox class=checkbox ng-class="{ disabled: $ctrl.ngDisabled, \'checkbox-lg\': $ctrl.description }"> <label> <tw-checkbox name={{$ctrl.name}} ng-model=$ctrl.internalModel ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-click=$ctrl.change() ng-focus=$ctrl.focus() ng-blur=$ctrl.blur()></tw-checkbox> {{ $ctrl.label }} <small ng-if=$ctrl.description>{{ $ctrl.description }}</small> </label> </div> <div ng-switch-when=checkbox-group> <tw-checkbox-group name={{$ctrl.name}} ng-model=$ctrl.internalModel options=$ctrl.options ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel)></tw-checkbox-group> </div> <div ng-switch-when=select> <tw-select name={{$ctrl.name}} options=$ctrl.options filter="{{ $ctrl.options.length > 9 ? \' \' : \'\' }}" placeholder={{$ctrl.placeholder}} ng-model=$ctrl.internalModel ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur()></tw-select> </div> <div ng-switch-when=file> <tw-upload name={{$ctrl.name}} label={{$ctrl.label}} icon={{$ctrl.uploadIcon}} help-image={{$ctrl.helpOptions.image}} placeholder={{$ctrl.placeholder}} accept={{$ctrl.uploadAccept}} complete-text={{$ctrl.label}} button-text={{$ctrl.uploadOptions.buttonText}} cancel-text={{$ctrl.uploadOptions.cancelText}} processing-text="{{ $ctrl.uploadOptions.processingText }}" success-text="{{ $ctrl.uploadOptions.successText }}" failure-text="{{ $ctrl.uploadOptions.failureText }}" no-camera-text="{{ $ctrl.uploadOptions.noCameraText }}" no-camera-message="{{ $ctrl.uploadOptions.noCameraMessage }}" validation-messages=$ctrl.uploadOptions.validationMessages view-image-text={{$ctrl.uploadOptions.viewImageText}} too-large-message={{$ctrl.uploadTooLargeMessage}} max-size=$ctrl.ngMax ng-model=$ctrl.internalModel ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() http-options=$ctrl.persistAsync source=$ctrl.fileUploadSource camera-guidelines=$ctrl.cameraOptions on-success=$ctrl.onAsyncUploadSuccess on-failure=$ctrl.onAsyncUploadFailure></tw-upload> </div> <div ng-switch-when=date|date-time ng-switch-when-separator=|> <tw-date name={{$ctrl.name}} locale={{$ctrl.locale}} ng-min=$ctrl.ngMin ng-max=$ctrl.ngMax ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true }" ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() model-type=string></tw-date> </div> <div ng-switch-when=tel> <tw-telephone name="{{ $ctrl.name }}" placeholder="{{ $ctrl.placeholder }}" ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true, debounce: 300 }" ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() locale="{{ $ctrl.locale }}" search-placeholder=" "></tw-telephone> </div> <input ng-switch-when=number name={{$ctrl.name}} type=number step={{$ctrl.step}} class=form-control placeholder={{$ctrl.placeholder}} ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true, debounce: 300 }" ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() autocomplete="{{ $ctrl.getAutocompleteStatus() }}"/> <input ng-switch-when=hidden name={{$ctrl.name}} type=hidden ng-model=$ctrl.ngModel /> <input ng-switch-when=password name={{$ctrl.name}} type=password class=form-control placeholder={{$ctrl.placeholder}} ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true, debounce: 300 }" ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() autocomplete="{{ $ctrl.getAutocompleteStatus() }}"/> <textarea ng-switch-when=textarea name={{$ctrl.name}} class=form-control placeholder={{$ctrl.placeholder}} ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true, debounce: 300 }" ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() ng-disabled=$ctrl.ngDisabled autocomplete="{{ $ctrl.getAutocompleteStatus() }}"></textarea> <input ng-switch-default name={{$ctrl.name}} type=text class=form-control placeholder={{$ctrl.placeholder}} ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true, debounce: 300 }" ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() ng-disabled=$ctrl.ngDisabled tw-text-format="{{ $ctrl.textFormat }}" autocomplete="{{ $ctrl.getAutocompleteStatus() }}"/> </div> '},function(e,t){e.exports='<div class="form-group tw-field-{{ $ctrl.name }} custom-validation" ng-class="{\n    \'has-error\': $ctrl.isErrorShown(),\n    \'has-warning\': $ctrl.isWarningShown(),\n    \'hidden\': $ctrl.field.hidden\n  }"> <label class=control-label ng-if=$ctrl.isLabelShown($ctrl.control)> {{$ctrl.field.title}} </label> <tw-form-control name="{{ $ctrl.name }}" label="{{ $ctrl.field.title }}" description="{{ $ctrl.field.description }}" type="{{ $ctrl.control | lowercase }}" placeholder="{{ $ctrl.field.placeholder }}" help-options=$ctrl.field.help locale="{{ $ctrl.locale }}" upload-accept="{{ $ctrl.field.accept }}" upload-icon="{{ $ctrl.field.icon }}" upload-too-large-message="{{ $ctrl.field.tooLargeMessage }}" options=$ctrl.getOptions() upload-options=$ctrl.uploadOptions ng-model=$ctrl.model ng-focus=$ctrl.onFocus() ng-blur=$ctrl.onBlur() ng-change=$ctrl.onChange($ctrl.model) ng-required=$ctrl.required ng-disabled=$ctrl.field.disabled text-format=$ctrl.field.displayFormat validation-async=$ctrl.field.validationAsync persist-async=$ctrl.field.persistAsync file-upload-source=$ctrl.field.sourceType camera-options=$ctrl.field.camera on-async-success=$ctrl.onPersistAsyncSuccess(response) on-async-failure=$ctrl.onPersistAsyncFailure(response)></tw-form-control> <div class="alert alert-danger alert-detach" ng-if=$ctrl.isAlertShown()> <div ng-repeat="failureType in $ctrl.failures" ng-if=$ctrl.validationStrings[failureType]> {{ $ctrl.validationStrings[failureType] }} </div> <div class=error-provided ng-if=$ctrl.errorMessage> {{ $ctrl.errorMessage }} </div> </div> <div class="alert alert-warning alert-detach" ng-if=$ctrl.isWarningShown()> {{ $ctrl.warningMessage }} </div> <div ng-if=$ctrl.isHelpShown() class="alert alert-focus alert-detach"> <span ng-if=$ctrl.field.help.message> {{ $ctrl.field.help.message }} </span> <ul ng-if=$ctrl.field.help.list class=list-unstyled> <li ng-repeat="helpMessage in $ctrl.field.help.list">{{ helpMessage }}</li> </ul> <img ng-if="$ctrl.field.help.image && $ctrl.control !== \'file\'" ng-src={{$ctrl.field.help.image}} alt="{{ $ctrl.field.title }}" class="thumbnail m-y-2"/> </div> </div> '},,,,,,function(e,t,n){var r=n(50);"string"==typeof r&&(r=[[e.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(14)(r,i);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(13)(!1)).push([e.i,"div.transparent-area{background-color:hsla(0,0%,98%,.9)}.icon-circle-shadow{background:#fff;box-shadow:0 4px 16px rgba(0,0,0,.08);padding:12px;box-sizing:border-box;border-radius:99px}.icon-circle-shadow svg{top:4px;position:relative}.inline-svg{top:.35em;position:relative}.droppable>.droppable-card--wider{padding-left:10px;padding-right:10px}@media (min-width:576px){p.first-error{min-height:72px}}@media only screen and (max-width:575px){.empty-processing-list{height:130px}.processing-list{min-height:130px}}@media only screen and (min-width:575px){.multi-upload{height:375px}.multi-upload .empty-screen{padding-top:40px}.empty-processing-list,.processing-list{height:290px}}.processing-list{overflow:auto}.processing-list,.processing-list .processing-item .media-body,.processing-list .processing-item .media-right{border-bottom:1px solid #e2e6e8}.processing-list .last-item .processing-item .media-body,.processing-list .last-item .processing-item .media-right{border-bottom:0}.processing-list .processing-item{position:relative;width:100%}.processing-list .processing-item .vertical-center{align-self:center}.empty-processing-list{display:flex;justify-content:center}.empty-processing-list .circle{background-color:#d8f1fa}.empty-processing-list .empty-screen{align-self:center}",""])},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var i,a=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?e:(i=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:r+a.replace(/^\.\//,""),"url("+JSON.stringify(i)+")")})}},function(e,t,n){var r=n(53);"string"==typeof r&&(r=[[e.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(14)(r,i);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(13)(!1)).push([e.i,".droppable-card-content .tw-icon svg{display:inline-block}",""])},function(e,t,n){var r=n(55);"string"==typeof r&&(r=[[e.i,r,""]]);var i={hmr:!0,transform:void 0,insertInto:void 0};n(14)(r,i);r.locals&&(e.exports=r.locals)},function(e,t,n){(e.exports=n(13)(!1)).push([e.i,"#camera{position:fixed;top:0;left:0;width:100%;height:100%;z-index:1030;background:#000}#camera.translucent{background:rgba(0,0,0,.8)}#cameraViewfinder{position:absolute;top:0;left:0;width:100%;height:100%;z-index:1031;object-fit:contain}#cameraViewfinder.mirrored{-webkit-transform:scaleX(-1);transform:scaleX(-1)}#cameraViewfinderOverlay{position:absolute;z-index:1032;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);background-position:50%;background-size:contain;background-repeat:no-repeat}#cameraViewfinderOverlay.mirrored{-webkit-transform:translate(-50%,-50%) scaleX(-1);transform:translate(-50%,-50%) scaleX(-1)}#cameraSensor{position:absolute;z-index:1033;top:50%;left:50%;transform:translate(-50%,-50%)}.camera-ctrl-box-small{display:inline-block;height:60px;width:60px;margin-left:10px;margin-right:10px;vertical-align:bottom}.camera-ctrl-box-big{display:inline-block;height:84px;width:84px;margin-left:36px;margin-right:36px;vertical-align:bottom}.camera-ctrl-btn-cancel{color:red;background-color:#f8f9fa}.camera-ctrl-btn-confirm{color:green;background-color:#f8f9fa}.camera-ctrl-btn-small{display:inline-block;height:60px;width:60px;padding:4px;margin-bottom:0;font-size:52px;line-height:1;text-align:center;white-space:nowrap;vertical-align:middle;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-image:none;border-radius:50%}.camera-ctrl-btn-big-inner{height:64px;width:64px;padding:0;background-color:#f8f9fa;border:1px solid;border-radius:50%;border-color:#f8f9fa}.camera-ctrl-btn-big,.camera-ctrl-btn-big-inner{display:inline-block;margin-bottom:0;vertical-align:middle}.camera-ctrl-btn-big{height:84px;width:84px;padding:2px;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-color:#343a40;background-image:none;border:8px solid;border-radius:50%;border-color:#f8f9fa}.camera-ctrl-bar{padding-top:10px;padding-bottom:10px;z-index:1034!important}.fixed-bottom{position:fixed;right:0;bottom:0;left:0;z-index:1030}",""])},,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,function(e,t){e.exports='<generic-schema schema=$ctrl.schema model=$ctrl.model errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations submitted=$ctrl.submitted on-change="$ctrl.onModelChange(model, schema)"> </generic-schema> '},function(e,t){e.exports="<h3 ng-if=$ctrl.schema.title class=page-header> {{ $ctrl.schema.title }} </h3> <p ng-if=$ctrl.schema.description> {{ $ctrl.schema.description }} </p> <div ng-if=$ctrl.schema.help.warning class=\"alert alert-warning\"> {{ $ctrl.schema.help.warning }} </div> <div class=row> <div ng-repeat=\"(index, nestedSchema) in $ctrl.schema.allOf\" class=col-xs-12 ng-class=\"{\n      'col-sm-4': !$ctrl.narrow  && nestedSchema.width === 'sm',\n      'col-sm-6': !$ctrl.narrow  && nestedSchema.width === 'md',\n      'col-sm-12': $ctrl.narrow || nestedSchema.width === 'lg'\n    }\"> <generic-schema schema=nestedSchema model=$ctrl.models[index] errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations submitted=$ctrl.submitted on-change=\"$ctrl.onModelChange(index, model, schema)\"> </generic-schema> </div> </div> "},function(e,t){e.exports='<div ng-if=$ctrl.isSimpleType($ctrl.schema.items.type)> Unsupported </div> <div ng-if=!$ctrl.isSimpleType($ctrl.schema.items.type)> <h4 class=page-header ng-if=$ctrl.schema.title> {{ $ctrl.schema.title }} </h4> <p ng-if=$ctrl.schema.description> {{ $ctrl.schema.description }} </p> <div ng-repeat="(index, childModel) in $ctrl.model"> <hr ng-if="index > 0" class="m-t-1 m-b-2"/> <div class=row> <div class=col-sm-9> <generic-schema schema=$ctrl.schema.items model=childModel errors=$ctrl.errors[index] locale=$ctrl.locale translations=$ctrl.translations submitted=$ctrl.submitted on-change="$ctrl.onModelChange(index, model, schema)"> </generic-schema> </div> <div class=col-sm-3> <button class="btn btn-danger btn-block m-t-3" ng-click=$ctrl.remove(index) ng-disabled="index < $ctrl.schema.minItems"> {{ $ctrl.translations.array.remove }} </button> </div> </div> </div> <button class="btn btn-default" ng-disabled="$ctrl.schema.maxItems && $ctrl.model.length >= $ctrl.schema.maxItems" ng-click=$ctrl.add()> {{ $ctrl.translations.array.add }} </button> </div> '},function(e,t){e.exports='<tw-field name="{{ $ctrl.key }}" model=$ctrl.internalModel field=$ctrl.schema required=$ctrl.required submitted=$ctrl.submitted locale="{{ $ctrl.locale }}" on-change=$ctrl.onModelChange(value) error-message=$ctrl.errors warning-message=$ctrl.schema.help.warning validation-messages=$ctrl.getValidationMessages() upload-options=$ctrl.translations.upload> </tw-field> '},function(e,t){e.exports='<one-of-schema ng-if=$ctrl.schema.oneOf model=$ctrl.model schema=$ctrl.schema errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations submitted=$ctrl.submitted on-change="$ctrl.onModelChange(model, schema)"> </one-of-schema> <all-of-schema ng-if=$ctrl.schema.allOf model=$ctrl.model schema=$ctrl.schema errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations submitted=$ctrl.submitted on-change="$ctrl.onModelChange(model, schema)"> </all-of-schema> <basic-type-schema ng-if="$ctrl.schema.type && ($ctrl.schema.type !== \'object\' && $ctrl.schema.type !== \'array\')" model=$ctrl.model schema=$ctrl.schema errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations required=$ctrl.required submitted=$ctrl.submitted on-change="$ctrl.onModelChange(model, schema)"> </basic-type-schema> <object-schema ng-if="$ctrl.schema.type === \'object\'" model=$ctrl.model schema=$ctrl.schema errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations submitted=$ctrl.submitted on-change="$ctrl.onModelChange(model, schema)" hide-title=$ctrl.hideTitle> </object-schema> <array-schema ng-if="$ctrl.schema.type === \'array\'" model=$ctrl.model schema=$ctrl.schema errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations submitted=$ctrl.submitted on-change="$ctrl.onModelChange(model, schema)"> </array-schema> '},function(e,t){e.exports="<fieldset> <legend ng-if=\"$ctrl.schema.title && !$ctrl.hideTitle\"> {{ $ctrl.schema.title }} </legend> <p ng-if=$ctrl.schema.description> {{ $ctrl.schema.description }} </p> <div ng-if=$ctrl.schema.help.warning class=\"alert alert-warning\"> {{ $ctrl.schema.help.warning }} </div> <div class=row> <div ng-repeat=\"(property, nestedSchema) in $ctrl.schema.properties\" class=col-xs-12 ng-hide=nestedSchema.hidden ng-class=\"{\n        'col-sm-4': !$ctrl.narrow  && nestedSchema.width === 'sm',\n        'col-sm-6': !$ctrl.narrow  && nestedSchema.width === 'md',\n        'col-sm-12': $ctrl.narrow || nestedSchema.width === 'lg'\n      }\"> <generic-schema schema=nestedSchema model=$ctrl.model[property] errors=$ctrl.errors[property] locale=$ctrl.locale translations=$ctrl.translations required=$ctrl.isRequired(property) submitted=$ctrl.submitted on-change=\"$ctrl.onModelChange(property, model, schema)\"> </generic-schema> </div> </div> </fieldset> "},function(e,t){e.exports='<label class=control-label ng-if=$ctrl.schema.title> {{ $ctrl.schema.title }} </label> <div class="form-group m-b-5"> <div class=radio ng-repeat="(index, schema) in $ctrl.schema.oneOf" ng-class="{\'radio-lg\': schema.description}"> <label> <tw-radio ng-model=$ctrl.activeIndex ng-value="(index + 1)" ng-change="$ctrl.onSchemaChange(schema, index)"></tw-radio> {{ schema.title }} <p ng-if=schema.description class="secondary m-b-0"> {{ schema.description }} </p> </label> </div> </div> <div ng-repeat="(index, schema) in $ctrl.schema.oneOf"> <generic-schema ng-if="$ctrl.activeIndex === (index + 1)" schema=schema model=$ctrl.models[index] errors=$ctrl.errors locale=$ctrl.locale translations=$ctrl.translations submitted=$ctrl.submitted on-change="$ctrl.onModelChange(model, schema, index)" hide-title=true> </generic-schema> </div> '},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),a=n(1),l=n(7);function o(e,t){return!(!Object(a.isObject)(e)||"object"!==t.type||!Object(a.isObject)(t.properties))&&Object.keys(t.properties).map(function(n){return function(e,t,n){if(void 0===e)return!n;return s(e,t)}(e[n],t.properties[n],t.required&&t.required.indexOf(n)>=0)}).every(function(e){return e})}function s(e,t){if(t.oneOf)return function(e,t){return!!Object(a.isArray)(t.oneOf)&&t.oneOf.some(function(t){return s(e,t)})}(e,t);if(t.allOf)return function(e,t){return!!Object(a.isArray)(t.allOf)&&t.allOf.map(function(t){return s(e,t)}).every(function(e){return e})}(e,t);if(t.enum)return function(e,t){return!Object(l.d)(e,t).length}(e,t);if(t.const)return function(e,t){return!Object(l.c)(e,t).length}(e,t);switch(t.type){case"string":return function(e,t){return!Object(l.g)(e,t).length}(e,t);case"number":return function(e,t){return!Object(l.f)(e,t).length}(e,t);case"integer":return function(e,t){return!Object(l.e)(e,t).length}(e,t);case"boolean":return function(e,t){return!Object(l.b)(e,t).length}(e,t);case"array":return function(e,t){return!("array"!==t.type||!Object(a.isObject)(t.items))&&(!Object(l.a)(e,t).length&&e.map(function(e){return s(e,t.items)}).every(function(e){return e}))}(e,t);case"object":return o(e,t);default:return!1}}function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var u=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,(n=[{key:"onModelChange",value:function(e,t){if(this.onChange){var n=s(e,this.schema);this.onChange({model:e,isValid:n,schema:t})}}}])&&c(t.prototype,n),r&&c(t,r),e}(),d=n(92),h={controller:u,template:n.n(d).a,bindings:{schema:"<",model:"<",errors:"<",locale:"<",translations:"<",submitted:"<",onChange:"&"}},p=i.a.module("tw.json-schema.form",[]).component("jsonSchemaForm",h).name,f=n(10);function g(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var m=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,(n=[{key:"$onChanges",value:function(e){(e.schema||e.model)&&(this.models=function(e,t){var n=[];e&&t&&t.forEach(function(t){n.push(Object(f.a)(e,t)||{})});return n}(this.model,this.schema?this.schema.allOf:[]))}},{key:"onModelChange",value:function(e,t,n){var r,i=this.schema.allOf[e];this.models[e]=Object(f.a)(t,i),this.onChange&&this.onChange({model:(r=this.models,r.reduce(function(e,t){return angular.extend(t,e)},{})),schema:n})}}])&&g(t.prototype,n),r&&g(t,r),e}(),v=n(93),b={controller:m,template:n.n(v).a,bindings:{schema:"<",model:"<",errors:"<",locale:"<",translations:"<",submitted:"<",onChange:"&"}},$=i.a.module("tw.json-schema.all-of",[]).component("allOfSchema",b).name;function y(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var w=["string","number","integer","boolean"];function C(e){return e&&e.items&&e.items.type}function x(e){return"object"===e?{}:"array"===e?[]:null}var k=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,(n=[{key:"$onInit",value:function(){if(!Array.isArray(this.model)){var e=x(C(this.schema));this.model=[],e&&this.model.push(e)}}},{key:"onModelChange",value:function(e,t,n){this.model[e]=t,this.onChange&&this.onChange({model:this.model,schema:n})}},{key:"remove",value:function(e){this.model[e]&&this.model.splice(e,1)}},{key:"add",value:function(){var e=x(C(this.schema));e&&this.model.push(e)}},{key:"isSimpleType",value:function(e){return w.indexOf(e)>=0}}])&&y(t.prototype,n),r&&y(t,r),e}(),M=n(94),O={controller:k,template:n.n(M).a,bindings:{schema:"<",model:"<",errors:"<",locale:"<",translations:"<",submitted:"<",onChange:"&"}},S=i.a.module("tw.json-schema.array",[]).component("arraySchema",O).name;function j(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var D=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,(n=[{key:"$onInit",value:function(){this.key=Math.floor(1e8*Math.random())}},{key:"$onChanges",value:function(e){e.model&&this.handleNewModelFromParent(e.model.currentValue)}},{key:"handleNewModelFromParent",value:function(e){if(Object(a.isUndefined)(e)||Object(a.isNull)(e)){if(!Object(a.isUndefined)(this.internalModel)&&!Object(a.isNull)(this.internalModel))return;this.schema.default?this.onModelChange(this.schema.default):(this.lastModel=null,this.internalModel=null)}else this.lastModel=e,this.internalModel=e}},{key:"onModelChange",value:function(e){var t=Object(f.a)(e,this.schema);this.validationKeys=Object(l.h)(t,this.schema,this.required);var n=this.validationKeys.length?null:t;Object(a.isNull)(n)||(this.internalModel=e),this.onChange&&n!==this.lastModel&&this.onChange({model:n,schema:this.schema}),this.lastModel=n}},{key:"getValidationMessages",value:function(){return this.schema&&this.schema.validationMessages||this.translations&&this.translations.validation||null}}])&&j(t.prototype,n),r&&j(t,r),e}(),T=n(95),A={controller:D,template:n.n(T).a,bindings:{schema:"<",model:"<",errors:"<",locale:"<",translations:"<",required:"<",submitted:"<",onChange:"&"}},E=n(22),F=i.a.module("tw.json-schema.basic-type",[E.a]).component("basicTypeSchema",A).name;function L(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var P=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,(n=[{key:"$onChanges",value:function(e){if(e.schema){var t=e.schema.currentValue;t&&t.enum&&1===t.enum.length&&this.onModelChange(t.enum[0],t)}}},{key:"onModelChange",value:function(e,t){this.onChange&&this.onChange({model:e,schema:t})}}])&&L(t.prototype,n),r&&L(t,r),e}(),V=n(96),q={controller:P,template:n.n(V).a,bindings:{schema:"<",model:"<",errors:"<",locale:"<",translations:"<",required:"<",submitted:"<",hideTitle:"<",onChange:"&"}};function U(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var I=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,r;return t=e,(n=[{key:"$onInit",value:function(){this.outputModel=angular.extend({},this.model||{})}},{key:"onModelChange",value:function(e,t,n){this.outputModel[e]=t,this.onChange&&this.onChange({model:this.outputModel,schema:n})}},{key:"isRequired",value:function(e){return this.schema.required&&this.schema.required.includes(e)}}])&&U(t.prototype,n),r&&U(t,r),e}(),N=n(97),R={controller:I,template:n.n(N).a,bindings:{schema:"<",model:"<",errors:"<",locale:"<",translations:"<",hideTitle:"<",submitted:"<",onChange:"&"}},B=i.a.module("tw.json-schema.object",[]).component("objectSchema",R).name;function z(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var Y=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.options=[],this.activeIndex=1}var t,n,r;return t=e,(n=[{key:"$onChanges",value:function(e){e.schema&&(this.activeIndex=function(e,t){if(!e||!e.oneOf)return 1;for(var n=0;n<e.oneOf.length;n++)if(s(t,e.oneOf[n]))return n+1;return 1}(this.schema,this.model),this.prefillModels())}},{key:"prefillModels",value:function(){var e;this.schema&&this.schema.oneOf&&(this.models=(e=this.model,this.schema.oneOf.map(function(t){return Object(f.a)(e,t)})))}},{key:"onSchemaChange",value:function(e,t){this.models[t]=Object(f.a)(this.models[t],e),this.onModelChange(this.models[t],e,t)}},{key:"onModelChange",value:function(e,t,n){this.models[n]=e,this.onChange&&this.onChange({model:e,schema:t})}}])&&z(t.prototype,n),r&&z(t,r),e}(),W=n(98),H={controller:Y,template:n.n(W).a,bindings:{schema:"<",model:"<",errors:"<",locale:"<",translations:"<",submitted:"<",onChange:"&"}},G=n(12),K=i.a.module("tw.json-schema.one-of",[G.a]).component("oneOfSchema",H).name,_=i.a.module("tw.json-schema.generic",[F,B,S,$,K]).component("genericSchema",q).name,J=n(3);var X=i.a.module("tw.json-schema.validation",[]).service("SchemaValidation",function(){this.getValidModelParts=f.a,this.getValidationFailures=l.h,this.isValidSchema=s,this.ruleValidators=J,this.typeValidators=a}).name;t.default=i.a.module("tw.json-schema",[p,$,S,F,_,B,K,X]).name}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,