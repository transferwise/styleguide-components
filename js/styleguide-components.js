!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=88)}([function(e,t){e.exports=angular},function(e,t,n){"use strict";function i(e){return"string"==typeof e}function r(e){return"number"==typeof e&&!Number.isNaN(e)}function a(e){return r(e)&&Math.floor(e)===e}function o(e){return"boolean"==typeof e}function s(e){return!c(e)&&!u(e)&&e.constructor===Object}function l(e){return Array.isArray(e)}function c(e){return null===e}function u(e){return void 0===e}n.r(t),n.d(t,"isString",function(){return i}),n.d(t,"isNumber",function(){return r}),n.d(t,"isInteger",function(){return a}),n.d(t,"isBoolean",function(){return o}),n.d(t,"isObject",function(){return s}),n.d(t,"isArray",function(){return l}),n.d(t,"isNull",function(){return c}),n.d(t,"isUndefined",function(){return u})},function(e,t,n){"use strict";var i=n(0),r=n.n(i);var a=function(){this.getClosestParentByTagName=function(e,t){for(var n=t.toUpperCase(),i=e;i;)if((i=i.parentNode)&&i.tagName&&i.tagName.toUpperCase()===n)return i;return null},this.getClosestParentByClassName=function(e,t){for(var n=e;n;)if((n=n.parentNode)&&n.classList&&n.classList.contains(t))return n;return null},this.getPreviousSiblingWithClassName=function(e,t){for(var n=e.previousElementSibling;n;){if(n.classList.contains(t))return n;n=n.previousElementSibling}return null},this.getNextSiblingWithClassName=function(e,t){for(var n=e.nextElementSibling;n;){if(n.classList.contains(t))return n;n=n.nextElementSibling}return null}};t.a=r.a.module("tw.styleguide.services.dom",[]).service("TwDomService",a).name},function(e,t,n){"use strict";n.r(t),n.d(t,"isValidRequired",function(){return r}),n.d(t,"isValidMinLength",function(){return a}),n.d(t,"isValidMaxLength",function(){return o}),n.d(t,"isValidPattern",function(){return s}),n.d(t,"isValidMaximum",function(){return l}),n.d(t,"isValidMinimum",function(){return c}),n.d(t,"isValidMinItems",function(){return u}),n.d(t,"isValidMaxItems",function(){return d});var i=n(1);function r(e,t){return!t||!Object(i.isUndefined)(e)}function a(e,t){return!Object(i.isNumber)(t)||Object(i.isString)(e)&&e.length>=t}function o(e,t){return!Object(i.isNumber)(t)||Object(i.isString)(e)&&e.length<=t}function s(e,t){try{var n=new RegExp(t);return void 0!==e&&!!n.test(e)}catch(e){return!0}}function l(e,t){return!Object(i.isNumber)(t)&&!Object(i.isString)(t)||(Object(i.isNumber)(e)||Object(i.isString)(e))&&e<=t}function c(e,t){return!Object(i.isNumber)(t)&&!Object(i.isString)(t)||(Object(i.isNumber)(e)||Object(i.isString)(e))&&e>=t}function u(e,t){return!Object(i.isNumber)(t)||Object(i.isArray)(e)&&e.length>=t}function d(e,t){return!Object(i.isNumber)(t)||Object(i.isArray)(e)&&e.length<=t}},function(e,t,n){"use strict";var i=n(0),r=n.n(i);var a=function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var i=t[0],r=n.getClosestParentByClassName(i,"form-group");r&&i&&(i.addEventListener("focus",function(){r.classList.add("focus")}),i.addEventListener("blur",function(){r.classList.remove("focus")}))};a.$inject=["$element","TwDomService"];var o=a;var s=function(){return{restrict:"A",controller:o}};var l=function(){return{restrict:"C",controller:o}},c=n(2);t.a=r.a.module("tw.styleguide.forms.focusable",[c.a]).directive("twFocusable",s).directive("formControl",l).name},function(e,t,n){
/*!
* screenfull
* v5.0.2 - 2020-02-13
* (c) Sindre Sorhus; MIT License
*/
!function(){"use strict";var t="undefined"!=typeof window&&void 0!==window.document?window.document:{},n=e.exports,i=function(){for(var e,n=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],i=0,r=n.length,a={};i<r;i++)if((e=n[i])&&e[1]in t){for(i=0;i<e.length;i++)a[n[0][i]]=e[i];return a}return!1}(),r={change:i.fullscreenchange,error:i.fullscreenerror},a={request:function(e){return new Promise(function(n,r){var a=function(){this.off("change",a),n()}.bind(this);this.on("change",a);var o=(e=e||t.documentElement)[i.requestFullscreen]();o instanceof Promise&&o.then(a).catch(r)}.bind(this))},exit:function(){return new Promise(function(e,n){if(this.isFullscreen){var r=function(){this.off("change",r),e()}.bind(this);this.on("change",r);var a=t[i.exitFullscreen]();a instanceof Promise&&a.then(r).catch(n)}else e()}.bind(this))},toggle:function(e){return this.isFullscreen?this.exit():this.request(e)},onchange:function(e){this.on("change",e)},onerror:function(e){this.on("error",e)},on:function(e,n){var i=r[e];i&&t.addEventListener(i,n,!1)},off:function(e,n){var i=r[e];i&&t.removeEventListener(i,n,!1)},raw:i};i?(Object.defineProperties(a,{isFullscreen:{get:function(){return Boolean(t[i.fullscreenElement])}},element:{enumerable:!0,get:function(){return t[i.fullscreenElement]}},isEnabled:{enumerable:!0,get:function(){return Boolean(t[i.fullscreenEnabled])}}}),n?e.exports=a:window.screenfull=a):n?e.exports={isEnabled:!1}:window.screenfull={isEnabled:!1}}()},function(e,t,n){"use strict";var i=n(0),r=n.n(i);function a(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if("undefined"==typeof Symbol||!(Symbol.iterator in Object(e)))return;var n=[],i=!0,r=!1,a=void 0;try{for(var o,s=e[Symbol.iterator]();!(i=(o=s.next()).done)&&(n.push(o.value),!t||n.length!==t);i=!0);}catch(e){r=!0,a=e}finally{try{i||null==s.return||s.return()}finally{if(r)throw a}}return n}(e,t)||function(e,t){if(!e)return;if("string"==typeof e)return o(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(n);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return o(e,t)}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}var s=function(){var e=this;function t(e,t,n){var i,r=c(t);return h[r]&&(i=h[r][e]),i?"short"===n?i.substr(0,3):"narrow"===n?i.substr(0,1):i:null}function n(e,t,n){var i=c(t);return i&&p[i]&&("short"!==n||"ja"===i)?p[i][e]:null}function i(e,t){var n=c(t),i=d(f,e,n)||"";return"".concat(e).concat(i)}function r(e,t){var n=c(t),i=d(m,e,n);return"".concat(e).concat(i)}function o(e,t,n){if(!e.toLocaleDateString)return null;var i=e.toLocaleDateString(t,n);return function(e){if(!e)return!0;if("ja"===c(e))return!1;return!0}(t)&&(i=i.replace(/[0-9]|\s|,|\./g,"")),i[0].toUpperCase()+i.substring(1)}function s(e){return!e||["narrow","short","long"].indexOf(e)<0?"long":e}function l(e){return function(e){try{return window.Intl.DateTimeFormat.supportedLocalesOf([e]).length>0}catch(e){return!1}}(e)?e:"en-GB"}function c(e){return e?e.substring(0,2):"en"}function u(e){return void 0!==g[e]?g[e]:" "}function d(e,t,n){return e[n]?e[n].exactMatch&&e[n].exactMatch[t]?e[n].exactMatch[t]:e[n].endsWith&&e[n].endsWith[t%10]?e[n].endsWith[t%10]:e[n].default:""}this.getLocaleDate=function(e){return e||(e=new Date),e.getDate()},this.getLocaleMonth=function(e){return e||(e=new Date),e.getMonth()},this.getLocaleFullYear=function(e){return e||(e=new Date),e.getFullYear()},this.getLocaleToday=function(){var t=new Date;return e.getUTCDateFromParts(e.getLocaleFullYear(t),e.getLocaleMonth(t),e.getLocaleDate(t))},this.getUTCDate=function(e){return e||(e=new Date),e.getUTCDate()},this.getUTCMonth=function(e){return e||(e=new Date),e.getUTCMonth()},this.getUTCFullYear=function(e){return e||(e=new Date),e.getUTCFullYear()},this.getUTCToday=function(){var t=new Date;return e.getUTCDateFromParts(e.getUTCFullYear(t),e.getUTCMonth(t),e.getUTCDate(t))},this.getLastDayOfMonth=function(t,n){return e.getUTCDateFromParts(t,n+1,0).getUTCDate()},this.getUTCDateFromParts=function(e,t,n,i,r,a){var o=new Date;return o.setUTCFullYear(e,t,n),o.setUTCHours(i||0),o.setUTCMinutes(r||0),o.setUTCSeconds(a||0),o.setUTCMilliseconds(0),o},this.getLocaleDateFromParts=function(e,t,n,i,r,a){var o=new Date;return o.setFullYear(e,t,n),o.setHours(i||0),o.setMinutes(r||0),o.setSeconds(a||0),o.setMilliseconds(0),o},this.getDatePartsFromIso=function(e){var t=0,n=0,i=parseInt(e.substr(0,4),10),r=parseInt(e.substr(5,2),10)-1,a=parseInt(e.substr(8,2),10),o=parseInt(e.substr(11,2),10)||0,s=parseInt(e.substr(14,2),10)||0,l=parseInt(e.substr(17,2),10)||0,c=e.substring(10).match("[+-]{1}[0-9]{2}(:[0-9]{2})?$");return c&&(t=parseInt(c[0].substr(1,2),10)||0,n=parseInt(c[0].substr(4,2),10)||0,"-"===c[0].substr(0,1)&&(t*=-1,n*=-1)),[i,r,a,o,s,l,t,n]},this.isIsoStringValid=function(e){return new RegExp("^".concat("[0-9]{4}-[0-9]{2}-[0-9]{2}","(").concat("T[0-9]{2}:[0-9]{2}:[0-9]{2}").concat("(.[0-9]{3})?").concat("(Z|[+,-][0-9]{2}(:[0-9]{2})?)",")?$")).test(e)},this.getUTCDateFromIso=function(t){if(!e.isIsoStringValid(t))return null;var n=a(e.getDatePartsFromIso(t),8),i=n[0],r=n[1],o=n[2],s=n[3],l=n[4],c=n[5],u=n[6],d=n[7];return e.getUTCDateFromParts(i,r,o,s+u,l+d,c)},this.getDayNamesForLocale=function(t,n){for(var i=[],r=s(n),a=0;a<7;a++)i.push(e.getDayNameForLocale(a,t,r));return i},this.getDayNameForLocale=function(n,i,r){var a=t(n,i,r);if(a)return a;var c=l(i),u=s(r);return o(e.getUTCDateFromParts(2006,0,n+1),c,{weekday:"long"})||t(n,"en-GB",u)},this.getMonthNamesForLocale=function(t,n){for(var i=[],r=s(n),a=0;a<12;a++)i.push(e.getMonthNameForLocale(a,t,r));return i},this.getMonthNameForLocale=function(t,i,r){var a=n(t,i,r);if(a)return a;var c=l(i),u=s(r),d=e.getUTCDateFromParts(2e3,t,15);return"short"===r?(t=o(d,c,{month:"long"})).length>4?t.slice(0,3):t:o(d,c,{month:"long"})||n(t,"en-GB",u)},this.getWeekday=function(t,n,i){return e.getUTCDateFromParts(t,n,i).getUTCDay()},this.isMonthBeforeDay=function(e){return"ja"===c(e)||e&&-1!==e.indexOf("US",e.length-2)},this.isYearBeforeMonth=function(e){return"ja"===c(e)},this.addYears=function(t,n){return e.addToDate(t,n,0,0)},this.addMonths=function(t,n){return e.addToDate(t,0,n,0)},this.addDays=function(t,n){return e.addToDate(t,0,0,n)},this.addToDate=function(t,n,i,r){return e.getUTCDateFromParts(t.getUTCFullYear()+n,t.getUTCMonth()+i,t.getUTCDate()+r)},this.getLocaleTimeString=function(t,n){return e.getTimeString(t.getHours(),t.getMinutes(),t.getSeconds(),n)},this.getTimeString=function(e,t,n,i){var r=c(i);if(e<10&&(e="0".concat(e)),t<10&&(t="0".concat(t)),"en"===r){var a=e>=12?"pm":"am";return 0===(e%=12)&&(e=12),"00"===t?"".concat(e).concat(a):"".concat(e,":").concat(t).concat(a)}return"".concat(e,":").concat(t)},this.getYearAndMonthPresentation=function(t,n,i,a){var o=r(t,i),s=e.getMonthNameForLocale(n,i,a||"long"),l=u(c(i));return e.isYearBeforeMonth(i)?[o,s].join(l):[s,o].join(l)},this.getYearMonthDatePresentation=function(t,n,a,o,s){var l=r(t,o),d=e.getMonthNameForLocale(n,o,s||"long"),p=i(a,o),h=u(c(o));if(e.isYearBeforeMonth(o))return[l,d,p].join(h);if(e.isMonthBeforeDay(o)){var f=[d,p].join(h);return"".concat(f,", ").concat(l)}return[p,d,l].join(h)},this.getLocaleNow=function(){return new Date},this.getUTCNow=function(){var t=new Date;return e.getUTCDateFromParts(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate(),t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds())},this.getLocaleDateString=function(t,n,i){if(!t.getFullYear)return t;var r=e.getLocaleNow();return e.getDateString(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getDay(),n,t-r,r.getFullYear(),i)},this.getUTCDateString=function(t,n,i){if(!t)return t;var r=e.getUTCNow();return e.getDateString(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate(),t.getUTCHours(),t.getUTCMinutes(),t.getUTCSeconds(),t.getUTCDay(),n,t-r,r.getUTCFullYear(),i)},this.getDateString=function(t,n,a,o,s,l,c,u,d,p,h){var f=Math.abs(d)<5184e5&&"long"!==h,m=!f,g=Math.abs(d)<6912e5||"long"===h,v=!g||"long"===h,b=!g&&p!==t||"long"===h?r(t,u):"",y=v?e.getMonthNameForLocale(n,u,"short"===h?"short":"long"):"",w=m?i(a,u):"",$=g?e.getDayNameForLocale(c,u,"short"===h?"short":"long"):"",C=f?e.getTimeString(o,s,l,u):"";return e.combineDateParts(b,y,w,C,$,u)},this.combineDateParts=function(t,n,i,r,a,o){var s,l=c(o),d=u(l);if(e.isYearBeforeMonth(o)?s=[t,n,i].join(d).trim():e.isMonthBeforeDay(o)?(s=[n,i].join(d).trim(),t&&(s+=", ".concat(t))):s=[i,n,t].join(d).trim(),a){if("ja"===l)return"".concat(s," ").concat(r," (").concat(a,")").trim();s=n||t?"".concat(a,", ").concat(s).trim():"".concat(a," ").concat(s).trim()}return(s="".concat(s," ").concat(r)).trim()};var p={en:["January","February","March","April","May","June","July","August","September","October","November","December"],ja:["1月","2月","3月","4月","5月","6月","7月","8月","9月","10月","11月","12月"]},h={en:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],ja:["日","月","火","水","木","金","土"]},f={en:{exactMatch:{11:"th",12:"th",13:"th"},endsWith:{1:"st",2:"nd",3:"rd"},default:"th"},de:{default:"."},fi:{default:"."},ja:{default:"日"}},m={ja:{default:"年"}},g={ja:""}};t.a=r.a.module("tw.styleguide.services.date",[]).service("TwDateService",s).name},function(e,t,n){"use strict";n.d(t,"h",function(){return a}),n.d(t,"g",function(){return o}),n.d(t,"f",function(){return s}),n.d(t,"e",function(){return l}),n.d(t,"b",function(){return c}),n.d(t,"d",function(){return u}),n.d(t,"c",function(){return d}),n.d(t,"a",function(){return p});var i=n(1),r=n(3);function a(e,t,n){if(Object(i.isNull)(e))return n?["required"]:[];if(t.enum)return u(e,t,n);if(t.const)return d(e,t,n);switch(t.type){case"string":return o(e,t,n);case"number":return s(e,t,n);case"integer":return l(e,t,n);case"boolean":return c(e,t,n);case"array":return p(e,t);case"object":return function(e,t){if(!Object(i.isObject)(e)&&!Object(i.isNull)(e))return["type"];if(!Object(i.isArray)(t.required))return[];return t.required.map(function(t){return void 0!==e[t]}).reduce(function(e,t){return e&&t},!0)?[]:["required"]}(e,t);default:return[]}}function o(e,t,n){if(!Object(i.isString)(e)&&!Object(i.isNull)(e))return["type"];if(""===e&&n)return["required"];var a=[];return Object(r.isValidRequired)(e,n)||a.push("required"),Object(r.isValidMinLength)(e,t.minLength)||a.push("minLength"),Object(r.isValidMaxLength)(e,t.maxLength)||a.push("maxLength"),Object(r.isValidPattern)(e,t.pattern)||a.push("pattern"),Object(r.isValidMinimum)(e,t.minimum)||a.push("minimum"),Object(r.isValidMaximum)(e,t.maximum)||a.push("maximum"),a}function s(e,t,n){if(!Object(i.isNumber)(e)&&!Object(i.isNull)(e))return["type"];var a=[];return Object(r.isValidRequired)(e,n)||a.push("required"),Object(r.isValidMinimum)(e,t.minimum)||a.push("minimum"),Object(r.isValidMaximum)(e,t.maximum)||a.push("maximum"),a}function l(e,t,n){return Object(i.isInteger)(e)?s(e,t,n):["type"]}function c(e,t,n){if(!Object(i.isBoolean)(e)&&!Object(i.isNull)(e))return["type"];var a=[];return Object(r.isValidRequired)(e,n)||a.push("required"),a}function u(e,t,n){return Object(r.isValidRequired)(e,n)?Object(i.isNull)(e)||-1!==t.enum.indexOf(e)?[]:["enum"]:["required"]}function d(e,t,n){return Object(r.isValidRequired)(e,n)?Object(i.isNull)(e)||e===t.const?[]:["const"]:["required"]}function p(e,t){if(!Object(i.isArray)(e)&&!Object(i.isNull)(e))return["type"];var n=[];return Object(r.isValidMinItems)(e,t.minItems)||n.push("minItems"),Object(r.isValidMaxItems)(e,t.maxItems)||n.push("maxItems"),n}},function(e,t,n){"use strict";var i=n(0),r=n.n(i);function a(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var o=function(){function e(t,n,i,r,a,o){var s=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$ngModel=t.controller("ngModel"),this.$element=t,this.$attrs=r,this.$timeout=i,this.$transclude=n,this.dom=a,this.element=t[0],o.$watch("$ctrl.ngModel",function(e,t){return s.onModelChange(e,t)})}var t,n,i;return t=e,(n=[{key:"$onInit",value:function(){var e,t,n,i,r,a,o,s,l;this.button=this.element.getElementsByClassName("btn")[0],this.search="",h(this.$ngModel,this),m(this.$ngModel,this,this.$attrs,this.$timeout),e=this,t=this.$element,n=this.$ngModel,this.options,i=this.$timeout,r=t[0],a=r.getElementsByClassName("btn")[0],o=r.getElementsByClassName("btn-group")[0],s=r.getElementsByClassName("dropdown-menu")[0],l=function(){i(function(){a===document.activeElement||o.classList.contains("open")||r.dispatchEvent(new CustomEvent("blur"))},150)},r.addEventListener("blur",function(){n.$setTouched()}),a.addEventListener("keypress",function(t){e.optionKeypress(t)}),a.addEventListener("click",function(){i(function(){e.shouldShowSearch()?r.getElementsByClassName("tw-select-filter")[0].focus():d(r)})}),a.addEventListener("focusout",l),s.addEventListener("focusout",l),s.addEventListener("keypress",function(t){"a"===t.target.tagName.toLowerCase()&&e.optionKeypress(t)}),function(e,t){e(function(e){(e.length>1||""!==e.text().trim())&&(t.hasTranscluded=!0)})}(this.$transclude,this),this.responsiveClasses=$,this.optionsPageSize=300,this.numberOfOptionsRevealed=this.optionsPageSize,this.hasMoreOptionsToReveal=!1,this.filterString="",this.filteredOptions=this.getFilteredOptions()}},{key:"$onChanges",value:function(e){e.options&&this.onOptionsChange(e.options.currentValue,e.options.previousValue)}},{key:"onModelChange",value:function(e,t){if(e!==t){(e||t)&&this.$ngModel.$setDirty();var n=f(this.options,e);this.selected=n||null}}},{key:"onOptionsChange",value:function(e,t){e!==t&&(h(this.$ngModel,this),m(this.$ngModel,this,this.$attrs,this.$timeout),this.filteredOptions=this.getFilteredOptions())}},{key:"circleClasses",value:function(e){var t=$(e),n=$(this.hideSecondary);return this.selected.secondary&&0===n.length?t+=" circle-sm":t+=" circle-xs",t}},{key:"buttonFocus",value:function(){this.element.dispatchEvent(new CustomEvent("focus"))}},{key:"optionClick",value:function(e,t){e.disabled?t.stopPropagation():(g(this.$ngModel,this,e),this.button.focus())}},{key:"optionFocus",value:function(e){g(this.$ngModel,this,e)}},{key:"optionKeypress",value:function(e){if(!e.target.classList.contains("tw-select-filter"))if(8!==p(e)){var t=function(e){return String.fromCharCode(p(e))}(e);!function(e,t,n,i){var r=b(e,t,n,t.search+i);r?t.search+=i:(t.search=i,r=b(e,t,n,t.search))}(this.$ngModel,this,this.options,t),d(this.element)}else e.preventDefault()}},{key:"placeholderClick",value:function(){v(this.$ngModel,this),this.button.focus()}},{key:"placeholderFocus",value:function(){v(this.$ngModel,this)}},{key:"getFilteredOptions",value:function(){if(this.hasMoreOptionsToReveal=!1,!this.options||!this.options.filter)return[];for(var e=this.filterString&&this.filterString.toLowerCase().replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&"),t=Object.create(null),n=[],i=0;i<this.options.length;++i){var a=this.options[i];if(!a.header||a.value||a.label){var o=!1,d=t[a.label],p=r.a.isArray(d);if(p)for(var h=0;h<d.length;h++)if(r.a.equals(d[h],a.value)){o=!0;break}if(!o&&(!e||s(a,e)||l(a,e)||c(a,e)||u(a,e))){if(n.length>=this.numberOfOptionsRevealed){this.hasMoreOptionsToReveal=!0;break}p?d.push(a.value):t[a.label]=[a.value],n.push(a)}}else n.push(a)}return n}},{key:"focusOnFilterInput",value:function(){var e=this.element.getElementsByClassName("tw-select-filter")[0];e&&e.focus()}},{key:"filterChange",value:function(){this.numberOfOptionsRevealed=this.optionsPageSize,this.filteredOptions=this.getFilteredOptions(),!function(e,t){if(!r.a.isArray(e))return;var n;return e.forEach(function(e){t&&r.a.equals(t.value,e.value)&&(n=t)}),n}(this.filteredOptions,this.selected)&&this.filteredOptions.length&&g(this.$ngModel,this,this.filteredOptions[0])}},{key:"filterKeydown",value:function(e){var t=e.which||e.charCode||e.keyCode,n=this.element.querySelector(".active"),i=!!n&&n.querySelector("a"),r=this.element.getElementsByClassName("tw-select-option-link");return t===C.down?(this.moveDownOneOption(n,i,r),e.preventDefault()):t===C.up?(this.moveUpOneOption(n,i,r),e.preventDefault()):t===C.return&&(n&&(n.click(),this.button.focus()),e.preventDefault()),!0}},{key:"selectOptionUsingLink",value:function(e){var t=this.filteredOptions[e.getAttribute("index")];g(this.$ngModel,this,t)}},{key:"moveUpOneOption",value:function(e,t,n){if(e||!n.length){if(t!==n[0]){var i=this.dom.getPreviousSiblingWithClassName(e,"tw-select-option");if(i){var r=i.getElementsByTagName("a")[0];this.selectOptionUsingLink(r)}}}else this.selectOptionUsingLink(n[n.length-1])}},{key:"moveDownOneOption",value:function(e,t,n){if(e||!n.length){if(t!==n[n.length-1]){var i=this.dom.getNextSiblingWithClassName(e,"tw-select-option");if(i){var r=i.getElementsByTagName("a")[0];return void this.selectOptionUsingLink(r)}}var a=this.element.getElementsByClassName("tw-select-transcluded");a.length&&a[0].getElementsByTagName("a")[0].focus()}else this.selectOptionUsingLink(n[0])}},{key:"shouldShowSearch",value:function(){return this.filter||this.options&&this.options.length>12}},{key:"revealMoreOptions",value:function(e){e.stopPropagation(),this.numberOfOptionsRevealed+=this.optionsPageSize,this.filteredOptions=this.getFilteredOptions()}}])&&a(t.prototype,n),i&&a(t,i),e}();function s(e,t){return e.label&&e.label.toLowerCase().search(t)>=0}function l(e,t){return e.note&&e.note.toLowerCase().search(t)>=0}function c(e,t){return e.secondary&&e.secondary.toLowerCase().search(t)>=0}function u(e,t){return e.searchable&&e.searchable.toLowerCase().search(t)>=0}function d(e){var t=e.getElementsByClassName("active")[0];t&&t.getElementsByTagName("a")[0].focus()}function p(e){return e.which||e.charCode||e.keyCode}function h(e,t){if(w(t.ngModel)){var n=f(t.options,t.ngModel);n&&g(e,t,n)}}function f(e,t){var n=!1;return e.forEach(function(e){r.a.equals(e.value,t)&&(n=e)}),n}function m(e,t,n,i){if((t.ngRequired||n.required)&&!w(t.ngModel)&&!t.placeholder)for(var r=0;r<t.options.length;r++)if(w(t.options[r].value)){g(e,t,t.options[r]),i(t.ngChange);break}}function g(e,t,n){n.disabled||(e.$setViewValue(n.value),e.$commitViewValue(),t.selected=n)}function v(e,t){e.$setViewValue(null),e.$commitViewValue(),t.selected=!1}function b(e,t,n,i){var r=!1,a=i.toLowerCase();return n.forEach(function(n){r||(y(n.label,a)||y(n.note,a)||y(n.secondary,a)||y(n.searchable,a))&&(g(e,t,n),r=!0)}),r}function y(e,t){return e&&0===e.toLowerCase().indexOf(t)}function w(e){return e||0===e||!1===e}function $(e){var t="",n=[],i={xs:!0,sm:!0,md:!0,lg:!0,xl:!0};return"boolean"==typeof e&&e?"hidden":e&&e.toLowerCase&&"true"===e.toLowerCase()?"hidden":(e&&(n=e.split(",")),n.forEach(function(e){i[e]&&(t+="hidden-".concat(e," "))}),t)}var C={up:38,down:40,return:13};o.$inject=["$element","$transclude","$timeout","$attrs","TwDomService","$scope"];var k=o,x=n(28),A={controller:k,template:n.n(x).a,require:"ngModel",transclude:!0,bindings:{ngModel:"=",ngChange:"&",ngRequired:"<",ngDisabled:"<",options:"<",name:"@",placeholder:"@",filter:"@",size:"@",dropdownRight:"@",dropdownUp:"@",dropdownWidth:"@",inverse:"<",hideNote:"@",hideSecondary:"@",hideIcon:"@",hideCurrency:"@",hideCircle:"@",hideLabel:"@"}},E=n(2),D=n(4);t.a=r.a.module("tw.styleguide.forms.select",[E.a,D.a]).component("twSelect",A).name},function(e,t,n){"use strict";var i=n(0),r=n.n(i);function a(e){var t=this;function n(e){if(e instanceof Array){var t=[];return e.forEach(function(e){e.fields?t=t.concat(i(e,e.fields)):e.group?t=t.concat(i(e,e.group)):t.push(e)}),t}return e}function i(e,t){return e.name&&t.length&&!t[0].name&&(t[0].name=e.name),e.width&&t.length&&!t[0].width&&(t[0].width=e.width),e.tooltip&&t.length&&!t[0].helpText&&(t[0].helpText=e.tooltip),e.info&&t.length&&!t[0].helpText&&(t[0].helpText=e.info),2===t.length&&t.forEach(function(e){e.width="md"}),3===t.length&&(t[0].width="md",t[1].width="md"),t}function r(e){return!e.label&&e.title&&(e.label=e.title,delete e.title),!e.label&&e.name&&(e.label=e.name,delete e.name),!e.value&&e.code&&(e.value=e.code,delete e.code),!e.value&&e.key&&(e.value=e.key,delete e.key),e}this.prepRequirements=function(e){if(!e||!e.length)return[];var n=l(e);return n.forEach(function(e){e.prepared||(t.prepLegacyAlternatives(e),e.properties=t.prepFields(e.properties||e.fields),e.type&&"object"!==e.type&&!e.types&&(e.properties.type={type:"string",enum:[e.type],required:!0,hidden:!0},e.type="object"),e.prepared=!0)}),n},this.prepFields=function(e,i,r){if(!e)return{};var a=l(e);return a=function(e){if(e instanceof Array)throw new Error("Expecting a map of fields, not an array");var t={};return Object.keys(e).forEach(function(n){if(n.indexOf(".")>0){var i=n.split("."),r=i[0];t[r]||(t[r]={type:"object",properties:{}}),t[r].properties[i[1]]=e[n]}else t[n]=e[n]}),t}(a=function(e){if(e instanceof Array){var t={};return e.forEach(function(e){var n=e.key||e.name;delete e.key,t[n]=l(e)}),t}return e}(a=n(a))),Object.keys(a).forEach(function(e){a[e]=t.prepField(a[e],i,r)}),a},this.prepField=function(e,n,i){var r=l(e);return t.prepLegacyProps(r),t.prepType(r),t.prepPattern(r),t.prepValuesAsync(r,n),t.prepValidationMessages(r,i),t.prepHelp(r),t.prepCameraGuidelines(r),r},this.prepType=function(e){switch(e.type&&e.type.toLowerCase&&e.type.toLowerCase()){case"text":e.type="string";break;case"date":e.type="string",e.format="date";break;case"password":e.type="string",e.control="password";break;case"checkbox":e.type="boolean";break;case"select":"CHECKBOX"===e.selectType?e.type="array":(e.control||(e.control="select"),delete e.type);break;case"radio":e.control="radio",delete e.type;break;case"upload":e.type="string",e.format="base64url";break;case"tel":e.type="string",e.format="phone";break;case"textarea":e.type="string",e.control="textarea";break;case"array":e.control=t.getControlForArray(e)}e.control||"object"===e.type||(e.control=t.getControlType(e))},this.getControlForArray=function(e){return e.items.enum?"checkbox-group":"base64url"===e.items.format?"multi-upload":null},this.prepLegacyAlternatives=function(e){!e.title&&e.label&&(e.title=e.label),e.title||(e.title=function(e){if(e&&e.length>0){var t=e.toLowerCase().split("_").join(" ");return t.charAt(0).toUpperCase()+t.slice(1)}return""}(e.type)),!e.type&&e.name&&(e.type=e.name),!e.description&&e.tooltip&&(e.description=e.tooltip),e.fieldGroups&&!e.fields&&(e.fields=n(e.fieldGroups),delete e.fieldGroups)},this.prepLegacyProps=function(e){e.name&&!e.title&&(e.title=e.name,delete e.name),e.validationRegexp&&(e.pattern=e.validationRegexp,delete e.validationRegexp),e.min&&!e.minimum&&(e.minimum=e.min,delete e.min),e.max&&!e.maximum&&(e.maximum=e.max,delete e.max),e.example&&!e.placeholder&&(e.placeholder=e.example,delete e.example),e.tooltip&&!e.helpText&&(e.helpText=e.tooltip,delete e.tooltip),e.valuesAllowed&&!e.values&&"CHECKBOX"!==e.selectType&&(e.values=e.valuesAllowed,delete e.valuesAllowed),e.valuesAllowed&&!e.items&&"CHECKBOX"===e.selectType&&(e.items={values:e.valuesAllowed},delete e.valuesAllowed),e.values&&e.values.map&&(e.values=t.prepLegacyValues(e.values)),e.value&&!e.default&&(e.default=e.value,delete e.value),e.values&&e.values&&e.values.length&&e.values[0]&&!e.values[0].value&&e.values[0].label&&!e.placeholder&&(e.placeholder=e.values[0].label,e.values=e.values.slice(1)),e.helpOptions&&!e.help&&(e.help=e.helpOptions,delete e.helpOptions)},this.prepLegacyValues=function(e){return e.map(r)},this.prepPattern=function(e){if(e.pattern)try{RegExp(e.pattern)}catch(t){console.warn("API regexp is invalid"),delete e.pattern}else delete e.pattern},this.prepValuesAsync=function(e,n){if(e.valuesAsync){var i={};e.valuesAsync.params&&e.valuesAsync.params.length&&(i=t.getParamValuesFromModel(n,e.valuesAsync.params)),t.fetchValuesAsync(e,i).catch(function(){return t.fetchValuesAsync(e,i)})}},this.fetchValuesAsync=function(n,i){return e({method:n.valuesAsync.method||"GET",url:n.valuesAsync.url,data:i||{}}).then(function(e){n.values=t.prepLegacyValues(e.data)})},this.getParamValuesFromModel=function(e,t){var n={};return t.forEach(function(t){e[t.key]?n[t.parameterName]=e[t.key]:t.required}),n},this.prepValidationMessages=function(e){e.validationMessages&&e.validationMessages.min&&(e.validationMessages.minimum=e.validationMessages.min,delete e.validationMessages.min),e.validationMessages&&e.validationMessages.max&&(e.validationMessages.maximum=e.validationMessages.max,delete e.validationMessages.max),e.validationMessages&&e.validationMessages.minlength&&(e.validationMessages.minLength=e.validationMessages.minlength,delete e.validationMessages.minlength),e.validationMessages&&e.validationMessages.maxlength&&(e.validationMessages.maxLength=e.validationMessages.maxlength,delete e.validationMessages.maxlength)},this.prepHelp=function(e){!e.help&&(e.helpText||e.helpImage||e.helpList||e.uploadPlaceholderImage)&&(e.help={}),e.helpText&&(e.help.message=e.helpText,delete e.helpText),e.helpImage&&(e.help.image=e.helpImage,delete e.helpImage),e.uploadPlaceholderImage&&(e.help.image=e.uploadPlaceholderImage,delete e.uploadPlaceholderImage),e.list&&(e.help.list=e.helpList,delete e.helpList)},this.prepCameraGuidelines=function(e){e.camera&&e.camera.overlay&&!e.camera.outline&&(e.camera.outline=e.camera.overlay,delete e.camera.overlay)},this.getRequiredFields=o,this.getControlType=s}function o(e){if(Array.isArray(e))throw new Error("Expected field map");return Object.keys(e).filter(function(t){return e[t].required})}function s(e){if(e.control)return"select"===e.control&&"CHECKBOX"===e.selectType?"checkbox-group":e.control.toLowerCase();if(e.hidden)return"hidden";if(e.valuesAsync)return"select";if(e.values&&e.values.length)return function(e){if(e.control)return e.control;if("select"===e.type)return"select";if("radio"===e.type)return"radio";var t=e.enum||e.values;if(t)return t.length>3?"select":"radio";return"select"}(e);switch(e.type){case"string":return function(e){switch(e){case"date":return"date";case"base64url":return"file";case"password":return"password";case"uri":case"email":return"text";case"phone":return"tel";default:return"text"}}(e.format);case"number":case"integer":return"number";case"boolean":return"checkbox";default:return"text"}}function l(e){return JSON.parse(JSON.stringify(e))}a.$inject=["$http"];var c=a;t.a=r.a.module("tw.styleguide.services.requirements",[]).service("TwRequirementsService",c).name},function(e,t,n){"use strict";n.d(t,"a",function(){return l});var i=n(1);function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach(function(t){o(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function l(e,t){if(t.allOf)return function(e,t){var n,i={};return t.allOf.forEach(function(t){"object"===s(n=l(e,t))&&(i=a({},i,{},n))}),i}(e,t);if(t.oneOf)return function(e,t){return t.oneOf.map(function(t){return l(e,t)}).reduce(function(e,t){return Object(i.isNull)(e)?t:Object(i.isObject)(e)&&Object(i.isObject)(t)?function e(t,n){var r=a({},t);Object.keys(n).forEach(function(a){Object(i.isObject)(t[a])&&Object(i.isObject)(n[a])?r[a]=e(t[a],n[a]):r[a]=n[a]});return r}(e,t):Object(i.isNull)(t)?e:t},null)}(e,t);if(t.enum&&t.enum.indexOf(e)>=0)return e;if(!Object(i.isUndefined)(t.const)&&e===t.const)return e;if(t.type)switch(t.type){case"object":return function(e,t){var n={};return Object.keys(t.properties).forEach(function(r){if(e&&!Object(i.isUndefined)(e[r])){var a=l(e[r],t.properties[r]);Object(i.isNull)(a)||(n[r]=a)}}),n}(e,t);case"array":return function(e,t){if(Object(i.isArray)(e))return e.map(function(e){return l(e,t)});return null}(e,t);case"string":return function(e){if(Object(i.isString)(e))return e;return null}(e);case"number":return function(e){if(Object(i.isNumber)(e))return e;return null}(e);case"integer":return function(e){if(Object(i.isInteger)(e))return e;return null}(e);case"boolean":return function(e){if(Object(i.isBoolean)(e))return e;return null}(e);default:return null}return null}},function(e,t,n){"use strict";var i=n(0),r=n.n(i);function a(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var o=function(){function e(t,n,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$interval=n,this.$timeout=i,this.interval=null,this.processing=this.state,this.onStateChange()}var t,n,i;return t=e,(n=[{key:"$onChanges",value:function(e){e.state&&this.onStateChange(),e.state&&this.onSizeChange()}},{key:"onStateChange",value:function(){s(this.processing)&&(this.processing=null,this.startProcess())}},{key:"onSizeChange",value:function(){switch(this.stopProcess(),this.startProcess(),this.size||(this.size="sm"),this.size){case"xs":this.radius="11";break;case"sm":this.radius="22";break;case"xl":this.radius="61";break;default:this.radius="46%"}}},{key:"startProcess",value:function(){var e=this;this.interval||(this.interval=this.$interval(function(){e.processing=e.state,s(e.state)&&(e.stopProcess(),e.notifyConsumers())},1500))}},{key:"stopProcess",value:function(){this.interval&&(this.$interval.cancel(this.interval),this.interval=null)}},{key:"notifyConsumers",value:function(){this.onStop&&(0===this.state?this.onStop():this.$timeout(this.onStop,1800))}}])&&a(t.prototype,n),i&&a(t,i),e}();function s(e){return-1===e||0===e||1===e}o.$inject=["$scope","$interval","$timeout"];var l=o,c=n(34),u={controller:l,template:n.n(c).a,bindings:{state:"<",size:"@",onStop:"&",promise:"<"}};t.a=r.a.module("tw.styleguide.loading.process",[]).component("twProcess",u).name},function(e,t,n){"use strict";var i=n(0),r=n.n(i);function a(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var o=function(){function e(t,n,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var r=n.controller("ngModel");this.dom=i,this.$element=n,this.element=n[0],this.checked=this.isChecked(),this.label=this.dom.getClosestParentByTagName(this.element,"label"),n[0].addEventListener("blur",function(){r.$setTouched()}),this.addWatchers(t,this.element)}var t,n,i;return t=e,(n=[{key:"isChecked",value:function(){return this.ngValue&&this.ngModel===this.ngValue||this.value===this.ngModel}},{key:"buttonClick",value:function(){this.ngDisabled||(this.checked=!0,this.$ngModel.$setViewValue(this.ngValue||this.value))}},{key:"buttonFocus",value:function(){this.label&&this.label.classList.add("focus"),this.element.dispatchEvent(new CustomEvent("focus"))}},{key:"buttonBlur",value:function(){this.label&&this.label.classList.remove("focus"),this.element.dispatchEvent(new CustomEvent("blur"))}},{key:"hiddenInputChange",value:function(){this.$ngModel.$setViewValue(this.ngValue||this.value)}},{key:"addWatchers",value:function(e,t){var n=this;e.$watch("$ctrl.ngModel",function(e,t){e!==t&&n.$ngModel.$setDirty(),n.checked=n.isChecked()}),e.$watch("$ctrl.ngDisabled",function(e,i){var r=n.dom.getClosestParentByClassName(t,"radio");r&&(e&&!i?(r.classList.add("disabled"),r.setAttribute("disabled","true")):!e&&i&&(r.classList.remove("disabled"),r.removeAttribute("disabled")))})}}])&&a(t.prototype,n),i&&a(t,i),e}();o.$inject=["$scope","$element","TwDomService"];var s=o,l=n(27),c={controller:s,template:n.n(l).a,require:{$ngModel:"ngModel"},bindings:{name:"@",value:"@",ngModel:"=",ngValue:"<",ngRequired:"<",ngDisabled:"<",ngChange:"&"}},u=n(2),d=n(4);t.a=r.a.module("tw.styleguide.forms.radio",[u.a,d.a]).component("twRadio",c).name},function(e,t,n){"use strict";var i=n(76),r=n(54).decodeHTML,a="&(?:#x[a-f0-9]{1,6}|#[0-9]{1,7}|[a-z][a-z0-9]{1,31});",o="<[A-Za-z][A-Za-z0-9-]*(?:\\s+[a-zA-Z_:][a-zA-Z0-9:._-]*(?:\\s*=\\s*(?:[^\"'=<>`\\x00-\\x20]+|'[^']*'|\"[^\"]*\"))?)*\\s*/?>",s="</[A-Za-z][A-Za-z0-9-]*\\s*[>]",l=new RegExp("^(?:<[A-Za-z][A-Za-z0-9-]*(?:\\s+[a-zA-Z_:][a-zA-Z0-9:._-]*(?:\\s*=\\s*(?:[^\"'=<>`\\x00-\\x20]+|'[^']*'|\"[^\"]*\"))?)*\\s*/?>|</[A-Za-z][A-Za-z0-9-]*\\s*[>]|\x3c!----\x3e|\x3c!--(?:-?[^>-])(?:-?[^-])*--\x3e|[<][?].*?[?][>]|<![A-Z]+\\s+[^>]*>|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>)","i"),c=/[\\&]/,u="[!\"#$%&'()*+,./:;<=>?@[\\\\\\]^_`{|}~-]",d=new RegExp("\\\\"+u+"|"+a,"gi"),p=new RegExp('[&<>"]',"g"),h=function(e){return 92===e.charCodeAt(0)?e.charAt(1):r(e)},f=function(e){switch(e){case"&":return"&amp;";case"<":return"&lt;";case">":return"&gt;";case'"':return"&quot;";default:return e}};e.exports={unescapeString:function(e){return c.test(e)?e.replace(d,h):e},normalizeURI:function(e){try{return i(e)}catch(t){return e}},escapeXml:function(e){return p.test(e)?e.replace(p,f):e},reHtmlTag:l,OPENTAG:o,CLOSETAG:s,ENTITY:a,ESCAPABLE:u}},function(e,t,n){"use strict";var i=n(0),r=n.n(i);function a(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var o=function(){function e(t,n,i,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.$attrs=i,this.FileValidationService=r,this.isProcessing=!1}var t,n,i;return t=e,(n=[{key:"$onChanges",value:function(e){e.source&&(this.isLiveCameraUpload="CAMERA_ONLY"===e.source.currentValue)}},{key:"onFileCapture",value:function(e){if(!this.ngDisabled){if(!e)throw new Error("Could not retrieve file");this.file=e}}},{key:"reset",value:function(){this.isProcessing=!1,this.isDone=!1,this.clearHtmlInput(),this.setNgModel(null),this.onCancel&&this.onCancel()}},{key:"clearHtmlInput",value:function(){this.$element[0].querySelectorAll("input")&&this.$element[0].querySelectorAll("input").forEach(function(e){e.value=null})}},{key:"setNgModel",value:function(e){if(void 0!==this.$attrs.ngModel){var t=this.$element.controller("ngModel");if(!t.$setViewValue)return;t.$setViewValue(e)}}},{key:"isDropEligible",value:function(){return"CAMERA_ONLY"!==this.source}},{key:"onDragEnter",value:function(){this.isDroppable=this.isDropEligible()}},{key:"onDragLeave",value:function(){this.isDroppable=!1}},{key:"onDrop",value:function(e){this.isDroppable=!1,this.onFileCapture(e[0])}},{key:"onProcessStart",value:function(e){this.isDone=!1,this.isProcessing=!0,this.onStart&&this.onStart({file:e})}},{key:"onProcessSuccess",value:function(e,t,n,i){this.isDone=!0,this.isProcessing=!1,this.dataUrl=t,this.isImage=this.FileValidationService.isImage(e),this.httpOptions&&n?this.setNgModel(n):this.setNgModel(t),this.onSuccess(e,i)}},{key:"onProcessFailure",value:function(e){this.onFailure&&this.onFailure(e)}}])&&a(t.prototype,n),i&&a(t,i),e}();o.$inject=["$element","$scope","$attrs","FileValidationService"];var s=o,l=n(29),c=n.n(l),u=(n(49),{controller:s,template:c.a,bindings:{ngDisabled:"<",ngModel:"=",ngChange:"&",name:"@",icon:"@",helpImage:"@",label:"@",placeholder:"@",buttonText:"@",cancelText:"@",droppingText:"@",processingText:"@",successText:"@",failureText:"@",noCameraText:"@",noCameraMessage:"@",tooLargeMessage:"@",validationMessages:"<",size:"@",accept:"@",httpOptions:"<",onStart:"=",onSuccess:"=",onFailure:"=",onCancel:"=",maxSize:"<",source:"<",cameraGuidelines:"<",description:"@",instructions:"@"}}),d=n(30),p=n.n(d);function h(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var f=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.showLiveCaptureScreen=!1,this.cameraFailed=!1}var t,n,i;return t=e,(n=[{key:"$onChanges",value:function(e){(e.icon||e.isLiveCameraUpload)&&((e.icon||{}).currentValue?this.viewIcon=e.icon.currentValue:this.viewIcon=(e.isLiveCameraUpload||{}).currentValue?"camera":"upload")}},{key:"onCameraCancel",value:function(){this.showLiveCaptureScreen=!1}},{key:"onCameraError",value:function(){this.showLiveCaptureScreen=!1,this.cameraFailed=!0}},{key:"onCameraCapture",value:function(e){this.showLiveCaptureScreen=!1,this.onFileCapture({file:e})}},{key:"onCameraButtonClick",value:function(){this.showLiveCaptureScreen=!0,this.cameraFailed=!1}},{key:"onButtonCapture",value:function(e){var t=e[0];this.onFileCapture({file:t})}}])&&h(t.prototype,n),i&&h(t,i),e}();f.$inject=["$element"];var m=f,g={template:p.a,controller:m,bindings:{label:"<",icon:"<",accept:"<",buttonText:"<",ngDisabled:"<",placeholder:"<",inputFile:"<",helpImage:"<",noCameraText:"<",noCameraMessage:"<",isLiveCameraUpload:"<",cameraGuidelines:"<",onFileCapture:"&"}},v=r.a.module("tw.styleguide.forms.upload.capture",[]).component("twUploadCapture",g).name,b=n(31),y={template:n.n(b).a,bindings:{droppingText:"<"}},w=r.a.module("tw.styleguide.forms.upload.dropping",[]).component("twUploadDropping",y).name;function $(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var C=function(){function e(t,n,i,r,a){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$timeout=t,this.AsyncFileReader=n,this.AsyncFileSaver=i,this.AsyncTasksConfig=r,this.FileValidation=a,this.processingState=null}var t,n,i;return t=e,i=[{key:"parseFileName",value:function(e){var t=e.match(/^data:[^/]+\/([^;]+);base64,/);return t?"file.".concat(t[1]):void 0}}],(n=[{key:"$onChanges",value:function(e){e.file&&e.file.currentValue&&this.onFileCapture(e.file.currentValue)}},{key:"onFileCapture",value:function(t){var n=this;if(!this.ngDisabled){if(!t)throw new Error("Could not retrieve file");if(this.reset(),this.file=t,this.isProcessing=!0,this.processingState=null,this.onStart({file:t}),!this.FileValidation.isSmallerThanMaxSize(t,this.maxSize))return this.validationMessages=[this.tooLargeMessage],void x({status:413,data:{message:this.tooLargeMessage}},null,this);this.httpOptions?this.asyncFileRead(t).then(function(i){return n.asyncFileSave(t,e.parseFileName(i)).then(function(e){return k(e,i,n)})}).catch(function(e){return x(e,null,n)}):this.asyncFileRead(t).then(function(e){return k(null,e,n)}).catch(function(e){return x(e,null,n)})}}},{key:"asyncFileSave",value:function(e,t){var n=this.AsyncTasksConfig.extendHttpOptions(this.httpOptions);return this.AsyncFileSaver.save(n.param||this.name,e,n,t)}},{key:"asyncFileRead",value:function(e){return this.AsyncFileReader.read(e)}},{key:"reset",value:function(){this.processingState=0,this.isProcessing=!1,this.isSuccess=!1,this.isError=!1}},{key:"onRemove",value:function(){this.onCancel()}}])&&$(t.prototype,n),i&&$(t,i),e}();function k(e,t,n){n.processingState=1;var i=null,r=n.file,a=n.httpOptions;return a&&a.idProperty&&e&&e.data&&e.data[a.idProperty]&&(i=e.data[a.idProperty]),n.$timeout(function(){n.isProcessing=!1,n.isSuccess=!0,n.onSuccess({file:r,dataUrl:t,id:i,response:e})},3600),t}function x(e,t,n){return n.processingState=-1,n.responseErrorExtractor&&(n.errorMessage=n.responseErrorExtractor({error:e})||n.errorMessage),n.$timeout(function(){n.isProcessing=!1,n.isError=!0},3600),n.$timeout(function(){n.onFailure({error:e})},3600),e}C.$inject=["$timeout","AsyncFileReader","AsyncFileSaver","AsyncTasksConfig","FileValidationService"];var A=C,E=n(32),D={name:"<",file:"<",onStart:"&",onSuccess:"&",onFailure:"&",onCancel:"&",responseErrorExtractor:"&",maxSize:"<",accept:"<",httpOptions:"<",processingMessage:"<",successMessage:"<",errorMessage:"<",tooLargeMessage:"<",validationMessages:"<",cancelText:"<"},S={controller:A,template:n.n(E).a,bindings:D},M=n(33),F={controller:A,template:n.n(M).a,bindings:D};function T(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var L=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$q=t}var t,n,i;return t=e,(n=[{key:"read",value:function(e){var t=new FileReader,n=this.$q.defer();return t.onload=function(e){n.resolve(e.target.result)},t.onerror=function(e){n.reject(e)},t.readAsDataURL(e),n.promise}}])&&T(t.prototype,n),i&&T(t,i),e}();L.$inject=["$q"];var O=angular.module("tw.styleguide.forms.upload.file-reader",[]).service("AsyncFileReader",L).name;function q(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var B=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$http=t}var t,n,i;return t=e,(n=[{key:"save",value:function(e,t,n,i){if(!n)throw new Error("You must supply httpOptions");var r=new FormData,a=n.param||e;r.append(a,t,i);var o=function(e){var t=angular.copy(e);if(!t.url)throw new Error("You must supply a URL to post image data asynchronously");t.headers||(t.headers={});return t.headers["Content-Type"]=void 0,t.transformRequest=angular.identity,t}(n);return delete o.method,this.$http.post(o.url,r,o)}}])&&q(t.prototype,n),i&&q(t,i),e}();B.$inject=["$http"];var N=angular.module("tw.styleguide.forms.upload.file-saver",[]).service("AsyncFileSaver",B).name;function P(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var j=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,i;return t=e,(n=[{key:"isImage",value:function(e){return e.type&&e.type.indexOf("image")>-1}},{key:"isSmallerThanMaxSize",value:function(e,t){return!r.a.isNumber(t)||e.size<=t}}])&&P(t.prototype,n),i&&P(t,i),e}(),R=r.a.module("tw.styleguide.forms.upload.validation-service",[]).service("FileValidationService",j).name,U=n(22),V=n(11),_=r.a.module("tw.styleguide.forms.upload.processing",[U.a,O,N,R,V.a]).component("twUploadProcessing",S).component("twUploadProcessingMini",F).name,I=n(35),G=n.n(I);function z(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var H=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.FileValidationService=n}var t,n,i;return t=e,(n=[{key:"$onChanges",value:function(e){e.file&&e.file.currentValue&&(this.fileName=e.file.currentValue.name)}},{key:"onManualReupload",value:function(){var e=this.$element[0].querySelector(".tw-droppable-input-reupload").files[0];this.onFileCapture(e)}}])&&z(t.prototype,n),i&&z(t,i),e}();H.$inject=["$element","FileValidationService"];var Y=H,W={template:G.a,controller:Y,bindings:{label:"<",file:"<",data:"<",isImage:"<",successMessage:"<",cancelText:"<",onCancel:"&"}},K=r.a.module("tw.styleguide.forms.upload.success",[]).component("twUploadSuccess",W).name,Z=n(5),X=n.n(Z);function J(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var Q=function(){function e(t,n,i,r,a,o,s,l){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.$attrs=o,this.$scope=n,this.$log=s,this.$timeout=l,this.$q=a,this.$window=i,this.$document=r}var t,n,i;return t=e,(n=[{key:"$onInit",value:function(){return this.guidelines=this.guidelines||{},this.mode="loading",this.mediaStream=null,this.overlaySquareLength=0,this.sensorWidth=0,void 0===this.$window.navigator.mediaDevices?(this.$log.error("navigator.mediaDevices not accessible on this browser"),void this.onError()):void 0===this.$window.navigator.mediaDevices.getUserMedia?(this.$log.error("mediaDevices.getUserMedia is not implemented on this browser"),void this.onError()):(this.previousBodyOverflowStyle=this.$document[0].body.style.overflow,this.$document[0].body.style.overflow="hidden",this.calculateWidthsResizeListener=this.calculateWidths.bind(this),this.$window.addEventListener("resize",this.calculateWidthsResizeListener),void this.startLiveCamFlow())}},{key:"$onDestroy",value:function(){this.$window.removeEventListener("resize",this.calculateWidthsResizeListener),this.$document[0].body.style.overflow=this.previousBodyOverflowStyle}},{key:"calculateWidths",value:function(){var e=this;this.$timeout(function(){var t=e.findContainer(),n=t.clientWidth,i=t.clientHeight,r=e.findViewfinder(),a=r.videoWidth,o=r.videoHeight;if(a&&o){var s=Math.min(n/a,i/o),l=s*a,c=s*o;e.sensorWidth=l,e.overlaySquareLength=.9*Math.min(l,c)}else e.$timeout(e.calculateWidths.bind(e),100)})}},{key:"startLiveCamFlow",value:function(){var e=this;this.$log.debug("----- Live cam flow start -----"),this.tryAcquireMediaStream().then(function(t){return e.mediaStream=t,e.tryAcquireFullScreen().catch(function(t){e.$log.warn(t)}).finally(function(){e.assignStreamToVideo()})}).catch(function(t){e.$log.error(t),e.closeVideoStream(),e.onError()})}},{key:"tryAcquireFullScreen",value:function(){if(X.a.isEnabled){if(!X.a.isFullscreen){var e=this.$q.defer();return this.$timeout(e.reject.bind(null,"Fullscreen request timed out."),1500),X.a.on("error",e.reject),X.a.request(this.container).then(e.resolve,e.reject),e.promise}return this.$q.resolve()}return this.$q.reject("Switching to full screen is not enabled.")}},{key:"assignStreamToVideo",value:function(){var e=this.findViewfinder();e.srcObject!==this.mediaStream&&(e.srcObject=this.mediaStream),e.play().then(this.calculateWidths.bind(this)),this.mode="capture"}},{key:"tryAcquireMediaStream",value:function(){return this.mediaStream?this.$q.resolve(this.mediaStream):(this.guidelines.direction&&-1!==["environment","user"].indexOf(this.guidelines.direction.toLowerCase())||(this.guidelines.direction="environment"),this.cameraConstraints={video:{width:{ideal:1600},height:{ideal:1600},facingMode:{ideal:this.guidelines.direction.toLowerCase()}},audio:!1},this.$window.navigator.mediaDevices.getUserMedia(this.cameraConstraints))}},{key:"closeVideoStream",value:function(){X.a.isEnabled&&X.a.exit(),this.findViewfinder().srcObject=null,this.mediaStream&&(this.mediaStream.getTracks().forEach(function(e){return e.stop()}),this.mediaStream=null)}},{key:"onCancelBtnClick",value:function(){this.closeVideoStream(),this.onCancel()}},{key:"onCaptureBtnClick",value:function(){var e=this.findViewfinder(),t=this.findSensor();e.pause(),t.width=e.videoWidth,t.height=e.videoHeight,t.getContext("2d").drawImage(e,0,0),this.mode="confirm"}},{key:"onRecaptureBtnClick",value:function(){this.findViewfinder().play(),this.mode="capture"}},{key:"onUploadBtnClick",value:function(){var e;this.findSensor().toBlob((e=this,function(t){X.a.isEnabled&&X.a.exit(),e.showVideoPreview=!1,e.closeVideoStream(),e.$scope.$applyAsync(function(){e.onCapture({file:t})})}),"image/jpeg",.92)}},{key:"setNgModel",value:function(e){if(void 0!==this.$attrs.ngModel){var t=this.$element.controller("ngModel");if(!t.$setViewValue)return;t.$setViewValue(e)}}},{key:"findContainer",value:function(){return this.$element[0].querySelector("#camera")}},{key:"findViewfinder",value:function(){return this.$element[0].querySelector("#cameraViewfinder")}},{key:"findSensor",value:function(){return this.$element[0].querySelector("#cameraSensor")}}])&&J(t.prototype,n),i&&J(t,i),e}();Q.$inject=["$element","$scope","$window","$document","$q","$attrs","$log","$timeout"];var ee=Q,te=n(36),ne=n.n(te),ie=(n(52),{controller:ee,template:ne.a,bindings:{guidelines:"<",onCancel:"&",onCapture:"&",onError:"&",testMode:"@"}}),re=r.a.module("tw.styleguide.forms.upload.camera-capture",[]).component("twCameraCapture",ie).name,ae=n(37),oe=n.n(ae);function se(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var le=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t}var t,n,i;return t=e,(n=[{key:"onButtonClick",value:function(){this.onClick&&this.onClick()}},{key:"onButtonCapture",value:function(){var e=this.$element[0].querySelector(".tw-droppable-input").files;this.onCapture({files:e})}}])&&se(t.prototype,n),i&&se(t,i),e}();le.$inject=["$element"];var ce=le,ue={template:oe.a,controller:ce,bindings:{name:"<",label:"<",isSecondary:"<",small:"<",block:"<",accept:"<",model:"<",multiple:"<",disabled:"<",onClick:"&",onCapture:"&"}},de=r.a.module("tw.styleguide.forms.upload.button",[]).component("twUploadButton",ue).name,pe=n(38),he=n.n(pe);function fe(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var me=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,n,i;return t=e,(n=[{key:"onButtonClick",value:function(){this.onClick&&this.onClick()}}])&&fe(t.prototype,n),i&&fe(t,i),e}(),ge={template:he.a,controller:me,bindings:{label:"<",disabled:"<",onClick:"&",onCapture:"&"}},ve=r.a.module("tw.styleguide.forms.upload.camera-button",[]).component("twCameraButton",ge).name;var be=function e(t){var n=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),t[0].addEventListener("change",function(){n.onUserInput&&"function"==typeof n.onUserInput&&n.onUserInput()})};be.$inject=["$element"];var ye=function(){return{restrict:"A",controller:be,controllerAs:"$ctrl",bindToController:!0,scope:{onUserInput:"&"}}};function we(e){return function(e){if(Array.isArray(e))return $e(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return $e(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);"Object"===n&&e.constructor&&(n=e.constructor.name);if("Map"===n||"Set"===n)return Array.from(n);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return $e(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function $e(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,i=new Array(t);n<t;n++)i[n]=e[n];return i}function Ce(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var ke=function(){function e(t,n,i,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.$attrs=i,this.files=[],this.model=[],this.$timeout=r}var t,n,i;return t=e,(n=[{key:"$onChanges",value:function(e){e.icon&&(this.viewIcon=e.icon.currentValue?e.icon.currentValue:"upload")}},{key:"onFileCapture",value:function(e){var t=this;if(!this.ngDisabled){if(!e)throw new Error("Could not retrieve file");0!==e.length&&(this.onStart&&this.areAllFilesProcessed()&&this.onStart(),this.files=[].concat(we(this.files),we(e)),this.$timeout(function(){var e=t.$element[0].querySelector(".processing-list");e&&(e.scrollTop=e.scrollHeight)},600))}}},{key:"onProcessSuccess",value:function(e,t,n,i){var r=this.httpOptions?"id":"dataUrl";this.files[e][r]=this.httpOptions?i:n;var a=this.files.map(function(e){return e[r]}).filter(function(e){return!!e});this.setNgModel(a),this.onFinish&&this.areAllFilesProcessed()&&this.onFinish()}},{key:"areAllFilesProcessed",value:function(){var e=this.httpOptions?"id":"dataUrl";return!this.files.some(function(t){return null==t[e]&&null==t.error})}},{key:"onProcessFailure",value:function(e,t,n){this.files[e].error=n,this.onFailure&&this.onFailure({error:n}),this.onFinish&&this.areAllFilesProcessed()&&this.onFinish()}},{key:"onProcessCancel",value:function(e){var t=this.httpOptions?"id":"dataUrl";this.files.splice(e,1);var n=this.files.map(function(e){return e[t]}).filter(function(e){return!!e});this.setNgModel(n)}},{key:"onDragEnter",value:function(){this.isDroppable=!0}},{key:"onDragLeave",value:function(){this.isDroppable=!1}},{key:"onDrop",value:function(e){this.isDroppable=!1,this.onFileCapture(e)}},{key:"reset",value:function(){this.setNgModel(null)}},{key:"setNgModel",value:function(e){if(void 0!==this.$attrs.ngModel){var t=this.$element.controller("ngModel");if(!t.$setViewValue)return;t.$setViewValue(e)}}}])&&Ce(t.prototype,n),i&&Ce(t,i),e}();ke.$inject=["$element","$scope","$attrs","$timeout"];var xe=ke,Ae=n(39),Ee={controller:xe,template:n.n(Ae).a,bindings:{ngDisabled:"<",ngModel:"=",ngChange:"&",name:"@",label:"@",placeholder:"@",icon:"@",buttonText:"@",addMoreButtonText:"@",droppingText:"@",processingText:"@",successText:"@",failureText:"@",tooLargeMessage:"@",validationMessages:"<",onStart:"&",onFinish:"&",onFailure:"&",responseErrorExtractor:"&",accept:"@",httpOptions:"<",maxSize:"<"}};function De(e,t,n){return{restrict:"A",controller:function(){},link:function(i,r,a){i.counter=0,r[0].addEventListener("drop",function(r){var o=e(a.twDrop),s=function(){o(i,{files:r.dataTransfer.files})};if(t.$$phase)try{s()}catch(e){n(e)}else i.$apply(s);r.preventDefault(),i.counter=0},!1),r[0].addEventListener("dragover",function(e){e.preventDefault()},!1)}}}De.$inject=["$parse","$rootScope","$exceptionHandler"];var Se=De;function Me(e,t){return{restrict:"A",require:"twDrop",link:function(n,i,r){i[0].addEventListener("dragenter",function(i){var a=e(r.twDragEnter);if(n.counter++,n.counter>=1){var o=function(){a(n,{$event:i})};t.$$phase?n.$evalAsync(o):n.$apply(o)}i.preventDefault()},!1)}}}Me.$inject=["$parse","$rootScope"];var Fe=Me;function Te(e,t){return{restrict:"A",require:"twDrop",link:function(n,i,r){i[0].addEventListener("dragleave",function(i){var a=e(r.twDragLeave);if(n.counter--,n.counter<=0){var o=function(){a(n,{$event:i})};t.$$phase?n.$evalAsync(o):n.$apply(o)}i.preventDefault()},!1)}}}Te.$inject=["$parse","$rootScope"];var Le=Te,Oe=r.a.module("tw.styleguide.forms.drag-and-drop",[]).directive("twDrop",Se).directive("twDragEnter",Fe).directive("twDragLeave",Le).name,qe=r.a.module("tw.styleguide.forms.upload.multi",[_,Oe]).component("twMultiUpload",Ee).name;t.a=r.a.module("tw.styleguide.forms.upload",[v,w,_,K,re,de,ve,qe,Oe]).directive("twFileInput",ye).component("twUpload",u).name},function(e,t,n){"use strict";var i=n(0),r=n.n(i);function a(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var o=function(){function e(t,n,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var r=n.controller("ngModel");this.dom=i,this.$element=n,this.element=n[0],this.addLabelHandler(),this.addWatchers(t,n,r),this.checkboxContainer=this.dom.getClosestParentByClassName(this.element,"checkbox"),this.label=!!this.checkboxContainer&&this.checkboxContainer.getElementsByTagName("label")[0]}var t,n,i;return t=e,i=[{key:"hiddenClick",value:function(e){e.stopPropagation()}}],(n=[{key:"$onInit",value:function(){this.checked=this.isChecked()}},{key:"isChecked",value:function(){return this.ngTrueValue&&this.ngTrueValue===this.ngModel||!this.ngTrueValue&&this.ngModel||!1}},{key:"buttonClick",value:function(e){this.checked?(this.checked=!1,this.$ngModel.$setViewValue(this.ngFalseValue||!1)):(this.checked=!0,this.$ngModel.$setViewValue(this.ngTrueValue||!0)),this.$ngModel.$setTouched(),e&&e.stopPropagation(),s(this.checked,this.$element,this.$ngModel,this.ngRequired,this.dom)}},{key:"buttonFocus",value:function(){this.label&&this.label.classList.add("focus"),this.element.dispatchEvent(new CustomEvent("focus"))}},{key:"buttonBlur",value:function(){this.label&&this.label.classList.remove("focus"),this.element.dispatchEvent(new CustomEvent("blur")),this.$ngModel.$setTouched(),s(this.checked,this.$element,this.$ngModel,this.ngRequired,this.dom)}},{key:"addLabelHandler",value:function(){var e=this,t=this.dom.getClosestParentByTagName(this.element,"label");t&&t.addEventListener("click",function(n){t.getAttribute("disabled")||e.element.getElementsByTagName("button")[0].dispatchEvent(new CustomEvent("click"));n.preventDefault(),n.stopPropagation()})}},{key:"addWatchers",value:function(e,t,n){var i=this;e.$watch("$ctrl.ngModel",function(e,r){e!==r&&(n.$setDirty(),s(i.checked,t,n,i.ngRequired,i.dom),i.checked=i.isChecked())}),e.$watch("$ctrl.ngDisabled",function(e,n){var r=t[0],a=i.dom.getClosestParentByClassName(r,"checkbox"),o=i.dom.getClosestParentByTagName(r,"label");a&&(e&&!n?(a.classList.add("disabled"),o.setAttribute("disabled","true")):!e&&n&&(a.classList.remove("disabled"),o.removeAttribute("disabled")))}),e.$watch("$ctrl.ngRequired",function(e,r){e!==r&&s(i.checked,t,n,i.ngRequired,i.dom)})}}])&&a(t.prototype,n),i&&a(t,i),e}();function s(e,t,n,i,r){if(n.$touched){var a=t[0],o=a.getElementsByClassName("tw-checkbox-button")[0],s=r.getClosestParentByClassName(a,"checkbox"),l=r.getClosestParentByClassName(a,"form-group");!e&&i?(n.$setValidity("required",!1),o.classList.add("has-error"),s&&s.classList.add("has-error"),l&&l.classList.add("has-error")):(n.$setValidity("required",!0),o.classList.remove("has-error"),s&&s.classList.remove("has-error"),l&&l.classList.remove("has-error"))}}o.$inject=["$scope","$element","TwDomService"];var l=o,c=n(25),u={controller:l,template:n.n(c).a,require:{$ngModel:"ngModel"},bindings:{name:"@",ngModel:"=",ngTrueValue:"<",ngFalseValue:"<",ngRequired:"<",ngDisabled:"<"}},d=n(2),p=n(4);t.a=r.a.module("tw.styleguide.forms.checkbox",[d.a,p.a]).component("twCheckbox",u).name},function(e,t,n){"use strict";var i=n(0),r=n.n(i);function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,i)}return n}function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var l=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$ngModelController=t.controller("ngModel"),this.dom=n,this.$element=t,this.internalModel=[],this.internalOptions=[]}var t,n,i;return t=e,(n=[{key:"$onChanges",value:function(e){e.options&&this.onExternalOptionsChange(e.options.currentValue),e.ngModel&&this.onExternalModelChange(e.ngModel.currentValue),e.ngRequired&&this.validate()}},{key:"onExternalOptionsChange",value:function(e){this.internalOptions=c(this.ngModel,e),this.internalModel=u(this.internalOptions)}},{key:"onExternalModelChange",value:function(e){this.internalOptions=c(e,this.internalOptions),this.internalModel=u(this.internalOptions),this.validate()}},{key:"onInternalModelChange",value:function(){this.internalModel=u(this.internalOptions),this.$ngModelController.$setViewValue(this.internalModel),this.$ngModelController.$setTouched(),this.$ngModelController.$setDirty()}},{key:"isCheckboxRequired",value:function(){return 0===this.internalModel.length&&this.ngRequired}},{key:"validate",value:function(){if(this.$ngModelController.$touched){var e=this.$element[0],t=this.dom.getClosestParentByClassName(e,"form-group"),n=this.internalModel&&this.internalModel.length>0,i=this.ngRequired;!n&&i?(this.$ngModelController.$setValidity("required",!1),t&&t.classList.add("has-error")):(this.$ngModelController.$setValidity("required",!0),t&&t.classList.remove("has-error"))}}}])&&s(t.prototype,n),i&&s(t,i),e}();function c(e,t){return t.map(function(t){return function(e,t){var n=function(e,t){return!!(e&&e.indexOf&&e.indexOf(t.value)>=0)}(t,e);return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach(function(t){o(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}({},e,{selected:n})}(t,e)})}function u(e){return e.filter(function(e){return e.selected}).map(function(e){return e.value})}l.$inject=["$element","TwDomService"];var d=l,p=n(26),h={controller:d,template:n.n(p).a,require:{$ngModel:"ngModel"},bindings:{name:"@",ngChange:"&",ngModel:"<",ngRequired:"<",ngDisabled:"<",options:"<"}},f=n(2),m=n(4);t.a=r.a.module("tw.styleguide.forms.checkbox-group",[f.a,m.a]).component("twCheckboxGroup",h).name},function(e,t,n){"use strict";var i=n(0),r=n.n(i);function a(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var o=function(){function e(t,n,i,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var a=t.controller("ngModel");if(this.DateService=r,this.initialisedWithDate=!1,this.ngModel)this.applyDateModelIfValidOrThrowError(),this.initialisedWithDate=!0;else{if(this.modelType){if(this.modelType!==l&&this.modelType!==c)throw new Error("Invalid modelType, should be ".concat(l," or ").concat(c));this.dateModelType=this.modelType}else this.dateModelType=c;this.day=null,this.month=0,this.year=null}this.setDateRequired(),this.setDateDisabled(),this.setDateLocale(),this.setMonths(),this.addValidators(a),this.addWatchers(i,a),function(e){var t=e[0],n=t.querySelector("input[name=day]"),i=t.querySelector("input[name=year]");n.addEventListener("focus",function(){t.dispatchEvent(new CustomEvent("focus"))}),i.addEventListener("focus",function(){t.dispatchEvent(new CustomEvent("focus"))})}(t),function(e,t){var n,i=e[0],r=i.querySelector("input[name=day]"),a=i.querySelector("input[name=year]");r.addEventListener("blur",function(){!0,n&&(t.$setTouched(),i.dispatchEvent(new CustomEvent("blur")))}),a.addEventListener("blur",function(){n=!0,t.$setTouched(),i.dispatchEvent(new CustomEvent("blur"))})}(t,a)}var t,n,i;return t=e,(n=[{key:"applyDateModelIfValidOrThrowError",value:function(){if(!d(this.ngModel))throw new Error("date model passed should either be instance of Date or valid ISO8601 string");this.dateModelType="string"==typeof this.ngModel?l:c,this.explodeDateModel(this.ngModel)}},{key:"setMonths",value:function(){this.dateMonths=this.getMonthsBasedOnIntlSupportForLocale()}},{key:"setDateRequired",value:function(){this.dateRequired=void 0!==this.ngRequired?this.ngRequired:void 0!==this.required}},{key:"setDateDisabled",value:function(){this.dateDisabled=void 0!==this.ngDisabled?this.ngDisabled:void 0!==this.disabled}},{key:"setDateLocale",value:function(){this.locale||(this.locale=s),this.monthBeforeDay=this.DateService.isMonthBeforeDay(this.locale)}},{key:"explodeDateModel",value:function(e){var t="string"==typeof e?new Date(e):e;this.day=t.getUTCDate(),this.month=t.getUTCMonth(),this.year=t.getUTCFullYear()}},{key:"addValidators",value:function(e){var t=this;e.$validators.min=function(e){var n=h(t.ngMin,t.min),i=f(e);return!n||!i||i>=n},e.$validators.max=function(e){var n=h(t.ngMax,t.max),i=f(e);return!n||!i||i<=n}}},{key:"addWatchers",value:function(e,t){var n=this;e.$watch("$ctrl.day",function(e,i){e!==i&&n.initialisedWithDate&&t.$setDirty()}),e.$watch("$ctrl.month",function(e,i){e!==i&&(n.adjustLastDay(),t.$setTouched(),n.initialisedWithDate&&t.$setDirty())}),e.$watch("$ctrl.year",function(e,i){e!==i&&n.initialisedWithDate&&t.$setDirty()}),e.$watch("$ctrl.ngModel",function(e,i){e!==i&&d(n.ngModel)&&(t.$setDirty(),n.explodeDateModel(n.ngModel))}),e.$watch("$ctrl.ngRequired",function(e,t){e!==t&&n.setDateRequired()}),e.$watch("$ctrl.ngDisabled",function(e,t){e!==t&&n.setDateDisabled()}),e.$watch("$ctrl.locale",function(e,t){e!==t&&(n.setDateLocale(),n.setMonths())})}},{key:"getMonthsBasedOnIntlSupportForLocale",value:function(){return function(e){return e.map(function(e,t){return{value:t,label:e}})}(this.DateService.getMonthNamesForLocale(this.locale))}},{key:"combineDate",value:function(){return this.DateService.getUTCDateFromParts(Number(this.year),Number(this.month),Number(this.day))}},{key:"updateDateModelAndValidationClasses",value:function(){if(this.adjustLastDay(),e=this.year,t=this.month,n=this.day,u(e)&&u(n)&&(u(t)||"string"==typeof(i=t)&&!isNaN(Number(i)))){var e,t,n,i,r=this.combineDate();if(this.dateModelType===l){var a=r.toISOString(),o=a.substring(0,a.indexOf("T"));this.$ngModel.$setViewValue(o)}else this.$ngModel.$setViewValue(r)}else this.$ngModel.$setViewValue(null)}},{key:"adjustLastDay",value:function(){var e=Number(this.day),t=Number(this.month),n=Number(this.year),i=this.DateService.getLastDayOfMonth(n,t);e>i&&(this.day=parseInt(i,10))}}])&&a(t.prototype,n),i&&a(t,i),e}(),s="en",l="string",c="object";function u(e){return"number"==typeof e}function d(e){return p(e)||"string"==typeof(t=e)&&p(new Date(t));var t}function p(e){return"[object Date]"===Object.prototype.toString.call(e)&&!isNaN(e.getTime())}function h(e,t){var n=e||t;return!!n&&(!!p(n="string"==typeof n?new Date(n):n)&&n)}function f(e){return"string"==typeof e?new Date(e):e}o.$inject=["$element","$log","$scope","TwDateService"];var m=o,g=n(40),v={controller:m,template:n.n(g).a,require:{$ngModel:"ngModel"},bindings:{ngModel:"=",required:"@",ngRequired:"<",disabled:"@",ngDisabled:"<",locale:"@",twLocale:"<",min:"@",ngMin:"<",max:"@",ngMax:"<",modelType:"@"}},b=n(6),y=n(18),w=n(8),$=n(4);t.a=r.a.module("tw.styleguide.forms.date",[b.a,y.a,w.a,$.a]).component("twDate",v).name},function(e,t,n){"use strict";var i=n(0),r=n.n(i),a=n(41),o={template:n.n(a).a,bindings:{date:"<",locale:"<",format:"<"}};function s(e){return function(t,n,i){if(!t)return t;var r=t;if("string"==typeof r&&(r=e.getUTCDateFromIso(r),new RegExp("^[0-9]{4}-[0-9]{2}-[0-9]{2}$").test(t)))return e.getUTCDateString(r,n,i);return r?e.getLocaleDateString(r,n,i):t}}s.$inject=["TwDateService"];var l=s,c=n(6);t.a=r.a.module("tw.styleguide.formatting.date",[c.a]).component("twDateFormat",o).filter("twDateFormat",l).name},function(e,t,n){"use strict";var i,r=n(0),a=n.n(r),o=n(8),s=n(12),l=n(15),c=n(16),u=n(17),d=n(14);function p(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var h=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.element=t[0],i=this}var t,n,r;return t=e,(n=[{key:"$onInit",value:function(){this.$ngModel=this.$element.controller("ngModel"),this.addValidators(),this.uploadOptions||(this.uploadOptions={})}},{key:"change",value:function(){this.$ngModel.$setDirty(),this.$ngModel.$setViewValue(this.internalModel)}},{key:"focus",value:function(){this.element.dispatchEvent(new CustomEvent("focus"))}},{key:"blur",value:function(){this.$ngModel.$setTouched(),this.element.dispatchEvent(new CustomEvent("blur"))}},{key:"onAsyncUploadSuccess",value:function(e,t){i.onAsyncSuccess&&i.onAsyncSuccess({response:t})}},{key:"onAsyncUploadFailure",value:function(e){i.onAsyncFailure&&i.onAsyncFailure({response:e})}},{key:"getAutocompleteStatus",value:function(){return this.help&&(this.help.message||this.help.list||this.help.image)?"disabled":"on"}},{key:"addValidators",value:function(){var e=this;this.$ngModel.$formatters.push(function(t){return e.internalModel=t,t})}}])&&p(t.prototype,n),r&&p(t,r),e}();h.$inject=["$element"];var f=h,m=n(42),g={controller:f,template:n.n(m).a,require:{$ngModel:"ngModel"},bindings:{type:"@",name:"@",id:"@",label:"@",description:"@",placeholder:"@",step:"@",locale:"@",uploadAccept:"@",uploadIcon:"@",uploadTooLargeMessage:"@",options:"<",ngModel:"=",ngChange:"&",ngFocus:"&",ngBlur:"&",ngDisabled:"<",uploadOptions:"<",help:"<helpOptions",textFormat:"<",validationAsync:"<",persistAsync:"<",onAsyncFailure:"&",onAsyncSuccess:"&",fileUploadSource:"<",cameraOptions:"<"}};t.a=a.a.module("tw.styleguide.forms.form-control",[o.a,s.a,l.a,c.a,u.a,d.a]).component("twFormControl",g).component("twDynamicFormControl",g).name},function(e,t,n){"use strict";var i=n(0),r=n.n(i),a=n(19),o=n(7),s=n(1);function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,i)}return n}function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function u(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var d=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.RequirementsService=t,this.changed=!1,this.touched=!1}var t,n,i;return t=e,(n=[{key:"$onChanges",value:function(e){if(e.initialField){this.field=this.RequirementsService.prepField(this.initialField),this.control=this.RequirementsService.getControlType(e.initialField.currentValue),this.field.valuesAsync&&this.RequirementsService.prepValuesAsync(this.field,{}),this.required&&this.field.enum&&1===this.field.enum.length&&(this.model=this.field.enum[0]),this.field.default&&!this.model&&(this.model=this.field.default);var t=this.validationMessages||{},n=this.field.validationMessages||{};this.validationStrings=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach(function(t){c(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}({},t,{},n),this.validate(this.model)}}},{key:"onFocus",value:function(){this.focusHandler&&this.focusHandler()}},{key:"onBlur",value:function(){this.touched=!0,this.blurHandler&&this.blurHandler()}},{key:"onChange",value:function(e){this.changed=!0,this.validate(e),this.changeHandler&&this.changeHandler({value:e}),this.errorMessage&&delete this.errorMessage}},{key:"validate",value:function(e){if(Object(s.isNull)(e)||Object(s.isUndefined)(e)){if(this.required)return void(this.failures=["required"]);"string"===this.field.type&&(e="")}this.failures=Object(o.h)(e,this.field,this.required)}},{key:"onPersistAsyncFailure",value:function(e){this.uploadOptions||(this.uploadOptions={}),e.originalData?this.extractErrors(e.originalData):e.data&&this.extractErrors(e.data)}},{key:"extractErrors",value:function(e){e.message&&(this.uploadOptions.failureText=e.message),Array.isArray(e.errors)&&(this.uploadOptions.validationMessages=e.errors.map(function(e){return e.message}).slice(0,2))}},{key:"onPersistAsyncSuccess",value:function(e){this.uploadOptions||(this.uploadOptions={}),e&&(this.uploadOptions.successText=e.data.message)}},{key:"isLabelShown",value:function(e){return"file"!==e&&"checkbox"!==e}},{key:"isHelpShown",value:function(){return!!this.field.help}},{key:"isDesriptionShown",value:function(){return this.description&&!this.isErrorShown()&&!this.isWarningShown()&&"boolean"!==this.field.type}},{key:"isWarningShown",value:function(){return!!this.warningMessage}},{key:"isErrorShown",value:function(){return(this.submitted||this.touched&&this.changed)&&this.failures.length>0||this.errorMessage}},{key:"isAlertShown",value:function(){return this.isErrorShown()}},{key:"getOptions",value:function(){return"array"===this.field.type&&this.field.items?this.field.items.values:this.field.values}}])&&u(t.prototype,n),i&&u(t,i),e}();d.$inject=["TwRequirementsService"];var p=d,h=n(43),f={controller:p,template:n.n(h).a,bindings:{name:"@",model:"=",initialField:"<field",locale:"@",required:"<",submitted:"<",uploadOptions:"<",changeHandler:"&?onChange",focusHandler:"&?onFocus",blurHandler:"&?onBlur",errorMessage:"<",warningMessage:"<",validationMessages:"<"}},m=n(9),g=n(21);t.a=r.a.module("tw.styleguide.forms.field",[a.a,m.a,g.a]).component("twField",f).name},function(e,t,n){"use strict";var i=n(0),r=n.n(i);var a=function e(t,n,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var r=n[0],a=i.getClosestParentByClassName(r,"form-group"),s=n.controller("ngModel");r.addEventListener("invalid",function(e){e.preventDefault()}),s.$validators.validation=function(){return t.$evalAsync(function(){o(s,a,r)}),!0};r.addEventListener("blur",function(){t.$evalAsync(function(){o(s,a,r)})})};function o(e,t,n){if(t&&!t.classList.contains("custom-validation"))return e.$valid?(t&&t.classList.remove("has-error"),void n.removeAttribute("aria-invalid")):void(e.$touched&&e.$dirty&&(t&&t.classList.add("has-error"),n.setAttribute("aria-invalid","true")))}a.$inject=["$scope","$element","TwDomService"];var s=a;var l=function(){return{restrict:"A",require:{$ngModel:"ngModel"},controller:s}},c=n(2);t.a=r.a.module("tw.stylguide.validation.control",[c.a]).directive("twValidation",l).name},function(e,t,n){"use strict";var i=n(0),r=n.n(i);function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,i)}return n}function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var l=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.baseUrl="",this.headers={}}var t,n,i;return t=e,(n=[{key:"setBaseUrl",value:function(e){this.baseUrl=e}},{key:"setHeader",value:function(e,t){this.headers[e]=t}},{key:"extendHttpOptions",value:function(e){var t=angular.copy(e);return t.headers=t.headers?function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach(function(t){o(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}({},t.headers,{},this.headers):this.headers,t.url&&(t.url="".concat(this.baseUrl).concat(t.url)),t}}])&&s(t.prototype,n),i&&s(t,i),e}();t.a=r.a.module("tw.styleguide.services.async-tasks-config",[]).service("AsyncTasksConfig",l).name},function(e,t){e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",i=e[3];if(!i)return n;if(t&&"function"==typeof btoa){var r=(o=i,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */"),a=i.sources.map(function(e){return"/*# sourceURL="+i.sourceRoot+e+" */"});return[n].concat(a).concat([r]).join("\n")}var o;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var i={},r=0;r<this.length;r++){var a=this[r][0];"number"==typeof a&&(i[a]=!0)}for(r=0;r<e.length;r++){var o=e[r];"number"==typeof o[0]&&i[o[0]]||(n&&!o[2]?o[2]=n:n&&(o[2]="("+o[2]+") and ("+n+")"),t.push(o))}},t}},function(e,t,n){var i,r,a={},o=(i=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===r&&(r=i.apply(this,arguments)),r}),s=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var i=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&i instanceof window.HTMLIFrameElement)try{i=i.contentDocument.head}catch(e){i=null}t[e]=i}return t[e]}}(),l=null,c=0,u=[],d=n(51);function p(e,t){for(var n=0;n<e.length;n++){var i=e[n],r=a[i.id];if(r){r.refs++;for(var o=0;o<r.parts.length;o++)r.parts[o](i.parts[o]);for(;o<i.parts.length;o++)r.parts.push(b(i.parts[o],t))}else{var s=[];for(o=0;o<i.parts.length;o++)s.push(b(i.parts[o],t));a[i.id]={id:i.id,refs:1,parts:s}}}}function h(e,t){for(var n=[],i={},r=0;r<e.length;r++){var a=e[r],o=t.base?a[0]+t.base:a[0],s={css:a[1],media:a[2],sourceMap:a[3]};i[o]?i[o].parts.push(s):n.push(i[o]={id:o,parts:[s]})}return n}function f(e,t){var n=s(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var i=u[u.length-1];if("top"===e.insertAt)i?i.nextSibling?n.insertBefore(t,i.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),u.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=s(e.insertAt.before,n);n.insertBefore(t,r)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=u.indexOf(e);t>=0&&u.splice(t,1)}function g(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var i=function(){0;return n.nc}();i&&(e.attrs.nonce=i)}return v(t,e.attrs),f(e,t),t}function v(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function b(e,t){var n,i,r,a;if(t.transform&&e.css){if(!(a="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=a}if(t.singleton){var o=c++;n=l||(l=g(t)),i=$.bind(null,n,o,!1),r=$.bind(null,n,o,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",v(t,e.attrs),f(e,t),t}(t),i=function(e,t,n){var i=n.css,r=n.sourceMap,a=void 0===t.convertToAbsoluteUrls&&r;(t.convertToAbsoluteUrls||a)&&(i=d(i));r&&(i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var o=new Blob([i],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(o),s&&URL.revokeObjectURL(s)}.bind(null,n,t),r=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=g(t),i=function(e,t){var n=t.css,i=t.media;i&&e.setAttribute("media",i);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),r=function(){m(n)});return i(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;i(e=t)}else r()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=o()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=h(e,t);return p(n,t),function(e){for(var i=[],r=0;r<n.length;r++){var o=n[r];(s=a[o.id]).refs--,i.push(s)}e&&p(h(e,t),t);for(r=0;r<i.length;r++){var s;if(0===(s=i[r]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete a[s.id]}}}};var y,w=(y=[],function(e,t){return y[e]=t,y.filter(Boolean).join("\n")});function $(e,t,n,i){var r=n?"":i.css;if(e.styleSheet)e.styleSheet.cssText=w(t,r);else{var a=document.createTextNode(r),o=e.childNodes;o[t]&&e.removeChild(o[t]),o.length?e.insertBefore(a,o[t]):e.appendChild(a)}}},function(e,t){e.exports='<input type=hidden class=sr-only name={{$ctrl.name}} ng-model=$ctrl.ngModel ng-click=$ctrl.hiddenClick($event) ng-disabled=$ctrl.ngDisabled /> <button type=button class=tw-checkbox-button tw-focusable ng-click=$ctrl.buttonClick($event) ng-focus=$ctrl.buttonFocus() ng-blur=$ctrl.buttonBlur() ng-disabled=$ctrl.ngDisabled ng-class="{\'checked\': $ctrl.checked}" aria-pressed={{$ctrl.checked}}> <span class="tw-checkbox-check glyphicon glyphicon-ok"></span> </button> '},function(e,t){e.exports='<div ng-repeat="option in $ctrl.internalOptions" class=checkbox> <label> <tw-checkbox name={{$ctrl.name}} ng-model=option.selected ng-disabled=$ctrl.ngDisabled ng-required=$ctrl.isCheckboxRequired() ng-change=$ctrl.onInternalModelChange(option)></tw-checkbox> {{option.label}} </label> </div> '},function(e,t){e.exports='<input type=radio class=sr-only name={{$ctrl.name}} ng-value="$ctrl.ngValue || $ctrl.value" ng-model=$ctrl.ngModel ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.hiddenInputChange() tabindex=-1 /> <button type=button class=tw-radio-button tw-focusable ng-click=$ctrl.buttonClick($event) ng-focus=$ctrl.buttonFocus() ng-blur=$ctrl.buttonBlur() ng-disabled=$ctrl.ngDisabled ng-class="{checked: $ctrl.checked}" aria-pressed={{$ctrl.checked}}> <span class=tw-radio-check></span> </button> '},function(e,t){e.exports='<div class="btn-group btn-block tw-select" ng-class="{\n    dropdown: !$ctrl.dropdownUp,\n    dropup: $ctrl.dropdownUp\n  }" aria-hidden=false> <button type=button class="btn btn-input dropdown-toggle" ng-class="{\n      \'btn-input-inverse\': $ctrl.inverse,\n      \'btn-addon\': $ctrl.inverse,\n      \'btn-sm\': $ctrl.size === \'sm\',\n      \'btn-lg\': $ctrl.size === \'lg\'\n    }" data-toggle=dropdown aria-expanded=false ng-disabled=$ctrl.ngDisabled ng-focus=$ctrl.buttonFocus() tw-focusable> <span class=tw-select-selected ng-if=$ctrl.selected> <span class="circle circle-inverse pull-xs-left circle-sm" ng-if="$ctrl.selected && $ctrl.selected.icon && $ctrl.selected.secondary"> <span class="icon {{$ctrl.selected.icon}}"></span> </span> <span class="circle circle-inverse pull-xs-left" ng-class=$ctrl.circleClasses($ctrl.hideCircle) ng-if="($ctrl.selected.circleText || $ctrl.selected.circleImage || $ctrl.selected.circleIcon)"> <span ng-if=$ctrl.selected.circleText>{{$ctrl.selected.circleText}}</span> <img alt={{$ctrl.selected.label}} ng-if=$ctrl.selected.circleImage src="data:image/png;base64,\n            iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" ng-src={{$ctrl.selected.circleImage}} /> <span ng-if=$ctrl.selected.circleIcon class="icon {{$ctrl.selected.circleIcon}}"></span> </span> <span class=text-ellipsis> <span class="currency-flag currency-flag-{{$ctrl.selected.currency | lowercase}}" ng-if="$ctrl.selected && $ctrl.selected.currency" ng-class=$ctrl.responsiveClasses($ctrl.hideCurrency)></span> <span class="icon {{$ctrl.selected.icon}}" ng-if="$ctrl.selected && $ctrl.selected.icon && !$ctrl.selected.secondary" ng-class=$ctrl.responsiveClasses($ctrl.hideIcon)></span> <span class=tw-select-label ng-class=$ctrl.responsiveClasses($ctrl.hideLabel)> {{$ctrl.selected.label}} </span> <span ng-if=$ctrl.selected.note ng-class=$ctrl.responsiveClasses($ctrl.hideNote) class="tw-select-note small m-l-1"> {{$ctrl.selected.note}} </span> <span ng-if=$ctrl.selected.secondary ng-class=$ctrl.responsiveClasses($ctrl.hideSecondary) class="tw-select-secondary small secondary text-ellipsis"> {{$ctrl.selected.secondary}} </span> </span> </span> <span class=form-control-placeholder ng-if=!$ctrl.selected>{{$ctrl.placeholder}}</span> <span class=caret></span> </button> <ul class=dropdown-menu role=menu ng-class="{\n      \'dropdown-menu-xs-right\': $ctrl.dropdownRight === \'xs\',\n      \'dropdown-menu-sm-right\': $ctrl.dropdownRight === \'sm\',\n      \'dropdown-menu-md-right\': $ctrl.dropdownRight === \'md\',\n      \'dropdown-menu-lg-right\': $ctrl.dropdownRight === \'lg\',\n      \'dropdown-menu-xl-right\': $ctrl.dropdownRight === \'xl\',\n      \'dropdown-menu-sm\': $ctrl.dropdownWidth === \'sm\',\n      \'dropdown-menu-md\': $ctrl.dropdownWidth === \'md\',\n      \'dropdown-menu-lg\': $ctrl.dropdownWidth === \'lg\'\n    }"> <li ng-if=$ctrl.shouldShowSearch()> <a href="" class="tw-select-filter-link p-a-0" tabindex=-1 ng-focus=$ctrl.focusOnFilterInput()> <div class=input-group> <span class=input-group-addon><span class="icon icon-search"></span> </span> <input type=text class="form-control tw-select-filter" placeholder={{$ctrl.filter}} ng-model=$ctrl.filterString ng-change=$ctrl.filterChange() ng-keydown=$ctrl.filterKeydown($event) /> </div> </a> </li> <li ng-if="$ctrl.placeholder && !$ctrl.filter" ng-class="{\n        active: !$ctrl.selected && !$ctrl.ngRequired,\n        \'dropdown-header\': $ctrl.ngRequired\n      }"> <span ng-if=$ctrl.ngRequired class=text-ellipsis ng-click=$event.stopPropagation()> {{$ctrl.placeholder}} </span> <a href="" tabindex=-1 ng-if=!$ctrl.ngRequired ng-click=$ctrl.placeholderClick() ng-focus=$ctrl.placeholderFocus() class=tw-select-placeholder tw-focusable> {{$ctrl.placeholder}} </a> </li> <li ng-if="($ctrl.placeholder && !$ctrl.ngRequired) || $ctrl.filter" class=divider></li> <li ng-repeat="option in $ctrl.filteredOptions" ng-class="{\n        \'active\': $ctrl.ngModel === option.value,\n        \'disabled\': option.disabled,\n        \'dropdown-header\': option.header,\n        \'tw-select-option\': !option.header && !option.disabled\n      }"> <span ng-if=option.header class=text-ellipsis ng-click=$event.stopPropagation()> {{option.header}} </span> <a href="" ng-if=!option.header ng-click="$ctrl.optionClick(option, $event)" ng-focus=$ctrl.optionFocus(option) ng-class="{\'tw-select-option-link\': !option.disabled}" index={{$index}} tabindex=-1 tw-focusable> <div ng-if="option.icon && option.secondary" class="circle circle-inverse pull-xs-left circle-sm"> <span class="icon {{option.icon}}"></span> </div> <span ng-if="option.icon && !option.secondary" class="icon {{option.icon}} pull-xs-left"> </span> <span ng-if=option.currency class="currency-flag currency-flag-{{option.currency | lowercase}} pull-xs-left"> </span> <span class="circle circle-inverse pull-xs-left" ng-class="{\n            \'circle-sm\': option.secondary,\n            \'circle-xs\': !option.secondary\n          }" ng-if="option.circleText || option.circleImage || option.circleIcon"> <span class=tw-select-circle-text ng-if=option.circleText>{{option.circleText}}</span> <img alt={{option.label}} ng-if=option.circleImage src="data:image/png;base64,\n              iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" ng-src={{option.circleImage}} /> <span ng-if=option.circleIcon class="icon {{option.circleIcon}}"></span> </span>{{option.label}}<span ng-if=option.note class="tw-select-note small m-l-1">{{option.note}}</span><span ng-if=option.secondary class="tw-select-secondary small text-ellipsis">{{option.secondary}}</span> </a> </li> <li ng-if=$ctrl.hasMoreOptionsToReveal> <a href="" ng-click=$ctrl.revealMoreOptions($event) class=tw-select-load-more tabindex=-1 tw-focusable> ... </a> </li> <li ng-if=$ctrl.hasTranscluded class=divider></li> <li ng-transclude ng-if=$ctrl.hasTranscluded class=tw-select-transcluded></li> </ul> </div> <input type=hidden class=tw-select-hidden name={{$ctrl.name}} value={{$ctrl.ngModel}} ng-disabled=$ctrl.ngDisabled /> '},function(e,t){e.exports="<div class=droppable tw-drag-enter=$ctrl.onDragEnter() tw-drag-leave=$ctrl.onDragLeave() tw-drop=$ctrl.onDrop(files) ng-class=\"{\n    'droppable-sm': $ctrl.size ==='sm',\n    'droppable-md': $ctrl.size ==='md' || !$ctrl.size,\n    'droppable-lg': $ctrl.size ==='lg',\n    'droppable-dropping': $ctrl.isDroppable && !$ctrl.ngDisabled,\n    'droppable-processing': !$ctrl.isDone && ($ctrl.isProcessing || $ctrl.isSuccess),\n    'droppable-complete': $ctrl.isDone\n  }\"> <div class=droppable-default-card aria-hidden=\"{{$ctrl.isDone || $ctrl.isProcessing}}\"> <tw-upload-capture label=$ctrl.label icon=$ctrl.icon accept=$ctrl.accept input-file=$ctrl.inputFile help-image=$ctrl.helpImage button-text=$ctrl.buttonText no-camera-text=$ctrl.noCameraText no-camera-message=$ctrl.noCameraMessage ng-disabled=$ctrl.ngDisabled placeholder=\"$ctrl.placeholder || $ctrl.description\" is-live-camera-upload=$ctrl.isLiveCameraUpload camera-guidelines=$ctrl.cameraGuidelines on-file-capture=$ctrl.onFileCapture(file)></tw-upload-capture> </div> <div class=\"droppable-processing-card droppable-card droppable-card--wider\" aria-hidden={{!$ctrl.isProcessing}}> <tw-upload-processing name=$ctrl.name file=$ctrl.file on-start=$ctrl.onProcessStart(file) on-success=\"$ctrl.onProcessSuccess(file, dataUrl, id, response)\" on-failure=$ctrl.onProcessFailure(error) max-size=$ctrl.maxSize accept=$ctrl.accept http-options=$ctrl.httpOptions processing-message=$ctrl.processingText success-message=$ctrl.successText error-message=$ctrl.failureText validation-messages=$ctrl.validationMessages too-large-message=$ctrl.tooLargeMessage cancel-text=$ctrl.cancelText on-cancel=$ctrl.reset()></tw-upload-processing> </div> <div class=\"droppable-complete-card droppable-card\" aria-hidden={{!$ctrl.isDone}}> <tw-upload-success label=$ctrl.label is-image=$ctrl.isImage file=$ctrl.file data=$ctrl.dataUrl success-message=$ctrl.successText cancel-text=$ctrl.cancelText on-cancel=$ctrl.reset()></tw-upload-success> </div> <div class=\"droppable-dropping-card droppable-card\"> <tw-upload-dropping dropping-text=$ctrl.droppingText></tw-upload-dropping> </div> </div> "},function(e,t){e.exports='<div class=droppable-card-content> <div ng-if=!$ctrl.cameraFailed> <div class=m-b-2> <img ng-show=$ctrl.helpImage ng-src={{$ctrl.helpImage}} alt={{$ctrl.label}} class="thumbnail text-xs-center"/> <span ng-show=!$ctrl.helpImage class="icon icon-{{$ctrl.viewIcon}} icon-xxl"></span> </div> <h4 class=m-b-1 ng-if="$ctrl.label || $ctrl.description"> {{$ctrl.label || $ctrl.description}} </h4> <p class=m-b-2 ng-if="$ctrl.placeholder || $ctrl.instructions"> {{$ctrl.placeholder || $ctrl.instructions}} </p> </div> <div ng-if=$ctrl.cameraFailed> <div class=m-b-2> <tw-process state=-1 size=sm></tw-process> </div> <h4 class=m-b-1 ng-if=$ctrl.noCameraText>{{$ctrl.noCameraText}}</h4> <p class=m-b-2 ng-if=$ctrl.noCameraMessage>{{$ctrl.noCameraMessage}}</p> </div> <tw-upload-button ng-if=!$ctrl.isLiveCameraUpload name=$ctrl.name label=$ctrl.buttonText accept=$ctrl.accept model=$ctrl.inputFile disabled=$ctrl.ngDisabled on-capture=$ctrl.onButtonCapture(files)> </tw-upload-button> <tw-camera-button ng-if=$ctrl.isLiveCameraUpload label=$ctrl.buttonText disabled=$ctrl.ngDisabled on-click=$ctrl.onCameraButtonClick()> </tw-camera-button> <tw-camera-capture ng-if="$ctrl.isLiveCameraUpload && $ctrl.showLiveCaptureScreen" guidelines=$ctrl.cameraGuidelines on-cancel=$ctrl.onCameraCancel() on-capture=$ctrl.onCameraCapture(file) on-error=$ctrl.onCameraError()> </tw-camera-capture> </div> '},function(e,t){e.exports='<div class=droppable-card-content> <div class="circle circle-sm m-b-3"> <span class="icon icon-add"></span> </div> <h4> {{ $ctrl.droppingText || \'Drop file to start upload\' }} </h4> <p class="m-t-2 m-b-0"></p> </div> '},function(e,t){e.exports='<div class=droppable-card-content> <div class=m-b-2> <tw-process size=sm state=$ctrl.processingState></tw-process> </div> <h4 class=m-b-2> <span ng-if="$ctrl.isProcessing && $ctrl.processingMessage" class=upload-processing-message> {{$ctrl.processingMessage}} </span> <span ng-if="$ctrl.isError && $ctrl.errorMessage" class=upload-failure-message> {{$ctrl.errorMessage}} </span> </h4> <ul ng-if="$ctrl.isError && $ctrl.validationMessages" class="text-xs-left m-b-2"> <li ng-if=$ctrl.validationMessages[0]>{{ $ctrl.validationMessages[0] }}</li> <li ng-if=$ctrl.validationMessages[1]>{{ $ctrl.validationMessages[1] }}</li> <li ng-if=$ctrl.validationMessages[2]>{{ $ctrl.validationMessages[2] }}</li> </ul> <a href="" ng-if=$ctrl.isError class="btn btn-primary" ng-click=$ctrl.onRemove() role=button> <span ng-if=$ctrl.cancelText ng-bind=$ctrl.cancelText></span> <span ng-if=!$ctrl.cancelText class="icon icon-upload m-r-0"></span> </a> </div> '},function(e,t){e.exports='<div class=processing-item> <div class=media> <div class="media-left vertical-center p-r-2 p-y-1"> <tw-process size=xs state=$ctrl.processingState></tw-process> </div> <div class="media-body text-xs-left p-y-1" style=overflow:auto> <div> <small class="m-b-0 text-ellipsis file-name"><strong>{{ $ctrl.file.name }}</strong></small> <small class="m-b-0 text-ellipsis tiny"> <span ng-if=$ctrl.isProcessing>{{ $ctrl.processingMessage }}</span> <span ng-if=$ctrl.isError>{{ $ctrl.errorMessage }}</span> <span ng-if=$ctrl.isSuccess>{{ $ctrl.successMessage }}</span> </small> </div> </div> <div class="media-right p-l-2 p-y-2"> <a href="" ng-if=!$ctrl.isProcessing class=close ng-click=$ctrl.onRemove() role=button>&times;</a> </div> </div> </div> '},function(e,t){e.exports="<span class=process ng-class=\"{\n    'process-success': $ctrl.processing === 1,\n    'process-danger': $ctrl.processing === -1,\n    'process-stopped': $ctrl.processing === 0,\n    'process-xs': $ctrl.size === 'xs',\n    'process-sm': $ctrl.size === 'sm',\n    'process-md': $ctrl.size === 'md',\n    'process-lg': $ctrl.size === 'lg',\n    'process-xl': $ctrl.size === 'xl'\n  }\"> <span class=process-icon-container> <span class=process-icon-horizontal></span> <span class=process-icon-vertical></span> </span> <svg version=1.1 xmlns=http://www.w3.org/2000/svg xml:space=preserve> <circle class=process-circle cx=50% cy=50% ng-attr-r={{$ctrl.radius}} fill-opacity=0.0 /> </svg> </span> "},function(e,t){e.exports='<div class=droppable-card-content> <h4 ng-if="$ctrl.successMessage || $ctrl.label" class="m-b-2 upload-success-message"> {{ $ctrl.successMessage || $ctrl.label }} </h4> <img ng-if="$ctrl.isImage && $ctrl.data" src="data:image/png;base64,\n      iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mNkYAAAAAYAAjCB0C8AAAAASUVORK5CYII=" ng-src="{{ $ctrl.data }}" alt=OK class="thumbnail m-b-3"/> <span class="icon icon-pdf icon-xxl" ng-if="!$ctrl.isImage || !$ctrl.data"></span> <p class="m-b-2 text-ellipsis">{{ $ctrl.fileName }}</p> <p class="m-t-2 m-b-0"> <a href="" ng-click=$ctrl.onCancel()> <span ng-if=$ctrl.cancelText ng-bind=$ctrl.cancelText></span> <span ng-if=!$ctrl.cancelText class="icon icon-upload m-r-0"></span> </a> </p> </div> '},function(e,t){e.exports="<div id=camera ng-class=\"{translucent: $ctrl.mode === 'loading'}\"> <video id=cameraViewfinder class=\"fixed w-100 h-100\" ng-show=\"$ctrl.mode === 'capture'\" ng-class=\"{mirrored: ($ctrl.guidelines.direction || '').toLowerCase() === 'user'}\" playsinline></video> <div id=cameraViewfinderOverlay ng-if=\"$ctrl.guidelines.outline && $ctrl.mode === 'capture'\" ng-class=\"{mirrored: ($ctrl.guidelines.direction || '').toLowerCase() === 'user'}\" ng-style=\"{'background-image': 'url(' + $ctrl.guidelines.outline + ')', width: $ctrl.overlaySquareLength + 'px', height: $ctrl.overlaySquareLength + 'px'}\"></div> <canvas id=cameraSensor ng-show=\"$ctrl.mode === 'confirm'\" ng-style=\"{width: $ctrl.sensorWidth + 'px'}\"></canvas> <label class=\"fixed-bottom camera-ctrl-bar\"> <span class=camera-ctrl-box-small> <span id=video-cancel class=\"camera-ctrl-btn-small camera-ctrl-btn-cancel icon icon-close\" ng-if=\"$ctrl.mode === 'capture'\" ng-click=$ctrl.onCancelBtnClick()></span> <span id=capture-cancel class=\"camera-ctrl-btn-small camera-ctrl-btn-cancel icon icon-close\" ng-if=\"$ctrl.mode === 'confirm'\" ng-click=$ctrl.onRecaptureBtnClick()></span> </span> <span class=camera-ctrl-box-big> <span id=video-confirm class=camera-ctrl-btn-big ng-if=\"$ctrl.mode === 'capture'\" ng-click=$ctrl.onCaptureBtnClick()> <span class=camera-ctrl-btn-big-inner></span> </span> </span> <span class=camera-ctrl-box-small> <span id=capture-confirm class=\"camera-ctrl-btn-small camera-ctrl-btn-confirm icon icon-check\" ng-if=\"$ctrl.mode === 'confirm'\" ng-click=$ctrl.onUploadBtnClick()></span> </span> </label> </div> "},function(e,t){e.exports='<label class=btn ng-click=$ctrl.onButtonClick() ng-class="{ \'disabled\': $ctrl.disabled,\n              \'btn-primary\': !$ctrl.isSecondary,\n              \'btn-default\': $ctrl.isSecondary,\n              \'btn-block\': $ctrl.block,\n              \'btn-sm\': $ctrl.small\n            }"> <span ng-if=$ctrl.label ng-bind=$ctrl.label></span> <span ng-if=!$ctrl.label class="icon icon-upload m-r-0"></span> <span ng-if=!$ctrl.isLiveCameraUpload> <input ng-if=!$ctrl.multiple tw-file-input type=file accept="{{ $ctrl.accept }}" class="tw-droppable-input hidden" ng-disabled=$ctrl.ngDisabled name="{{ $ctrl.name }}" on-user-input=$ctrl.onButtonCapture() ng-model=$ctrl.model /> <input ng-if=$ctrl.multiple tw-file-input type=file accept="{{ $ctrl.accept }}" class="tw-droppable-input hidden" ng-disabled=$ctrl.ngDisabled name="{{ $ctrl.name }}" on-user-input=$ctrl.onButtonCapture() ng-model=$ctrl.model multiple=multiple /> </span> </label>'},function(e,t){e.exports='<label class="btn btn-primary" ng-click=$ctrl.onButtonClick() ng-class="{ \'disabled\': $ctrl.disabled }"> <span ng-if=$ctrl.label ng-bind=$ctrl.label></span> <span ng-if=!$ctrl.label class="icon icon-camera m-r-0"></span> </label> '},function(e,t){e.exports='<div class="well droppable p-r-0 p-l-0 p-t-1 p-b-0 multi-upload" tw-drop=$ctrl.onDrop(files) tw-drag-enter=$ctrl.onDragEnter() tw-drag-leave=$ctrl.onDragLeave() ng-class="{\'droppable-dropping\': $ctrl.isDroppable}"> <div class="droppable-dropping-card droppable-card"> <tw-upload-dropping dropping-text=$ctrl.droppingText></tw-upload-dropping> </div> <div ng-if="$ctrl.files.length === 0" class="empty-processing-list droppable-default-card text-xs-center p-t-3"> <div class=empty-screen> <div class="circle circle-sm m-b-3 m-t-3"> <img ng-if=$ctrl.helpImage ng-src={{$ctrl.helpImage}} alt={{$ctrl.label}} class="thumbnail text-xs-center"/> <span ng-if=!$ctrl.helpImage class="icon icon-{{$ctrl.viewIcon}} icon-xxl"></span> </div> <h4 ng-if=$ctrl.label class=m-b-1>{{$ctrl.label}}</h4> <p ng-if=$ctrl.placeholder class="p-l-3 p-r-3"> {{$ctrl.placeholder}} </p> </div> </div> <div ng-if="$ctrl.files.length > 0" class="droppable-default-card p-l-3 processing-list"> <div ng-repeat="(index, file) in $ctrl.files" class=p-r-3 ng-class="{\'last-item\': $last}"> <tw-upload-processing-mini name=$ctrl.name file=file on-success="$ctrl.onProcessSuccess(index, file, dataUrl, id, response)" on-failure="$ctrl.onProcessFailure(index, file, error)" on-cancel=$ctrl.onProcessCancel(index) max-size=$ctrl.maxSize accept=$ctrl.accept http-options=$ctrl.httpOptions processing-message=$ctrl.processingText success-message=$ctrl.successText error-message=$ctrl.failureText validation-messages=$ctrl.validationMessages too-large-message=$ctrl.tooLargeMessage cancel-text=$ctrl.cancelText response-error-extractor=$ctrl.responseErrorExtractor({error})></tw-upload-processing-mini> </div> </div> <div class=m-a-3> <tw-upload-button ng-if=!$ctrl.isLiveCameraUpload name=$ctrl.name label="$ctrl.files.length === 0 ? $ctrl.buttonText : $ctrl.addMoreButtonText" is-secondary="$ctrl.files.length > 0" accept=$ctrl.accept model=$ctrl.inputFile disabled=$ctrl.ngDisabled on-capture=$ctrl.onFileCapture(files) block=true small=true multiple=true></tw-upload-button> </div> </div> '},function(e,t){e.exports='<div class=row> <div class="col-sm-5 tw-date-month-column" ng-if=$ctrl.monthBeforeDay> <label class=sr-only>Month</label> <tw-select name=month class=tw-date-month ng-model=$ctrl.month ng-change=$ctrl.updateDateModelAndValidationClasses() ng-required=$ctrl.dateRequired ng-disabled=$ctrl.dateDisabled options=$ctrl.dateMonths> </tw-select> </div> <div class="col-sm-3 tw-date-day-column"> <label class=sr-only>Day</label> <input type=number name=day class="form-control tw-date-day" ng-model=$ctrl.day ng-change=$ctrl.updateDateModelAndValidationClasses() placeholder=DD min=1 ng-min=1 ng-disabled=$ctrl.dateDisabled ng-required=$ctrl.dateRequired tw-focusable/> </div> <div class="col-sm-5 tw-date-month-column" ng-if=!$ctrl.monthBeforeDay> <label class=sr-only>Month</label> <tw-select name=month class=tw-date-month ng-model=$ctrl.month ng-change=$ctrl.updateDateModelAndValidationClasses() ng-required=$ctrl.dateRequired ng-disabled=$ctrl.dateDisabled options=$ctrl.dateMonths> </tw-select> </div> <div class="col-sm-4 tw-date-year-column"> <label class=sr-only>Year</label> <input type=number name=year class="form-control tw-date-year" placeholder=YYYY ng-model=$ctrl.year ng-change=$ctrl.updateDateModelAndValidationClasses() ng-min=$ctrl.min.getFullYear() ng-max=$ctrl.max.getFullYear() maxlength=4 ng-maxlength=4 ng-disabled=$ctrl.dateDisabled ng-required=$ctrl.dateRequired tw-focusable/> </div> </div> '},function(e,t){e.exports='<span tw-tool-tip data-original-title="{{ $ctrl.date | twDateFormat : $ctrl.locale : \'long\' }}"> <span class="hidden-xs hidden-sm"> {{ $ctrl.date | twDateFormat : $ctrl.locale : $ctrl.format }} </span> <span class="hidden-md hidden-lg hidden-xl"> {{ $ctrl.date | twDateFormat : $ctrl.locale : \'short\' }} </span> </span> '},function(e,t){e.exports='<div ng-switch=$ctrl.type> <div ng-switch-when=radio class=radio ng-class="{disabled: $ctrl.ngDisabled, \'radio-lg\': option.secondary}" ng-repeat="option in $ctrl.options"> <label> <tw-radio name={{$ctrl.name}} ng-value=option.value ng-model=$ctrl.internalModel ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change(option.value) ng-click=$ctrl.change(option.value) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur()></tw-radio> {{option.label}} <small ng-if=option.secondary>{{option.secondary}}</small> </label> </div> <div ng-switch-when=checkbox class=checkbox ng-class="{ disabled: $ctrl.ngDisabled, \'checkbox-lg\': $ctrl.description }"> <label> <tw-checkbox name={{$ctrl.name}} ng-model=$ctrl.internalModel ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-click=$ctrl.change() ng-focus=$ctrl.focus() ng-blur=$ctrl.blur()></tw-checkbox> {{ $ctrl.label }} <small ng-if=$ctrl.description>{{ $ctrl.description }}</small> </label> </div> <div ng-switch-when=checkbox-group> <tw-checkbox-group name={{$ctrl.name}} ng-model=$ctrl.internalModel options=$ctrl.options ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel)></tw-checkbox-group> </div> <div ng-switch-when=select> <tw-select name={{$ctrl.name}} options=$ctrl.options filter="{{ $ctrl.options.length > 9 ? \' \' : \'\' }}" placeholder={{$ctrl.placeholder}} ng-model=$ctrl.internalModel ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur()></tw-select> </div> <div ng-switch-when=file> <tw-upload name={{$ctrl.name}} label={{$ctrl.label}} icon={{$ctrl.uploadIcon}} help-image={{$ctrl.helpOptions.image}} placeholder={{$ctrl.placeholder}} accept={{$ctrl.uploadAccept}} complete-text={{$ctrl.label}} button-text={{$ctrl.uploadOptions.buttonText}} cancel-text={{$ctrl.uploadOptions.cancelText}} processing-text="{{ $ctrl.uploadOptions.processingText }}" success-text="{{ $ctrl.uploadOptions.successText }}" failure-text="{{ $ctrl.uploadOptions.failureText }}" no-camera-text="{{ $ctrl.uploadOptions.noCameraText }}" no-camera-message="{{ $ctrl.uploadOptions.noCameraMessage }}" validation-messages=$ctrl.uploadOptions.validationMessages view-image-text={{$ctrl.uploadOptions.viewImageText}} too-large-message={{$ctrl.uploadTooLargeMessage}} max-size=$ctrl.ngMax ng-model=$ctrl.internalModel ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() http-options=$ctrl.persistAsync source=$ctrl.fileUploadSource camera-guidelines=$ctrl.cameraOptions on-success=$ctrl.onAsyncUploadSuccess on-failure=$ctrl.onAsyncUploadFailure></tw-upload> </div> <div ng-switch-when=date|date-time ng-switch-when-separator=|> <tw-date name={{$ctrl.name}} locale={{$ctrl.locale}} ng-min=$ctrl.ngMin ng-max=$ctrl.ngMax ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true }" ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() model-type=string></tw-date> </div> <div ng-switch-when=tel> <tw-telephone name="{{ $ctrl.name }}" placeholder="{{ $ctrl.placeholder }}" ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true, debounce: 300 }" ng-required=$ctrl.ngRequired ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() locale="{{ $ctrl.locale }}" search-placeholder=" "></tw-telephone> </div> <input ng-switch-when=number name={{$ctrl.name}} type=number step={{$ctrl.step}} class=form-control placeholder={{$ctrl.placeholder}} ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true, debounce: 300 }" ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() autocomplete="{{ $ctrl.getAutocompleteStatus() }}"/> <input ng-switch-when=hidden name={{$ctrl.name}} type=hidden ng-model=$ctrl.ngModel /> <input ng-switch-when=password name={{$ctrl.name}} type=password class=form-control placeholder={{$ctrl.placeholder}} ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true, debounce: 300 }" ng-disabled=$ctrl.ngDisabled ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() autocomplete="{{ $ctrl.getAutocompleteStatus() }}"/> <textarea ng-switch-when=textarea name={{$ctrl.name}} class=form-control placeholder={{$ctrl.placeholder}} ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true, debounce: 300 }" ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() ng-disabled=$ctrl.ngDisabled autocomplete="{{ $ctrl.getAutocompleteStatus() }}"></textarea> <input ng-switch-default name={{$ctrl.name}} type=text class=form-control placeholder={{$ctrl.placeholder}} ng-model=$ctrl.internalModel ng-model-options="{ allowInvalid: true, debounce: 300 }" ng-change=$ctrl.change($ctrl.internalModel) ng-focus=$ctrl.focus() ng-blur=$ctrl.blur() ng-disabled=$ctrl.ngDisabled tw-text-format="{{ $ctrl.textFormat }}" autocomplete="{{ $ctrl.getAutocompleteStatus() }}"/> </div> '},function(e,t){e.exports='<div class="form-group tw-field-{{ $ctrl.name }} custom-validation" ng-class="{\n    \'has-error\': $ctrl.isErrorShown(),\n    \'has-warning\': $ctrl.isWarningShown(),\n    \'hidden\': $ctrl.field.hidden\n  }"> <label class=control-label ng-if=$ctrl.isLabelShown($ctrl.control)> {{$ctrl.field.title}} </label> <tw-form-control name="{{ $ctrl.name }}" label="{{ $ctrl.field.title }}" description="{{ $ctrl.field.description }}" type="{{ $ctrl.control | lowercase }}" placeholder="{{ $ctrl.field.placeholder }}" help-options=$ctrl.field.help locale="{{ $ctrl.locale }}" upload-accept="{{ $ctrl.field.accept }}" upload-icon="{{ $ctrl.field.icon }}" upload-too-large-message="{{ $ctrl.field.tooLargeMessage }}" options=$ctrl.getOptions() upload-options=$ctrl.uploadOptions ng-model=$ctrl.model ng-focus=$ctrl.onFocus() ng-blur=$ctrl.onBlur() ng-change=$ctrl.onChange($ctrl.model) ng-required=$ctrl.required ng-disabled=$ctrl.field.disabled text-format=$ctrl.field.displayFormat validation-async=$ctrl.field.validationAsync persist-async=$ctrl.field.persistAsync file-upload-source=$ctrl.field.sourceType camera-options=$ctrl.field.camera on-async-success=$ctrl.onPersistAsyncSuccess(response) on-async-failure=$ctrl.onPersistAsyncFailure(response)></tw-form-control> <div class="alert alert-danger alert-detach" ng-if=$ctrl.isAlertShown()> <div ng-repeat="failureType in $ctrl.failures" ng-if=$ctrl.validationStrings[failureType]> {{ $ctrl.validationStrings[failureType] }} </div> <div class=error-provided ng-if=$ctrl.errorMessage> {{ $ctrl.errorMessage }} </div> </div> <div class="alert alert-warning alert-detach" ng-if=$ctrl.isWarningShown()> {{ $ctrl.warningMessage }} </div> <div ng-if=$ctrl.isHelpShown() class="alert alert-focus alert-detach"> <span ng-if=$ctrl.field.help.message> {{ $ctrl.field.help.message }} </span> <ul ng-if=$ctrl.field.help.list class=list-unstyled> <li ng-repeat="helpMessage in $ctrl.field.help.list">{{ helpMessage }}</li> </ul> <img ng-if="$ctrl.field.help.image && $ctrl.control !== \'file\'" ng-src={{$ctrl.field.help.image}} alt="{{ $ctrl.field.title }}" class="thumbnail m-y-2"/> </div> </div> '},function(e,t){!function(){if("function"==typeof window.CustomEvent)return!1;function e(e,t){var n=document.createEvent("CustomEvent");return t=t||{bubbles:!1,cancelable:!1,detail:void 0},n.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),n}e.prototype=window.Event.prototype,window.CustomEvent=e}()},function(e,t,n){"use strict";function i(e){switch(e._type){case"document":case"block_quote":case"list":case"item":case"paragraph":case"heading":case"emph":case"strong":case"link":case"image":case"custom_inline":case"custom_block":return!0;default:return!1}}var r=function(e,t){this.current=e,this.entering=!0===t},a=function(){var e=this.current,t=this.entering;if(null===e)return null;var n=i(e);return t&&n?e._firstChild?(this.current=e._firstChild,this.entering=!0):this.entering=!1:e===this.root?this.current=null:null===e._next?(this.current=e._parent,this.entering=!1):(this.current=e._next,this.entering=!0),{entering:t,node:e}},o=function(e){return{current:e,root:e,entering:!0,next:a,resumeAt:r}},s=function(e,t){this._type=e,this._parent=null,this._firstChild=null,this._lastChild=null,this._prev=null,this._next=null,this._sourcepos=t,this._lastLineBlank=!1,this._lastLineChecked=!1,this._open=!0,this._string_content=null,this._literal=null,this._listData={},this._info=null,this._destination=null,this._title=null,this._isFenced=!1,this._fenceChar=null,this._fenceLength=0,this._fenceOffset=null,this._level=null,this._onEnter=null,this._onExit=null},l=s.prototype;Object.defineProperty(l,"isContainer",{get:function(){return i(this)}}),Object.defineProperty(l,"type",{get:function(){return this._type}}),Object.defineProperty(l,"firstChild",{get:function(){return this._firstChild}}),Object.defineProperty(l,"lastChild",{get:function(){return this._lastChild}}),Object.defineProperty(l,"next",{get:function(){return this._next}}),Object.defineProperty(l,"prev",{get:function(){return this._prev}}),Object.defineProperty(l,"parent",{get:function(){return this._parent}}),Object.defineProperty(l,"sourcepos",{get:function(){return this._sourcepos}}),Object.defineProperty(l,"literal",{get:function(){return this._literal},set:function(e){this._literal=e}}),Object.defineProperty(l,"destination",{get:function(){return this._destination},set:function(e){this._destination=e}}),Object.defineProperty(l,"title",{get:function(){return this._title},set:function(e){this._title=e}}),Object.defineProperty(l,"info",{get:function(){return this._info},set:function(e){this._info=e}}),Object.defineProperty(l,"level",{get:function(){return this._level},set:function(e){this._level=e}}),Object.defineProperty(l,"listType",{get:function(){return this._listData.type},set:function(e){this._listData.type=e}}),Object.defineProperty(l,"listTight",{get:function(){return this._listData.tight},set:function(e){this._listData.tight=e}}),Object.defineProperty(l,"listStart",{get:function(){return this._listData.start},set:function(e){this._listData.start=e}}),Object.defineProperty(l,"listDelimiter",{get:function(){return this._listData.delimiter},set:function(e){this._listData.delimiter=e}}),Object.defineProperty(l,"onEnter",{get:function(){return this._onEnter},set:function(e){this._onEnter=e}}),Object.defineProperty(l,"onExit",{get:function(){return this._onExit},set:function(e){this._onExit=e}}),s.prototype.appendChild=function(e){e.unlink(),e._parent=this,this._lastChild?(this._lastChild._next=e,e._prev=this._lastChild,this._lastChild=e):(this._firstChild=e,this._lastChild=e)},s.prototype.prependChild=function(e){e.unlink(),e._parent=this,this._firstChild?(this._firstChild._prev=e,e._next=this._firstChild,this._firstChild=e):(this._firstChild=e,this._lastChild=e)},s.prototype.unlink=function(){this._prev?this._prev._next=this._next:this._parent&&(this._parent._firstChild=this._next),this._next?this._next._prev=this._prev:this._parent&&(this._parent._lastChild=this._prev),this._parent=null,this._next=null,this._prev=null},s.prototype.insertAfter=function(e){e.unlink(),e._next=this._next,e._next&&(e._next._prev=e),e._prev=this,this._next=e,e._parent=this._parent,e._next||(e._parent._lastChild=e)},s.prototype.insertBefore=function(e){e.unlink(),e._prev=this._prev,e._prev&&(e._prev._next=e),e._next=this,this._prev=e,e._parent=this._parent,e._prev||(e._parent._firstChild=e)},s.prototype.walker=function(){return new o(this)},e.exports=s},function(e,t,n){"use strict";function i(){}i.prototype.render=function(e){var t,n,i=e.walker();for(this.buffer="",this.lastOut="\n";t=i.next();)this[n=t.node.type]&&this[n](t.node,t.entering);return this.buffer},i.prototype.out=function(e){this.lit(e)},i.prototype.lit=function(e){this.buffer+=e,this.lastOut=e},i.prototype.cr=function(){"\n"!==this.lastOut&&this.lit("\n")},i.prototype.esc=function(e){return e},e.exports=i},function(e,t,n){"use strict";e.exports.Node=n(45),e.exports.Parser=n(75),e.exports.Renderer=n(46),e.exports.HtmlRenderer=n(86),e.exports.XmlRenderer=n(87)},function(e){e.exports=JSON.parse('[{"name":"Afghanistan","iso2":"AF","iso3":"AFG","phone":"+93"},{"name":"Åland Islands","iso2":"AX","iso3":"ALA","phone":"+358"},{"name":"Albania","iso2":"AL","iso3":"ALB","phone":"+355"},{"name":"Algeria","iso2":"DZ","iso3":"DZA","phone":"+213"},{"name":"American Samoa","iso2":"AS","iso3":"ASM","phone":"+1684"},{"name":"Andorra","iso2":"AD","iso3":"AND","phone":"+376"},{"name":"Angola","iso2":"AO","iso3":"AGO","phone":"+244"},{"name":"Anguilla","iso2":"AI","iso3":"AIA","phone":"+1264"},{"name":"Antarctica","iso2":"AQ","iso3":"ATA","phone":"+672"},{"name":"Antigua","iso2":"AG","iso3":"ATG","phone":"+1268"},{"name":"Argentina","iso2":"AR","iso3":"ARG","phone":"+54"},{"name":"Armenia","iso2":"AM","iso3":"ARM","phone":"+374"},{"name":"Aruba","iso2":"AW","iso3":"ABW","phone":"+297"},{"name":"Ascension Island","iso2":"SH","iso3":"SHN","phone":"+247"},{"name":"Australia","iso2":"AU","iso3":"AUS","phone":"+61"},{"name":"Australian Antarctic Territory","iso2":"AQ","iso3":"ATA","phone":"+672"},{"name":"Austria","iso2":"AT","iso3":"AUT","phone":"+43"},{"name":"Azerbaijan","iso2":"AZ","iso3":"AZE","phone":"+994"},{"name":"Bahamas","iso2":"BS","iso3":"BHS","phone":"+1242"},{"name":"Bahrain","iso2":"BH","iso3":"BHR","phone":"+973"},{"name":"Bangladesh","iso2":"BD","iso3":"BGD","phone":"+880"},{"name":"Barbados","iso2":"BB","iso3":"BRB","phone":"+1246"},{"name":"Belarus","iso2":"BY","iso3":"BLR","phone":"+375"},{"name":"Belgium","iso2":"BE","iso3":"BEL","phone":"+32"},{"name":"Belize","iso2":"BZ","iso3":"BLZ","phone":"+501"},{"name":"Benin","iso2":"BJ","iso3":"BEN","phone":"+229"},{"name":"Bermuda","iso2":"BM","iso3":"BMU","phone":"+1441"},{"name":"Bhutan","iso2":"BT","iso3":"BTN","phone":"+975"},{"name":"Bolivia","iso2":"BO","iso3":"BOL","phone":"+591"},{"name":"Bonaire, Sint Eustatius and Saba","iso2":"BQ","iso3":"BES","phone":"+599"},{"name":"Bosnia and Herzegovina","iso2":"BA","iso3":"BIH","phone":"+387"},{"name":"Botswana","iso2":"BW","iso3":"BWA","phone":"+267"},{"name":"Brazil","iso2":"BR","iso3":"BRA","phone":"+55"},{"name":"British Virgin Islands","iso2":"VG","iso3":"VGB","phone":"+1284"},{"name":"Brunei","iso2":"BN","iso3":"BRN","phone":"+673"},{"name":"Bulgaria","iso2":"BG","iso3":"BGR","phone":"+359"},{"name":"Burkina Faso","iso2":"BF","iso3":"BFA","phone":"+226"},{"name":"Burundi","iso2":"BI","iso3":"BDI","phone":"+257"},{"name":"Cambodia","iso2":"KH","iso3":"KHM","phone":"+855"},{"name":"Cameroon","iso2":"CM","iso3":"CMR","phone":"+237"},{"name":"Canada","iso2":"CA","iso3":"CAN","phone":"+1"},{"name":"Cape Verde","iso2":"CV","iso3":"CPV","phone":"+238"},{"name":"Cayman Islands","iso2":"KY","iso3":"CYM","phone":"+1345"},{"name":"Central African Republic","iso2":"CF","iso3":"CAF","phone":"+236"},{"name":"Chad","iso2":"TD","iso3":"TCD","phone":"+235"},{"name":"Chile","iso2":"CL","iso3":"CHL","phone":"+56"},{"name":"China","iso2":"CN","iso3":"CHN","phone":"+86"},{"name":"Christmas Island","iso2":"CX","iso3":"CXR","phone":"+61"},{"name":"Cocos (Keeling) Islands","iso2":"CC","iso3":"CCK","phone":"+61"},{"name":"Colombia","iso2":"CO","iso3":"COL","phone":"+57"},{"name":"Comoros","iso2":"KM","iso3":"COM","phone":"+269"},{"name":"Congo","iso2":"CG","iso3":"COG","phone":"+242"},{"name":"Cook Islands","iso2":"CK","iso3":"COK","phone":"+682"},{"name":"Costa Rica","iso2":"CR","iso3":"CRI","phone":"+506"},{"name":"Croatia","iso2":"HR","iso3":"HRV","phone":"+385"},{"name":"Cuba","iso2":"CU","iso3":"CUB","phone":"+53"},{"name":"Curaçao","iso2":"CW","iso3":"CUW","phone":"+599"},{"name":"Cyprus","iso2":"CY","iso3":"CYP","phone":"+357"},{"name":"Czech Republic","iso2":"CZ","iso3":"CZE","phone":"+420"},{"name":"Democratic Republic of the Congo","iso2":"CD","iso3":"COD","phone":"+243"},{"name":"Denmark","iso2":"DK","iso3":"DNK","phone":"+45"},{"name":"Diego Garcia","iso2":"IO","iso3":"IOT","phone":"+246"},{"name":"Djibouti","iso2":"DJ","iso3":"DJI","phone":"+253"},{"name":"Dominica","iso2":"DM","iso3":"DMA","phone":"+1767"},{"name":"Dominican Republic","iso2":"DO","iso3":"DOM","phone":"+1809"},{"name":"East Timor","iso2":"TL","iso3":"TLS","phone":"+670"},{"name":"Ecuador","iso2":"EC","iso3":"ECU","phone":"+593"},{"name":"Egypt","iso2":"EG","iso3":"EGY","phone":"+20"},{"name":"El Salvador","iso2":"SV","iso3":"SLV","phone":"+503"},{"name":"Equatorial Guinea","iso2":"GQ","iso3":"GNQ","phone":"+240"},{"name":"Eritrea","iso2":"ER","iso3":"ERI","phone":"+291"},{"name":"Estonia","iso2":"EE","iso3":"EST","phone":"+372"},{"name":"Ethiopia","iso2":"ET","iso3":"ETH","phone":"+251"},{"name":"Falkland Islands","iso2":"FK","iso3":"FLK","phone":"+500"},{"name":"Faroe Islands","iso2":"FO","iso3":"FRO","phone":"+298"},{"name":"Fiji","iso2":"FJ","iso3":"FJI","phone":"+679"},{"name":"Finland","iso2":"FI","iso3":"FIN","phone":"+358"},{"name":"France","iso2":"FR","iso3":"FRA","phone":"+33"},{"name":"French Guiana","iso2":"GF","iso3":"GUF","phone":"+594"},{"name":"French Polynesia","iso2":"PF","iso3":"PYF","phone":"+689"},{"name":"French Southern Territories","iso2":"TF","iso3":"ATF","phone":"+262"},{"name":"Gabon","iso2":"GA","iso3":"GAB","phone":"+241"},{"name":"Gambia","iso2":"GM","iso3":"GMB","phone":"+220"},{"name":"Georgia","iso2":"GE","iso3":"GEO","phone":"+995"},{"name":"Germany","iso2":"DE","iso3":"DEU","phone":"+49"},{"name":"Ghana","iso2":"GH","iso3":"GHA","phone":"+233"},{"name":"Gibraltar","iso2":"GI","iso3":"GIB","phone":"+350"},{"name":"Greece","iso2":"GR","iso3":"GRC","phone":"+30"},{"name":"Greenland","iso2":"GL","iso3":"GRL","phone":"+299"},{"name":"Grenada","iso2":"GD","iso3":"GRD","phone":"+1473"},{"name":"Guadeloupe","iso2":"GP","iso3":"GLP","phone":"+596"},{"name":"Guadeloupe","iso2":"GP","iso3":"GLP","phone":"+590"},{"name":"Guam","iso2":"GU","iso3":"GUM","phone":"+1671"},{"name":"Guatemala","iso2":"GT","iso3":"GTM","phone":"+502"},{"name":"Guernsey","iso2":"GG","iso3":"GGY","phone":"+44","phoneFormat":"**** *** ***"},{"name":"Guinea","iso2":"GN","iso3":"GIN","phone":"+224"},{"name":"Guinea-Bissau","iso2":"GW","iso3":"GNB","phone":"+245"},{"name":"Guyana","iso2":"GY","iso3":"GUY","phone":"+592"},{"name":"Haiti","iso2":"HT","iso3":"HTI","phone":"+509"},{"name":"Holy See","iso2":"VA","iso3":"VAT","phone":"+379"},{"name":"Honduras","iso2":"HN","iso3":"HND","phone":"+504"},{"name":"Hong Kong","iso2":"HK","iso3":"HKG","phone":"+852"},{"name":"Hungary","iso2":"HU","iso3":"HUN","phone":"+36"},{"name":"Iceland","iso2":"IS","iso3":"ISL","phone":"+354"},{"name":"India","iso2":"IN","iso3":"IND","phone":"+91"},{"name":"Indonesia","iso2":"ID","iso3":"IDN","phone":"+62"},{"name":"Iran","iso2":"IR","iso3":"IRN","phone":"+98"},{"name":"Iraq","iso2":"IQ","iso3":"IRQ","phone":"+964"},{"name":"Ireland","iso2":"IE","iso3":"IRL","phone":"+353"},{"name":"Isle of Man","iso2":"IM","iso3":"IMN","phone":"+44"},{"name":"Israel","iso2":"IL","iso3":"ISR","phone":"+972"},{"name":"Italy","iso2":"IT","iso3":"ITA","phone":"+39"},{"name":"Ivory Coast","iso2":"CI","iso3":"CIV","phone":"+225"},{"name":"Jamaica","iso2":"JM","iso3":"JAM","phone":"+1876"},{"name":"Japan","iso2":"JP","iso3":"JPN","phone":"+81"},{"name":"Jersey","iso2":"JE","iso3":"JEY","phone":"+44"},{"name":"Jordan","iso2":"JO","iso3":"JOR","phone":"+962"},{"name":"Kazakhstan","iso2":"KZ","iso3":"KAZ","phone":"+7"},{"name":"Kenya","iso2":"KE","iso3":"KEN","phone":"+254"},{"name":"Kiribati","iso2":"KI","iso3":"KIR","phone":"+686"},{"name":"Kosovo","iso2":"XK","iso3":"RKS","phone":"+383"},{"name":"Kuwait","iso2":"KW","iso3":"KWT","phone":"+965"},{"name":"Kyrgyzstan","iso2":"KG","iso3":"KGZ","phone":"+996"},{"name":"Laos","iso2":"LA","iso3":"LAO","phone":"+856"},{"name":"Latvia","iso2":"LV","iso3":"LVA","phone":"+371"},{"name":"Lebanon","iso2":"LB","iso3":"LBN","phone":"+961"},{"name":"Lesotho","iso2":"LS","iso3":"LSO","phone":"+266"},{"name":"Liberia","iso2":"LR","iso3":"LBR","phone":"+231"},{"name":"Libya","iso2":"LY","iso3":"LBY","phone":"+218"},{"name":"Liechtenstein","iso2":"LI","iso3":"LIE","phone":"+423"},{"name":"Lithuania","iso2":"LT","iso3":"LTU","phone":"+370"},{"name":"Luxembourg","iso2":"LU","iso3":"LUX","phone":"+352"},{"name":"Macau","iso2":"MO","iso3":"MAC","phone":"+853"},{"name":"Macedonia","iso2":"MK","iso3":"MKD","phone":"+389"},{"name":"Madagascar","iso2":"MG","iso3":"MDG","phone":"+261"},{"name":"Malawi","iso2":"MW","iso3":"MWI","phone":"+265"},{"name":"Malaysia","iso2":"MY","iso3":"MYS","phone":"+60"},{"name":"Maldives","iso2":"MV","iso3":"MDV","phone":"+960"},{"name":"Mali","iso2":"ML","iso3":"MLI","phone":"+223"},{"name":"Malta","iso2":"MT","iso3":"MLT","phone":"+356"},{"name":"Marshall Islands","iso2":"MH","iso3":"MHL","phone":"+692"},{"name":"Martinique","iso2":"MQ","iso3":"MTQ","phone":"+596"},{"name":"Mauritania","iso2":"MR","iso3":"MRT","phone":"+222"},{"name":"Mauritius","iso2":"MU","iso3":"MUS","phone":"+230"},{"name":"Mayotte","iso2":"YT","iso3":"MYT","phone":"+262"},{"name":"Mexico","iso2":"MX","iso3":"MEX","phone":"+52"},{"name":"Micronesia","iso2":"FM","iso3":"FSM","phone":"+691"},{"name":"Moldova","iso2":"MD","iso3":"MDA","phone":"+373"},{"name":"Monaco","iso2":"MC","iso3":"MCO","phone":"+377"},{"name":"Mongolia","iso2":"MN","iso3":"MNG","phone":"+976"},{"name":"Montenegro","iso2":"ME","iso3":"MNE","phone":"+382"},{"name":"Montserrat","iso2":"MS","iso3":"MSR","phone":"+1664"},{"name":"Morocco","iso2":"MA","iso3":"MAR","phone":"+212"},{"name":"Mozambique","iso2":"MZ","iso3":"MOZ","phone":"+258"},{"name":"Myanmar","iso2":"MM","iso3":"MMR","phone":"+95"},{"name":"Namibia","iso2":"NA","iso3":"NAM","phone":"+264"},{"name":"Nauru","iso2":"NR","iso3":"NRU","phone":"+674"},{"name":"Nepal","iso2":"NP","iso3":"NPL","phone":"+977"},{"name":"Netherlands","iso2":"NL","iso3":"NLD","phone":"+31"},{"name":"Netherlands Antilles","iso2":"AN","iso3":"ANT","phone":"+599"},{"name":"New Caledonia","iso2":"NC","iso3":"NCL","phone":"+687"},{"name":"New Zealand","iso2":"NZ","iso3":"NZL","phone":"+64"},{"name":"Nicaragua","iso2":"NI","iso3":"NIC","phone":"+505"},{"name":"Niger","iso2":"NE","iso3":"NER","phone":"+227"},{"name":"Nigeria","iso2":"NG","iso3":"NGA","phone":"+234"},{"name":"Niue","iso2":"NU","iso3":"NIU","phone":"+683"},{"name":"Norfolk Island","iso2":"NF","iso3":"NFK","phone":"+672"},{"name":"North Korea","iso2":"KP","iso3":"PRK","phone":"+850"},{"name":"Northern Mariana Islands","iso2":"MP","iso3":"MNP","phone":"+1670"},{"name":"Norway","iso2":"NO","iso3":"NOR","phone":"+47"},{"name":"Oman","iso2":"OM","iso3":"OMN","phone":"+968"},{"name":"Pakistan","iso2":"PK","iso3":"PAK","phone":"+92"},{"name":"Palau","iso2":"PW","iso3":"PLW","phone":"+680"},{"name":"Palestine","iso2":"PS","iso3":"PSE","phone":"+970"},{"name":"Panama","iso2":"PA","iso3":"PAN","phone":"+507"},{"name":"Papua New Guinea","iso2":"PG","iso3":"PNG","phone":"+675"},{"name":"Paraguay","iso2":"PY","iso3":"PRY","phone":"+595"},{"name":"Peru","iso2":"PE","iso3":"PER","phone":"+51"},{"name":"Philippines","iso2":"PH","iso3":"PHL","phone":"+63"},{"name":"Pitcairn","iso2":"PN","iso3":"PCN","phone":"+64"},{"name":"Poland","iso2":"PL","iso3":"POL","phone":"+48"},{"name":"Portugal","iso2":"PT","iso3":"PRT","phone":"+351"},{"name":"Puerto Rico","iso2":"PR","iso3":"PRI","phone":"+1939"},{"name":"Qatar","iso2":"QA","iso3":"QAT","phone":"+974"},{"name":"Reunion Island","iso2":"RE","iso3":"REU","phone":"+262"},{"name":"Romania","iso2":"RO","iso3":"ROU","phone":"+40"},{"name":"Russia","iso2":"RU","iso3":"RUS","phone":"+7"},{"name":"Rwanda","iso2":"RW","iso3":"RWA","phone":"+250"},{"name":"Saint Barthélemy","iso2":"BL","iso3":"BLM","phone":"+590"},{"name":"Saint Helena","iso2":"SH","iso3":"SHN","phone":"+290"},{"name":"Saint Kitts and Nevis","iso2":"KN","iso3":"KNA","phone":"+1869"},{"name":"Saint Lucia","iso2":"LC","iso3":"LCA","phone":"+1758"},{"name":"Saint Martin (French part)","iso2":"MF","iso3":"MAF","phone":"+590"},{"name":"Saint Pierre and Miquelon","iso2":"PM","iso3":"SPM","phone":"+508"},{"name":"Saint Vincent and the Grenadines","iso2":"VC","iso3":"VCT","phone":"+1784"},{"name":"San Marino","iso2":"SM","iso3":"SMR","phone":"+378"},{"name":"Sao Tome and Principe","iso2":"ST","iso3":"STP","phone":"+239"},{"name":"Saudi Arabia","iso2":"SA","iso3":"SAU","phone":"+966"},{"name":"Senegal","iso2":"SN","iso3":"SEN","phone":"+221"},{"name":"Serbia","iso2":"RS","iso3":"SRB","phone":"+381"},{"name":"Seychelles","iso2":"SC","iso3":"SYC","phone":"+248"},{"name":"Sierra Leone","iso2":"SL","iso3":"SLE","phone":"+232"},{"name":"Singapore","iso2":"SG","iso3":"SGP","phone":"+65"},{"name":"Sint Maarten","iso2":"SX","iso3":"SXM","phone":"+1721"},{"name":"Slovakia","iso2":"SK","iso3":"SVK","phone":"+421"},{"name":"Slovenia","iso2":"SI","iso3":"SVN","phone":"+386"},{"name":"Solomon Islands","iso2":"SB","iso3":"SLB","phone":"+677"},{"name":"Somalia","iso2":"SO","iso3":"SOM","phone":"+252"},{"name":"South Africa","iso2":"ZA","iso3":"ZAF","phone":"+27"},{"name":"South Georgia and the South Sandwich Islands","iso2":"GS","iso3":"SGS","phone":"+500"},{"name":"South Korea","iso2":"KR","iso3":"KOR","phone":"+82"},{"name":"South Sudan","iso2":"SS","iso3":"SSD","phone":"+2011"},{"name":"Spain","iso2":"ES","iso3":"ESP","phone":"+34"},{"name":"Sri Lanka","iso2":"LK","iso3":"LKA","phone":"+94"},{"name":"Sudan","iso2":"SD","iso3":"SDN","phone":"+249"},{"name":"Suriname","iso2":"SR","iso3":"SUR","phone":"+597"},{"name":"Svalbard and Jan Mayen","iso2":"SJ","iso3":"SJM","phone":"+47"},{"name":"Swaziland","iso2":"SZ","iso3":"SWZ","phone":"+268"},{"name":"Sweden","iso2":"SE","iso3":"SWE","phone":"+46"},{"name":"Switzerland","iso2":"CH","iso3":"CHE","phone":"+41"},{"name":"Syria","iso2":"SY","iso3":"SYR","phone":"+963"},{"name":"Taiwan","iso2":"TW","iso3":"TWN","phone":"+886"},{"name":"Tajikistan","iso2":"TJ","iso3":"TJK","phone":"+992"},{"name":"Tanzania","iso2":"TZ","iso3":"TZA","phone":"+255"},{"name":"Thailand","iso2":"TH","iso3":"THA","phone":"+66"},{"name":"Togo","iso2":"TG","iso3":"TGO","phone":"+228"},{"name":"Tokelau","iso2":"TK","iso3":"TKL","phone":"+690"},{"name":"Tonga","iso2":"TO","iso3":"TON","phone":"+676"},{"name":"Trinidad and Tobago","iso2":"TT","iso3":"TTO","phone":"+1868"},{"name":"Tunisia","iso2":"TN","iso3":"TUN","phone":"+216"},{"name":"Turkey","iso2":"TR","iso3":"TUR","phone":"+90"},{"name":"Turkmenistan","iso2":"TM","iso3":"TKM","phone":"+993"},{"name":"Turks and Caicos","iso2":"TC","iso3":"TCA","phone":"+1649"},{"name":"Tuvalu","iso2":"TV","iso3":"TUV","phone":"+688"},{"name":"Uganda","iso2":"UG","iso3":"UGA","phone":"+256"},{"name":"Ukraine","iso2":"UA","iso3":"UKR","phone":"+380"},{"name":"United Arab Emirates","iso2":"AE","iso3":"ARE","phone":"+971"},{"name":"United Kingdom","iso2":"GB","iso3":"GBR","phone":"+44","phoneFormat":"**** *** ***"},{"name":"United States Minor Outlying Islands","iso2":"UM","iso3":"UMI","phone":"+1"},{"name":"United States of America","iso2":"US","iso3":"USA","phone":"+1"},{"name":"Uruguay","iso2":"UY","iso3":"URY","phone":"+598"},{"name":"Uzbekistan","iso2":"UZ","iso3":"UZB","phone":"+998"},{"name":"Vanuatu","iso2":"VU","iso3":"VUT","phone":"+678"},{"name":"Venezuela","iso2":"VE","iso3":"VEN","phone":"+58"},{"name":"Vietnam","iso2":"VN","iso3":"VNM","phone":"+84"},{"name":"Virgin Islands (U.S.)","iso2":"VI","iso3":"VIR","phone":"+1340"},{"name":"Wallis and Futuna","iso2":"WF","iso3":"WLF","phone":"+681"},{"name":"Western Sahara","iso2":"EH","iso3":"ESH","phone":"+212"},{"name":"Western Samoa","iso2":"WS","iso3":"WSM","phone":"+685"},{"name":"Yemen","iso2":"YE","iso3":"YEM","phone":"+967"},{"name":"Zambia","iso2":"ZM","iso3":"ZMB","phone":"+260"},{"name":"Zimbabwe","iso2":"ZW","iso3":"ZWE","phone":"+263"}]')},function(e,t,n){var i=n(50);"string"==typeof i&&(i=[[e.i,i,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(24)(i,r);i.locals&&(e.exports=i.locals)},function(e,t,n){(e.exports=n(23)(!1)).push([e.i,"div.transparent-area{background-color:hsla(0,0%,98%,.9)}.icon-circle-shadow{background:#fff;box-shadow:0 4px 16px rgba(0,0,0,.08);padding:12px;box-sizing:border-box;border-radius:99px}.icon-circle-shadow svg{top:4px;position:relative}.inline-svg{top:.35em;position:relative}.droppable>.droppable-card--wider{padding-left:10px;padding-right:10px}@media (min-width:576px){p.first-error{min-height:72px}}@media only screen and (max-width:575px){.empty-processing-list{height:130px}.processing-list{min-height:130px}}@media only screen and (min-width:575px){.multi-upload{height:375px}.multi-upload .empty-screen{padding-top:40px}.empty-processing-list,.processing-list{height:290px}}.processing-list{overflow:auto}.processing-list,.processing-list .processing-item .media-body,.processing-list .processing-item .media-right{border-bottom:1px solid #e2e6e8}.processing-list .last-item .processing-item .media-body,.processing-list .last-item .processing-item .media-right{border-bottom:0}.processing-list .processing-item{position:relative;width:100%}.processing-list .processing-item .vertical-center{align-self:center}.empty-processing-list{display:flex;justify-content:center}.empty-processing-list .circle{background-color:#d8f1fa}.empty-processing-list .empty-screen{align-self:center}",""])},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,i=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var r,a=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(a)?e:(r=0===a.indexOf("//")?a:0===a.indexOf("/")?n+a:i+a.replace(/^\.\//,""),"url("+JSON.stringify(r)+")")})}},function(e,t,n){var i=n(53);"string"==typeof i&&(i=[[e.i,i,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(24)(i,r);i.locals&&(e.exports=i.locals)},function(e,t,n){(e.exports=n(23)(!1)).push([e.i,"#camera{position:fixed;top:0;left:0;width:100%;height:100%;z-index:1030;background:#000}#camera.translucent{background:rgba(0,0,0,.8)}#cameraViewfinder{position:absolute;top:0;left:0;width:100%;height:100%;z-index:1031;object-fit:contain}#cameraViewfinder.mirrored{-webkit-transform:scaleX(-1);transform:scaleX(-1)}#cameraViewfinderOverlay{position:absolute;z-index:1032;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);background-position:50%;background-size:contain;background-repeat:no-repeat}#cameraViewfinderOverlay.mirrored{-webkit-transform:translate(-50%,-50%) scaleX(-1);transform:translate(-50%,-50%) scaleX(-1)}#cameraSensor{position:absolute;z-index:1033;top:50%;left:50%;transform:translate(-50%,-50%)}.camera-ctrl-box-small{display:inline-block;height:60px;width:60px;margin-left:10px;margin-right:10px;vertical-align:bottom}.camera-ctrl-box-big{display:inline-block;height:84px;width:84px;margin-left:36px;margin-right:36px;vertical-align:bottom}.camera-ctrl-btn-cancel{color:red;background-color:#f8f9fa}.camera-ctrl-btn-confirm{color:green;background-color:#f8f9fa}.camera-ctrl-btn-small{display:inline-block;height:60px;width:60px;padding:4px;margin-bottom:0;font-size:52px;line-height:1;text-align:center;white-space:nowrap;vertical-align:middle;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-image:none;border-radius:50%}.camera-ctrl-btn-big-inner{height:64px;width:64px;padding:0;background-color:#f8f9fa;border:1px solid;border-radius:50%;border-color:#f8f9fa}.camera-ctrl-btn-big,.camera-ctrl-btn-big-inner{display:inline-block;margin-bottom:0;vertical-align:middle}.camera-ctrl-btn-big{height:84px;width:84px;padding:2px;-ms-touch-action:manipulation;touch-action:manipulation;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;background-color:#343a40;background-image:none;border:8px solid;border-radius:50%;border-color:#f8f9fa}.camera-ctrl-bar{padding-top:10px;padding-bottom:10px;z-index:1034!important}.fixed-bottom{position:fixed;right:0;bottom:0;left:0;z-index:1030}",""])},function(e,t,n){var i=n(77),r=n(78);t.decode=function(e,t){return(!t||t<=0?r.XML:r.HTML)(e)},t.decodeStrict=function(e,t){return(!t||t<=0?r.XML:r.HTMLStrict)(e)},t.encode=function(e,t){return(!t||t<=0?i.XML:i.HTML)(e)},t.encodeXML=i.XML,t.encodeHTML4=t.encodeHTML5=t.encodeHTML=i.HTML,t.decodeXML=t.decodeXMLStrict=r.XML,t.decodeHTML4=t.decodeHTML5=t.decodeHTML=r.HTML,t.decodeHTML4Strict=t.decodeHTML5Strict=t.decodeHTMLStrict=r.HTMLStrict,t.escape=i.escape},function(e){e.exports=JSON.parse('{"amp":"&","apos":"\'","gt":">","lt":"<","quot":"\\""}')},function(e){e.exports=JSON.parse('{"Aacute":"Á","aacute":"á","Abreve":"Ă","abreve":"ă","ac":"∾","acd":"∿","acE":"∾̳","Acirc":"Â","acirc":"â","acute":"´","Acy":"А","acy":"а","AElig":"Æ","aelig":"æ","af":"⁡","Afr":"𝔄","afr":"𝔞","Agrave":"À","agrave":"à","alefsym":"ℵ","aleph":"ℵ","Alpha":"Α","alpha":"α","Amacr":"Ā","amacr":"ā","amalg":"⨿","amp":"&","AMP":"&","andand":"⩕","And":"⩓","and":"∧","andd":"⩜","andslope":"⩘","andv":"⩚","ang":"∠","ange":"⦤","angle":"∠","angmsdaa":"⦨","angmsdab":"⦩","angmsdac":"⦪","angmsdad":"⦫","angmsdae":"⦬","angmsdaf":"⦭","angmsdag":"⦮","angmsdah":"⦯","angmsd":"∡","angrt":"∟","angrtvb":"⊾","angrtvbd":"⦝","angsph":"∢","angst":"Å","angzarr":"⍼","Aogon":"Ą","aogon":"ą","Aopf":"𝔸","aopf":"𝕒","apacir":"⩯","ap":"≈","apE":"⩰","ape":"≊","apid":"≋","apos":"\'","ApplyFunction":"⁡","approx":"≈","approxeq":"≊","Aring":"Å","aring":"å","Ascr":"𝒜","ascr":"𝒶","Assign":"≔","ast":"*","asymp":"≈","asympeq":"≍","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","awconint":"∳","awint":"⨑","backcong":"≌","backepsilon":"϶","backprime":"‵","backsim":"∽","backsimeq":"⋍","Backslash":"∖","Barv":"⫧","barvee":"⊽","barwed":"⌅","Barwed":"⌆","barwedge":"⌅","bbrk":"⎵","bbrktbrk":"⎶","bcong":"≌","Bcy":"Б","bcy":"б","bdquo":"„","becaus":"∵","because":"∵","Because":"∵","bemptyv":"⦰","bepsi":"϶","bernou":"ℬ","Bernoullis":"ℬ","Beta":"Β","beta":"β","beth":"ℶ","between":"≬","Bfr":"𝔅","bfr":"𝔟","bigcap":"⋂","bigcirc":"◯","bigcup":"⋃","bigodot":"⨀","bigoplus":"⨁","bigotimes":"⨂","bigsqcup":"⨆","bigstar":"★","bigtriangledown":"▽","bigtriangleup":"△","biguplus":"⨄","bigvee":"⋁","bigwedge":"⋀","bkarow":"⤍","blacklozenge":"⧫","blacksquare":"▪","blacktriangle":"▴","blacktriangledown":"▾","blacktriangleleft":"◂","blacktriangleright":"▸","blank":"␣","blk12":"▒","blk14":"░","blk34":"▓","block":"█","bne":"=⃥","bnequiv":"≡⃥","bNot":"⫭","bnot":"⌐","Bopf":"𝔹","bopf":"𝕓","bot":"⊥","bottom":"⊥","bowtie":"⋈","boxbox":"⧉","boxdl":"┐","boxdL":"╕","boxDl":"╖","boxDL":"╗","boxdr":"┌","boxdR":"╒","boxDr":"╓","boxDR":"╔","boxh":"─","boxH":"═","boxhd":"┬","boxHd":"╤","boxhD":"╥","boxHD":"╦","boxhu":"┴","boxHu":"╧","boxhU":"╨","boxHU":"╩","boxminus":"⊟","boxplus":"⊞","boxtimes":"⊠","boxul":"┘","boxuL":"╛","boxUl":"╜","boxUL":"╝","boxur":"└","boxuR":"╘","boxUr":"╙","boxUR":"╚","boxv":"│","boxV":"║","boxvh":"┼","boxvH":"╪","boxVh":"╫","boxVH":"╬","boxvl":"┤","boxvL":"╡","boxVl":"╢","boxVL":"╣","boxvr":"├","boxvR":"╞","boxVr":"╟","boxVR":"╠","bprime":"‵","breve":"˘","Breve":"˘","brvbar":"¦","bscr":"𝒷","Bscr":"ℬ","bsemi":"⁏","bsim":"∽","bsime":"⋍","bsolb":"⧅","bsol":"\\\\","bsolhsub":"⟈","bull":"•","bullet":"•","bump":"≎","bumpE":"⪮","bumpe":"≏","Bumpeq":"≎","bumpeq":"≏","Cacute":"Ć","cacute":"ć","capand":"⩄","capbrcup":"⩉","capcap":"⩋","cap":"∩","Cap":"⋒","capcup":"⩇","capdot":"⩀","CapitalDifferentialD":"ⅅ","caps":"∩︀","caret":"⁁","caron":"ˇ","Cayleys":"ℭ","ccaps":"⩍","Ccaron":"Č","ccaron":"č","Ccedil":"Ç","ccedil":"ç","Ccirc":"Ĉ","ccirc":"ĉ","Cconint":"∰","ccups":"⩌","ccupssm":"⩐","Cdot":"Ċ","cdot":"ċ","cedil":"¸","Cedilla":"¸","cemptyv":"⦲","cent":"¢","centerdot":"·","CenterDot":"·","cfr":"𝔠","Cfr":"ℭ","CHcy":"Ч","chcy":"ч","check":"✓","checkmark":"✓","Chi":"Χ","chi":"χ","circ":"ˆ","circeq":"≗","circlearrowleft":"↺","circlearrowright":"↻","circledast":"⊛","circledcirc":"⊚","circleddash":"⊝","CircleDot":"⊙","circledR":"®","circledS":"Ⓢ","CircleMinus":"⊖","CirclePlus":"⊕","CircleTimes":"⊗","cir":"○","cirE":"⧃","cire":"≗","cirfnint":"⨐","cirmid":"⫯","cirscir":"⧂","ClockwiseContourIntegral":"∲","CloseCurlyDoubleQuote":"”","CloseCurlyQuote":"’","clubs":"♣","clubsuit":"♣","colon":":","Colon":"∷","Colone":"⩴","colone":"≔","coloneq":"≔","comma":",","commat":"@","comp":"∁","compfn":"∘","complement":"∁","complexes":"ℂ","cong":"≅","congdot":"⩭","Congruent":"≡","conint":"∮","Conint":"∯","ContourIntegral":"∮","copf":"𝕔","Copf":"ℂ","coprod":"∐","Coproduct":"∐","copy":"©","COPY":"©","copysr":"℗","CounterClockwiseContourIntegral":"∳","crarr":"↵","cross":"✗","Cross":"⨯","Cscr":"𝒞","cscr":"𝒸","csub":"⫏","csube":"⫑","csup":"⫐","csupe":"⫒","ctdot":"⋯","cudarrl":"⤸","cudarrr":"⤵","cuepr":"⋞","cuesc":"⋟","cularr":"↶","cularrp":"⤽","cupbrcap":"⩈","cupcap":"⩆","CupCap":"≍","cup":"∪","Cup":"⋓","cupcup":"⩊","cupdot":"⊍","cupor":"⩅","cups":"∪︀","curarr":"↷","curarrm":"⤼","curlyeqprec":"⋞","curlyeqsucc":"⋟","curlyvee":"⋎","curlywedge":"⋏","curren":"¤","curvearrowleft":"↶","curvearrowright":"↷","cuvee":"⋎","cuwed":"⋏","cwconint":"∲","cwint":"∱","cylcty":"⌭","dagger":"†","Dagger":"‡","daleth":"ℸ","darr":"↓","Darr":"↡","dArr":"⇓","dash":"‐","Dashv":"⫤","dashv":"⊣","dbkarow":"⤏","dblac":"˝","Dcaron":"Ď","dcaron":"ď","Dcy":"Д","dcy":"д","ddagger":"‡","ddarr":"⇊","DD":"ⅅ","dd":"ⅆ","DDotrahd":"⤑","ddotseq":"⩷","deg":"°","Del":"∇","Delta":"Δ","delta":"δ","demptyv":"⦱","dfisht":"⥿","Dfr":"𝔇","dfr":"𝔡","dHar":"⥥","dharl":"⇃","dharr":"⇂","DiacriticalAcute":"´","DiacriticalDot":"˙","DiacriticalDoubleAcute":"˝","DiacriticalGrave":"`","DiacriticalTilde":"˜","diam":"⋄","diamond":"⋄","Diamond":"⋄","diamondsuit":"♦","diams":"♦","die":"¨","DifferentialD":"ⅆ","digamma":"ϝ","disin":"⋲","div":"÷","divide":"÷","divideontimes":"⋇","divonx":"⋇","DJcy":"Ђ","djcy":"ђ","dlcorn":"⌞","dlcrop":"⌍","dollar":"$","Dopf":"𝔻","dopf":"𝕕","Dot":"¨","dot":"˙","DotDot":"⃜","doteq":"≐","doteqdot":"≑","DotEqual":"≐","dotminus":"∸","dotplus":"∔","dotsquare":"⊡","doublebarwedge":"⌆","DoubleContourIntegral":"∯","DoubleDot":"¨","DoubleDownArrow":"⇓","DoubleLeftArrow":"⇐","DoubleLeftRightArrow":"⇔","DoubleLeftTee":"⫤","DoubleLongLeftArrow":"⟸","DoubleLongLeftRightArrow":"⟺","DoubleLongRightArrow":"⟹","DoubleRightArrow":"⇒","DoubleRightTee":"⊨","DoubleUpArrow":"⇑","DoubleUpDownArrow":"⇕","DoubleVerticalBar":"∥","DownArrowBar":"⤓","downarrow":"↓","DownArrow":"↓","Downarrow":"⇓","DownArrowUpArrow":"⇵","DownBreve":"̑","downdownarrows":"⇊","downharpoonleft":"⇃","downharpoonright":"⇂","DownLeftRightVector":"⥐","DownLeftTeeVector":"⥞","DownLeftVectorBar":"⥖","DownLeftVector":"↽","DownRightTeeVector":"⥟","DownRightVectorBar":"⥗","DownRightVector":"⇁","DownTeeArrow":"↧","DownTee":"⊤","drbkarow":"⤐","drcorn":"⌟","drcrop":"⌌","Dscr":"𝒟","dscr":"𝒹","DScy":"Ѕ","dscy":"ѕ","dsol":"⧶","Dstrok":"Đ","dstrok":"đ","dtdot":"⋱","dtri":"▿","dtrif":"▾","duarr":"⇵","duhar":"⥯","dwangle":"⦦","DZcy":"Џ","dzcy":"џ","dzigrarr":"⟿","Eacute":"É","eacute":"é","easter":"⩮","Ecaron":"Ě","ecaron":"ě","Ecirc":"Ê","ecirc":"ê","ecir":"≖","ecolon":"≕","Ecy":"Э","ecy":"э","eDDot":"⩷","Edot":"Ė","edot":"ė","eDot":"≑","ee":"ⅇ","efDot":"≒","Efr":"𝔈","efr":"𝔢","eg":"⪚","Egrave":"È","egrave":"è","egs":"⪖","egsdot":"⪘","el":"⪙","Element":"∈","elinters":"⏧","ell":"ℓ","els":"⪕","elsdot":"⪗","Emacr":"Ē","emacr":"ē","empty":"∅","emptyset":"∅","EmptySmallSquare":"◻","emptyv":"∅","EmptyVerySmallSquare":"▫","emsp13":" ","emsp14":" ","emsp":" ","ENG":"Ŋ","eng":"ŋ","ensp":" ","Eogon":"Ę","eogon":"ę","Eopf":"𝔼","eopf":"𝕖","epar":"⋕","eparsl":"⧣","eplus":"⩱","epsi":"ε","Epsilon":"Ε","epsilon":"ε","epsiv":"ϵ","eqcirc":"≖","eqcolon":"≕","eqsim":"≂","eqslantgtr":"⪖","eqslantless":"⪕","Equal":"⩵","equals":"=","EqualTilde":"≂","equest":"≟","Equilibrium":"⇌","equiv":"≡","equivDD":"⩸","eqvparsl":"⧥","erarr":"⥱","erDot":"≓","escr":"ℯ","Escr":"ℰ","esdot":"≐","Esim":"⩳","esim":"≂","Eta":"Η","eta":"η","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","euro":"€","excl":"!","exist":"∃","Exists":"∃","expectation":"ℰ","exponentiale":"ⅇ","ExponentialE":"ⅇ","fallingdotseq":"≒","Fcy":"Ф","fcy":"ф","female":"♀","ffilig":"ﬃ","fflig":"ﬀ","ffllig":"ﬄ","Ffr":"𝔉","ffr":"𝔣","filig":"ﬁ","FilledSmallSquare":"◼","FilledVerySmallSquare":"▪","fjlig":"fj","flat":"♭","fllig":"ﬂ","fltns":"▱","fnof":"ƒ","Fopf":"𝔽","fopf":"𝕗","forall":"∀","ForAll":"∀","fork":"⋔","forkv":"⫙","Fouriertrf":"ℱ","fpartint":"⨍","frac12":"½","frac13":"⅓","frac14":"¼","frac15":"⅕","frac16":"⅙","frac18":"⅛","frac23":"⅔","frac25":"⅖","frac34":"¾","frac35":"⅗","frac38":"⅜","frac45":"⅘","frac56":"⅚","frac58":"⅝","frac78":"⅞","frasl":"⁄","frown":"⌢","fscr":"𝒻","Fscr":"ℱ","gacute":"ǵ","Gamma":"Γ","gamma":"γ","Gammad":"Ϝ","gammad":"ϝ","gap":"⪆","Gbreve":"Ğ","gbreve":"ğ","Gcedil":"Ģ","Gcirc":"Ĝ","gcirc":"ĝ","Gcy":"Г","gcy":"г","Gdot":"Ġ","gdot":"ġ","ge":"≥","gE":"≧","gEl":"⪌","gel":"⋛","geq":"≥","geqq":"≧","geqslant":"⩾","gescc":"⪩","ges":"⩾","gesdot":"⪀","gesdoto":"⪂","gesdotol":"⪄","gesl":"⋛︀","gesles":"⪔","Gfr":"𝔊","gfr":"𝔤","gg":"≫","Gg":"⋙","ggg":"⋙","gimel":"ℷ","GJcy":"Ѓ","gjcy":"ѓ","gla":"⪥","gl":"≷","glE":"⪒","glj":"⪤","gnap":"⪊","gnapprox":"⪊","gne":"⪈","gnE":"≩","gneq":"⪈","gneqq":"≩","gnsim":"⋧","Gopf":"𝔾","gopf":"𝕘","grave":"`","GreaterEqual":"≥","GreaterEqualLess":"⋛","GreaterFullEqual":"≧","GreaterGreater":"⪢","GreaterLess":"≷","GreaterSlantEqual":"⩾","GreaterTilde":"≳","Gscr":"𝒢","gscr":"ℊ","gsim":"≳","gsime":"⪎","gsiml":"⪐","gtcc":"⪧","gtcir":"⩺","gt":">","GT":">","Gt":"≫","gtdot":"⋗","gtlPar":"⦕","gtquest":"⩼","gtrapprox":"⪆","gtrarr":"⥸","gtrdot":"⋗","gtreqless":"⋛","gtreqqless":"⪌","gtrless":"≷","gtrsim":"≳","gvertneqq":"≩︀","gvnE":"≩︀","Hacek":"ˇ","hairsp":" ","half":"½","hamilt":"ℋ","HARDcy":"Ъ","hardcy":"ъ","harrcir":"⥈","harr":"↔","hArr":"⇔","harrw":"↭","Hat":"^","hbar":"ℏ","Hcirc":"Ĥ","hcirc":"ĥ","hearts":"♥","heartsuit":"♥","hellip":"…","hercon":"⊹","hfr":"𝔥","Hfr":"ℌ","HilbertSpace":"ℋ","hksearow":"⤥","hkswarow":"⤦","hoarr":"⇿","homtht":"∻","hookleftarrow":"↩","hookrightarrow":"↪","hopf":"𝕙","Hopf":"ℍ","horbar":"―","HorizontalLine":"─","hscr":"𝒽","Hscr":"ℋ","hslash":"ℏ","Hstrok":"Ħ","hstrok":"ħ","HumpDownHump":"≎","HumpEqual":"≏","hybull":"⁃","hyphen":"‐","Iacute":"Í","iacute":"í","ic":"⁣","Icirc":"Î","icirc":"î","Icy":"И","icy":"и","Idot":"İ","IEcy":"Е","iecy":"е","iexcl":"¡","iff":"⇔","ifr":"𝔦","Ifr":"ℑ","Igrave":"Ì","igrave":"ì","ii":"ⅈ","iiiint":"⨌","iiint":"∭","iinfin":"⧜","iiota":"℩","IJlig":"Ĳ","ijlig":"ĳ","Imacr":"Ī","imacr":"ī","image":"ℑ","ImaginaryI":"ⅈ","imagline":"ℐ","imagpart":"ℑ","imath":"ı","Im":"ℑ","imof":"⊷","imped":"Ƶ","Implies":"⇒","incare":"℅","in":"∈","infin":"∞","infintie":"⧝","inodot":"ı","intcal":"⊺","int":"∫","Int":"∬","integers":"ℤ","Integral":"∫","intercal":"⊺","Intersection":"⋂","intlarhk":"⨗","intprod":"⨼","InvisibleComma":"⁣","InvisibleTimes":"⁢","IOcy":"Ё","iocy":"ё","Iogon":"Į","iogon":"į","Iopf":"𝕀","iopf":"𝕚","Iota":"Ι","iota":"ι","iprod":"⨼","iquest":"¿","iscr":"𝒾","Iscr":"ℐ","isin":"∈","isindot":"⋵","isinE":"⋹","isins":"⋴","isinsv":"⋳","isinv":"∈","it":"⁢","Itilde":"Ĩ","itilde":"ĩ","Iukcy":"І","iukcy":"і","Iuml":"Ï","iuml":"ï","Jcirc":"Ĵ","jcirc":"ĵ","Jcy":"Й","jcy":"й","Jfr":"𝔍","jfr":"𝔧","jmath":"ȷ","Jopf":"𝕁","jopf":"𝕛","Jscr":"𝒥","jscr":"𝒿","Jsercy":"Ј","jsercy":"ј","Jukcy":"Є","jukcy":"є","Kappa":"Κ","kappa":"κ","kappav":"ϰ","Kcedil":"Ķ","kcedil":"ķ","Kcy":"К","kcy":"к","Kfr":"𝔎","kfr":"𝔨","kgreen":"ĸ","KHcy":"Х","khcy":"х","KJcy":"Ќ","kjcy":"ќ","Kopf":"𝕂","kopf":"𝕜","Kscr":"𝒦","kscr":"𝓀","lAarr":"⇚","Lacute":"Ĺ","lacute":"ĺ","laemptyv":"⦴","lagran":"ℒ","Lambda":"Λ","lambda":"λ","lang":"⟨","Lang":"⟪","langd":"⦑","langle":"⟨","lap":"⪅","Laplacetrf":"ℒ","laquo":"«","larrb":"⇤","larrbfs":"⤟","larr":"←","Larr":"↞","lArr":"⇐","larrfs":"⤝","larrhk":"↩","larrlp":"↫","larrpl":"⤹","larrsim":"⥳","larrtl":"↢","latail":"⤙","lAtail":"⤛","lat":"⪫","late":"⪭","lates":"⪭︀","lbarr":"⤌","lBarr":"⤎","lbbrk":"❲","lbrace":"{","lbrack":"[","lbrke":"⦋","lbrksld":"⦏","lbrkslu":"⦍","Lcaron":"Ľ","lcaron":"ľ","Lcedil":"Ļ","lcedil":"ļ","lceil":"⌈","lcub":"{","Lcy":"Л","lcy":"л","ldca":"⤶","ldquo":"“","ldquor":"„","ldrdhar":"⥧","ldrushar":"⥋","ldsh":"↲","le":"≤","lE":"≦","LeftAngleBracket":"⟨","LeftArrowBar":"⇤","leftarrow":"←","LeftArrow":"←","Leftarrow":"⇐","LeftArrowRightArrow":"⇆","leftarrowtail":"↢","LeftCeiling":"⌈","LeftDoubleBracket":"⟦","LeftDownTeeVector":"⥡","LeftDownVectorBar":"⥙","LeftDownVector":"⇃","LeftFloor":"⌊","leftharpoondown":"↽","leftharpoonup":"↼","leftleftarrows":"⇇","leftrightarrow":"↔","LeftRightArrow":"↔","Leftrightarrow":"⇔","leftrightarrows":"⇆","leftrightharpoons":"⇋","leftrightsquigarrow":"↭","LeftRightVector":"⥎","LeftTeeArrow":"↤","LeftTee":"⊣","LeftTeeVector":"⥚","leftthreetimes":"⋋","LeftTriangleBar":"⧏","LeftTriangle":"⊲","LeftTriangleEqual":"⊴","LeftUpDownVector":"⥑","LeftUpTeeVector":"⥠","LeftUpVectorBar":"⥘","LeftUpVector":"↿","LeftVectorBar":"⥒","LeftVector":"↼","lEg":"⪋","leg":"⋚","leq":"≤","leqq":"≦","leqslant":"⩽","lescc":"⪨","les":"⩽","lesdot":"⩿","lesdoto":"⪁","lesdotor":"⪃","lesg":"⋚︀","lesges":"⪓","lessapprox":"⪅","lessdot":"⋖","lesseqgtr":"⋚","lesseqqgtr":"⪋","LessEqualGreater":"⋚","LessFullEqual":"≦","LessGreater":"≶","lessgtr":"≶","LessLess":"⪡","lesssim":"≲","LessSlantEqual":"⩽","LessTilde":"≲","lfisht":"⥼","lfloor":"⌊","Lfr":"𝔏","lfr":"𝔩","lg":"≶","lgE":"⪑","lHar":"⥢","lhard":"↽","lharu":"↼","lharul":"⥪","lhblk":"▄","LJcy":"Љ","ljcy":"љ","llarr":"⇇","ll":"≪","Ll":"⋘","llcorner":"⌞","Lleftarrow":"⇚","llhard":"⥫","lltri":"◺","Lmidot":"Ŀ","lmidot":"ŀ","lmoustache":"⎰","lmoust":"⎰","lnap":"⪉","lnapprox":"⪉","lne":"⪇","lnE":"≨","lneq":"⪇","lneqq":"≨","lnsim":"⋦","loang":"⟬","loarr":"⇽","lobrk":"⟦","longleftarrow":"⟵","LongLeftArrow":"⟵","Longleftarrow":"⟸","longleftrightarrow":"⟷","LongLeftRightArrow":"⟷","Longleftrightarrow":"⟺","longmapsto":"⟼","longrightarrow":"⟶","LongRightArrow":"⟶","Longrightarrow":"⟹","looparrowleft":"↫","looparrowright":"↬","lopar":"⦅","Lopf":"𝕃","lopf":"𝕝","loplus":"⨭","lotimes":"⨴","lowast":"∗","lowbar":"_","LowerLeftArrow":"↙","LowerRightArrow":"↘","loz":"◊","lozenge":"◊","lozf":"⧫","lpar":"(","lparlt":"⦓","lrarr":"⇆","lrcorner":"⌟","lrhar":"⇋","lrhard":"⥭","lrm":"‎","lrtri":"⊿","lsaquo":"‹","lscr":"𝓁","Lscr":"ℒ","lsh":"↰","Lsh":"↰","lsim":"≲","lsime":"⪍","lsimg":"⪏","lsqb":"[","lsquo":"‘","lsquor":"‚","Lstrok":"Ł","lstrok":"ł","ltcc":"⪦","ltcir":"⩹","lt":"<","LT":"<","Lt":"≪","ltdot":"⋖","lthree":"⋋","ltimes":"⋉","ltlarr":"⥶","ltquest":"⩻","ltri":"◃","ltrie":"⊴","ltrif":"◂","ltrPar":"⦖","lurdshar":"⥊","luruhar":"⥦","lvertneqq":"≨︀","lvnE":"≨︀","macr":"¯","male":"♂","malt":"✠","maltese":"✠","Map":"⤅","map":"↦","mapsto":"↦","mapstodown":"↧","mapstoleft":"↤","mapstoup":"↥","marker":"▮","mcomma":"⨩","Mcy":"М","mcy":"м","mdash":"—","mDDot":"∺","measuredangle":"∡","MediumSpace":" ","Mellintrf":"ℳ","Mfr":"𝔐","mfr":"𝔪","mho":"℧","micro":"µ","midast":"*","midcir":"⫰","mid":"∣","middot":"·","minusb":"⊟","minus":"−","minusd":"∸","minusdu":"⨪","MinusPlus":"∓","mlcp":"⫛","mldr":"…","mnplus":"∓","models":"⊧","Mopf":"𝕄","mopf":"𝕞","mp":"∓","mscr":"𝓂","Mscr":"ℳ","mstpos":"∾","Mu":"Μ","mu":"μ","multimap":"⊸","mumap":"⊸","nabla":"∇","Nacute":"Ń","nacute":"ń","nang":"∠⃒","nap":"≉","napE":"⩰̸","napid":"≋̸","napos":"ŉ","napprox":"≉","natural":"♮","naturals":"ℕ","natur":"♮","nbsp":" ","nbump":"≎̸","nbumpe":"≏̸","ncap":"⩃","Ncaron":"Ň","ncaron":"ň","Ncedil":"Ņ","ncedil":"ņ","ncong":"≇","ncongdot":"⩭̸","ncup":"⩂","Ncy":"Н","ncy":"н","ndash":"–","nearhk":"⤤","nearr":"↗","neArr":"⇗","nearrow":"↗","ne":"≠","nedot":"≐̸","NegativeMediumSpace":"​","NegativeThickSpace":"​","NegativeThinSpace":"​","NegativeVeryThinSpace":"​","nequiv":"≢","nesear":"⤨","nesim":"≂̸","NestedGreaterGreater":"≫","NestedLessLess":"≪","NewLine":"\\n","nexist":"∄","nexists":"∄","Nfr":"𝔑","nfr":"𝔫","ngE":"≧̸","nge":"≱","ngeq":"≱","ngeqq":"≧̸","ngeqslant":"⩾̸","nges":"⩾̸","nGg":"⋙̸","ngsim":"≵","nGt":"≫⃒","ngt":"≯","ngtr":"≯","nGtv":"≫̸","nharr":"↮","nhArr":"⇎","nhpar":"⫲","ni":"∋","nis":"⋼","nisd":"⋺","niv":"∋","NJcy":"Њ","njcy":"њ","nlarr":"↚","nlArr":"⇍","nldr":"‥","nlE":"≦̸","nle":"≰","nleftarrow":"↚","nLeftarrow":"⇍","nleftrightarrow":"↮","nLeftrightarrow":"⇎","nleq":"≰","nleqq":"≦̸","nleqslant":"⩽̸","nles":"⩽̸","nless":"≮","nLl":"⋘̸","nlsim":"≴","nLt":"≪⃒","nlt":"≮","nltri":"⋪","nltrie":"⋬","nLtv":"≪̸","nmid":"∤","NoBreak":"⁠","NonBreakingSpace":" ","nopf":"𝕟","Nopf":"ℕ","Not":"⫬","not":"¬","NotCongruent":"≢","NotCupCap":"≭","NotDoubleVerticalBar":"∦","NotElement":"∉","NotEqual":"≠","NotEqualTilde":"≂̸","NotExists":"∄","NotGreater":"≯","NotGreaterEqual":"≱","NotGreaterFullEqual":"≧̸","NotGreaterGreater":"≫̸","NotGreaterLess":"≹","NotGreaterSlantEqual":"⩾̸","NotGreaterTilde":"≵","NotHumpDownHump":"≎̸","NotHumpEqual":"≏̸","notin":"∉","notindot":"⋵̸","notinE":"⋹̸","notinva":"∉","notinvb":"⋷","notinvc":"⋶","NotLeftTriangleBar":"⧏̸","NotLeftTriangle":"⋪","NotLeftTriangleEqual":"⋬","NotLess":"≮","NotLessEqual":"≰","NotLessGreater":"≸","NotLessLess":"≪̸","NotLessSlantEqual":"⩽̸","NotLessTilde":"≴","NotNestedGreaterGreater":"⪢̸","NotNestedLessLess":"⪡̸","notni":"∌","notniva":"∌","notnivb":"⋾","notnivc":"⋽","NotPrecedes":"⊀","NotPrecedesEqual":"⪯̸","NotPrecedesSlantEqual":"⋠","NotReverseElement":"∌","NotRightTriangleBar":"⧐̸","NotRightTriangle":"⋫","NotRightTriangleEqual":"⋭","NotSquareSubset":"⊏̸","NotSquareSubsetEqual":"⋢","NotSquareSuperset":"⊐̸","NotSquareSupersetEqual":"⋣","NotSubset":"⊂⃒","NotSubsetEqual":"⊈","NotSucceeds":"⊁","NotSucceedsEqual":"⪰̸","NotSucceedsSlantEqual":"⋡","NotSucceedsTilde":"≿̸","NotSuperset":"⊃⃒","NotSupersetEqual":"⊉","NotTilde":"≁","NotTildeEqual":"≄","NotTildeFullEqual":"≇","NotTildeTilde":"≉","NotVerticalBar":"∤","nparallel":"∦","npar":"∦","nparsl":"⫽⃥","npart":"∂̸","npolint":"⨔","npr":"⊀","nprcue":"⋠","nprec":"⊀","npreceq":"⪯̸","npre":"⪯̸","nrarrc":"⤳̸","nrarr":"↛","nrArr":"⇏","nrarrw":"↝̸","nrightarrow":"↛","nRightarrow":"⇏","nrtri":"⋫","nrtrie":"⋭","nsc":"⊁","nsccue":"⋡","nsce":"⪰̸","Nscr":"𝒩","nscr":"𝓃","nshortmid":"∤","nshortparallel":"∦","nsim":"≁","nsime":"≄","nsimeq":"≄","nsmid":"∤","nspar":"∦","nsqsube":"⋢","nsqsupe":"⋣","nsub":"⊄","nsubE":"⫅̸","nsube":"⊈","nsubset":"⊂⃒","nsubseteq":"⊈","nsubseteqq":"⫅̸","nsucc":"⊁","nsucceq":"⪰̸","nsup":"⊅","nsupE":"⫆̸","nsupe":"⊉","nsupset":"⊃⃒","nsupseteq":"⊉","nsupseteqq":"⫆̸","ntgl":"≹","Ntilde":"Ñ","ntilde":"ñ","ntlg":"≸","ntriangleleft":"⋪","ntrianglelefteq":"⋬","ntriangleright":"⋫","ntrianglerighteq":"⋭","Nu":"Ν","nu":"ν","num":"#","numero":"№","numsp":" ","nvap":"≍⃒","nvdash":"⊬","nvDash":"⊭","nVdash":"⊮","nVDash":"⊯","nvge":"≥⃒","nvgt":">⃒","nvHarr":"⤄","nvinfin":"⧞","nvlArr":"⤂","nvle":"≤⃒","nvlt":"<⃒","nvltrie":"⊴⃒","nvrArr":"⤃","nvrtrie":"⊵⃒","nvsim":"∼⃒","nwarhk":"⤣","nwarr":"↖","nwArr":"⇖","nwarrow":"↖","nwnear":"⤧","Oacute":"Ó","oacute":"ó","oast":"⊛","Ocirc":"Ô","ocirc":"ô","ocir":"⊚","Ocy":"О","ocy":"о","odash":"⊝","Odblac":"Ő","odblac":"ő","odiv":"⨸","odot":"⊙","odsold":"⦼","OElig":"Œ","oelig":"œ","ofcir":"⦿","Ofr":"𝔒","ofr":"𝔬","ogon":"˛","Ograve":"Ò","ograve":"ò","ogt":"⧁","ohbar":"⦵","ohm":"Ω","oint":"∮","olarr":"↺","olcir":"⦾","olcross":"⦻","oline":"‾","olt":"⧀","Omacr":"Ō","omacr":"ō","Omega":"Ω","omega":"ω","Omicron":"Ο","omicron":"ο","omid":"⦶","ominus":"⊖","Oopf":"𝕆","oopf":"𝕠","opar":"⦷","OpenCurlyDoubleQuote":"“","OpenCurlyQuote":"‘","operp":"⦹","oplus":"⊕","orarr":"↻","Or":"⩔","or":"∨","ord":"⩝","order":"ℴ","orderof":"ℴ","ordf":"ª","ordm":"º","origof":"⊶","oror":"⩖","orslope":"⩗","orv":"⩛","oS":"Ⓢ","Oscr":"𝒪","oscr":"ℴ","Oslash":"Ø","oslash":"ø","osol":"⊘","Otilde":"Õ","otilde":"õ","otimesas":"⨶","Otimes":"⨷","otimes":"⊗","Ouml":"Ö","ouml":"ö","ovbar":"⌽","OverBar":"‾","OverBrace":"⏞","OverBracket":"⎴","OverParenthesis":"⏜","para":"¶","parallel":"∥","par":"∥","parsim":"⫳","parsl":"⫽","part":"∂","PartialD":"∂","Pcy":"П","pcy":"п","percnt":"%","period":".","permil":"‰","perp":"⊥","pertenk":"‱","Pfr":"𝔓","pfr":"𝔭","Phi":"Φ","phi":"φ","phiv":"ϕ","phmmat":"ℳ","phone":"☎","Pi":"Π","pi":"π","pitchfork":"⋔","piv":"ϖ","planck":"ℏ","planckh":"ℎ","plankv":"ℏ","plusacir":"⨣","plusb":"⊞","pluscir":"⨢","plus":"+","plusdo":"∔","plusdu":"⨥","pluse":"⩲","PlusMinus":"±","plusmn":"±","plussim":"⨦","plustwo":"⨧","pm":"±","Poincareplane":"ℌ","pointint":"⨕","popf":"𝕡","Popf":"ℙ","pound":"£","prap":"⪷","Pr":"⪻","pr":"≺","prcue":"≼","precapprox":"⪷","prec":"≺","preccurlyeq":"≼","Precedes":"≺","PrecedesEqual":"⪯","PrecedesSlantEqual":"≼","PrecedesTilde":"≾","preceq":"⪯","precnapprox":"⪹","precneqq":"⪵","precnsim":"⋨","pre":"⪯","prE":"⪳","precsim":"≾","prime":"′","Prime":"″","primes":"ℙ","prnap":"⪹","prnE":"⪵","prnsim":"⋨","prod":"∏","Product":"∏","profalar":"⌮","profline":"⌒","profsurf":"⌓","prop":"∝","Proportional":"∝","Proportion":"∷","propto":"∝","prsim":"≾","prurel":"⊰","Pscr":"𝒫","pscr":"𝓅","Psi":"Ψ","psi":"ψ","puncsp":" ","Qfr":"𝔔","qfr":"𝔮","qint":"⨌","qopf":"𝕢","Qopf":"ℚ","qprime":"⁗","Qscr":"𝒬","qscr":"𝓆","quaternions":"ℍ","quatint":"⨖","quest":"?","questeq":"≟","quot":"\\"","QUOT":"\\"","rAarr":"⇛","race":"∽̱","Racute":"Ŕ","racute":"ŕ","radic":"√","raemptyv":"⦳","rang":"⟩","Rang":"⟫","rangd":"⦒","range":"⦥","rangle":"⟩","raquo":"»","rarrap":"⥵","rarrb":"⇥","rarrbfs":"⤠","rarrc":"⤳","rarr":"→","Rarr":"↠","rArr":"⇒","rarrfs":"⤞","rarrhk":"↪","rarrlp":"↬","rarrpl":"⥅","rarrsim":"⥴","Rarrtl":"⤖","rarrtl":"↣","rarrw":"↝","ratail":"⤚","rAtail":"⤜","ratio":"∶","rationals":"ℚ","rbarr":"⤍","rBarr":"⤏","RBarr":"⤐","rbbrk":"❳","rbrace":"}","rbrack":"]","rbrke":"⦌","rbrksld":"⦎","rbrkslu":"⦐","Rcaron":"Ř","rcaron":"ř","Rcedil":"Ŗ","rcedil":"ŗ","rceil":"⌉","rcub":"}","Rcy":"Р","rcy":"р","rdca":"⤷","rdldhar":"⥩","rdquo":"”","rdquor":"”","rdsh":"↳","real":"ℜ","realine":"ℛ","realpart":"ℜ","reals":"ℝ","Re":"ℜ","rect":"▭","reg":"®","REG":"®","ReverseElement":"∋","ReverseEquilibrium":"⇋","ReverseUpEquilibrium":"⥯","rfisht":"⥽","rfloor":"⌋","rfr":"𝔯","Rfr":"ℜ","rHar":"⥤","rhard":"⇁","rharu":"⇀","rharul":"⥬","Rho":"Ρ","rho":"ρ","rhov":"ϱ","RightAngleBracket":"⟩","RightArrowBar":"⇥","rightarrow":"→","RightArrow":"→","Rightarrow":"⇒","RightArrowLeftArrow":"⇄","rightarrowtail":"↣","RightCeiling":"⌉","RightDoubleBracket":"⟧","RightDownTeeVector":"⥝","RightDownVectorBar":"⥕","RightDownVector":"⇂","RightFloor":"⌋","rightharpoondown":"⇁","rightharpoonup":"⇀","rightleftarrows":"⇄","rightleftharpoons":"⇌","rightrightarrows":"⇉","rightsquigarrow":"↝","RightTeeArrow":"↦","RightTee":"⊢","RightTeeVector":"⥛","rightthreetimes":"⋌","RightTriangleBar":"⧐","RightTriangle":"⊳","RightTriangleEqual":"⊵","RightUpDownVector":"⥏","RightUpTeeVector":"⥜","RightUpVectorBar":"⥔","RightUpVector":"↾","RightVectorBar":"⥓","RightVector":"⇀","ring":"˚","risingdotseq":"≓","rlarr":"⇄","rlhar":"⇌","rlm":"‏","rmoustache":"⎱","rmoust":"⎱","rnmid":"⫮","roang":"⟭","roarr":"⇾","robrk":"⟧","ropar":"⦆","ropf":"𝕣","Ropf":"ℝ","roplus":"⨮","rotimes":"⨵","RoundImplies":"⥰","rpar":")","rpargt":"⦔","rppolint":"⨒","rrarr":"⇉","Rrightarrow":"⇛","rsaquo":"›","rscr":"𝓇","Rscr":"ℛ","rsh":"↱","Rsh":"↱","rsqb":"]","rsquo":"’","rsquor":"’","rthree":"⋌","rtimes":"⋊","rtri":"▹","rtrie":"⊵","rtrif":"▸","rtriltri":"⧎","RuleDelayed":"⧴","ruluhar":"⥨","rx":"℞","Sacute":"Ś","sacute":"ś","sbquo":"‚","scap":"⪸","Scaron":"Š","scaron":"š","Sc":"⪼","sc":"≻","sccue":"≽","sce":"⪰","scE":"⪴","Scedil":"Ş","scedil":"ş","Scirc":"Ŝ","scirc":"ŝ","scnap":"⪺","scnE":"⪶","scnsim":"⋩","scpolint":"⨓","scsim":"≿","Scy":"С","scy":"с","sdotb":"⊡","sdot":"⋅","sdote":"⩦","searhk":"⤥","searr":"↘","seArr":"⇘","searrow":"↘","sect":"§","semi":";","seswar":"⤩","setminus":"∖","setmn":"∖","sext":"✶","Sfr":"𝔖","sfr":"𝔰","sfrown":"⌢","sharp":"♯","SHCHcy":"Щ","shchcy":"щ","SHcy":"Ш","shcy":"ш","ShortDownArrow":"↓","ShortLeftArrow":"←","shortmid":"∣","shortparallel":"∥","ShortRightArrow":"→","ShortUpArrow":"↑","shy":"­","Sigma":"Σ","sigma":"σ","sigmaf":"ς","sigmav":"ς","sim":"∼","simdot":"⩪","sime":"≃","simeq":"≃","simg":"⪞","simgE":"⪠","siml":"⪝","simlE":"⪟","simne":"≆","simplus":"⨤","simrarr":"⥲","slarr":"←","SmallCircle":"∘","smallsetminus":"∖","smashp":"⨳","smeparsl":"⧤","smid":"∣","smile":"⌣","smt":"⪪","smte":"⪬","smtes":"⪬︀","SOFTcy":"Ь","softcy":"ь","solbar":"⌿","solb":"⧄","sol":"/","Sopf":"𝕊","sopf":"𝕤","spades":"♠","spadesuit":"♠","spar":"∥","sqcap":"⊓","sqcaps":"⊓︀","sqcup":"⊔","sqcups":"⊔︀","Sqrt":"√","sqsub":"⊏","sqsube":"⊑","sqsubset":"⊏","sqsubseteq":"⊑","sqsup":"⊐","sqsupe":"⊒","sqsupset":"⊐","sqsupseteq":"⊒","square":"□","Square":"□","SquareIntersection":"⊓","SquareSubset":"⊏","SquareSubsetEqual":"⊑","SquareSuperset":"⊐","SquareSupersetEqual":"⊒","SquareUnion":"⊔","squarf":"▪","squ":"□","squf":"▪","srarr":"→","Sscr":"𝒮","sscr":"𝓈","ssetmn":"∖","ssmile":"⌣","sstarf":"⋆","Star":"⋆","star":"☆","starf":"★","straightepsilon":"ϵ","straightphi":"ϕ","strns":"¯","sub":"⊂","Sub":"⋐","subdot":"⪽","subE":"⫅","sube":"⊆","subedot":"⫃","submult":"⫁","subnE":"⫋","subne":"⊊","subplus":"⪿","subrarr":"⥹","subset":"⊂","Subset":"⋐","subseteq":"⊆","subseteqq":"⫅","SubsetEqual":"⊆","subsetneq":"⊊","subsetneqq":"⫋","subsim":"⫇","subsub":"⫕","subsup":"⫓","succapprox":"⪸","succ":"≻","succcurlyeq":"≽","Succeeds":"≻","SucceedsEqual":"⪰","SucceedsSlantEqual":"≽","SucceedsTilde":"≿","succeq":"⪰","succnapprox":"⪺","succneqq":"⪶","succnsim":"⋩","succsim":"≿","SuchThat":"∋","sum":"∑","Sum":"∑","sung":"♪","sup1":"¹","sup2":"²","sup3":"³","sup":"⊃","Sup":"⋑","supdot":"⪾","supdsub":"⫘","supE":"⫆","supe":"⊇","supedot":"⫄","Superset":"⊃","SupersetEqual":"⊇","suphsol":"⟉","suphsub":"⫗","suplarr":"⥻","supmult":"⫂","supnE":"⫌","supne":"⊋","supplus":"⫀","supset":"⊃","Supset":"⋑","supseteq":"⊇","supseteqq":"⫆","supsetneq":"⊋","supsetneqq":"⫌","supsim":"⫈","supsub":"⫔","supsup":"⫖","swarhk":"⤦","swarr":"↙","swArr":"⇙","swarrow":"↙","swnwar":"⤪","szlig":"ß","Tab":"\\t","target":"⌖","Tau":"Τ","tau":"τ","tbrk":"⎴","Tcaron":"Ť","tcaron":"ť","Tcedil":"Ţ","tcedil":"ţ","Tcy":"Т","tcy":"т","tdot":"⃛","telrec":"⌕","Tfr":"𝔗","tfr":"𝔱","there4":"∴","therefore":"∴","Therefore":"∴","Theta":"Θ","theta":"θ","thetasym":"ϑ","thetav":"ϑ","thickapprox":"≈","thicksim":"∼","ThickSpace":"  ","ThinSpace":" ","thinsp":" ","thkap":"≈","thksim":"∼","THORN":"Þ","thorn":"þ","tilde":"˜","Tilde":"∼","TildeEqual":"≃","TildeFullEqual":"≅","TildeTilde":"≈","timesbar":"⨱","timesb":"⊠","times":"×","timesd":"⨰","tint":"∭","toea":"⤨","topbot":"⌶","topcir":"⫱","top":"⊤","Topf":"𝕋","topf":"𝕥","topfork":"⫚","tosa":"⤩","tprime":"‴","trade":"™","TRADE":"™","triangle":"▵","triangledown":"▿","triangleleft":"◃","trianglelefteq":"⊴","triangleq":"≜","triangleright":"▹","trianglerighteq":"⊵","tridot":"◬","trie":"≜","triminus":"⨺","TripleDot":"⃛","triplus":"⨹","trisb":"⧍","tritime":"⨻","trpezium":"⏢","Tscr":"𝒯","tscr":"𝓉","TScy":"Ц","tscy":"ц","TSHcy":"Ћ","tshcy":"ћ","Tstrok":"Ŧ","tstrok":"ŧ","twixt":"≬","twoheadleftarrow":"↞","twoheadrightarrow":"↠","Uacute":"Ú","uacute":"ú","uarr":"↑","Uarr":"↟","uArr":"⇑","Uarrocir":"⥉","Ubrcy":"Ў","ubrcy":"ў","Ubreve":"Ŭ","ubreve":"ŭ","Ucirc":"Û","ucirc":"û","Ucy":"У","ucy":"у","udarr":"⇅","Udblac":"Ű","udblac":"ű","udhar":"⥮","ufisht":"⥾","Ufr":"𝔘","ufr":"𝔲","Ugrave":"Ù","ugrave":"ù","uHar":"⥣","uharl":"↿","uharr":"↾","uhblk":"▀","ulcorn":"⌜","ulcorner":"⌜","ulcrop":"⌏","ultri":"◸","Umacr":"Ū","umacr":"ū","uml":"¨","UnderBar":"_","UnderBrace":"⏟","UnderBracket":"⎵","UnderParenthesis":"⏝","Union":"⋃","UnionPlus":"⊎","Uogon":"Ų","uogon":"ų","Uopf":"𝕌","uopf":"𝕦","UpArrowBar":"⤒","uparrow":"↑","UpArrow":"↑","Uparrow":"⇑","UpArrowDownArrow":"⇅","updownarrow":"↕","UpDownArrow":"↕","Updownarrow":"⇕","UpEquilibrium":"⥮","upharpoonleft":"↿","upharpoonright":"↾","uplus":"⊎","UpperLeftArrow":"↖","UpperRightArrow":"↗","upsi":"υ","Upsi":"ϒ","upsih":"ϒ","Upsilon":"Υ","upsilon":"υ","UpTeeArrow":"↥","UpTee":"⊥","upuparrows":"⇈","urcorn":"⌝","urcorner":"⌝","urcrop":"⌎","Uring":"Ů","uring":"ů","urtri":"◹","Uscr":"𝒰","uscr":"𝓊","utdot":"⋰","Utilde":"Ũ","utilde":"ũ","utri":"▵","utrif":"▴","uuarr":"⇈","Uuml":"Ü","uuml":"ü","uwangle":"⦧","vangrt":"⦜","varepsilon":"ϵ","varkappa":"ϰ","varnothing":"∅","varphi":"ϕ","varpi":"ϖ","varpropto":"∝","varr":"↕","vArr":"⇕","varrho":"ϱ","varsigma":"ς","varsubsetneq":"⊊︀","varsubsetneqq":"⫋︀","varsupsetneq":"⊋︀","varsupsetneqq":"⫌︀","vartheta":"ϑ","vartriangleleft":"⊲","vartriangleright":"⊳","vBar":"⫨","Vbar":"⫫","vBarv":"⫩","Vcy":"В","vcy":"в","vdash":"⊢","vDash":"⊨","Vdash":"⊩","VDash":"⊫","Vdashl":"⫦","veebar":"⊻","vee":"∨","Vee":"⋁","veeeq":"≚","vellip":"⋮","verbar":"|","Verbar":"‖","vert":"|","Vert":"‖","VerticalBar":"∣","VerticalLine":"|","VerticalSeparator":"❘","VerticalTilde":"≀","VeryThinSpace":" ","Vfr":"𝔙","vfr":"𝔳","vltri":"⊲","vnsub":"⊂⃒","vnsup":"⊃⃒","Vopf":"𝕍","vopf":"𝕧","vprop":"∝","vrtri":"⊳","Vscr":"𝒱","vscr":"𝓋","vsubnE":"⫋︀","vsubne":"⊊︀","vsupnE":"⫌︀","vsupne":"⊋︀","Vvdash":"⊪","vzigzag":"⦚","Wcirc":"Ŵ","wcirc":"ŵ","wedbar":"⩟","wedge":"∧","Wedge":"⋀","wedgeq":"≙","weierp":"℘","Wfr":"𝔚","wfr":"𝔴","Wopf":"𝕎","wopf":"𝕨","wp":"℘","wr":"≀","wreath":"≀","Wscr":"𝒲","wscr":"𝓌","xcap":"⋂","xcirc":"◯","xcup":"⋃","xdtri":"▽","Xfr":"𝔛","xfr":"𝔵","xharr":"⟷","xhArr":"⟺","Xi":"Ξ","xi":"ξ","xlarr":"⟵","xlArr":"⟸","xmap":"⟼","xnis":"⋻","xodot":"⨀","Xopf":"𝕏","xopf":"𝕩","xoplus":"⨁","xotime":"⨂","xrarr":"⟶","xrArr":"⟹","Xscr":"𝒳","xscr":"𝓍","xsqcup":"⨆","xuplus":"⨄","xutri":"△","xvee":"⋁","xwedge":"⋀","Yacute":"Ý","yacute":"ý","YAcy":"Я","yacy":"я","Ycirc":"Ŷ","ycirc":"ŷ","Ycy":"Ы","ycy":"ы","yen":"¥","Yfr":"𝔜","yfr":"𝔶","YIcy":"Ї","yicy":"ї","Yopf":"𝕐","yopf":"𝕪","Yscr":"𝒴","yscr":"𝓎","YUcy":"Ю","yucy":"ю","yuml":"ÿ","Yuml":"Ÿ","Zacute":"Ź","zacute":"ź","Zcaron":"Ž","zcaron":"ž","Zcy":"З","zcy":"з","Zdot":"Ż","zdot":"ż","zeetrf":"ℨ","ZeroWidthSpace":"​","Zeta":"Ζ","zeta":"ζ","zfr":"𝔷","Zfr":"ℨ","ZHcy":"Ж","zhcy":"ж","zigrarr":"⇝","zopf":"𝕫","Zopf":"ℤ","Zscr":"𝒵","zscr":"𝓏","zwj":"‍","zwnj":"‌"}')},function(e,t){e.exports='<div class="btn-group btn-block dropdown" ng-keydown=$ctrl.keyHandler($event)> <button class="btn btn-input dropdown-toggle tw-date-lookup-button" data-toggle=dropdown ng-disabled=$ctrl.ngDisabled ng-click=$ctrl.openLookup() ng-focus=$ctrl.buttonFocus() ng-class="{\n      \'btn-sm\': $ctrl.size ===\'sm\',\n      \'btn-lg\': $ctrl.size ===\'lg\'\n    }"> <span ng-if=$ctrl.label class="control-label small m-r-1">{{$ctrl.label}}</span><span ng-if=!$ctrl.ngModel class="form-control-placeholder tw-date-lookup-placeholder visible-xs-inline visible-sm-inline visible-md-inline visible-lg-inline visible-xl-inline"> {{$ctrl.placeholder}} </span><span ng-if=$ctrl.ngModel class=tw-date-lookup-selected> {{$ctrl.selectedDateFormatted}} </span> <span class=caret></span> </button> <div class=dropdown-menu> <div ng-if="$ctrl.mode ===\'year\'" class=tw-date-lookup-years> <div class="text-xs-center p-t-1 p-b-2"> <div class="pull-xs-left p-b-2"> <a href="" ng-click="$ctrl.setYearOffset($event, -20)" class="text-no-decoration tw-date-lookup-previous-years"> <span class="icon icon-left icon-lg"></span> </a> </div> <div class="pull-xs-right p-b-2"> <a href="" ng-click="$ctrl.setYearOffset($event, 20)" class="text-no-decoration tw-date-lookup-next-years"> <span class="icon icon-right icon-lg"></span> </a> </div> </div> <table class="table table-condensed table-bordered table-calendar m-b-0"><thead class=sr-only> <tr> <th colspan=4>{{$ctrl.placeholder}}</th> </tr> </thead> <tbody> <tr ng-repeat="row in [0,4,8,12,16]"> <td ng-repeat="col in [0,1,2,3]"> <a href="" ng-click="$ctrl.selectYear($event, $ctrl.calculateYear(row, col))" ng-disabled="$ctrl.isYearDisabled($ctrl.calculateYear(row, col))" ng-class="{\n                  \'active\': $ctrl.selectedYear === $ctrl.calculateYear(row, col)\n                }" class=tw-date-lookup-year-option> {{$ctrl.calculateYear(row, col)}} </a> </td> </tr> </tbody> </table> </div> <div ng-if="$ctrl.mode ===\'month\'" class=tw-date-lookup-months> <div class="text-xs-center p-t-1 p-b-2"> <div class=pull-xs-left> <a href="" ng-click=$ctrl.yearBefore($event) class=text-no-decoration> <span class="icon icon-left icon-lg"></span> </a> </div> <a href="" ng-click=$ctrl.switchToYears($event) class=tw-date-lookup-year-label> {{$ctrl.year}} </a> <div class=pull-xs-right> <a href="" ng-click=$ctrl.yearAfter($event) class=text-no-decoration> <span class="icon icon-right icon-lg"></span> </a> </div> </div> <table class="table table-condensed table-bordered table-calendar m-b-0"><thead class=sr-only> <tr> <th colspan=3>{{$ctrl.placeholder}}</th> </tr> </thead> <tbody> <tr ng-repeat="row in [0,4,8]"> <td ng-repeat="col in [0,1,2,3]"> <a href="" ng-click="$ctrl.selectMonth($event, row+col, $ctrl.year)" ng-disabled="$ctrl.isMonthDisabled(row + col, $ctrl.year)" ng-class="{\n                  \'active\': $ctrl.selectedMonth === (row + col) && $ctrl.selectedYear === $ctrl.year\n                }" class=tw-date-lookup-month-option> {{$ctrl.shortMonthsOfYear[row+col] | limitTo:5}} </a> </td> </tr> </tbody> </table> </div> <div ng-if="$ctrl.mode ===\'day\'" class=tw-date-lookup-days> <div class="text-xs-center p-t-1 p-b-2"> <div class=pull-xs-left> <a href="" ng-click=$ctrl.monthBefore($event) class="text-no-decoration tw-date-lookup-previous-month"> <span class="icon icon-left icon-lg"></span> </a> </div> <a href="" ng-click=$ctrl.switchToYears($event) class=tw-date-lookup-month-label> {{$ctrl.yearMonthFormatted}} </a> <div class=pull-xs-right> <a href="" ng-click=$ctrl.monthAfter($event) class="text-no-decoration tw-date-lookup-next-month"> <span class="icon icon-right icon-lg"></span> </a> </div> </div> <table class="table table-condensed table-bordered table-calendar m-b-0"><thead> <tr> <th ng-repeat="day in $ctrl.daysOfWeek track by $index"> <span class=hidden-xs>{{day | limitTo : 3}}</span> <span class=visible-xs-inline-block>{{$ctrl.shortDaysOfWeek[$index] | limitTo : 2}}</span> </th> </tr> </thead> <tbody> <tr ng-repeat="week in $ctrl.weeks"> <td ng-repeat="day in week track by $index" ng-class="{\n                \'default\': $index > 4\n              }"> <a href="" title="{{day}} {{$ctrl.monthsOfYear[$ctrl.month]}} {{$ctrl.year}}" ng-if=day ng-click="$ctrl.selectDay($event, day, $ctrl.month, $ctrl.year)" ng-disabled="$ctrl.isDayDisabled(day, $ctrl.month, $ctrl.year)" ng-class="{\n                  \'active\': $ctrl.isCurrentlySelected(day, $ctrl.month, $ctrl.year)\n                }" class=tw-date-lookup-day-option tabindex=0> {{day}} </a> </td> </tr> </tbody> </table> </div> </div> </div> '},function(e,t){e.exports="<div class=input-group ng-class=\"{\n  'input-group-sm': $ctrl.size === 'sm',\n  'input-group-lg': $ctrl.size === 'lg',\n  'disabled': $ctrl.ngDisabled\n}\"> <input type=text autocomplete=off name=amount step=any class=\"form-control p-r-0\" placeholder={{$ctrl.placeholder}} show-decimals=$ctrl.showDecimals tw-focusable tw-number-input-formatter ng-change=$ctrl.changedInputValue() ng-model=$ctrl.ngModel ng-disabled=$ctrl.ngDisabled /> <span class=\"hello-world input-group-addon tw-currency-input-code p-l-1\"> <span ng-transclude=addon></span> {{ $ctrl.currency || $ctrl.currencyCode }} </span> </div> "},function(e,t){e.exports="<div class=input-group ng-class=\"{\n    'input-group-sm': $ctrl.size === 'sm',\n    'input-group-lg': $ctrl.size === 'lg',\n    'disabled': $ctrl.ngDisabled\n  }\"> <input type=text autocomplete=off name=amount step=any class=form-control placeholder=\"{{ $ctrl.placeholder }}\" tw-focusable show-decimals=$ctrl.showDecimals tw-number-input-formatter ng-change=$ctrl.changedAmount() ng-model=$ctrl.ngModel ng-disabled=$ctrl.ngDisabled /> <span class=input-group-addon ng-class=\"{'input-lg': $ctrl.size ==='lg'}\" ng-transclude=addon></span> <span class=\"input-group-btn amount-currency-select-btn\"> <tw-select ng-model=$ctrl.currency ng-required=true size=\"{{ $ctrl.size }}\" inverse=true dropdown-right=xs dropdown-width=lg hide-currency=xs hide-note=true hide-secondary=true options=$ctrl.currencies filter=\"{{ $ctrl.currencyFilterPlaceholder }}\" ng-change=$ctrl.changedCurrency()> <a href=\"\" ng-if=!!$ctrl.customActionLabel ng-click=$ctrl.onCustomAction()> {{ $ctrl.customActionLabel }} </a> </tw-select> </span> </div> "},function(e,t){e.exports='<fieldset ng-form=twFieldset> <legend ng-if=$ctrl.title>{{ $ctrl.title }}</legend> <p class=text-max-width ng-if=$ctrl.description>{{ $ctrl.description }}</p> <div class="row row-equal-height"> <div class=col-xs-12 ng-hide=field.hidden ng-repeat="(key, field) in $ctrl.fields" ng-class="{\n        \'col-sm-4\': !$ctrl.narrow  && field.width === \'sm\',\n        \'col-sm-6\': !$ctrl.narrow  && field.width === \'md\',\n        \'col-sm-12\': $ctrl.narrow || field.width === \'lg\'\n      }"> <tw-field ng-if="field.type !== \'object\'" name="{{ key }}" model=$ctrl.internalModel[key] field=field required=$ctrl.isRequired(key) submitted=$ctrl.submitted locale="{{ $ctrl.locale }}" upload-options=$ctrl.uploadOptions warning-message=$ctrl.warningMessages[key] error-message=$ctrl.errorMessages[key] validation-messages=$ctrl.validationMessages on-change="$ctrl.fieldChange(value, key, field)" on-focus="$ctrl.fieldFocus(key, field)" on-blur="$ctrl.fieldBlur(key, field)" class=tw-field-full-width> </tw-field> <tw-fieldset ng-if="field.type === \'object\'" model=$ctrl.internalModel[key] fields=field.properties locale="{{ $ctrl.locale }}" title="{{ field.title }}" description="{{ field.description }}" upload-options=$ctrl.uploadOptions warning-messages=$ctrl.warningMessages[key] error-messages=$ctrl.errorMessages[key] validation-messages=$ctrl.validationMessages on-refresh-requirements=$ctrl.refreshRequirements() on-field-change="$ctrl.fieldChange(value, key, field)" on-field-focus="$ctrl.fieldFocus(key, field)" on-field-blur="$ctrl.fieldBlur(key, field)" class=tw-field-full-width> </tw-fieldset> </div> </div> </fieldset> '},function(e,t){e.exports='<tw-tabs ng-if="$ctrl.requirements.length > 1" tabs=$ctrl.tabs on-change=$ctrl.onTabChange(index) active=$ctrl.activeIndex> </tw-tabs> <div class=tab-content ng-form=twForm ng-if="$ctrl.requirements.length > 0"> <div class="tab-pane active"> <p ng-if=$ctrl.requirements[$ctrl.activeIndex].description> {{ $ctrl.requirements[$ctrl.activeIndex].description }} </p> <tw-fieldset fields=$ctrl.requirements[$ctrl.activeIndex].properties model=$ctrl.model on-model-change=$ctrl.onFieldsetModelChange(model) upload-options=$ctrl.uploadOptions locale={{$ctrl.locale}} on-refresh-requirements=$ctrl.onFieldsetRefreshRequirements() validation-messages=$ctrl.validationMessages error-messages=$ctrl.errorMessages is-valid=$ctrl.isValid> </tw-fieldset> </div> </div> '},function(e,t){e.exports='<ul ng-if="$ctrl.tabs.length > 0" class="nav nav-tabs m-b-3"> <li ng-repeat="tab in $ctrl.tabs track by $index" ng-class="{\n      \'active\': $ctrl.active === $index\n    }"> <a href="" ng-click=$ctrl.switchTab($index)> {{ tab }} </a> </li> </ul> '},function(e,t){e.exports='<div class=m-t-1> <h4 ng-if=$ctrl.title ng-bind=$ctrl.title class="page-header p-t-3"> </h4> </div> <div ng-class="{\'row row-equal-height\': $ctrl.layout === \'vertical\'}"> <div ng-class="{\'col-xs-12 col-sm-6\': !$ctrl.narrow && $ctrl.layout === \'vertical\'}" ng-repeat="(key, field) in $ctrl.fields track by $index" ng-if="$ctrl.model[key] && !field.hidden"> <dl ng-if=!field.group ng-class="{\'dl-horizontal-item\': $ctrl.layout === \'justified\', \'dl-horizontal\': $ctrl.layout === \'horizontal\'}"> <dt ng-bind=field.title></dt> <dd ng-switch=field.control class=text-word-break> <span ng-switch-when=select|radio ng-switch-when-separator=|> {{ $ctrl.getValueLabel(field.values, $ctrl.model[key]) }} </span> <span ng-switch-when=date> {{ $ctrl.model[key] | twDateFormat: $ctrl.locale }} </span> <span ng-switch-when=number> {{ $ctrl.model[key] | twNumberFormat: $ctrl.locale }} </span> <span ng-switch-when=password> {{ $ctrl.mask($ctrl.model[key]) }} </span> <div ng-switch-when=file class=thumbnail> <img alt="{{ field.title }}" ng-src="{{ $ctrl.model[key] }}" ng-attr-alt="{{ field.title }}"/> </div> <span ng-switch-when=checkbox-group> {{ $ctrl.getCheckboxGroupLabel(field.items.values, $ctrl.model[key]) }} </span> <span ng-switch-default> {{ $ctrl.model[key] | twTextFormat: field.displayFormat }} </span> </dd> </dl> <dl ng-if=field.group ng-class="{\'dl-horizontal-item\': $ctrl.layout === \'justified\', \'dl-horizontal\': $ctrl.layout === \'horizontal\'}"> <dt ng-bind=field.title></dt> <dd class=text-word-break> <span ng-repeat="fieldSection in field.group"> <span ng-switch=fieldSection.control> <span ng-switch-when=select|radio ng-switch-when-separator=|> {{ $ctrl.getValueLabel(fieldSection.values, $ctrl.model[fieldSection.key]) }} </span> <span ng-switch-when=date> {{ $ctrl.model[fieldSection.key] | twDateFormat: $ctrl.locale }} </span> <span ng-switch-when=number> {{ $ctrl.model[fieldSection.key] | twNumberFormat: $ctrl.locale }} </span> <span ng-switch-when=password> {{ $ctrl.mask($ctrl.model[fieldSection.key]) }} </span> <div ng-switch-when=file class=thumbnail> <img alt="{{ field.title }}" ng-src="{{ $ctrl.model[fieldSection.key] }}" ng-attr-alt="{{ field.title }}"/> </div> <span ng-switch-when=checkbox-group> {{ $ctrl.getCheckboxGroupLabel(field.values, $ctrl.model[key]) }} </span> <span ng-switch-default> {{ $ctrl.model[fieldSection.key] | twTextFormat: fieldSection.displayFormat }} </span> </span> </span> </dd> </dl> </div> </div> '},function(e,t){e.exports="{{ $ctrl.amount | twNumberFormat : $ctrl.precision : $ctrl.locale }} "},function(e,t){e.exports="{{ $ctrl.amount | twCurrencyFormat : $ctrl.currency : $ctrl.locale }} "},function(e,t){e.exports="<div ng-bind-html=$ctrl.html></div>"},function(e,t){e.exports='<div class=row> <div class=col-xs-5> <tw-select name=phoneNumberPrefix options=$ctrl.callingCodes ng-model=$ctrl.prefix ng-change=$ctrl.onPrefixChange($ctrl.prefix) ng-disabled=$ctrl.ngDisabled ng-focus=$ctrl.onFocus() ng-blur=$ctrl.onBlur() placeholder=+ filter="{{ $ctrl.searchPlaceholder }}" dropdown-width=md hide-note=true></tw-select> </div> <div class=col-xs-7> <input type=tel name=phoneNumber placeholder="{{ $ctrl.placeholder }}" class=form-control ng-model=$ctrl.suffix ng-model-options="{ allowInvalid: true }" ng-change=$ctrl.onSuffixChange() ng-disabled=$ctrl.ngDisabled ng-focus=$ctrl.onFocus() ng-blur=$ctrl.onBlur() /> </div> </div> '},function(e,t){e.exports="<button class=\"btn btn-block\" ng-class=\"{\n    'btn-danger': $ctrl.colour === 'red',\n    'btn-primary': $ctrl.colour === 'blue'\n  }\" ng-disabled=\"$ctrl.isButtonDisabled || $ctrl.ngDisabled\"> <tw-process ng-if=$ctrl.isSpinnerVisible state=$ctrl.state size=xs> </tw-process> {{ $ctrl.label }} </button> "},function(e,t){e.exports='<div class="text-center tw-upload-droppable-box" ng-class="{\'active\': $ctrl.isActive}"> <span class="icon icon-upload tw-upload-droppable-icon"></span> <h4 class=m-t-2 ng-if=$ctrl.title>{{$ctrl.title}}</h4> <div class=row> <div class="col-xs-12 col-sm-6 col-sm-offset-3 m-t-1"> <ng-transclude></ng-transclude> <label class=link for=file-upload>{{$ctrl.cta}}</label> <input tw-file-select id=file-upload type=file accept={{$ctrl.accept}} class=hidden on-user-input=$ctrl.onManualUpload /> </div> </div> </div> '},function(e,t){e.exports='<li class="list-group-item p-a-0 list-group-item-{{$ctrl.state}}" ng-class="{\n    \'active\': $ctrl.open,\n    \'disabled\': $ctrl.disabled\n  }"> <div class=p-a-panel role="{{$ctrl.empty ? null : \'button\'}}" ng-click="!$ctrl.empty && $ctrl.toggle($ctrl.index)"> <div class=media> <div class=media-left> <div class="circle circle-sm circle-responsive" ng-class="{\'circle-inverse\': !$ctrl.inactive }"> <div ng-transclude=cardIcon></div> </div> </div> <div class=media-body ng-transclude=collapsedCard></div> <div class=media-right ng-class="{\'invisible\': $ctrl.empty }"> <span class="glyphicon hidden-xs hidden-sm anchor text-no-decoration font-weight-normal" ng-class="{\'glyphicon-chevron-up\': $ctrl.open, \'glyphicon-chevron-down\': !$ctrl.open}"></span> <span class="glyphicon visible-xs-inline visible-sm-inline anchor text-no-decoration font-weight-normal" ng-class="{\'glyphicon-chevron-right\': !$ctrl.open }"></span> </div> </div> </div> <div class=collapse ng-attr-aria-expanded="{{ $ctrl.open }}" ng-class="{\'in\': $ctrl.open }" ng-if=$ctrl.open> <div class="p-l-panel p-r-panel p-b-panel"> <div class=media> <div class=media-left> <div class="circle circle-sm circle-inverse circle-responsive invisible"></div> </div> <div class=media-body> <hr class="m-t-0 hidden-xs hidden-sm"/> <a href="" ng-click=$ctrl.toggle($ctrl.index) class="visible-xs-inline-block visible-sm-inline-block text-no-decoration m-t-1 tw-card-back"> <span class="icon icon-left-arrow icon-xxl"></span> </a> <div ng-transclude=expandedCard></div> </div> </div> </div> <div class="p-y-3 bg-default p-l-panel p-r-panel" ng-if=$ctrl.showForm> <div class=media> <div class=media-left> <div class="circle circle-sm circle-responsive invisible"></div> </div> <div class=media-body ng-transclude=cardForm></div> </div> </div> </div> <div ng-transclude=modals></div> </li> '},function(e,t){e.exports='<ul ng-transclude class="list-group panel-list-group list-group-slide-out" ng-class="{\'list-group-inactive\': $ctrl.inactive}"> </ul> '},function(e,t){e.exports='<div class=loader> <div class=loader-spinner></div> <div class=loader-flag> <svg xmlns=http://www.w3.org/2000/svg class=loader-flag-outline viewBox="-2 -2 56 56"> <polygon class=loader-flag-stroke stroke=#00B9FF stroke-width=2 stroke-linejoin=miter stroke-linecap=round stroke-miterlimit=10 stroke-dasharray=300 stroke-dashoffset=300 fill=none points="24.6,27.3 0,27.3 14.3,13.7 6.1,0 48.2,0 26.3,52 19.5,52 39.2,\n          5.5 16.8,5.5 21.6,13.6 13.4,21.8 27,21.8"/> </svg> <svg xmlns=http://www.w3.org/2000/svg class=loader-flag-fill viewBox="0 2 52 48"> <polygon fill=#00B9FF points="6.1,0 14.3,13.7 0,27.3 24.6,27.3 27,21.8 13.4,21.8 21.6,\n          13.6 16.8,5.5 39.2,5.5 19.5,52 26.3,52 48.2,0 "/> </svg> </div> </div> '},function(e,t,n){var i=n(74);"string"==typeof i&&(i=[[e.i,i,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(24)(i,r);i.locals&&(e.exports=i.locals)},function(e,t,n){(e.exports=n(23)(!1)).push([e.i,".tw-field-full-width{flex:1}",""])},function(e,t,n){"use strict";var i=n(45),r=n(13).unescapeString,a=n(13).OPENTAG,o=n(13).CLOSETAG,s=n(82),l=[/./,/^<(?:script|pre|style)(?:\s|>|$)/i,/^<!--/,/^<[?]/,/^<![A-Z]/,/^<!\[CDATA\[/,/^<[/]?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[123456]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\s|[/]?[>]|$)/i,new RegExp("^(?:"+a+"|"+o+")\\s*$","i")],c=[/./,/<\/(?:script|pre|style)>/i,/-->/,/\?>/,/>/,/\]\]>/],u=/^(?:(?:\*[ \t]*){3,}|(?:_[ \t]*){3,}|(?:-[ \t]*){3,})[ \t]*$/,d=/^[#`~*+_=<>0-9-]/,p=/[^ \t\f\v\r\n]/,h=/^[*+-]/,f=/^(\d{1,9})([.)])/,m=/^#{1,6}(?:[ \t]+|$)/,g=/^`{3,}(?!.*`)|^~{3,}/,v=/^(?:`{3,}|~{3,})(?= *$)/,b=/^(?:=+|-+)[ \t]*$/,y=/\r\n|\n|\r/,w=function(e){return 32===e||9===e},$=function(e,t){return t<e.length?e.charCodeAt(t):-1},C=function(e){for(;e;){if(e._lastLineBlank)return!0;var t=e.type;if(e._lastLineChecked||"list"!==t&&"item"!==t){e._lastLineChecked=!0;break}e._lastLineChecked=!0,e=e._lastChild}return!1},k=function(){if(this.partiallyConsumedTab){this.offset+=1;var e=4-this.column%4;this.tip._string_content+=" ".repeat(e)}this.tip._string_content+=this.currentLine.slice(this.offset)+"\n"},x=function(e,t){for(;!this.blocks[this.tip.type].canContain(e);)this.finalize(this.tip,this.lineNumber-1);var n=t+1,r=new i(e,[[this.lineNumber,n],[0,0]]);return r._string_content="",this.tip.appendChild(r),this.tip=r,r},A=function(){if(!this.allClosed){for(;this.oldtip!==this.lastMatchedContainer;){var e=this.oldtip._parent;this.finalize(this.oldtip,this.lineNumber-1),this.oldtip=e}this.allClosed=!0}},E={document:{continue:function(){return 0},finalize:function(){},canContain:function(e){return"item"!==e},acceptsLines:!1},list:{continue:function(){return 0},finalize:function(e,t){for(var n=t._firstChild;n;){if(C(n)&&n._next){t._listData.tight=!1;break}for(var i=n._firstChild;i;){if(C(i)&&(n._next||i._next)){t._listData.tight=!1;break}i=i._next}n=n._next}},canContain:function(e){return"item"===e},acceptsLines:!1},block_quote:{continue:function(e){var t=e.currentLine;return e.indented||62!==$(t,e.nextNonspace)?1:(e.advanceNextNonspace(),e.advanceOffset(1,!1),w($(t,e.offset))&&e.advanceOffset(1,!0),0)},finalize:function(){},canContain:function(e){return"item"!==e},acceptsLines:!1},item:{continue:function(e,t){if(e.blank){if(null==t._firstChild)return 1;e.advanceNextNonspace()}else{if(!(e.indent>=t._listData.markerOffset+t._listData.padding))return 1;e.advanceOffset(t._listData.markerOffset+t._listData.padding,!0)}return 0},finalize:function(){},canContain:function(e){return"item"!==e},acceptsLines:!1},heading:{continue:function(){return 1},finalize:function(){},canContain:function(){return!1},acceptsLines:!1},thematic_break:{continue:function(){return 1},finalize:function(){},canContain:function(){return!1},acceptsLines:!1},code_block:{continue:function(e,t){var n=e.currentLine,i=e.indent;if(t._isFenced){var r=i<=3&&n.charAt(e.nextNonspace)===t._fenceChar&&n.slice(e.nextNonspace).match(v);if(r&&r[0].length>=t._fenceLength)return e.lastLineLength=r[0].length,e.finalize(t,e.lineNumber),2;for(var a=t._fenceOffset;a>0&&w($(n,e.offset));)e.advanceOffset(1,!0),a--}else if(i>=4)e.advanceOffset(4,!0);else{if(!e.blank)return 1;e.advanceNextNonspace()}return 0},finalize:function(e,t){if(t._isFenced){var n=t._string_content,i=n.indexOf("\n"),a=n.slice(0,i),o=n.slice(i+1);t.info=r(a.trim()),t._literal=o}else t._literal=t._string_content.replace(/(\n *)+$/,"\n");t._string_content=null},canContain:function(){return!1},acceptsLines:!0},html_block:{continue:function(e,t){return!e.blank||6!==t._htmlBlockType&&7!==t._htmlBlockType?0:1},finalize:function(e,t){t._literal=t._string_content.replace(/(\n *)+$/,""),t._string_content=null},canContain:function(){return!1},acceptsLines:!0},paragraph:{continue:function(e){return e.blank?1:0},finalize:function(e,t){for(var n,i,r=!1;91===$(t._string_content,0)&&(n=e.inlineParser.parseReference(t._string_content,e.refmap));)t._string_content=t._string_content.slice(n),r=!0;r&&(i=t._string_content,!p.test(i))&&t.unlink()},canContain:function(){return!1},acceptsLines:!0}},D=[function(e){return e.indented||62!==$(e.currentLine,e.nextNonspace)?0:(e.advanceNextNonspace(),e.advanceOffset(1,!1),w($(e.currentLine,e.offset))&&e.advanceOffset(1,!0),e.closeUnmatchedBlocks(),e.addChild("block_quote",e.nextNonspace),1)},function(e){var t;if(!e.indented&&(t=e.currentLine.slice(e.nextNonspace).match(m))){e.advanceNextNonspace(),e.advanceOffset(t[0].length,!1),e.closeUnmatchedBlocks();var n=e.addChild("heading",e.nextNonspace);return n.level=t[0].trim().length,n._string_content=e.currentLine.slice(e.offset).replace(/^[ \t]*#+[ \t]*$/,"").replace(/[ \t]+#+[ \t]*$/,""),e.advanceOffset(e.currentLine.length-e.offset),2}return 0},function(e){var t;if(!e.indented&&(t=e.currentLine.slice(e.nextNonspace).match(g))){var n=t[0].length;e.closeUnmatchedBlocks();var i=e.addChild("code_block",e.nextNonspace);return i._isFenced=!0,i._fenceLength=n,i._fenceChar=t[0][0],i._fenceOffset=e.indent,e.advanceNextNonspace(),e.advanceOffset(n,!1),2}return 0},function(e,t){if(!e.indented&&60===$(e.currentLine,e.nextNonspace)){var n,i=e.currentLine.slice(e.nextNonspace);for(n=1;n<=7;n++){if(l[n].test(i)&&(n<7||"paragraph"!==t.type))return e.closeUnmatchedBlocks(),e.addChild("html_block",e.offset)._htmlBlockType=n,2}}return 0},function(e,t){var n;if(!e.indented&&"paragraph"===t.type&&(n=e.currentLine.slice(e.nextNonspace).match(b))){var r;for(e.closeUnmatchedBlocks();91===$(t._string_content,0)&&(r=e.inlineParser.parseReference(t._string_content,e.refmap));)t._string_content=t._string_content.slice(r);if(t._string_content.length>0){var a=new i("heading",t.sourcepos);return a.level="="===n[0][0]?1:2,a._string_content=t._string_content,t.insertAfter(a),t.unlink(),e.tip=a,e.advanceOffset(e.currentLine.length-e.offset,!1),2}return 0}return 0},function(e){return!e.indented&&u.test(e.currentLine.slice(e.nextNonspace))?(e.closeUnmatchedBlocks(),e.addChild("thematic_break",e.nextNonspace),e.advanceOffset(e.currentLine.length-e.offset,!1),2):0},function(e,t){var n,i,r;return e.indented&&"list"!==t.type||!(n=function(e,t){var n,i,r,a,o=e.currentLine.slice(e.nextNonspace),s={type:null,tight:!0,bulletChar:null,start:null,delimiter:null,padding:null,markerOffset:e.indent};if(e.indent>=4)return null;if(n=o.match(h))s.type="bullet",s.bulletChar=n[0][0];else{if(!(n=o.match(f))||"paragraph"===t.type&&"1"!==n[1])return null;s.type="ordered",s.start=parseInt(n[1]),s.delimiter=n[2]}if(-1!==(i=$(e.currentLine,e.nextNonspace+n[0].length))&&9!==i&&32!==i)return null;if("paragraph"===t.type&&!e.currentLine.slice(e.nextNonspace+n[0].length).match(p))return null;e.advanceNextNonspace(),e.advanceOffset(n[0].length,!0),r=e.column,a=e.offset;do{e.advanceOffset(1,!0),i=$(e.currentLine,e.offset)}while(e.column-r<5&&w(i));var l=-1===$(e.currentLine,e.offset),c=e.column-r;return c>=5||c<1||l?(s.padding=n[0].length+1,e.column=r,e.offset=a,w($(e.currentLine,e.offset))&&e.advanceOffset(1,!0)):s.padding=n[0].length+c,s}(e,t))?0:(e.closeUnmatchedBlocks(),"list"===e.tip.type&&(i=t._listData,r=n,i.type===r.type&&i.delimiter===r.delimiter&&i.bulletChar===r.bulletChar)||((t=e.addChild("list",e.nextNonspace))._listData=n),(t=e.addChild("item",e.nextNonspace))._listData=n,1)},function(e){return e.indented&&"paragraph"!==e.tip.type&&!e.blank?(e.advanceOffset(4,!0),e.closeUnmatchedBlocks(),e.addChild("code_block",e.offset),2):0}],S=function(e,t){for(var n,i,r,a=this.currentLine;e>0&&(r=a[this.offset]);)"\t"===r?(n=4-this.column%4,t?(this.partiallyConsumedTab=n>e,i=n>e?e:n,this.column+=i,this.offset+=this.partiallyConsumedTab?0:1,e-=i):(this.partiallyConsumedTab=!1,this.column+=n,this.offset+=1,e-=1)):(this.partiallyConsumedTab=!1,this.offset+=1,this.column+=1,e-=1)},M=function(){this.offset=this.nextNonspace,this.column=this.nextNonspaceColumn,this.partiallyConsumedTab=!1},F=function(){for(var e,t=this.currentLine,n=this.offset,i=this.column;""!==(e=t.charAt(n));)if(" "===e)n++,i++;else{if("\t"!==e)break;n++,i+=4-i%4}this.blank="\n"===e||"\r"===e||""===e,this.nextNonspace=n,this.nextNonspaceColumn=i,this.indent=this.nextNonspaceColumn-this.column,this.indented=this.indent>=4},T=function(e){var t,n,i=!0,r=this.doc;for(this.oldtip=this.tip,this.offset=0,this.column=0,this.blank=!1,this.partiallyConsumedTab=!1,this.lineNumber+=1,-1!==e.indexOf("\0")&&(e=e.replace(/\0/g,"�")),this.currentLine=e;(n=r._lastChild)&&n._open;){switch(r=n,this.findNextNonspace(),this.blocks[r.type].continue(this,r)){case 0:break;case 1:i=!1;break;case 2:return;default:throw"continue returned illegal value, must be 0, 1, or 2"}if(!i){r=r._parent;break}}this.allClosed=r===this.oldtip,this.lastMatchedContainer=r;for(var a="paragraph"!==r.type&&E[r.type].acceptsLines,o=this.blockStarts,s=o.length;!a;){if(this.findNextNonspace(),!this.indented&&!d.test(e.slice(this.nextNonspace))){this.advanceNextNonspace();break}for(var l=0;l<s;){var u=o[l](this,r);if(1===u){r=this.tip;break}if(2===u){r=this.tip,a=!0;break}l++}if(l===s){this.advanceNextNonspace();break}}if(this.allClosed||this.blank||"paragraph"!==this.tip.type){this.closeUnmatchedBlocks(),this.blank&&r.lastChild&&(r.lastChild._lastLineBlank=!0),t=r.type;for(var p=this.blank&&!("block_quote"===t||"code_block"===t&&r._isFenced||"item"===t&&!r._firstChild&&r.sourcepos[0][0]===this.lineNumber),h=r;h;)h._lastLineBlank=p,h=h._parent;this.blocks[t].acceptsLines?(this.addLine(),"html_block"===t&&r._htmlBlockType>=1&&r._htmlBlockType<=5&&c[r._htmlBlockType].test(this.currentLine.slice(this.offset))&&(this.lastLineLength=e.length,this.finalize(r,this.lineNumber))):this.offset<e.length&&!this.blank&&(r=this.addChild("paragraph",this.offset),this.advanceNextNonspace(),this.addLine())}else this.addLine();this.lastLineLength=e.length},L=function(e,t){var n=e._parent;e._open=!1,e.sourcepos[1]=[t,this.lastLineLength],this.blocks[e.type].finalize(this,e),this.tip=n},O=function(e){var t,n,i,r=e.walker();for(this.inlineParser.refmap=this.refmap,this.inlineParser.options=this.options;n=r.next();)i=(t=n.node).type,n.entering||"paragraph"!==i&&"heading"!==i||this.inlineParser.parse(t)},q=function(){return new i("document",[[1,1],[0,0]])},B=function(e){this.doc=new q,this.tip=this.doc,this.refmap={},this.lineNumber=0,this.lastLineLength=0,this.offset=0,this.column=0,this.lastMatchedContainer=this.doc,this.currentLine="",this.options.time&&console.time("preparing input");var t=e.split(y),n=t.length;10===e.charCodeAt(e.length-1)&&(n-=1),this.options.time&&console.timeEnd("preparing input"),this.options.time&&console.time("block parsing");for(var i=0;i<n;i++)this.incorporateLine(t[i]);for(;this.tip;)this.finalize(this.tip,n);return this.options.time&&console.timeEnd("block parsing"),this.options.time&&console.time("inline parsing"),this.processInlines(this.doc),this.options.time&&console.timeEnd("inline parsing"),this.doc};e.exports=function(e){return{doc:new q,blocks:E,blockStarts:D,tip:this.doc,oldtip:this.doc,currentLine:"",lineNumber:0,offset:0,column:0,nextNonspace:0,nextNonspaceColumn:0,indent:0,indented:!1,blank:!1,partiallyConsumedTab:!1,allClosed:!0,lastMatchedContainer:this.doc,refmap:{},lastLineLength:0,inlineParser:new s(e),findNextNonspace:F,advanceOffset:S,advanceNextNonspace:M,addLine:k,addChild:x,incorporateLine:T,finalize:L,processInlines:O,closeUnmatchedBlocks:A,parse:B,options:e||{}}}},function(e,t,n){"use strict";var i={};function r(e,t,n){var a,o,s,l,c,u="";for("string"!=typeof t&&(n=t,t=r.defaultChars),void 0===n&&(n=!0),c=function(e){var t,n,r=i[e];if(r)return r;for(r=i[e]=[],t=0;t<128;t++)n=String.fromCharCode(t),/^[0-9a-z]$/i.test(n)?r.push(n):r.push("%"+("0"+t.toString(16).toUpperCase()).slice(-2));for(t=0;t<e.length;t++)r[e.charCodeAt(t)]=e[t];return r}(t),a=0,o=e.length;a<o;a++)if(s=e.charCodeAt(a),n&&37===s&&a+2<o&&/^[0-9a-f]{2}$/i.test(e.slice(a+1,a+3)))u+=e.slice(a,a+3),a+=2;else if(s<128)u+=c[s];else if(s>=55296&&s<=57343){if(s>=55296&&s<=56319&&a+1<o&&(l=e.charCodeAt(a+1))>=56320&&l<=57343){u+=encodeURIComponent(e[a]+e[a+1]),a++;continue}u+="%EF%BF%BD"}else u+=encodeURIComponent(e[a]);return u}r.defaultChars=";/?:@&=+$,-_.!~*'()#",r.componentChars="-_.!~*'()",e.exports=r},function(e,t,n){var i=s(n(55)),r=l(i);t.XML=h(i,r);var a=s(n(56)),o=l(a);function s(e){return Object.keys(e).sort().reduce(function(t,n){return t[e[n]]="&"+n+";",t},{})}function l(e){var t=[],n=[];return Object.keys(e).forEach(function(e){1===e.length?t.push("\\"+e):n.push(e)}),n.unshift("["+t.join("")+"]"),new RegExp(n.join("|"),"g")}t.HTML=h(a,o);var c=/[^\0-\x7F]/g,u=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g;function d(e){return"&#x"+e.charCodeAt(0).toString(16).toUpperCase()+";"}function p(e){return"&#x"+(1024*(e.charCodeAt(0)-55296)+e.charCodeAt(1)-56320+65536).toString(16).toUpperCase()+";"}function h(e,t){function n(t){return e[t]}return function(e){return e.replace(t,n).replace(u,p).replace(c,d)}}var f=l(i);t.escape=function(e){return e.replace(f,d).replace(u,p).replace(c,d)}},function(e,t,n){var i=n(56),r=n(79),a=n(55),o=n(80),s=c(a),l=c(i);function c(e){var t=Object.keys(e).join("|"),n=p(e),i=new RegExp("&(?:"+(t+="|#[xX][\\da-fA-F]+|#\\d+")+");","g");return function(e){return String(e).replace(i,n)}}var u=function(){for(var e=Object.keys(r).sort(d),t=Object.keys(i).sort(d),n=0,a=0;n<t.length;n++)e[a]===t[n]?(t[n]+=";?",a++):t[n]+=";";var o=new RegExp("&(?:"+t.join("|")+"|#[xX][\\da-fA-F]+;?|#\\d+;?)","g"),s=p(i);function l(e){return";"!==e.substr(-1)&&(e+=";"),s(e)}return function(e){return String(e).replace(o,l)}}();function d(e,t){return e<t?1:-1}function p(e){return function(t){return"#"===t.charAt(1)?"X"===t.charAt(2)||"x"===t.charAt(2)?o(parseInt(t.substr(3),16)):o(parseInt(t.substr(2),10)):e[t.slice(1,-1)]}}e.exports={XML:s,HTML:u,HTMLStrict:l}},function(e){e.exports=JSON.parse('{"Aacute":"Á","aacute":"á","Acirc":"Â","acirc":"â","acute":"´","AElig":"Æ","aelig":"æ","Agrave":"À","agrave":"à","amp":"&","AMP":"&","Aring":"Å","aring":"å","Atilde":"Ã","atilde":"ã","Auml":"Ä","auml":"ä","brvbar":"¦","Ccedil":"Ç","ccedil":"ç","cedil":"¸","cent":"¢","copy":"©","COPY":"©","curren":"¤","deg":"°","divide":"÷","Eacute":"É","eacute":"é","Ecirc":"Ê","ecirc":"ê","Egrave":"È","egrave":"è","ETH":"Ð","eth":"ð","Euml":"Ë","euml":"ë","frac12":"½","frac14":"¼","frac34":"¾","gt":">","GT":">","Iacute":"Í","iacute":"í","Icirc":"Î","icirc":"î","iexcl":"¡","Igrave":"Ì","igrave":"ì","iquest":"¿","Iuml":"Ï","iuml":"ï","laquo":"«","lt":"<","LT":"<","macr":"¯","micro":"µ","middot":"·","nbsp":" ","not":"¬","Ntilde":"Ñ","ntilde":"ñ","Oacute":"Ó","oacute":"ó","Ocirc":"Ô","ocirc":"ô","Ograve":"Ò","ograve":"ò","ordf":"ª","ordm":"º","Oslash":"Ø","oslash":"ø","Otilde":"Õ","otilde":"õ","Ouml":"Ö","ouml":"ö","para":"¶","plusmn":"±","pound":"£","quot":"\\"","QUOT":"\\"","raquo":"»","reg":"®","REG":"®","sect":"§","shy":"­","sup1":"¹","sup2":"²","sup3":"³","szlig":"ß","THORN":"Þ","thorn":"þ","times":"×","Uacute":"Ú","uacute":"ú","Ucirc":"Û","ucirc":"û","Ugrave":"Ù","ugrave":"ù","uml":"¨","Uuml":"Ü","uuml":"ü","Yacute":"Ý","yacute":"ý","yen":"¥","yuml":"ÿ"}')},function(e,t,n){var i=n(81);e.exports=function(e){if(e>=55296&&e<=57343||e>1114111)return"�";e in i&&(e=i[e]);var t="";e>65535&&(e-=65536,t+=String.fromCharCode(e>>>10&1023|55296),e=56320|1023&e);return t+=String.fromCharCode(e)}},function(e){e.exports=JSON.parse('{"0":65533,"128":8364,"130":8218,"131":402,"132":8222,"133":8230,"134":8224,"135":8225,"136":710,"137":8240,"138":352,"139":8249,"140":338,"142":381,"145":8216,"146":8217,"147":8220,"148":8221,"149":8226,"150":8211,"151":8212,"152":732,"153":8482,"154":353,"155":8250,"156":339,"158":382,"159":376}')},function(e,t,n){"use strict";var i=n(45),r=n(13),a=n(83),o=r.normalizeURI,s=r.unescapeString,l=n(84),c=n(54).decodeHTML;n(85);var u=r.ESCAPABLE,d="\\\\"+u,p=r.ENTITY,h=r.reHtmlTag,f=new RegExp(/[!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E42\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC9\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDF3C-\uDF3E]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]/),m=new RegExp('^(?:"('+d+'|[^"\\x00])*"|\'('+d+"|[^'\\x00])*'|\\(("+d+"|[^()\\x00])*\\))"),g=/^(?:<(?:[^<>\n\\\x00]|\\.)*>)/,v=new RegExp("^"+u),b=new RegExp("^"+p,"i"),y=/`+/,w=/^`+/,$=/\.\.\./g,C=/--+/g,k=/^<([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/,x=/^<[A-Za-z][A-Za-z0-9.+-]{1,31}:[^<>\x00-\x20]*>/i,A=/^ *(?:\n *)?/,E=/^[ \t\n\x0b\x0c\x0d]/,D=/^\s/,S=/ *$/,M=/^ */,F=/^ *(?:\n|$)/,T=/^\[(?:[^\\\[\]]|\\.){0,1000}\]/,L=/^[^\n`\[\]\\!<&*_'"]+/m,O=function(e){var t=new i("text");return t._literal=e,t},q=function(e){var t=e.exec(this.subject.slice(this.pos));return null===t?null:(this.pos+=t.index+t[0].length,t[0])},B=function(){return this.pos<this.subject.length?this.subject.charCodeAt(this.pos):-1},N=function(){return this.match(A),!0},P=function(e){var t=this.match(w);if(null===t)return!1;for(var n,r,a,o=this.pos;null!==(n=this.match(y));)if(n===t)return r=new i("code"),(a=this.subject.slice(o,this.pos-t.length).replace(/\n/gm," ")).length>0&&null!==a.match(/[^ ]/)&&" "==a[0]&&" "==a[a.length-1]?r._literal=a.slice(1,a.length-1):r._literal=a,e.appendChild(r),!0;return this.pos=o,e.appendChild(O(t)),!0},j=function(e){var t,n=this.subject;return this.pos+=1,10===this.peek()?(this.pos+=1,t=new i("linebreak"),e.appendChild(t)):v.test(n.charAt(this.pos))?(e.appendChild(O(n.charAt(this.pos))),this.pos+=1):e.appendChild(O("\\")),!0},R=function(e){var t,n,r;return(t=this.match(k))?(n=t.slice(1,t.length-1),(r=new i("link"))._destination=o("mailto:"+n),r._title="",r.appendChild(O(n)),e.appendChild(r),!0):!!(t=this.match(x))&&(n=t.slice(1,t.length-1),(r=new i("link"))._destination=o(n),r._title="",r.appendChild(O(n)),e.appendChild(r),!0)},U=function(e){var t=this.match(h);if(null===t)return!1;var n=new i("html_inline");return n._literal=t,e.appendChild(n),!0},V=function(e){var t,n,i,r,a,o,s,c,u,d,p,h=0,m=this.pos;if(39===e||34===e)h++,this.pos++;else for(;this.peek()===e;)h++,this.pos++;return 0===h?null:(t=0===m?"\n":this.subject.charAt(m-1),n=-1===(i=this.peek())?"\n":l(i),c=D.test(n),u=f.test(n),d=D.test(t),p=f.test(t),r=!c&&(!u||d||p),a=!d&&(!p||c||u),95===e?(o=r&&(!a||p),s=a&&(!r||u)):39===e||34===e?(o=r&&!a,s=a):(o=r,s=a),this.pos=m,{numdelims:h,can_open:o,can_close:s})},_=function(e,t){var n=this.scanDelims(e);if(!n)return!1;var i,r=n.numdelims,a=this.pos;this.pos+=r,i=39===e?"’":34===e?"“":this.subject.slice(a,this.pos);var o=O(i);return t.appendChild(o),!n.can_open&&!n.can_close||!this.options.smart&&39===e&&34===e||(this.delimiters={cc:e,numdelims:r,origdelims:r,node:o,previous:this.delimiters,next:null,can_open:n.can_open,can_close:n.can_close},null!==this.delimiters.previous&&(this.delimiters.previous.next=this.delimiters)),!0},I=function(e){null!==e.previous&&(e.previous.next=e.next),null===e.next?this.delimiters=e.previous:e.next.previous=e.previous},G=function(e){for(var t,n,r,a,o,s,l,c,u,d,p,h,f=[[],[],[]],m=!1,g=0;g<3;g++)f[g][95]=e,f[g][42]=e,f[g][39]=e,f[g][34]=e;for(n=this.delimiters;null!==n&&n.previous!==e;)n=n.previous;for(;null!==n;){var v=n.cc;if(n.can_close){for(t=n.previous,d=!1;null!==t&&t!==e&&t!==f[n.origdelims%3][v];){if(m=(n.can_open||t.can_close)&&n.origdelims%3!=0&&(t.origdelims+n.origdelims)%3==0,t.cc===n.cc&&t.can_open&&!m){d=!0;break}t=t.previous}if(r=n,42===v||95===v)if(d){l=n.numdelims>=2&&t.numdelims>=2?2:1,a=t.node,o=n.node,t.numdelims-=l,n.numdelims-=l,a._literal=a._literal.slice(0,a._literal.length-l),o._literal=o._literal.slice(0,o._literal.length-l);var b=new i(1===l?"emph":"strong");for(c=a._next;c&&c!==o;)u=c._next,c.unlink(),b.appendChild(c),c=u;a.insertAfter(b),h=n,(p=t).next!==h&&(p.next=h,h.previous=p),0===t.numdelims&&(a.unlink(),this.removeDelimiter(t)),0===n.numdelims&&(o.unlink(),s=n.next,this.removeDelimiter(n),n=s)}else n=n.next;else 39===v?(n.node._literal="’",d&&(t.node._literal="‘"),n=n.next):34===v&&(n.node._literal="”",d&&(t.node.literal="“"),n=n.next);d||(f[r.origdelims%3][v]=r.previous,r.can_open||this.removeDelimiter(r))}else n=n.next}for(;null!==this.delimiters&&this.delimiters!==e;)this.removeDelimiter(this.delimiters)},z=function(){var e=this.match(m);return null===e?null:s(e.substr(1,e.length-2))},H=function(){var e=this.match(g);if(null===e){if(60===this.peek())return null;for(var t,n=this.pos,i=0;-1!==(t=this.peek());)if(92===t&&v.test(this.subject.charAt(this.pos+1)))this.pos+=1,-1!==this.peek()&&(this.pos+=1);else if(40===t)this.pos+=1,i+=1;else if(41===t){if(i<1)break;this.pos+=1,i-=1}else{if(null!==E.exec(l(t)))break;this.pos+=1}return this.pos===n&&41!==t?null:0!==i?null:(e=this.subject.substr(n,this.pos-n),o(s(e)))}return o(s(e.substr(1,e.length-2)))},Y=function(){var e=this.match(T);return null===e||e.length>1001?0:e.length},W=function(e){var t=this.pos;this.pos+=1;var n=O("[");return e.appendChild(n),this.addBracket(n,t,!1),!0},K=function(e){var t=this.pos;if(this.pos+=1,91===this.peek()){this.pos+=1;var n=O("![");e.appendChild(n),this.addBracket(n,t+1,!0)}else e.appendChild(O("!"));return!0},Z=function(e){var t,n,r,o,s,l,c=!1;if(this.pos+=1,t=this.pos,null===(l=this.brackets))return e.appendChild(O("]")),!0;if(!l.active)return e.appendChild(O("]")),this.removeBracket(),!0;n=l.image;var u=this.pos;if(40===this.peek()&&(this.pos++,this.spnl()&&null!==(r=this.parseLinkDestination())&&this.spnl()&&(E.test(this.subject.charAt(this.pos-1))&&(o=this.parseLinkTitle()),1)&&this.spnl()&&41===this.peek()?(this.pos+=1,c=!0):this.pos=u),!c){var d=this.pos,p=this.parseLinkLabel();if(p>2?s=this.subject.slice(d,d+p):l.bracketAfter||(s=this.subject.slice(l.index,t)),0===p&&(this.pos=u),s){var h=this.refmap[a(s)];h&&(r=h.destination,o=h.title,c=!0)}}if(c){var f,m,g=new i(n?"image":"link");for(g._destination=r,g._title=o||"",f=l.node._next;f;)m=f._next,f.unlink(),g.appendChild(f),f=m;if(e.appendChild(g),this.processEmphasis(l.previousDelimiter),this.removeBracket(),l.node.unlink(),!n)for(l=this.brackets;null!==l;)l.image||(l.active=!1),l=l.previous;return!0}return this.removeBracket(),this.pos=t,e.appendChild(O("]")),!0},X=function(e,t,n){null!==this.brackets&&(this.brackets.bracketAfter=!0),this.brackets={node:e,previous:this.brackets,previousDelimiter:this.delimiters,index:t,image:n,active:!0}},J=function(){this.brackets=this.brackets.previous},Q=function(e){var t;return!!(t=this.match(b))&&(e.appendChild(O(c(t))),!0)},ee=function(e){var t;return!!(t=this.match(L))&&(this.options.smart?e.appendChild(O(t.replace($,"…").replace(C,function(e){var t=0,n=0;return e.length%3==0?n=e.length/3:e.length%2==0?t=e.length/2:e.length%3==2?(t=1,n=(e.length-2)/3):(t=2,n=(e.length-4)/3),"—".repeat(n)+"–".repeat(t)}))):e.appendChild(O(t)),!0)},te=function(e){this.pos+=1;var t=e._lastChild;if(t&&"text"===t.type&&" "===t._literal[t._literal.length-1]){var n=" "===t._literal[t._literal.length-2];t._literal=t._literal.replace(S,""),e.appendChild(new i(n?"linebreak":"softbreak"))}else e.appendChild(new i("softbreak"));return this.match(M),!0},ne=function(e,t){var n,i,r,o;this.subject=e,this.pos=0;var s=this.pos;if(0===(o=this.parseLinkLabel()))return 0;if(n=this.subject.substr(0,o),58!==this.peek())return this.pos=s,0;if(this.pos++,this.spnl(),null===(i=this.parseLinkDestination()))return this.pos=s,0;var l=this.pos;this.spnl(),this.pos!==l&&(r=this.parseLinkTitle()),null===r&&(r="",this.pos=l);var c=!0;if(null===this.match(F)&&(""===r?c=!1:(r="",this.pos=l,c=null!==this.match(F))),!c)return this.pos=s,0;var u=a(n);return""===u?(this.pos=s,0):(t[u]||(t[u]={destination:i,title:r}),this.pos-s)},ie=function(e){var t=!1,n=this.peek();if(-1===n)return!1;switch(n){case 10:t=this.parseNewline(e);break;case 92:t=this.parseBackslash(e);break;case 96:t=this.parseBackticks(e);break;case 42:case 95:t=this.handleDelim(n,e);break;case 39:case 34:t=this.options.smart&&this.handleDelim(n,e);break;case 91:t=this.parseOpenBracket(e);break;case 33:t=this.parseBang(e);break;case 93:t=this.parseCloseBracket(e);break;case 60:t=this.parseAutolink(e)||this.parseHtmlTag(e);break;case 38:t=this.parseEntity(e);break;default:t=this.parseString(e)}return t||(this.pos+=1,e.appendChild(O(l(n)))),!0},re=function(e){for(this.subject=e._string_content.trim(),this.pos=0,this.delimiters=null,this.brackets=null;this.parseInline(e););e._string_content=null,this.processEmphasis(null)};e.exports=function(e){return{subject:"",delimiters:null,brackets:null,pos:0,refmap:{},match:q,peek:B,spnl:N,parseBackticks:P,parseBackslash:j,parseAutolink:R,parseHtmlTag:U,scanDelims:V,handleDelim:_,parseLinkTitle:z,parseLinkDestination:H,parseLinkLabel:Y,parseOpenBracket:W,parseBang:K,parseCloseBracket:Z,addBracket:X,removeBracket:J,parseEntity:Q,parseString:ee,parseNewline:te,parseReference:ne,parseInline:ie,processEmphasis:G,removeDelimiter:I,options:e||{},parse:re}}},function(e,t,n){"use strict";var i=/[ \t\r\n]+|[A-Z\xB5\xC0-\xD6\xD8-\xDF\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u0149\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u017F\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C5\u01C7\u01C8\u01CA\u01CB\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F0-\u01F2\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0345\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03AB\u03B0\u03C2\u03CF-\u03D1\u03D5\u03D6\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F0\u03F1\u03F4\u03F5\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u0587\u10A0-\u10C5\u10C7\u10CD\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E96-\u1E9B\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F50\u1F52\u1F54\u1F56\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1F80-\u1FAF\u1FB2-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD2\u1FD3\u1FD6-\u1FDB\u1FE2-\u1FE4\u1FE6-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2126\u212A\u212B\u2132\u2160-\u216F\u2183\u24B6-\u24CF\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0\uA7B1\uFB00-\uFB06\uFB13-\uFB17\uFF21-\uFF3A]|\uD801[\uDC00-\uDC27]|\uD806[\uDCA0-\uDCBF]/g,r={A:"a",B:"b",C:"c",D:"d",E:"e",F:"f",G:"g",H:"h",I:"i",J:"j",K:"k",L:"l",M:"m",N:"n",O:"o",P:"p",Q:"q",R:"r",S:"s",T:"t",U:"u",V:"v",W:"w",X:"x",Y:"y",Z:"z","µ":"μ","À":"à","Á":"á","Â":"â","Ã":"ã","Ä":"ä","Å":"å","Æ":"æ","Ç":"ç","È":"è","É":"é","Ê":"ê","Ë":"ë","Ì":"ì","Í":"í","Î":"î","Ï":"ï","Ð":"ð","Ñ":"ñ","Ò":"ò","Ó":"ó","Ô":"ô","Õ":"õ","Ö":"ö","Ø":"ø","Ù":"ù","Ú":"ú","Û":"û","Ü":"ü","Ý":"ý","Þ":"þ","Ā":"ā","Ă":"ă","Ą":"ą","Ć":"ć","Ĉ":"ĉ","Ċ":"ċ","Č":"č","Ď":"ď","Đ":"đ","Ē":"ē","Ĕ":"ĕ","Ė":"ė","Ę":"ę","Ě":"ě","Ĝ":"ĝ","Ğ":"ğ","Ġ":"ġ","Ģ":"ģ","Ĥ":"ĥ","Ħ":"ħ","Ĩ":"ĩ","Ī":"ī","Ĭ":"ĭ","Į":"į","Ĳ":"ĳ","Ĵ":"ĵ","Ķ":"ķ","Ĺ":"ĺ","Ļ":"ļ","Ľ":"ľ","Ŀ":"ŀ","Ł":"ł","Ń":"ń","Ņ":"ņ","Ň":"ň","Ŋ":"ŋ","Ō":"ō","Ŏ":"ŏ","Ő":"ő","Œ":"œ","Ŕ":"ŕ","Ŗ":"ŗ","Ř":"ř","Ś":"ś","Ŝ":"ŝ","Ş":"ş","Š":"š","Ţ":"ţ","Ť":"ť","Ŧ":"ŧ","Ũ":"ũ","Ū":"ū","Ŭ":"ŭ","Ů":"ů","Ű":"ű","Ų":"ų","Ŵ":"ŵ","Ŷ":"ŷ","Ÿ":"ÿ","Ź":"ź","Ż":"ż","Ž":"ž","ſ":"s","Ɓ":"ɓ","Ƃ":"ƃ","Ƅ":"ƅ","Ɔ":"ɔ","Ƈ":"ƈ","Ɖ":"ɖ","Ɗ":"ɗ","Ƌ":"ƌ","Ǝ":"ǝ","Ə":"ə","Ɛ":"ɛ","Ƒ":"ƒ","Ɠ":"ɠ","Ɣ":"ɣ","Ɩ":"ɩ","Ɨ":"ɨ","Ƙ":"ƙ","Ɯ":"ɯ","Ɲ":"ɲ","Ɵ":"ɵ","Ơ":"ơ","Ƣ":"ƣ","Ƥ":"ƥ","Ʀ":"ʀ","Ƨ":"ƨ","Ʃ":"ʃ","Ƭ":"ƭ","Ʈ":"ʈ","Ư":"ư","Ʊ":"ʊ","Ʋ":"ʋ","Ƴ":"ƴ","Ƶ":"ƶ","Ʒ":"ʒ","Ƹ":"ƹ","Ƽ":"ƽ","Ǆ":"ǆ","ǅ":"ǆ","Ǉ":"ǉ","ǈ":"ǉ","Ǌ":"ǌ","ǋ":"ǌ","Ǎ":"ǎ","Ǐ":"ǐ","Ǒ":"ǒ","Ǔ":"ǔ","Ǖ":"ǖ","Ǘ":"ǘ","Ǚ":"ǚ","Ǜ":"ǜ","Ǟ":"ǟ","Ǡ":"ǡ","Ǣ":"ǣ","Ǥ":"ǥ","Ǧ":"ǧ","Ǩ":"ǩ","Ǫ":"ǫ","Ǭ":"ǭ","Ǯ":"ǯ","Ǳ":"ǳ","ǲ":"ǳ","Ǵ":"ǵ","Ƕ":"ƕ","Ƿ":"ƿ","Ǹ":"ǹ","Ǻ":"ǻ","Ǽ":"ǽ","Ǿ":"ǿ","Ȁ":"ȁ","Ȃ":"ȃ","Ȅ":"ȅ","Ȇ":"ȇ","Ȉ":"ȉ","Ȋ":"ȋ","Ȍ":"ȍ","Ȏ":"ȏ","Ȑ":"ȑ","Ȓ":"ȓ","Ȕ":"ȕ","Ȗ":"ȗ","Ș":"ș","Ț":"ț","Ȝ":"ȝ","Ȟ":"ȟ","Ƞ":"ƞ","Ȣ":"ȣ","Ȥ":"ȥ","Ȧ":"ȧ","Ȩ":"ȩ","Ȫ":"ȫ","Ȭ":"ȭ","Ȯ":"ȯ","Ȱ":"ȱ","Ȳ":"ȳ","Ⱥ":"ⱥ","Ȼ":"ȼ","Ƚ":"ƚ","Ⱦ":"ⱦ","Ɂ":"ɂ","Ƀ":"ƀ","Ʉ":"ʉ","Ʌ":"ʌ","Ɇ":"ɇ","Ɉ":"ɉ","Ɋ":"ɋ","Ɍ":"ɍ","Ɏ":"ɏ","ͅ":"ι","Ͱ":"ͱ","Ͳ":"ͳ","Ͷ":"ͷ","Ϳ":"ϳ","Ά":"ά","Έ":"έ","Ή":"ή","Ί":"ί","Ό":"ό","Ύ":"ύ","Ώ":"ώ","Α":"α","Β":"β","Γ":"γ","Δ":"δ","Ε":"ε","Ζ":"ζ","Η":"η","Θ":"θ","Ι":"ι","Κ":"κ","Λ":"λ","Μ":"μ","Ν":"ν","Ξ":"ξ","Ο":"ο","Π":"π","Ρ":"ρ","Σ":"σ","Τ":"τ","Υ":"υ","Φ":"φ","Χ":"χ","Ψ":"ψ","Ω":"ω","Ϊ":"ϊ","Ϋ":"ϋ","ς":"σ","Ϗ":"ϗ","ϐ":"β","ϑ":"θ","ϕ":"φ","ϖ":"π","Ϙ":"ϙ","Ϛ":"ϛ","Ϝ":"ϝ","Ϟ":"ϟ","Ϡ":"ϡ","Ϣ":"ϣ","Ϥ":"ϥ","Ϧ":"ϧ","Ϩ":"ϩ","Ϫ":"ϫ","Ϭ":"ϭ","Ϯ":"ϯ","ϰ":"κ","ϱ":"ρ","ϴ":"θ","ϵ":"ε","Ϸ":"ϸ","Ϲ":"ϲ","Ϻ":"ϻ","Ͻ":"ͻ","Ͼ":"ͼ","Ͽ":"ͽ","Ѐ":"ѐ","Ё":"ё","Ђ":"ђ","Ѓ":"ѓ","Є":"є","Ѕ":"ѕ","І":"і","Ї":"ї","Ј":"ј","Љ":"љ","Њ":"њ","Ћ":"ћ","Ќ":"ќ","Ѝ":"ѝ","Ў":"ў","Џ":"џ","А":"а","Б":"б","В":"в","Г":"г","Д":"д","Е":"е","Ж":"ж","З":"з","И":"и","Й":"й","К":"к","Л":"л","М":"м","Н":"н","О":"о","П":"п","Р":"р","С":"с","Т":"т","У":"у","Ф":"ф","Х":"х","Ц":"ц","Ч":"ч","Ш":"ш","Щ":"щ","Ъ":"ъ","Ы":"ы","Ь":"ь","Э":"э","Ю":"ю","Я":"я","Ѡ":"ѡ","Ѣ":"ѣ","Ѥ":"ѥ","Ѧ":"ѧ","Ѩ":"ѩ","Ѫ":"ѫ","Ѭ":"ѭ","Ѯ":"ѯ","Ѱ":"ѱ","Ѳ":"ѳ","Ѵ":"ѵ","Ѷ":"ѷ","Ѹ":"ѹ","Ѻ":"ѻ","Ѽ":"ѽ","Ѿ":"ѿ","Ҁ":"ҁ","Ҋ":"ҋ","Ҍ":"ҍ","Ҏ":"ҏ","Ґ":"ґ","Ғ":"ғ","Ҕ":"ҕ","Җ":"җ","Ҙ":"ҙ","Қ":"қ","Ҝ":"ҝ","Ҟ":"ҟ","Ҡ":"ҡ","Ң":"ң","Ҥ":"ҥ","Ҧ":"ҧ","Ҩ":"ҩ","Ҫ":"ҫ","Ҭ":"ҭ","Ү":"ү","Ұ":"ұ","Ҳ":"ҳ","Ҵ":"ҵ","Ҷ":"ҷ","Ҹ":"ҹ","Һ":"һ","Ҽ":"ҽ","Ҿ":"ҿ","Ӏ":"ӏ","Ӂ":"ӂ","Ӄ":"ӄ","Ӆ":"ӆ","Ӈ":"ӈ","Ӊ":"ӊ","Ӌ":"ӌ","Ӎ":"ӎ","Ӑ":"ӑ","Ӓ":"ӓ","Ӕ":"ӕ","Ӗ":"ӗ","Ә":"ә","Ӛ":"ӛ","Ӝ":"ӝ","Ӟ":"ӟ","Ӡ":"ӡ","Ӣ":"ӣ","Ӥ":"ӥ","Ӧ":"ӧ","Ө":"ө","Ӫ":"ӫ","Ӭ":"ӭ","Ӯ":"ӯ","Ӱ":"ӱ","Ӳ":"ӳ","Ӵ":"ӵ","Ӷ":"ӷ","Ӹ":"ӹ","Ӻ":"ӻ","Ӽ":"ӽ","Ӿ":"ӿ","Ԁ":"ԁ","Ԃ":"ԃ","Ԅ":"ԅ","Ԇ":"ԇ","Ԉ":"ԉ","Ԋ":"ԋ","Ԍ":"ԍ","Ԏ":"ԏ","Ԑ":"ԑ","Ԓ":"ԓ","Ԕ":"ԕ","Ԗ":"ԗ","Ԙ":"ԙ","Ԛ":"ԛ","Ԝ":"ԝ","Ԟ":"ԟ","Ԡ":"ԡ","Ԣ":"ԣ","Ԥ":"ԥ","Ԧ":"ԧ","Ԩ":"ԩ","Ԫ":"ԫ","Ԭ":"ԭ","Ԯ":"ԯ","Ա":"ա","Բ":"բ","Գ":"գ","Դ":"դ","Ե":"ե","Զ":"զ","Է":"է","Ը":"ը","Թ":"թ","Ժ":"ժ","Ի":"ի","Լ":"լ","Խ":"խ","Ծ":"ծ","Կ":"կ","Հ":"հ","Ձ":"ձ","Ղ":"ղ","Ճ":"ճ","Մ":"մ","Յ":"յ","Ն":"ն","Շ":"շ","Ո":"ո","Չ":"չ","Պ":"պ","Ջ":"ջ","Ռ":"ռ","Ս":"ս","Վ":"վ","Տ":"տ","Ր":"ր","Ց":"ց","Ւ":"ւ","Փ":"փ","Ք":"ք","Օ":"օ","Ֆ":"ֆ","Ⴀ":"ⴀ","Ⴁ":"ⴁ","Ⴂ":"ⴂ","Ⴃ":"ⴃ","Ⴄ":"ⴄ","Ⴅ":"ⴅ","Ⴆ":"ⴆ","Ⴇ":"ⴇ","Ⴈ":"ⴈ","Ⴉ":"ⴉ","Ⴊ":"ⴊ","Ⴋ":"ⴋ","Ⴌ":"ⴌ","Ⴍ":"ⴍ","Ⴎ":"ⴎ","Ⴏ":"ⴏ","Ⴐ":"ⴐ","Ⴑ":"ⴑ","Ⴒ":"ⴒ","Ⴓ":"ⴓ","Ⴔ":"ⴔ","Ⴕ":"ⴕ","Ⴖ":"ⴖ","Ⴗ":"ⴗ","Ⴘ":"ⴘ","Ⴙ":"ⴙ","Ⴚ":"ⴚ","Ⴛ":"ⴛ","Ⴜ":"ⴜ","Ⴝ":"ⴝ","Ⴞ":"ⴞ","Ⴟ":"ⴟ","Ⴠ":"ⴠ","Ⴡ":"ⴡ","Ⴢ":"ⴢ","Ⴣ":"ⴣ","Ⴤ":"ⴤ","Ⴥ":"ⴥ","Ⴧ":"ⴧ","Ⴭ":"ⴭ","Ḁ":"ḁ","Ḃ":"ḃ","Ḅ":"ḅ","Ḇ":"ḇ","Ḉ":"ḉ","Ḋ":"ḋ","Ḍ":"ḍ","Ḏ":"ḏ","Ḑ":"ḑ","Ḓ":"ḓ","Ḕ":"ḕ","Ḗ":"ḗ","Ḙ":"ḙ","Ḛ":"ḛ","Ḝ":"ḝ","Ḟ":"ḟ","Ḡ":"ḡ","Ḣ":"ḣ","Ḥ":"ḥ","Ḧ":"ḧ","Ḩ":"ḩ","Ḫ":"ḫ","Ḭ":"ḭ","Ḯ":"ḯ","Ḱ":"ḱ","Ḳ":"ḳ","Ḵ":"ḵ","Ḷ":"ḷ","Ḹ":"ḹ","Ḻ":"ḻ","Ḽ":"ḽ","Ḿ":"ḿ","Ṁ":"ṁ","Ṃ":"ṃ","Ṅ":"ṅ","Ṇ":"ṇ","Ṉ":"ṉ","Ṋ":"ṋ","Ṍ":"ṍ","Ṏ":"ṏ","Ṑ":"ṑ","Ṓ":"ṓ","Ṕ":"ṕ","Ṗ":"ṗ","Ṙ":"ṙ","Ṛ":"ṛ","Ṝ":"ṝ","Ṟ":"ṟ","Ṡ":"ṡ","Ṣ":"ṣ","Ṥ":"ṥ","Ṧ":"ṧ","Ṩ":"ṩ","Ṫ":"ṫ","Ṭ":"ṭ","Ṯ":"ṯ","Ṱ":"ṱ","Ṳ":"ṳ","Ṵ":"ṵ","Ṷ":"ṷ","Ṹ":"ṹ","Ṻ":"ṻ","Ṽ":"ṽ","Ṿ":"ṿ","Ẁ":"ẁ","Ẃ":"ẃ","Ẅ":"ẅ","Ẇ":"ẇ","Ẉ":"ẉ","Ẋ":"ẋ","Ẍ":"ẍ","Ẏ":"ẏ","Ẑ":"ẑ","Ẓ":"ẓ","Ẕ":"ẕ","ẛ":"ṡ","Ạ":"ạ","Ả":"ả","Ấ":"ấ","Ầ":"ầ","Ẩ":"ẩ","Ẫ":"ẫ","Ậ":"ậ","Ắ":"ắ","Ằ":"ằ","Ẳ":"ẳ","Ẵ":"ẵ","Ặ":"ặ","Ẹ":"ẹ","Ẻ":"ẻ","Ẽ":"ẽ","Ế":"ế","Ề":"ề","Ể":"ể","Ễ":"ễ","Ệ":"ệ","Ỉ":"ỉ","Ị":"ị","Ọ":"ọ","Ỏ":"ỏ","Ố":"ố","Ồ":"ồ","Ổ":"ổ","Ỗ":"ỗ","Ộ":"ộ","Ớ":"ớ","Ờ":"ờ","Ở":"ở","Ỡ":"ỡ","Ợ":"ợ","Ụ":"ụ","Ủ":"ủ","Ứ":"ứ","Ừ":"ừ","Ử":"ử","Ữ":"ữ","Ự":"ự","Ỳ":"ỳ","Ỵ":"ỵ","Ỷ":"ỷ","Ỹ":"ỹ","Ỻ":"ỻ","Ỽ":"ỽ","Ỿ":"ỿ","Ἀ":"ἀ","Ἁ":"ἁ","Ἂ":"ἂ","Ἃ":"ἃ","Ἄ":"ἄ","Ἅ":"ἅ","Ἆ":"ἆ","Ἇ":"ἇ","Ἐ":"ἐ","Ἑ":"ἑ","Ἒ":"ἒ","Ἓ":"ἓ","Ἔ":"ἔ","Ἕ":"ἕ","Ἠ":"ἠ","Ἡ":"ἡ","Ἢ":"ἢ","Ἣ":"ἣ","Ἤ":"ἤ","Ἥ":"ἥ","Ἦ":"ἦ","Ἧ":"ἧ","Ἰ":"ἰ","Ἱ":"ἱ","Ἲ":"ἲ","Ἳ":"ἳ","Ἴ":"ἴ","Ἵ":"ἵ","Ἶ":"ἶ","Ἷ":"ἷ","Ὀ":"ὀ","Ὁ":"ὁ","Ὂ":"ὂ","Ὃ":"ὃ","Ὄ":"ὄ","Ὅ":"ὅ","Ὑ":"ὑ","Ὓ":"ὓ","Ὕ":"ὕ","Ὗ":"ὗ","Ὠ":"ὠ","Ὡ":"ὡ","Ὢ":"ὢ","Ὣ":"ὣ","Ὤ":"ὤ","Ὥ":"ὥ","Ὦ":"ὦ","Ὧ":"ὧ","Ᾰ":"ᾰ","Ᾱ":"ᾱ","Ὰ":"ὰ","Ά":"ά","ι":"ι","Ὲ":"ὲ","Έ":"έ","Ὴ":"ὴ","Ή":"ή","Ῐ":"ῐ","Ῑ":"ῑ","Ὶ":"ὶ","Ί":"ί","Ῠ":"ῠ","Ῡ":"ῡ","Ὺ":"ὺ","Ύ":"ύ","Ῥ":"ῥ","Ὸ":"ὸ","Ό":"ό","Ὼ":"ὼ","Ώ":"ώ","Ω":"ω","K":"k","Å":"å","Ⅎ":"ⅎ","Ⅰ":"ⅰ","Ⅱ":"ⅱ","Ⅲ":"ⅲ","Ⅳ":"ⅳ","Ⅴ":"ⅴ","Ⅵ":"ⅵ","Ⅶ":"ⅶ","Ⅷ":"ⅷ","Ⅸ":"ⅸ","Ⅹ":"ⅹ","Ⅺ":"ⅺ","Ⅻ":"ⅻ","Ⅼ":"ⅼ","Ⅽ":"ⅽ","Ⅾ":"ⅾ","Ⅿ":"ⅿ","Ↄ":"ↄ","Ⓐ":"ⓐ","Ⓑ":"ⓑ","Ⓒ":"ⓒ","Ⓓ":"ⓓ","Ⓔ":"ⓔ","Ⓕ":"ⓕ","Ⓖ":"ⓖ","Ⓗ":"ⓗ","Ⓘ":"ⓘ","Ⓙ":"ⓙ","Ⓚ":"ⓚ","Ⓛ":"ⓛ","Ⓜ":"ⓜ","Ⓝ":"ⓝ","Ⓞ":"ⓞ","Ⓟ":"ⓟ","Ⓠ":"ⓠ","Ⓡ":"ⓡ","Ⓢ":"ⓢ","Ⓣ":"ⓣ","Ⓤ":"ⓤ","Ⓥ":"ⓥ","Ⓦ":"ⓦ","Ⓧ":"ⓧ","Ⓨ":"ⓨ","Ⓩ":"ⓩ","Ⰰ":"ⰰ","Ⰱ":"ⰱ","Ⰲ":"ⰲ","Ⰳ":"ⰳ","Ⰴ":"ⰴ","Ⰵ":"ⰵ","Ⰶ":"ⰶ","Ⰷ":"ⰷ","Ⰸ":"ⰸ","Ⰹ":"ⰹ","Ⰺ":"ⰺ","Ⰻ":"ⰻ","Ⰼ":"ⰼ","Ⰽ":"ⰽ","Ⰾ":"ⰾ","Ⰿ":"ⰿ","Ⱀ":"ⱀ","Ⱁ":"ⱁ","Ⱂ":"ⱂ","Ⱃ":"ⱃ","Ⱄ":"ⱄ","Ⱅ":"ⱅ","Ⱆ":"ⱆ","Ⱇ":"ⱇ","Ⱈ":"ⱈ","Ⱉ":"ⱉ","Ⱊ":"ⱊ","Ⱋ":"ⱋ","Ⱌ":"ⱌ","Ⱍ":"ⱍ","Ⱎ":"ⱎ","Ⱏ":"ⱏ","Ⱐ":"ⱐ","Ⱑ":"ⱑ","Ⱒ":"ⱒ","Ⱓ":"ⱓ","Ⱔ":"ⱔ","Ⱕ":"ⱕ","Ⱖ":"ⱖ","Ⱗ":"ⱗ","Ⱘ":"ⱘ","Ⱙ":"ⱙ","Ⱚ":"ⱚ","Ⱛ":"ⱛ","Ⱜ":"ⱜ","Ⱝ":"ⱝ","Ⱞ":"ⱞ","Ⱡ":"ⱡ","Ɫ":"ɫ","Ᵽ":"ᵽ","Ɽ":"ɽ","Ⱨ":"ⱨ","Ⱪ":"ⱪ","Ⱬ":"ⱬ","Ɑ":"ɑ","Ɱ":"ɱ","Ɐ":"ɐ","Ɒ":"ɒ","Ⱳ":"ⱳ","Ⱶ":"ⱶ","Ȿ":"ȿ","Ɀ":"ɀ","Ⲁ":"ⲁ","Ⲃ":"ⲃ","Ⲅ":"ⲅ","Ⲇ":"ⲇ","Ⲉ":"ⲉ","Ⲋ":"ⲋ","Ⲍ":"ⲍ","Ⲏ":"ⲏ","Ⲑ":"ⲑ","Ⲓ":"ⲓ","Ⲕ":"ⲕ","Ⲗ":"ⲗ","Ⲙ":"ⲙ","Ⲛ":"ⲛ","Ⲝ":"ⲝ","Ⲟ":"ⲟ","Ⲡ":"ⲡ","Ⲣ":"ⲣ","Ⲥ":"ⲥ","Ⲧ":"ⲧ","Ⲩ":"ⲩ","Ⲫ":"ⲫ","Ⲭ":"ⲭ","Ⲯ":"ⲯ","Ⲱ":"ⲱ","Ⲳ":"ⲳ","Ⲵ":"ⲵ","Ⲷ":"ⲷ","Ⲹ":"ⲹ","Ⲻ":"ⲻ","Ⲽ":"ⲽ","Ⲿ":"ⲿ","Ⳁ":"ⳁ","Ⳃ":"ⳃ","Ⳅ":"ⳅ","Ⳇ":"ⳇ","Ⳉ":"ⳉ","Ⳋ":"ⳋ","Ⳍ":"ⳍ","Ⳏ":"ⳏ","Ⳑ":"ⳑ","Ⳓ":"ⳓ","Ⳕ":"ⳕ","Ⳗ":"ⳗ","Ⳙ":"ⳙ","Ⳛ":"ⳛ","Ⳝ":"ⳝ","Ⳟ":"ⳟ","Ⳡ":"ⳡ","Ⳣ":"ⳣ","Ⳬ":"ⳬ","Ⳮ":"ⳮ","Ⳳ":"ⳳ","Ꙁ":"ꙁ","Ꙃ":"ꙃ","Ꙅ":"ꙅ","Ꙇ":"ꙇ","Ꙉ":"ꙉ","Ꙋ":"ꙋ","Ꙍ":"ꙍ","Ꙏ":"ꙏ","Ꙑ":"ꙑ","Ꙓ":"ꙓ","Ꙕ":"ꙕ","Ꙗ":"ꙗ","Ꙙ":"ꙙ","Ꙛ":"ꙛ","Ꙝ":"ꙝ","Ꙟ":"ꙟ","Ꙡ":"ꙡ","Ꙣ":"ꙣ","Ꙥ":"ꙥ","Ꙧ":"ꙧ","Ꙩ":"ꙩ","Ꙫ":"ꙫ","Ꙭ":"ꙭ","Ꚁ":"ꚁ","Ꚃ":"ꚃ","Ꚅ":"ꚅ","Ꚇ":"ꚇ","Ꚉ":"ꚉ","Ꚋ":"ꚋ","Ꚍ":"ꚍ","Ꚏ":"ꚏ","Ꚑ":"ꚑ","Ꚓ":"ꚓ","Ꚕ":"ꚕ","Ꚗ":"ꚗ","Ꚙ":"ꚙ","Ꚛ":"ꚛ","Ꜣ":"ꜣ","Ꜥ":"ꜥ","Ꜧ":"ꜧ","Ꜩ":"ꜩ","Ꜫ":"ꜫ","Ꜭ":"ꜭ","Ꜯ":"ꜯ","Ꜳ":"ꜳ","Ꜵ":"ꜵ","Ꜷ":"ꜷ","Ꜹ":"ꜹ","Ꜻ":"ꜻ","Ꜽ":"ꜽ","Ꜿ":"ꜿ","Ꝁ":"ꝁ","Ꝃ":"ꝃ","Ꝅ":"ꝅ","Ꝇ":"ꝇ","Ꝉ":"ꝉ","Ꝋ":"ꝋ","Ꝍ":"ꝍ","Ꝏ":"ꝏ","Ꝑ":"ꝑ","Ꝓ":"ꝓ","Ꝕ":"ꝕ","Ꝗ":"ꝗ","Ꝙ":"ꝙ","Ꝛ":"ꝛ","Ꝝ":"ꝝ","Ꝟ":"ꝟ","Ꝡ":"ꝡ","Ꝣ":"ꝣ","Ꝥ":"ꝥ","Ꝧ":"ꝧ","Ꝩ":"ꝩ","Ꝫ":"ꝫ","Ꝭ":"ꝭ","Ꝯ":"ꝯ","Ꝺ":"ꝺ","Ꝼ":"ꝼ","Ᵹ":"ᵹ","Ꝿ":"ꝿ","Ꞁ":"ꞁ","Ꞃ":"ꞃ","Ꞅ":"ꞅ","Ꞇ":"ꞇ","Ꞌ":"ꞌ","Ɥ":"ɥ","Ꞑ":"ꞑ","Ꞓ":"ꞓ","Ꞗ":"ꞗ","Ꞙ":"ꞙ","Ꞛ":"ꞛ","Ꞝ":"ꞝ","Ꞟ":"ꞟ","Ꞡ":"ꞡ","Ꞣ":"ꞣ","Ꞥ":"ꞥ","Ꞧ":"ꞧ","Ꞩ":"ꞩ","Ɦ":"ɦ","Ɜ":"ɜ","Ɡ":"ɡ","Ɬ":"ɬ","Ʞ":"ʞ","Ʇ":"ʇ","Ａ":"ａ","Ｂ":"ｂ","Ｃ":"ｃ","Ｄ":"ｄ","Ｅ":"ｅ","Ｆ":"ｆ","Ｇ":"ｇ","Ｈ":"ｈ","Ｉ":"ｉ","Ｊ":"ｊ","Ｋ":"ｋ","Ｌ":"ｌ","Ｍ":"ｍ","Ｎ":"ｎ","Ｏ":"ｏ","Ｐ":"ｐ","Ｑ":"ｑ","Ｒ":"ｒ","Ｓ":"ｓ","Ｔ":"ｔ","Ｕ":"ｕ","Ｖ":"ｖ","Ｗ":"ｗ","Ｘ":"ｘ","Ｙ":"ｙ","Ｚ":"ｚ","𐐀":"𐐨","𐐁":"𐐩","𐐂":"𐐪","𐐃":"𐐫","𐐄":"𐐬","𐐅":"𐐭","𐐆":"𐐮","𐐇":"𐐯","𐐈":"𐐰","𐐉":"𐐱","𐐊":"𐐲","𐐋":"𐐳","𐐌":"𐐴","𐐍":"𐐵","𐐎":"𐐶","𐐏":"𐐷","𐐐":"𐐸","𐐑":"𐐹","𐐒":"𐐺","𐐓":"𐐻","𐐔":"𐐼","𐐕":"𐐽","𐐖":"𐐾","𐐗":"𐐿","𐐘":"𐑀","𐐙":"𐑁","𐐚":"𐑂","𐐛":"𐑃","𐐜":"𐑄","𐐝":"𐑅","𐐞":"𐑆","𐐟":"𐑇","𐐠":"𐑈","𐐡":"𐑉","𐐢":"𐑊","𐐣":"𐑋","𐐤":"𐑌","𐐥":"𐑍","𐐦":"𐑎","𐐧":"𐑏","𑢠":"𑣀","𑢡":"𑣁","𑢢":"𑣂","𑢣":"𑣃","𑢤":"𑣄","𑢥":"𑣅","𑢦":"𑣆","𑢧":"𑣇","𑢨":"𑣈","𑢩":"𑣉","𑢪":"𑣊","𑢫":"𑣋","𑢬":"𑣌","𑢭":"𑣍","𑢮":"𑣎","𑢯":"𑣏","𑢰":"𑣐","𑢱":"𑣑","𑢲":"𑣒","𑢳":"𑣓","𑢴":"𑣔","𑢵":"𑣕","𑢶":"𑣖","𑢷":"𑣗","𑢸":"𑣘","𑢹":"𑣙","𑢺":"𑣚","𑢻":"𑣛","𑢼":"𑣜","𑢽":"𑣝","𑢾":"𑣞","𑢿":"𑣟","ß":"ss","İ":"i̇","ŉ":"ʼn","ǰ":"ǰ","ΐ":"ΐ","ΰ":"ΰ","և":"եւ","ẖ":"ẖ","ẗ":"ẗ","ẘ":"ẘ","ẙ":"ẙ","ẚ":"aʾ","ẞ":"ss","ὐ":"ὐ","ὒ":"ὒ","ὔ":"ὔ","ὖ":"ὖ","ᾀ":"ἀι","ᾁ":"ἁι","ᾂ":"ἂι","ᾃ":"ἃι","ᾄ":"ἄι","ᾅ":"ἅι","ᾆ":"ἆι","ᾇ":"ἇι","ᾈ":"ἀι","ᾉ":"ἁι","ᾊ":"ἂι","ᾋ":"ἃι","ᾌ":"ἄι","ᾍ":"ἅι","ᾎ":"ἆι","ᾏ":"ἇι","ᾐ":"ἠι","ᾑ":"ἡι","ᾒ":"ἢι","ᾓ":"ἣι","ᾔ":"ἤι","ᾕ":"ἥι","ᾖ":"ἦι","ᾗ":"ἧι","ᾘ":"ἠι","ᾙ":"ἡι","ᾚ":"ἢι","ᾛ":"ἣι","ᾜ":"ἤι","ᾝ":"ἥι","ᾞ":"ἦι","ᾟ":"ἧι","ᾠ":"ὠι","ᾡ":"ὡι","ᾢ":"ὢι","ᾣ":"ὣι","ᾤ":"ὤι","ᾥ":"ὥι","ᾦ":"ὦι","ᾧ":"ὧι","ᾨ":"ὠι","ᾩ":"ὡι","ᾪ":"ὢι","ᾫ":"ὣι","ᾬ":"ὤι","ᾭ":"ὥι","ᾮ":"ὦι","ᾯ":"ὧι","ᾲ":"ὰι","ᾳ":"αι","ᾴ":"άι","ᾶ":"ᾶ","ᾷ":"ᾶι","ᾼ":"αι","ῂ":"ὴι","ῃ":"ηι","ῄ":"ήι","ῆ":"ῆ","ῇ":"ῆι","ῌ":"ηι","ῒ":"ῒ","ΐ":"ΐ","ῖ":"ῖ","ῗ":"ῗ","ῢ":"ῢ","ΰ":"ΰ","ῤ":"ῤ","ῦ":"ῦ","ῧ":"ῧ","ῲ":"ὼι","ῳ":"ωι","ῴ":"ώι","ῶ":"ῶ","ῷ":"ῶι","ῼ":"ωι","ﬀ":"ff","ﬁ":"fi","ﬂ":"fl","ﬃ":"ffi","ﬄ":"ffl","ﬅ":"st","ﬆ":"st","ﬓ":"մն","ﬔ":"մե","ﬕ":"մի","ﬖ":"վն","ﬗ":"մխ"};e.exports=function(e){return e.slice(1,e.length-1).trim().replace(i,function(e){return r[e]||" "})}},function(e,t,n){"use strict";
/*! http://mths.be/fromcodepoint v0.2.1 by @mathias */if(String.fromCodePoint)e.exports=function(e){try{return String.fromCodePoint(e)}catch(e){if(e instanceof RangeError)return String.fromCharCode(65533);throw e}};else{var i=String.fromCharCode,r=Math.floor;e.exports=function(){var e,t,n=16384,a=[],o=-1,s=arguments.length;if(!s)return"";for(var l="";++o<s;){var c=Number(arguments[o]);if(!isFinite(c)||c<0||c>1114111||r(c)!==c)return String.fromCharCode(65533);c<=65535?a.push(c):(e=55296+((c-=65536)>>10),t=c%1024+56320,a.push(e,t)),(o+1===s||a.length>n)&&(l+=i.apply(null,a),a.length=0)}return l}}},function(e,t){
/*! http://mths.be/repeat v0.2.0 by @mathias */
String.prototype.repeat||function(){"use strict";var e=function(){try{var e={},t=Object.defineProperty,n=t(e,e,e)&&t}catch(e){}return n}(),t=function(e){if(null==this)throw TypeError();var t=String(this),n=e?Number(e):0;if(n!=n&&(n=0),n<0||n==1/0)throw RangeError();for(var i="";n;)n%2==1&&(i+=t),n>1&&(t+=t),n>>=1;return i};e?e(String.prototype,"repeat",{value:t,configurable:!0,writable:!0}):String.prototype.repeat=t}()},function(e,t,n){"use strict";var i=n(46),r=/^javascript:|vbscript:|file:|data:/i,a=/^data:image\/(?:png|gif|jpeg|webp)/i,o=function(e){return r.test(e)&&!a.test(e)};function s(e){(e=e||{}).softbreak=e.softbreak||"\n",this.disableTags=0,this.lastOut="\n",this.options=e}s.prototype=Object.create(i.prototype),s.prototype.text=function(e){this.out(e.literal)},s.prototype.html_inline=function(e){this.options.safe?this.lit("\x3c!-- raw HTML omitted --\x3e"):this.lit(e.literal)},s.prototype.html_block=function(e){this.cr(),this.options.safe?this.lit("\x3c!-- raw HTML omitted --\x3e"):this.lit(e.literal),this.cr()},s.prototype.softbreak=function(){this.lit(this.options.softbreak)},s.prototype.linebreak=function(){this.tag("br",[],!0),this.cr()},s.prototype.link=function(e,t){var n=this.attrs(e);t?(this.options.safe&&o(e.destination)||n.push(["href",this.esc(e.destination)]),e.title&&n.push(["title",this.esc(e.title)]),this.tag("a",n)):this.tag("/a")},s.prototype.image=function(e,t){t?(0===this.disableTags&&(this.options.safe&&o(e.destination)?this.lit('<img src="" alt="'):this.lit('<img src="'+this.esc(e.destination)+'" alt="')),this.disableTags+=1):(this.disableTags-=1,0===this.disableTags&&(e.title&&this.lit('" title="'+this.esc(e.title)),this.lit('" />')))},s.prototype.emph=function(e,t){this.tag(t?"em":"/em")},s.prototype.strong=function(e,t){this.tag(t?"strong":"/strong")},s.prototype.paragraph=function(e,t){var n=e.parent.parent,i=this.attrs(e);null!==n&&"list"===n.type&&n.listTight||(t?(this.cr(),this.tag("p",i)):(this.tag("/p"),this.cr()))},s.prototype.heading=function(e,t){var n="h"+e.level,i=this.attrs(e);t?(this.cr(),this.tag(n,i)):(this.tag("/"+n),this.cr())},s.prototype.code=function(e){this.tag("code"),this.out(e.literal),this.tag("/code")},s.prototype.code_block=function(e){var t=e.info?e.info.split(/\s+/):[],n=this.attrs(e);t.length>0&&t[0].length>0&&n.push(["class","language-"+this.esc(t[0])]),this.cr(),this.tag("pre"),this.tag("code",n),this.out(e.literal),this.tag("/code"),this.tag("/pre"),this.cr()},s.prototype.thematic_break=function(e){var t=this.attrs(e);this.cr(),this.tag("hr",t,!0),this.cr()},s.prototype.block_quote=function(e,t){var n=this.attrs(e);t?(this.cr(),this.tag("blockquote",n),this.cr()):(this.cr(),this.tag("/blockquote"),this.cr())},s.prototype.list=function(e,t){var n="bullet"===e.listType?"ul":"ol",i=this.attrs(e);if(t){var r=e.listStart;null!==r&&1!==r&&i.push(["start",r.toString()]),this.cr(),this.tag(n,i),this.cr()}else this.cr(),this.tag("/"+n),this.cr()},s.prototype.item=function(e,t){var n=this.attrs(e);t?this.tag("li",n):(this.tag("/li"),this.cr())},s.prototype.custom_inline=function(e,t){t&&e.onEnter?this.lit(e.onEnter):!t&&e.onExit&&this.lit(e.onExit)},s.prototype.custom_block=function(e,t){this.cr(),t&&e.onEnter?this.lit(e.onEnter):!t&&e.onExit&&this.lit(e.onExit),this.cr()},s.prototype.esc=n(13).escapeXml,s.prototype.out=function(e){this.lit(this.esc(e))},s.prototype.tag=function(e,t,n){if(!(this.disableTags>0)){if(this.buffer+="<"+e,t&&t.length>0)for(var i,r=0;void 0!==(i=t[r]);)this.buffer+=" "+i[0]+'="'+i[1]+'"',r++;n&&(this.buffer+=" /"),this.buffer+=">",this.lastOut=">"}},s.prototype.attrs=function(e){var t=[];if(this.options.sourcepos){var n=e.sourcepos;n&&t.push(["data-sourcepos",String(n[0][0])+":"+String(n[0][1])+"-"+String(n[1][0])+":"+String(n[1][1])])}return t},e.exports=s},function(e,t,n){"use strict";var i=n(46),r=/\<[^>]*\>/;function a(e){e=e||{},this.disableTags=0,this.lastOut="\n",this.indentLevel=0,this.indent="  ",this.options=e}a.prototype=Object.create(i.prototype),a.prototype.render=function(e){var t,n;this.buffer="";var i,r,a,o,s,l,c=e.walker(),u=this.options;for(u.time&&console.time("rendering"),this.buffer+='<?xml version="1.0" encoding="UTF-8"?>\n',this.buffer+='<!DOCTYPE document SYSTEM "CommonMark.dtd">\n';i=c.next();)if(a=i.entering,l=(r=i.node).type,o=r.isContainer,s="thematic_break"===l||"linebreak"===l||"softbreak"===l,n=l.replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase(),a){switch(t=[],l){case"document":t.push(["xmlns","http://commonmark.org/xml/1.0"]);break;case"list":null!==r.listType&&t.push(["type",r.listType.toLowerCase()]),null!==r.listStart&&t.push(["start",String(r.listStart)]),null!==r.listTight&&t.push(["tight",r.listTight?"true":"false"]);var d=r.listDelimiter;if(null!==d){var p="";p="."===d?"period":"paren",t.push(["delimiter",p])}break;case"code_block":r.info&&t.push(["info",r.info]);break;case"heading":t.push(["level",String(r.level)]);break;case"link":case"image":t.push(["destination",r.destination]),t.push(["title",r.title]);break;case"custom_inline":case"custom_block":t.push(["on_enter",r.onEnter]),t.push(["on_exit",r.onExit])}if(u.sourcepos){var h=r.sourcepos;h&&t.push(["sourcepos",String(h[0][0])+":"+String(h[0][1])+"-"+String(h[1][0])+":"+String(h[1][1])])}if(this.cr(),this.out(this.tag(n,t,s)),o)this.indentLevel+=1;else if(!o&&!s){var f=r.literal;f&&this.out(this.esc(f)),this.out(this.tag("/"+n))}}else this.indentLevel-=1,this.cr(),this.out(this.tag("/"+n));return u.time&&console.timeEnd("rendering"),this.buffer+="\n",this.buffer},a.prototype.out=function(e){this.disableTags>0?this.buffer+=e.replace(r,""):this.buffer+=e,this.lastOut=e},a.prototype.cr=function(){if("\n"!==this.lastOut){this.buffer+="\n",this.lastOut="\n";for(var e=this.indentLevel;e>0;e--)this.buffer+=this.indent}},a.prototype.tag=function(e,t,n){var i="<"+e;if(t&&t.length>0)for(var r,a=0;void 0!==(r=t[a]);)i+=" "+r[0]+'="'+this.esc(r[1])+'"',a++;return n&&(i+=" /"),i+=">"},a.prototype.esc=n(13).escapeXml,e.exports=a},function(e,t,n){"use strict";n.r(t);var i=n(0),r=n.n(i),a=(n(44),n(15)),o=n(16),s=n(12),l=n(8),c=n(14),u=n(17);function d(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var p=function(){function e(t,n,i,r,a){var o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var s=t.controller("ngModel");this.DateService=r,this.$element=t,this.element=t[0],this.$timeout=i,this.yearOffset=0,this.addValidators(s,t),this.addWatchers(n,s),s.$formatters.push(function(e){return o.updateCalendarView(e),e}),this.formGroup=a.getClosestParentByClassName(this.element,"form-group");var l=this.element.getElementsByClassName("btn")[0],c=this.element.getElementsByClassName("btn-group")[0],u=this.element.getElementsByClassName("dropdown-menu")[0],d=function(){i(function(){l===document.activeElement||c.classList.contains("open")||(o.formGroup&&o.formGroup.classList.remove("focus"),o.element.dispatchEvent(new CustomEvent("blur")))},150)};l.addEventListener("focusout",d),u.addEventListener("focusout",d),this.setLocale(this.locale),this.updateMinDateView(this.ngMin),this.updateMaxDateView(this.ngMax),this.button=l}var t,n,i;return t=e,(n=[{key:"openLookup",value:function(){var e=this;this.$ngModel.$setTouched(),this.mode="day";var t=this.ngModel;this.ngMin&&this.ngModel<this.ngMin&&(t=this.ngMin),this.ngMax&&this.ngModel>this.ngMax&&(t=this.ngMax),this.updateCalendarView(t),this.$timeout(function(){e.element.getElementsByClassName("tw-date-lookup-month-label")[0].focus()})}},{key:"selectDay",value:function(e,t,n,i){var r,a;this.isDayDisabled(t,n,i)?e.stopPropagation():(this.day=t,this.setModel(this.DateService.getUTCDateFromParts(i,n,t)),r=this.element,(a=r.getElementsByTagName("button")[0])&&a.focus(),this.updateCalendarDatePresentation())}},{key:"selectMonth",value:function(e,t,n){e.stopPropagation(),this.isMonthDisabled(t,n)||(this.month=t,this.weeks=this.getTableStructure(),this.mode="day",this.updateCalendarDatePresentation())}},{key:"selectYear",value:function(e,t){e.stopPropagation(),this.isYearDisabled(t)||(this.year=t,this.mode="month",this.updateCalendarDatePresentation())}},{key:"monthBefore",value:function(e){e.stopPropagation(),0===this.month?(this.year--,this.month=11):this.month--,this.weeks=this.getTableStructure(),this.updateCalendarDatePresentation()}},{key:"yearBefore",value:function(e){e.stopPropagation(),this.year--,this.weeks=this.getTableStructure(),this.updateCalendarDatePresentation()}},{key:"monthAfter",value:function(e){e.stopPropagation(),11===this.month?(this.year++,this.month=0):this.month++,this.weeks=this.getTableStructure(),this.updateCalendarDatePresentation()}},{key:"yearAfter",value:function(e){e.stopPropagation(),this.year++,this.weeks=this.getTableStructure(),this.updateCalendarDatePresentation()}},{key:"isCurrentlySelected",value:function(e,t,n){return e===this.selectedDate&&t===this.selectedMonth&&n===this.selectedYear}},{key:"isDayDisabled",value:function(e,t,n){return this.isYearDisabled(n)||this.isMonthDisabled(t,n)||n===this.minYear&&t===this.minMonth&&e<this.minDay||n===this.maxYear&&t===this.maxMonth&&e>this.maxDay}},{key:"isMonthDisabled",value:function(e,t){return this.isYearDisabled(t)||t===this.minYear&&e<this.minMonth||t===this.maxYear&&e>this.maxMonth}},{key:"isYearDisabled",value:function(e){return this.minYear&&e<this.minYear||this.maxYear&&e>this.maxYear}},{key:"switchToMonths",value:function(e){this.findActiveLink(),e.stopPropagation(),this.mode="month"}},{key:"switchToYears",value:function(e){this.findActiveLink(),e.stopPropagation(),this.mode="year"}},{key:"setYearOffset",value:function(e,t){e.stopPropagation(),this.yearOffset+=t}},{key:"buttonFocus",value:function(){this.formGroup&&this.formGroup.classList.add("focus"),this.element.dispatchEvent(new CustomEvent("focus"))}},{key:"addValidators",value:function(e){var t=this;e.$validators.min=function(e,n){var i=e||n;return!(i&&t.ngMin&&i<t.ngMin)||(t.formGroup&&t.formGroup.classList.add("has-error"),!1)},e.$validators.max=function(e,n){var i=e||n;return!(i&&t.ngMax&&i>t.ngMax)||(t.formGroup&&t.formGroup.classList.add("has-error"),!1)}}},{key:"addWatchers",value:function(e,t){var n=this;e.$watch("$ctrl.locale",function(e,t){e&&e!==t&&n.setLocale(e)}),e.$watch("$ctrl.ngRequired",function(){t.$validate()}),e.$watch("$ctrl.ngMin",function(e,i){e!==i&&(n.updateMinDateView(n.ngMin),t.$validate())}),e.$watch("$ctrl.shortDate",function(){n.updateSelectedDatePresentation()}),e.$watch("$ctrl.ngMax",function(e,i){e!==i&&(n.updateMaxDateView(n.ngMax),t.$validate())}),e.$watch("$ctrl.ngModel",function(e){e&&(n.selectedDate=n.DateService.getUTCDate(e),n.selectedMonth=n.DateService.getUTCMonth(e),n.selectedYear=n.DateService.getUTCFullYear(e),n.updateSelectedDatePresentation())})}},{key:"updateCalendarView",value:function(e){e&&e.getUTCDate||(e=this.DateService.getLocaleToday()),this.day=this.DateService.getUTCDate(e),this.month=this.DateService.getUTCMonth(e),this.year=this.DateService.getUTCFullYear(e),this.weeks=this.getTableStructure(),this.updateCalendarDatePresentation()}},{key:"getTableStructure",value:function(){var e=this.DateService.getWeekday(this.year,this.month,1);0===e&&(e=7);var t,n=this.DateService.getLastDayOfMonth(this.year,this.month),i=[],r=[];for(t=1;t<e;t++)i.push(!1);for(t=1;t<=n;t++)i.push(t),(e+t-1)%7==0&&(r.push(i),i=[]);if(i.length){for(t=i.length;t<7;t++)i.push(!1);r.push(i)}return r}},{key:"setLocale",value:function(e){e||(this.locale="en-GB"),this.monthBeforeDay=this.DateService.isMonthBeforeDay(this.locale),this.monthsOfYear=this.DateService.getMonthNamesForLocale(this.locale,"long"),this.shortMonthsOfYear=this.DateService.getMonthNamesForLocale(this.locale,"short");var t=this.DateService.getDayNamesForLocale(this.locale,"short"),n=this.DateService.getDayNamesForLocale(this.locale,"narrow");t.push(t.shift()),n.push(n.shift()),this.daysOfWeek=t,this.shortDaysOfWeek=n,this.updateSelectedDatePresentation()}},{key:"updateSelectedDatePresentation",value:function(){this.selectedDateFormatted=this.DateService.getYearMonthDatePresentation(this.selectedYear,this.selectedMonth,this.selectedDate,this.locale,this.shortDate?"short":"long")}},{key:"updateCalendarDatePresentation",value:function(){this.yearMonthFormatted=this.DateService.getYearAndMonthPresentation(this.year,this.month,this.locale,this.shortDate?"short":"long")}},{key:"moveDateToWithinRange",value:function(e,t,n){return e||(e=this.DateService.getLocaleToday()),t&&t>e?t:n&&n<e?n:e}},{key:"setModel",value:function(e){e=this.moveDateToWithinRange(e,this.ngMin,this.ngMax),this.$ngModel.$setViewValue(e),this.$ngModel.$setDirty(),this.updateCalendarView(e)}},{key:"updateMinDateView",value:function(e){e&&e.getUTCDate?(this.minDay=this.DateService.getUTCDate(e),this.minMonth=this.DateService.getUTCMonth(e),this.minYear=this.DateService.getUTCFullYear(e)):(this.minDay=null,this.minMonth=null,this.minYear=null)}},{key:"updateMaxDateView",value:function(e){e&&e.getUTCDate?(this.maxDay=this.DateService.getUTCDate(e),this.maxMonth=this.DateService.getUTCMonth(e),this.maxYear=this.DateService.getUTCFullYear(e)):(this.maxDay=null,this.maxMonth=null,this.maxYear=null)}},{key:"keyHandler",value:function(e){if(this.ngModel){var t=e.which||e.charCode||e.keyCode;37===t?this.adjustDate(this.mode,this.ngModel,-1,-1,-1):38===t?(e.preventDefault(),this.adjustDate(this.mode,this.ngModel,-7,-4,-4)):39===t?this.adjustDate(this.mode,this.ngModel,1,1,1):40===t&&(e.preventDefault(),this.adjustDate(this.mode,this.ngModel,7,4,4)),this.findActiveLink()}else{var n=this.DateService.getUTCDateFromParts(this.year,this.month,this.day);this.setModel(n)}}},{key:"findActiveLink",value:function(){var e=this;this.$timeout(function(){var t=e.element.getElementsByClassName("active")[0];t&&t.focus()})}},{key:"adjustDate",value:function(e,t,n,i,r){var a=t;"day"===e&&(a=this.DateService.addDays(t,n)),"month"===e&&(a=this.DateService.addMonths(t,i)),"year"===e&&(a=this.DateService.addYears(t,r)),this.setModel(a)}},{key:"calculateYear",value:function(e,t){return this.year-this.year%20+e+t+this.yearOffset}}])&&d(t.prototype,n),i&&d(t,i),e}();p.$inject=["$element","$scope","$timeout","TwDateService","TwDomService"];var h=p,f=n(57),m={controller:h,template:n.n(f).a,require:{$ngModel:"ngModel"},bindings:{ngModel:"=",ngChange:"&",ngMin:"<",ngMax:"<",ngRequired:"<",ngDisabled:"<",placeholder:"@",size:"@",locale:"@",label:"@",shortDate:"<"}},g=n(6),v=n(2),b=r.a.module("tw.styleguide.forms.date-lookup",[g.a,v.a]).component("twDateLookup",m).name;function y(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var w=function(){function e(t,n,i,r){var a=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var o=t.controller("ngModel"),s=t[0];this.CurrencyService=r,this.$timeout=i,this.showDecimals=!0,n.$watch("$ctrl.ngModel",function(e,t){e!==t&&o.$setDirty()}),n.$watch("$ctrl.currency",function(e,t){e!==t&&(a.showDecimals=a.CurrencyService.getDecimals(e)>0)}),s.getElementsByTagName("input")[0].addEventListener("blur",function(){o.$setTouched(),s.dispatchEvent(new CustomEvent("blur"))}),s.getAttribute("currency-code")&&console&&console.log&&console.log("currency code is deprecated in twCurrencyInput, please use currency."),o.$validators.min=function(e,t){return void 0===a.ngMin||null===a.ngMin||!$(t)||t>=a.ngMin},o.$validators.max=function(e,t){return void 0===a.ngMax||null===a.ngMax||!$(t)||t<=a.ngMax}}var t,n,i;return t=e,(n=[{key:"changedInputValue",value:function(){this.ngChange&&this.$timeout(this.ngChange)}}])&&y(t.prototype,n),i&&y(t,i),e}();function $(e){return!isNaN(parseFloat(e))}w.$inject=["$element","$scope","$timeout","TwCurrencyService"];var C=w,k=n(58),x={controller:C,template:n.n(k).a,require:{$ngModel:"ngModel"},transclude:{addon:"?addon"},bindings:{ngModel:"=",ngChange:"&",ngMin:"<",ngMax:"<",ngRequired:"<",ngDisabled:"<",currency:"=",currencyCode:"@",placeholder:"@",size:"@",locale:"@"}};var A=function(){var e={BIF:0,BYR:0,CLP:0,DJF:0,GNF:0,JPY:0,KMF:0,KRW:0,MGA:0,PYG:0,RWF:0,VND:0,VUV:0,XAF:0,XOF:0,XPF:0,HUF:0,BHD:3,JOD:3,KWD:3,OMR:3,TND:3};this.getDecimals=function(t){return t&&t.toUpperCase&&void 0!==e[t.toUpperCase()]?e[t.toUpperCase()]:2}},E=r.a.module("tw.styleguide.services.currency",[]).service("TwCurrencyService",A).name,D=n(4),S=r.a.module("tw.styleguide.forms.currency-input",[E,D.a]).component("twCurrencyInput",x).name;function M(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var F=function(){function e(t,n,i,r){var a=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var o=t.controller("ngModel");this.element=t[0],this.$timeout=i,this.showDecimals=!0,this.CurrencyService=r,n.$watch("$ctrl.ngModel",function(e,t){e!==t&&o.$setDirty()}),n.$watch("$ctrl.currency",function(e,t){e&&e!==t&&(a.showDecimals=a.CurrencyService.getDecimals(e)>0)}),t[0].getElementsByTagName("input")[0].addEventListener("blur",function(){o.$setTouched(),a.element.dispatchEvent(new CustomEvent("blur"))}),o.$validators.min=function(e,t){return void 0===a.ngMin||null===a.ngMin||!T(t)||t>=a.ngMin},o.$validators.max=function(e,t){return void 0===a.ngMax||null===a.ngMax||!T(t)||t<=a.ngMax},this.element.getAttribute("on-amount-change")&&console&&console.log&&console.log("onAmountChange is deprecated in twAmountCurrencySelect, please use ngChange.")}var t,n,i;return t=e,(n=[{key:"changedAmount",value:function(){this.ngChange&&this.$timeout(this.ngChange),this.onAmountChange&&this.$timeout(this.onAmountChange)}},{key:"changedCurrency",value:function(){this.onCurrencyChange&&this.$timeout(this.onCurrencyChange)}},{key:"customAction",value:function(){this.onCustomAction&&this.onCustomAction()}}])&&M(t.prototype,n),i&&M(t,i),e}();function T(e){return!isNaN(parseFloat(e))}F.$inject=["$element","$scope","$timeout","TwCurrencyService"];var L=F,O=n(59),q={controller:L,template:n.n(O).a,require:{$ngModel:"ngModel"},transclude:{addon:"?addon"},bindings:{ngModel:"=",ngMin:"<",ngMax:"<",ngRequired:"<",ngDisabled:"<",ngChange:"&",amountReadOnly:"<",onAmountChange:"&",currency:"=",currencies:"<",onCurrencyChange:"&",currencyFilterPlaceholder:"@",customActionLabel:"<",onCustomAction:"&",placeholder:"@",size:"@",locale:"@"}},B=r.a.module("tw.styleguide.forms.amount-currency-select",[l.a,E,D.a]).component("twAmountCurrencySelect",q).name,N=n(19),P=n(20),j=n(10),R=n(1);function U(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable})),n.push.apply(n,i)}return n}function V(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?U(Object(n),!0).forEach(function(t){_(e,t,n[t])}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):U(Object(n)).forEach(function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))})}return e}function _(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function I(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var G=function(){function e(t,n,i){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.RequirementsService=t,this.$scope=n,this.$timeout=i}var t,n,i;return t=e,(n=[{key:"$onInit",value:function(){var e=this;this.model||(this.model={}),this.internalModel=this.parseArrayStringsInModel(this.model),this.requiredFields||(this.requiredFields=[]);this.validationMessages=V({},{required:"Required",pattern:"Incorrect format",minimum:"The value is too low",maximum:"The value is too high",minLength:"The value is too short",maxLength:"The value is too long"},{},this.validationMessages),this.$scope.$watch("twFieldset.$valid",function(t){e.isValid=t}),this.submitted=!1}},{key:"$onChanges",value:function(e){e.initialFields&&this.onPropsFieldChange(e.initialFields),e.model&&this.onPropsModelChange(e.model)}},{key:"onPropsFieldChange",value:function(e){if(!r.a.equals(e.currentValue,e.previousValue)){this.fields=this.RequirementsService.prepFields(e.currentValue,this.model,this.validationMessages);var t=this.internalModel,n=Object(j.a)(t,{type:"object",properties:this.fields});Object(R.isUndefined)(t)||r.a.equals(n,t)||(this.internalModel=n,this.model=n,this.onModelChange&&this.onModelChange({model:n})),this.requiredFields&&this.requiredFields.length||(this.requiredFields=this.RequirementsService.getRequiredFields(this.fields))}}},{key:"onPropsModelChange",value:function(e){this.internalModel=this.parseArrayStringsInModel(e.currentValue)}},{key:"parseArrayStringsInModel",value:function(e){var t=this,n={};return Object.keys(this.fields).forEach(function(e){"checkbox-group"===t.fields[e].control&&t.model&&"string"==typeof t.model[e]&&(n[e]=JSON.parse(t.model[e]))}),V({},e,{},n)}},{key:"stringifyArraysInModel",value:function(e){var t=this,n={};return Object.keys(this.fields).forEach(function(e){"checkbox-group"===t.fields[e].control&&t.internalModel&&t.internalModel[e]&&(n[e]=JSON.stringify(t.internalModel[e]))}),V({},e,{},n)}},{key:"fieldFocus",value:function(e,t){this.onFieldFocus&&this.onFieldFocus({key:e,field:t})}},{key:"fieldBlur",value:function(e,t){this.onFieldBlur&&this.onFieldBlur({key:e,field:t})}},{key:"fieldChange",value:function(e,t,n){var i=this;void 0===e&&delete this.internalModel[t],this.errorMessages&&this.errorMessages[t]&&delete this.errorMessages[t],this.$timeout(function(){i.model=i.stringifyArraysInModel(i.internalModel),i.onFieldChange&&(n&&"checkbox-group"===n.control?i.onFieldChange({value:JSON.stringify(e),key:t,field:n}):i.onFieldChange({value:e,key:t,field:n})),i.onModelChange&&i.onModelChange({model:i.model}),n.refreshRequirementsOnChange&&i.onRefreshRequirements&&i.onRefreshRequirements({model:i.model})})}},{key:"refreshRequirements",value:function(){this.onRefreshRequirements&&this.onRefreshRequirements()}},{key:"isRequired",value:function(e){return Array.isArray(this.requiredFields)&&this.requiredFields.indexOf(e)>=0}},{key:"setSubmitted",value:function(){this.submitted=!0}}])&&I(t.prototype,n),i&&I(t,i),e}();G.$inject=["TwRequirementsService","$scope","$timeout"];var z=G,H=n(60),Y=n.n(H),W=(n(73),{controller:z,template:Y.a,bindings:{model:"=",initialFields:"<fields",requiredFields:"<",uploadOptions:"<",locale:"@",title:"@",description:"@",onModelChange:"&?",onRefreshRequirements:"&?",onFieldFocus:"&?",onFieldBlur:"&?",onFieldChange:"&?",validationMessages:"<",errorMessages:"<",warningMessages:"<",isValid:"=?",narrow:"<"}}),K=n(9),Z=r.a.module("tw.styleguide.forms.fieldset",[P.a,K.a]).component("twFieldset",W).name;function X(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var J=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.RequirementsService=t,this.model||(this.model={})}var t,n,i;return t=e,(n=[{key:"$onInit",value:function(){this.requirements&&this.requirements.length>0&&(this.activeIndex=0)}},{key:"$onChanges",value:function(e){e.requirements&&this.onRequirementsChange(e.requirements.currentValue,e.requirements.previousValue)}},{key:"onTabChange",value:function(e){this.switchTab(e,this.activeIndex),this.activeIndex=e}},{key:"switchTab",value:function(e,t){e!==t&&Q(this.model,this.requirements&&this.requirements[t],this.requirements&&this.requirements[e])}},{key:"onFieldsetRefreshRequirements",value:function(){this.onRefreshRequirements&&this.onRefreshRequirements()}},{key:"onFieldsetModelChange",value:function(e){this.onModelChange&&this.onModelChange({model:e})}},{key:"onRequirementsChange",value:function(e,t){if(!r.a.equals(e,t)){var n=this.RequirementsService.prepRequirements(e),i=this.RequirementsService.prepRequirements(t);this.requirements=n,this.tabs=this.requirements.map(function(e){return e.title}),(!this.activeIndex||this.activeIndex&&!this.requirements[this.activeIndex])&&this.requirements.length>0&&(this.activeIndex=0),Q(this.model,i[this.activeIndex],n[this.activeIndex])}}}])&&X(t.prototype,n),i&&X(t,i),e}();function Q(e,t,n){if(t&&n&&t.properties&&n.properties){var i=ee(t),r=ee(n);i.filter(function(e){return r.indexOf(e)<0}).forEach(function(t){delete e[t]})}}function ee(e){return e&&e.properties&&Object.keys(e.properties)||[]}J.$inject=["TwRequirementsService"];var te=J,ne=n(61),ie={controller:te,template:n.n(ne).a,bindings:{model:"=",onModelChange:"&",requirements:"<",uploadOptions:"<",locale:"@",onRefreshRequirements:"&?",validationMessages:"<",errorMessages:"<",isValid:"=?"}};function re(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var ae=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),!this.active&&this.tabs&&this.tabs.length&&(this.active=0)}var t,n,i;return t=e,(n=[{key:"switchTab",value:function(e){this.active=e,this.onChange&&this.onChange({index:e})}}])&&re(t.prototype,n),i&&re(t,i),e}(),oe=n(62),se={controller:ae,template:n.n(oe).a,bindings:{tabs:"<",active:"<",onChange:"&"}},le=r.a.module("tw.styleguide.navigation.tabs",[]).component("twTabs",se).name,ce=r.a.module("tw.styleguide.forms.requirements-form",[le,Z]).component("twRequirementsForm",ie).name;function ue(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var de=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.RequirementsService=t,this.layout=this.layout||"vertical"}var t,n,i;return t=e,(n=[{key:"$onChanges",value:function(e){var t=e.initialFields;t&&(r.a.equals(t.currentValue,t.previousValue)||(this.fields=this.RequirementsService.prepFields(t.currentValue,this.model)))}},{key:"getValueLabel",value:function(e,t){for(var n=0;n<e.length;n++)if(e[n].value===t)return e[n].label;return t}},{key:"getCheckboxGroupLabel",value:function(e,t){var n=this;try{return(Object(R.isArray)(t)?t:JSON.parse(t)).map(function(t){return n.getValueLabel(e,t)}).join(", ")}catch(e){return t}}},{key:"mask",value:function(e){return new Array(e.length+1).join("*")}}])&&ue(t.prototype,n),i&&ue(t,i),e}();de.$inject=["TwRequirementsService"];var pe=de,he=n(63),fe={controller:pe,template:n.n(he).a,bindings:{model:"<",initialFields:"<fields",locale:"@",title:"@",narrow:"<",layout:"@"}};function me(){var e=0,t=[];this.reset=function(n){t=[n],e=0},this.add=function(n){t.length-1>e&&(t=t.slice(0,e+1)),t[e]!==n&&(t.push(n),e++)},this.undo=function(){return e>=0&&void 0!==t[e-1]&&e--,t[e]},this.redo=function(){return e<t.length&&void 0!==t[e+1]&&e++,t[e]}}var ge=function(){this.new=function(){return new me}};var ve=function(){var e=this;function t(e,t){return e[t]&&"*"!==e[t]}this.formatUsingPattern=function(n,i){if(n||(n=""),"string"!=typeof i)return n;for(var r="",a=0,o=n.length,s=0;o;)t(i,s)?(r+=i[s],a++):(r+=n[s-a],o--),s++;var l=e.countSeparatorsAfterCursor(i,s);return l&&(r+=i.substr(s,l)),r},this.unformatUsingPattern=function(e,n){if(!e)return"";if("string"!=typeof n)return e;for(var i=0;i<n.length;i++)if(t(n,i))for(;e.indexOf(n[i])>=0;)e=e.replace(n[i],"");return e},this.reformatUsingPattern=function(t,n,i){return void 0===i&&(i=n),e.formatUsingPattern(e.unformatUsingPattern(t,i),n)},this.countSeparatorsBeforeCursor=function(e,n){for(var i=0;t(e,n-i-1);)i++;return i},this.countSeparatorsAfterCursor=function(e,n){for(var i=0;t(e,n+i);)i++;return i},this.countSeparatorsInAppendedValue=function(e,n,i){for(var r=0,a=0,o=i.length;o;)t(e,n+a)?r++:o--,a++;return r},this.countSeparatorsInPattern=function(e){for(var n=0,i=0;i<e.length;i++)t(e,i)&&n++;return n}};function be(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var ye=function(){function e(t,n,i,r,a){var o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.keydownCount=0,this.pattern="",this.undoStack=a.new(),this.$ngModel=t.controller("ngModel"),this.$timeout=n,this.TextFormatService=r,this.element=t[0],this.$ngModel.$formatters.push(function(e){return o.pattern?r.formatUsingPattern(e,o.pattern):e}),this.$ngModel.$parsers.push(function(e){return o.pattern?r.unformatUsingPattern(e,o.pattern):e}),this.element.addEventListener("change",function(e){o.onChange(e)}),this.element.addEventListener("keydown",function(e){o.onKeydown(e)}),this.element.addEventListener("paste",function(e){o.onPaste(e)}),this.element.addEventListener("cut",function(e){o.onCut(e)}),this.element.addEventListener("copy",function(e){o.onCopy(e)}),this.replaceLengthValidators(this.$ngModel,this.TextFormatService,this.$timeout),i.$watch("$ctrl.twTextFormat",function(e){o.onPatternChange(e)}),i.$watch("$ctrl.ngModel",function(e,t){o.onModelChange(e,t)}),this.undoStack.reset(this.element.value)}var t,n,i;return t=e,(n=[{key:"onModelChange",value:function(e,t){if(e!==t&&this.pattern){var n=this.element.selectionStart,i=this.element.selectionEnd;this.reformatControl(this.element,e),this.setSelection(n,i)}}},{key:"onPatternChange",value:function(e,t){if(e!==t){e&&e.indexOf("||")>0?this.pattern=e.substring(0,e.indexOf("||")):this.pattern=e;var n=this.element.value;t&&(n=this.TextFormatService.unformatUsingPattern(n,t)),e&&(n=this.TextFormatService.formatUsingPattern(n,this.pattern)),this.undoStack.reset(n),this.element.value=n}else this.pattern=e}},{key:"reformatControl",value:function(e,t){t||(t=e.value);var n=this.TextFormatService.reformatUsingPattern(t,this.pattern);n!==t&&(e.value=n)}},{key:"onChange",value:function(){this.pattern&&(this.reformatControl(this.element),this.undoStack.add(this.element.value))}},{key:"onPaste",value:function(e){var t=this;if(this.pattern){var n=this.element.selectionStart,i=(e.clipboardData||window.clipboardData).getData("Text"),r=this.TextFormatService.countSeparatorsInAppendedValue(this.pattern,n,i);this.$timeout(function(){var e=n+i.length+r;t.reformatControl(t.element),t.undoStack.add(t.element.value),t.setSelection(e,e)})}}},{key:"onKeydown",value:function(e){var t=this;if(this.pattern){this.keydownCount++;var n=this.keydownCount,i=e.keyCode||e.which,r=e.target.selectionStart,a=e.target.selectionEnd;if(Ce.indexOf(i)>=0||e.metaKey||e.ctrlKey)return i===$e.z&&(e.metaKey||e.ctrlKey)&&(e.preventDefault(),e.stopPropagation(),this.element.value=this.undoStack.undo()),void(i===$e.y&&(e.metaKey||e.ctrlKey)&&(e.preventDefault(),e.stopPropagation(),this.element.value=this.undoStack.redo()));this.$timeout(function(){t.afterKeydown(i,n,t.element,t.pattern,r,a)})}}},{key:"afterKeydown",value:function(e,t,n,i,r,a){var o;e===$e.backspace?(o=this.doBackspace(n,i,r,a),this.$ngModel.$setViewValue(o)):e===$e.delete?(o=this.doDelete(n,i,r,a),this.$ngModel.$setViewValue(o)):this.keydownCount===t&&this.doKeypress(n,i,r,a)}},{key:"doBackspace",value:function(e,t,n,i){e.value=this.getFormattedValueAfterBackspace(e,t,n,i),this.undoStack.add(e.value);var r=this.getPositionAfterBackspace(t,e,n,i);return this.setSelection(r,r),e.value}},{key:"getFormattedValueAfterBackspace",value:function(e,t,n,i){var r,a,o=e.value,s=this.TextFormatService.countSeparatorsBeforeCursor(t,n);if(s){var l=s>1?1:0;n!==i?(r=n-s+1,a=n-l):(r=n-s,a=n-l),o=we(e.value,r,a)}return this.TextFormatService.reformatUsingPattern(o,t)}},{key:"doDelete",value:function(e,t,n,i){return e.value=this.getFormattedValueAfterDelete(e,t,n,i),this.undoStack.add(e.value),this.setSelection(n,n),e.value}},{key:"setSelection",value:function(e,t){this.element.setSelectionRange(e,t)}},{key:"getFormattedValueAfterDelete",value:function(e,t,n,i){var r,a,o=e.value,s=this.TextFormatService.countSeparatorsAfterCursor(t,n);if(s){var l=s>1?0:1;n!==i?(r=n+l,a=n+s+l):(r=n+s,a=n+s+1),o=we(e.value,r,a)}return this.TextFormatService.reformatUsingPattern(o,t)}},{key:"doKeypress",value:function(e,t,n,i){this.reformatControl(e),this.undoStack.add(e.value);var r=this.getPositionAfterKeypress(t,e,n,i);this.setSelection(r,r)}},{key:"getPositionAfterBackspace",value:function(e,t,n,i){var r=n-this.TextFormatService.countSeparatorsBeforeCursor(e,n)-(n!==i?0:1);return r+this.TextFormatService.countSeparatorsAfterCursor(e,r)}},{key:"getPositionAfterKeypress",value:function(e,t,n,i){var r;return n!==i?r=this.TextFormatService.countSeparatorsAfterCursor(e,n):0===(r=this.TextFormatService.countSeparatorsAfterCursor(e,n))&&(r=this.TextFormatService.countSeparatorsAfterCursor(e,n+1)),n+1+r}},{key:"onCut",value:function(){var e=this;if(this.pattern){var t=this.element.selectionStart;this.$timeout(function(){e.reformatControl(e.element),e.undoStack.add(e.element.value);var n=t+e.TextFormatService.countSeparatorsAfterCursor(e.pattern,t);e.setSelection(n,n)})}}},{key:"onCopy",value:function(){var e=this;if(this.pattern){var t=this.element.selectionStart,n=this.element.selectionEnd;this.$timeout(function(){e.setSelection(t,n)})}}},{key:"replaceLengthValidators",value:function(e,t,n){var i=this;n(function(){var n=e.$validators.minlength,r=e.$validators.maxlength,a=e.$validators.pattern;n&&(e.$validators.minlength=function(e,r){return n(e,t.unformatUsingPattern(r,i.pattern))}),r&&(e.$validators.maxlength=function(e,n){return r(e,t.unformatUsingPattern(n,i.pattern))}),a&&(e.$validators.pattern=function(e,n){return a(e,t.unformatUsingPattern(n,i.pattern))})})}}])&&be(t.prototype,n),i&&be(t,i),e}();function we(e,t,n){return e.substring(0,t-1)+e.substring(n-1,e.length)}var $e={cmd:224,cmdLeft:91,cmdRight:93,backspace:8,tab:9,enter:13,shift:16,ctrl:17,alt:18,end:35,home:36,left:37,up:38,right:39,down:40,delete:46,y:89,z:90},Ce=[$e.cmd,$e.cmdLeft,$e.cmdRight,$e.enter,$e.shift,$e.ctrl,$e.alt,$e.left,$e.up,$e.right,$e.down];ye.$inject=["$element","$timeout","$scope","TwTextFormatService","TwUndoStackFactory"];var ke=ye;var xe=function(){return{restrict:"A",require:"ngModel",bindToController:!0,controllerAs:"$ctrl",scope:{ngModel:"<",twTextFormat:"@"},controller:ke}};function Ae(e){return function(t,n){return t=t||"",n?(n.indexOf("||")>0&&(n=n.substring(0,n.indexOf("||"))),e.formatUsingPattern(t,n)):t}}Ae.$inject=["TwTextFormatService"];var Ee=Ae,De=r.a.module("tw.styleguide.formatting.text-format",[]).service("TwUndoStackFactory",ge).service("TwTextFormatService",ve).directive("twTextFormat",xe).filter("twTextFormat",Ee).name,Se=n(18),Me=n(64),Fe={template:n.n(Me).a,bindings:{amount:"<",precision:"<",locale:"<"}};function Te(e){return function(t,n,i){if(!t)return t;"string"==typeof t&&Number(t)&&(t=Number(t));var r={useGrouping:!0};return"number"==typeof n&&(r.minimumFractionDigits=n,r.maximumFractionDigits=n,"1,234"!==1234..toLocaleString("en-GB"))?t.toFixed(n):i?t.toLocaleString(i,r):t.toLocaleString(e.getCurrent(),r)}}Te.$inject=["TwLocaleService"];var Le=Te;var Oe=function(){var e=this;this.locale="en-GB",this.regex=/^[a-z]{2}(-[A-Z][A-Z])?$/,this.lowerCaseCountry=/^[a-z]{2}(-[a-z][a-z])?$/,this.getCurrent=function(){return e.locale},this.setCurrent=function(t){return e.isValid(t)?(e.locale=t,e.locale):e.lowerCaseCountry.test(t)?(e.locale=(n=t).slice(0,3)+n.slice(3,5).toUpperCase(),e.locale):(console&&console.warn&&console.warn("Incorrect locale: ".concat(t)),e.locale="en-GB",e.locale);var n},this.isValid=function(t){return e.regex.test(t)},this.getCountryFromLocale=function(t){return e.isValid(t)&&t.slice(3,5)}},qe=r.a.module("tw.styleguide.services.locale",[]).service("TwLocaleService",Oe).name,Be=r.a.module("tw.styleguide.formatting.number",[qe]).component("twNumberFormat",Fe).filter("twNumberFormat",Le).name,Ne=n(65),Pe={template:n.n(Ne).a,bindings:{amount:"<",currency:"<",locale:"<"}};function je(e,t,n){return function(e,i,r){var a;return"string"==typeof e&&Number(e)&&(e=Number(e)),a=e===parseInt(e,10)?0:t.getDecimals(i),"".concat(n(e,a,r)," ").concat(i)}}je.$inject=["$filter","TwCurrencyService","twNumberFormatFilter"];var Re=je,Ue=r.a.module("tw.styleguide.formatting.currency",[E,Be]).component("twCurrencyFormat",Pe).filter("twCurrencyFormat",Re).name,Ve=n(66),_e=n.n(Ve),Ie=n(47),Ge=n.n(Ie);function ze(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var He=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.$sce=n,this.reader=new Ge.a.Parser,this.writer=new Ge.a.HtmlRenderer({safe:!0})}var t,n,i;return t=e,(n=[{key:"$onChanges",value:function(e){e.markdown&&this.render()}},{key:"render",value:function(){if(this.markdown){var e=this.reader.parse(this.markdown),t=this.writer.render(e);this.html=this.$sce.trustAsHtml(t)}else this.html=""}}])&&ze(t.prototype,n),i&&ze(t,i),e}();He.$inject=["$element","$sce"];var Ye={controller:He,template:_e.a,bindings:{markdown:"<"}},We=r.a.module("tw.styleguide.formatting.markdown",[]).component("twMarkdown",Ye).name,Ke=r.a.module("tw.styleguide.formatting",[De,Se.a,Be,Ue,We]).name,Ze=r.a.module("tw.styleguide.requirements.definition-list",[Ke,K.a,g.a]).component("twDefinitionList",fe).name,Xe=n(48);function Je(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var Qe=function(){function e(t,n,i,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$element=t,this.$timeout=n,this.LocaleService=i,this.DomService=r,this.countries=Xe}var t,n,i;return t=e,(n=[{key:"$onInit",value:function(){var e=this;this.callingCodes=function(e){var t=function(e){var t={};return e.forEach(function(e){t[e.phone]||(t[e.phone]={code:e.phone,iso3:[],names:[]}),t[e.phone].iso3.push(e.iso3),t[e.phone].names.push(e.name)}),t}(e);return Object.keys(t).sort(function(e,t){return parseInt(e.substring(1),10)<parseInt(t.substring(1),10)?-1:1}).map(function(e){return{value:e,label:e,note:t[e].iso3.join(", "),searchable:t[e].names.join(", ")}})}(Xe),this.formGroup=this.DomService.getClosestParentByClassName(this.$element[0],"form-group"),this.charactersToRemove=/[\s.-]/g,this.modelPattern=/^\+[0-9]*$/,this.ngModel&&this.explodeNumberModel(this.ngModel),this.$ngModel=this.$element.controller("ngModel"),this.$ngModel.$formatters.unshift(function(t){return e.explodeNumberModel(t),t}),this.$ngModel.$validators.pattern=function(t){return e.modelPattern.test(t)},this.$ngModel.$validators.minlength=function(e){return e&&e.length>6},this.$timeout(function(){e.suffixModelController=e.$element.find("input[type=tel]").controller("ngModel"),e.suffixModelController&&e.suffixModelController.$parsers&&e.suffixModelController.$parsers.unshift(function(t){return t.replace(e.charactersToRemove,"")})})}},{key:"$onChanges",value:function(e){e.locale&&!this.ngModel&&this.setDefaultPrefix()}},{key:"explodeNumberModel",value:function(e){var t,n=et(e,this.countries);"string"==typeof(t=e)&&t.length>4&&"+"===t.substring(0,1)?n?(this.prefix=n.phone,this.suffix=e.substring(n.phone.length),this.format=n.phoneFormat||""):(this.prefix="",this.suffix=e.substring(1),this.format=""):this.setDefaultPrefix()}},{key:"onPrefixChange",value:function(e){var t=et(e,this.countries);t&&(this.format=t.phoneFormat||""),this.onValueChange(e,this.suffix)}},{key:"onSuffixChange",value:function(){this.onValueChange(this.prefix,this.suffix&&this.suffix.replace(this.charactersToRemove,""))}},{key:"onValueChange",value:function(e,t){var n;n=t?(e||"+")+t:null,this.$ngModel.$setViewValue(n),this.validate()}},{key:"setDefaultPrefix",value:function(){var e=function(e,t){if(t&&t.length&&e&&2===e.length){var n=t.filter(function(t){return e===t.iso2});if(n&&n.length)return n.reduce(function(e,t){return e.phone.length>t.phone.length?e:t})}return}(this.LocaleService.getCountryFromLocale(this.locale),this.countries);e?(this.prefix=e.phone,this.format=e.phoneFormat||""):this.prefix="+44"}},{key:"onFocus",value:function(){this.$element[0].dispatchEvent(new CustomEvent("focus"))}},{key:"onBlur",value:function(){this.$ngModel.$setTouched(),this.$element[0].dispatchEvent(new CustomEvent("blur")),this.validate()}},{key:"validate",value:function(){this.formGroup&&(this.$ngModel.$invalid&&this.$ngModel.$touched?this.formGroup.classList.add("has-error"):this.formGroup.classList.remove("has-error"))}}])&&Je(t.prototype,n),i&&Je(t,i),e}();function et(e,t){if(t&&t.length&&e&&e.length>1){var n=t.filter(function(t){return 0===e.indexOf(t.phone)});if(n&&n.length)return n.reduce(function(e,t){return e.phone.length>t.phone.length?e:t})}}Qe.$inject=["$element","$timeout","TwLocaleService","TwDomService"];var tt=Qe,nt=n(67),it={controller:tt,template:n.n(nt).a,bindings:{ngModel:"=",ngRequired:"<",ngDisabled:"<",ngChange:"&",locale:"@",placeholder:"@",searchPlaceholder:"@"},transclude:!0},rt=r.a.module("tw.styleguide.forms.telephone",[v.a,qe]).component("twTelephone",it).name;function at(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var ot=function(){function e(t,n,i,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.$timeout=n,this.$q=t,this.element=i[0],this.dom=r}var t,n,i;return t=e,(n=[{key:"$onInit",value:function(){var e=this;this.state=0,this.colour="blue",this.animationDelay=1500,this.form=this.dom.getClosestParentByTagName(this.element,"form"),this.form.addEventListener("submit",function(){return e.onSubmit(),!0})}},{key:"$onChanges",value:function(e){e.promise&&e.promise.currentValue&&this.onNewPromise()}},{key:"onNewPromise",value:function(){var e=this;this.state=0,this.promise.then(function(t){return e.onPromiseSuccess(t)}).catch(function(t){return e.onPromiseFailure(t)})}},{key:"onSubmit",value:function(){return this.isSpinnerVisible=!0,this.isButtonDisabled=!0,this.colour="blue",this.submitCallback(),!0}},{key:"onPromiseSuccess",value:function(e){var t=this;return this.state=1,this.$timeout(function(){t.isButtonDisabled=!1,t.successCallback&&t.successCallback()},this.animationDelay),e}},{key:"onPromiseFailure",value:function(e){var t=this;return this.state=-1,this.$timeout(function(){t.colour="red",t.isButtonDisabled=!1,t.failureCallback()},this.animationDelay),this.$timeout(function(){t.colour="blue"},3*this.animationDelay),e}}])&&at(t.prototype,n),i&&at(t,i),e}();ot.$inject=["$q","$timeout","$element","TwDomService"];var st=ot,lt=n(68),ct={controller:st,template:n.n(lt).a,bindings:{label:"<",promise:"<",submitCallback:"&onSubmit",successCallback:"&onSuccess",failureCallback:"&?onFailure",ngDisabled:"<"}},ut=n(11),dt=r.a.module("tw.styleguide.forms.submit",[ut.a,v.a]).component("twSubmit",ct).name,pt=n(69),ht=n.n(pt);function ft(){var e=this;e.dragCounter=0,e.isActive=!1,e.onManualUpload=function(t){e.onUpload&&"function"==typeof e.onUpload&&e.onUpload(r.a.element(document.querySelector("#file-upload"))[0].files[0],t)},e.onDrop=function(t,n){e.onUpload&&"function"==typeof e.onUpload&&e.onUpload(t,n),e.isActive=!1,e.dropCounter=0},e.onDragChange=function(t){t?(e.dragCounter++,1===e.dragCounter&&(e.isActive=!0)):(e.dragCounter--,0===e.dragCounter&&(e.isActive=!1))}}function mt(e,t){t[0].addEventListener("dragenter",function(t){t.preventDefault(),e.$ctrl.onDragChange(!0),e.$apply()},!1),t[0].addEventListener("dragover",function(e){e.preventDefault()},!1),t[0].addEventListener("dragleave",function(t){t.preventDefault(),e.$ctrl.onDragChange(!1),e.$apply()},!1),t[0].addEventListener("drop",function(t){t.preventDefault(),e.$ctrl.onDrop(t.dataTransfer.files[0]),e.$apply()},!1)}var gt=function(){return{bindToController:!0,controller:ft,controllerAs:"$ctrl",replace:!1,transclude:!0,restrict:"E",scope:{title:"@",cta:"@",onUpload:"=",accept:"="},link:mt,template:ht.a}};function vt(e,t){t[0].addEventListener("change",function(t){e.$ctrl.onUserInput&&"function"==typeof e.$ctrl.onUserInput&&e.$ctrl.onUserInput(t)})}var bt=function(){return{restrict:"A",scope:{onUserInput:"="},link:vt}},yt=r.a.module("tw.styleguide.forms.upload-droppable",[]).directive("twFileSelect",bt).component("twUploadDroppable",gt).name,wt=r.a.module("tw.styleguide.forms",[a.a,o.a,s.a,l.a,c.a,u.a,b,S,B,N.a,P.a,Z,ce,D.a,Ze,rt,dt,yt]).name;function $t(e){return{restrict:"E",link:function(t,n){var i=n[0];i.addEventListener("submit",function(){var n,r,a,o=i.querySelectorAll("[tw-validation].ng-invalid, tw-telephone.ng-invalid-required, tw-telephone.ng-invalid-pattern");return!o.forEach||(o.forEach(function(t){n=e.getClosestParentByClassName(t,"form-group"),a=e.getClosestParentByClassName(t,"radio"),r=e.getClosestParentByClassName(t,"checkbox"),n&&n.classList.add("has-error"),a&&a.classList.add("has-error"),r&&r.classList.add("has-error")}),i.querySelectorAll("tw-fieldset").forEach(function(e){angular.element(e).controller("twFieldset").setSubmitted()}),t.$apply(),!0)})}}}$t.$inject=["TwDomService"];var Ct=$t,kt=r.a.module("tw.styleguide.validation.form",[v.a]).directive("form",Ct).name,xt=n(21),At=r.a.module("tw.styleguide.validation",[kt,xt.a]).name,Et=n(22),Dt=r.a.module("tw.styleguide.services",[Et.a,g.a,E,qe,v.a,K.a]).name;function St(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var Mt=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var i=t[0];this.showPopover=function(e){return e.preventDefault(),n.showPopover(Ft(i))},this.hidePopover=function(e){return e.preventDefault(),n.hidePopover(Ft(i))},this.registerEventListeners=this.registerEventListeners.bind(this),this.unregisterEventListeners=this.registerEventListeners(Ft(i))}var t,n,i;return t=e,(n=[{key:"$onDestroy",value:function(){this.unregisterEventListeners()}},{key:"registerEventListeners",value:function(e){var t=e.element.node,n=e.popover.options.trigger;return"hover"===n?(t.addEventListener("mouseover",this.showPopover),t.addEventListener("mouseout",this.hidePopover)):t.addEventListener("click",this.showPopover),function(){"hover"===n?(t.removeEventListener("mouseover",this.showPopover),t.removeEventListener("mouseout",this.hidePopover)):t.removeEventListener("click",this.showPopover)}}}])&&St(t.prototype,n),i&&St(t,i),e}();function Ft(e){var t={content:{title:"",content:""},options:{placement:"right",trigger:"click"},customOptions:{spacing:0}};return["title","content","image"].forEach(function(n){e.dataset[n]&&(t.content[n]=e.dataset[n])}),["trigger","template","container","placement"].forEach(function(n){e.dataset[n]&&(t.options[n]=e.dataset[n])}),e.dataset.originalTitle&&(t.content.title=e.dataset.originalTitle),e.dataset.contentHtml&&(t.options.contentHtml="true"===e.dataset.contentHtml),{element:{node:e},popover:t}}Mt.$inject=["$element","twPopOverService"];var Tt=Mt;function Lt(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var Ot=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.popover=null,this.$rootScope=t,this.documentCallback=this.documentCallback.bind(this),this.resizeCallback=this.resizeCallback.bind(this),this.registerGlobalEventListeners()}var t,n,i;return t=e,(n=[{key:"showPopover",value:function(e){this.config=e;var t=Bt(e);if(!t.contains(this.popover)){var n=t.querySelector(".popover-service");n?this.popover=n:(this.popover=function(e){var t,n=e.popover.options.placement,i=function(e){var t=e.popover.options.template;return t||"<div class='popover'>\n      <h3 class='popover-title'></h3>\n      <div class='popover-content'></div>\n    </div>"}(e),r=angular.element(i)[0],a=Nt(e),o=["popover","in",n,"scale-down","popover-service"];a?o.push("popover-modal"):o.push("animate");return(t=r.classList).add.apply(t,o),r.setAttribute("role","popover"),r}(e),t.appendChild(this.popover))}return function(e,t){var n=e.popover,i=n.content,r=n.options.contentHtml;["title","content"].forEach(function(e){var n=t.querySelector(".popover-".concat(e));n.textContent="",r?n.insertAdjacentHTML("beforeend",i[e]):n.insertAdjacentText("beforeend",i[e])});var a=t.querySelector(".popover-image"),o=i.image;a&&o&&(a.src=o)}(e,this.popover),qt(e,this.popover),this.popover.classList.remove("scale-down"),this.popover}},{key:"hidePopover",value:function(e){var t=this.popover;return t&&!t.classList.contains("scale-down")&&(!function(e,t){var n=e.element.node,i=e.popover.customOptions.highlightElement;Nt(e)&&Pt();i&&n.classList.remove("promoted")}(e),t.classList.add("scale-down"),this.$rootScope.$emit("promotion:close",e.popover)),this.popover}},{key:"documentCallback",value:function(e){var t=this.popover,n=this.config;if(t){var i=!t.contains(e.target),r=t.contains(e.target),a=e.target.classList.contains("popover-close"),o=e.target.classList.contains("popover-modal-cover");!t.classList.contains("scale-down")&&(i||o||r&&a)&&this.hidePopover(n)}}},{key:"resizeCallback",value:function(){var e=this.config,t=this.popover;t&&!t.classList.contains("scale-down")&&qt(e,t)}},{key:"registerGlobalEventListeners",value:function(){document.documentElement.addEventListener("click",this.documentCallback,!0),window.addEventListener("resize",this.resizeCallback)}},{key:"unregisterGlobalEventListeners",value:function(){document.documentElement.removeEventListener("click",this.documentCallback,!0),window.removeEventListener("resize",this.resizeCallback)}}])&&Lt(t.prototype,n),i&&Lt(t,i),e}();function qt(e,t){var n=e.element.node,i=e.popover.customOptions,r=i.highlightElement,a=i.fixedPosition;Nt(e)?(t.classList.contains("animate")&&t.classList.remove("animate"),t.classList.contains("popover-modal")||t.classList.add("popover-modal"),function(e,t){if(null===document.body.querySelector(".popover-modal-cover")){var n=Bt(e),i=document.createElement("div");i.classList.add("popover-modal-cover"),n.insertBefore(i,t)}}(e,t)):(t.classList.contains("animate")||t.classList.add("animate"),t.classList.contains("popover-modal")&&t.classList.remove("popover-modal"),Pt(),function(e,t){var n;(n=e.classList).remove.apply(n,["top","right","bottom","left","top-left","top-right","right-top","right-bottom","bottom-left","bottom-right","left-top","left-bottom"]);var i=function(e,t){var n=t.element.node,i=t.popover.customOptions.spacing,r=t.popover.options.placement,a=jt(n),o=Vt(document.documentElement),s=Ut(n),l=Ut(e),c=a.offsetX+s.offsetWidth+i+l.offsetWidth,u=a.offsetX-(l.offsetWidth+i),d=c>o.clientWidth,p=u<0;d&&p&&(r="bottom");"right"===r&&d&&(r="left");"right-top"===r&&d&&(r="left-top");"right-bottom"===r&&d&&(r="left-bottom");"left"===r&&p&&(r="right");"left-top"===r&&p&&(r="right-top");"left-bottom"===r&&p&&(r="right-bottom");return r}(e,t);e.classList.add(i),e.style.visibility="hidden";var r=function(e,t,n){var i=Bt(t),r=t.element.node,a=t.popover.customOptions.spacing,o=(i===document.body?jt:Rt)(r),s=Ut(r),l={offsetX:0,offsetY:0},c=Ut(e),u=getComputedStyle(e,":before"),d=_t("top",u),p=_t("height",u),h=_t("left",u),f=_t("right",u),m=_t("margin-top",u);if("top"===n){var g=o.offsetX-c.offsetWidth/2+s.offsetWidth/2,v=o.offsetY-c.offsetHeight-a;l={offsetX:g,offsetY:v}}if("top-right"===n){var b=o.offsetX+s.offsetWidth/2-h,y=o.offsetY-c.offsetHeight-a;l={offsetX:b,offsetY:y}}if("top-left"===n){var w=o.offsetX-c.offsetWidth+(s.offsetWidth/2+f),$=o.offsetY-c.offsetHeight-a;l={offsetX:w,offsetY:$}}if("right-top"===n||"right"===n||"right-bottom"===n){var C=o.offsetX+s.offsetWidth+a,k=o.offsetY-(d+m+p/2)+s.offsetHeight/2;l={offsetX:C,offsetY:k}}if("bottom"===n){var x=o.offsetX-c.offsetWidth/2+s.offsetWidth/2,A=o.offsetY+s.offsetHeight+a;l={offsetX:x,offsetY:A}}if("bottom-right"===n){var E=o.offsetX+s.offsetWidth/2-h,D=o.offsetY+s.offsetHeight+a;l={offsetX:E,offsetY:D}}if("bottom-left"===n){var S=o.offsetX-c.offsetWidth+(s.offsetWidth/2+f),M=o.offsetY+s.offsetHeight+a;l={offsetX:S,offsetY:M}}if("left-top"===n||"left"===n||"left-bottom"===n){var F=o.offsetX-c.offsetWidth-a,T=o.offsetY-(d+m+p/2)+s.offsetHeight/2;l={offsetX:F,offsetY:T}}return l}(e,t,i),a=r.offsetX,o=r.offsetY;e.style.visibility="visible",e.style.top="".concat(o,"px"),e.style.left="".concat(a,"px")}(t,e)),r&&n.classList.add("promoted"),a&&(t.style.position="fixed")}function Bt(e){var t=e.element.node,n=e.popover.options.container;return n&&"body"===n.toLowerCase()?document.body:"string"==typeof n&&document.querySelector(n)?document.querySelector(n):t.parentNode}function Nt(e){var t=e.popover.customOptions.modalTransform,n=Vt(document.documentElement);return t&&n.clientWidth<=991}function Pt(){var e=document.body.querySelector(".popover-modal-cover");e&&e.parentNode.removeChild(e)}function jt(e){var t=e.getBoundingClientRect(),n=window.pageXOffset||document.documentElement.scrollLeft,i=window.pageYOffset||document.documentElement.scrollTop;return{offsetY:t.top+i,offsetX:t.left+n}}function Rt(e){return{offsetY:e.offsetTop,offsetX:e.offsetLeft}}function Ut(e){return{offsetWidth:e.offsetWidth,offsetHeight:e.offsetHeight}}function Vt(e){return{clientWidth:e.clientWidth,clientHeight:e.clientHeight}}function _t(e,t){return parseInt(t.getPropertyValue(e),10)}Ot.$inject=["$rootScope"];var It=Ot,Gt=r.a.module("tw.styleguide.help.popover",[]).service("twPopOverService",It).directive("twPopOver",function(){return{restrict:"A",controller:Tt}}).name;function zt(e,t){if(t.tooltip){var n=t[0],i={};n.getAttribute("data-placement")||(i.placement="top"),t.tooltip(i),n.setAttribute("tabindex","0"),n.setAttribute("data-toggle","tooltip")}else console.log("twToolTip requires bootstrap.js")}var Ht=function(){return{restrict:"A",link:zt}},Yt=r.a.module("tw.styleguide.help.tooltip",[]).directive("twToolTip",Ht).name,Wt=r.a.module("tw.styleguide.help",[Gt,Yt]).name;function Kt(e,t){if(t.affix){var n=t[0],i={};(n.getAttribute("data-offset-top")||n.getAttribute("data-offset-bottom"))&&(i.offset={}),n.getAttribute("data-offset-top")&&Number(n.getAttribute("data-offset-top"))&&(i.offset.top=Number(n.getAttribute("data-offset-top"))),n.getAttribute("data-offset-bottom")&&Number(n.getAttribute("data-offset-bottom"))&&(i.offset.bottom=Number(n.getAttribute("data-offset-bottom"))),t.affix(i)}else console.log("twAffix requires bootstrap.js")}var Zt=function(){return{restrict:"A",link:Kt}},Xt=r.a.module("tw.styleguide.styling.affix",[]).directive("twAffix",Zt).name;var Jt=function(){var e=-1,t=[];this.toggle=function(n){-1!==e&&e!==n&&(t[e].isExpanded()&&t[e].collapse(),e=-1);var i=t[n];i.isExpanded()?i.collapse():(e=n,i.expand())},this.addCard=function(e){t.push(e)},this.updateExpandedIndex=function(t){e=t},this.getCard=function(e){return t[e]},this.getLength=function(){return t.length},this.getExpandedIndex=function(){return e}};function Qt(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var en=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.toggle=n.toggle,this.addCard=n.addCard,this.getExpandedIndex=n.getExpandedIndex,this.updateExpandedIndex=n.updateExpandedIndex,this.getCard=n.getCard,this.getLength=n.getLength}var t,n,i;return t=e,(n=[{key:"isExpanded",value:function(){return this.open}},{key:"collapse",value:function(){this.open=!1,this.onCollapse&&this.onCollapse()}},{key:"expand",value:function(){this.open=!0,this.onExpand&&this.onExpand()}}])&&Qt(t.prototype,n),i&&Qt(t,i),e}();en.$inject=["$transclude","TwCardsService"];var tn=en,nn=n(70),rn=n.n(nn);function an(e){var t=e.$ctrl;t.addCard(t),t.index=t.getLength()-1,t.inactive=t.cardContainerController.inactive,null==t.empty&&(t.empty=!1),!0===t.open&&!1===t.empty&&-1===t.getExpandedIndex()?t.updateExpandedIndex(t.index):t.open=!1,null==t.disabled&&(t.disabled=!1)}var on=function(){return{controller:tn,template:rn.a,require:{cardContainerController:"^twCards"},controllerAs:"$ctrl",bindToController:!0,replace:!0,scope:{state:"@",index:"<",showForm:"<?",open:"<?",disabled:"<?",empty:"<?",inactive:"<",onExpand:"&",onCollapse:"&"},transclude:{collapsedCard:"collapsed",expandedCard:"expanded",cardForm:"?cardForm",cardIcon:"cardIcon",modals:"?modals"},link:an}},sn=n(71),ln={template:n.n(sn).a,bindings:{inactive:"=?"},transclude:!0},cn=r.a.module("tw.styleguide.layout.cards",[]).service("TwCardsService",Jt).component("twCards",ln).directive("twCard",on).name,un=r.a.module("tw.styleguide.layout",[Xt,cn]).name,dn=n(72),pn={template:n.n(dn).a},hn=r.a.module("tw.styleguide.loading.loader",[]).component("twLoader",pn).name,fn=r.a.module("tw.styleguide.loading",[hn,ut.a]).name,mn=r.a.module("tw.styleguide.navigation",[le]).name,gn=r.a.module("tw.form-components",[wt,fn,Dt]).name,vn=r.a.module("tw.form-validation",[At,Dt]).name;t.default=r.a.module("tw.styleguide-components",[wt,At,Ke,Dt,Wt,un,fn,mn,gn,vn]).name}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,